From: Ms2ger <ms2ger@gmail.com>

diff --git a/dom/imptests/html.mozbuild b/dom/imptests/html.mozbuild
--- a/dom/imptests/html.mozbuild
+++ b/dom/imptests/html.mozbuild
@@ -1,15 +1,16 @@
 # THIS FILE IS AUTOGENERATED BY importTestsuite.py - DO NOT EDIT
 
 DIRS += [
     'html/dom',
     'html/dom/collections',
     'html/dom/errors',
     'html/dom/events',
+    'html/dom/lists',
     'html/dom/nodes',
     'html/dom/nodes/Document-createElement-namespace-tests',
     'html/dom/ranges',
     'html/dom/traversal',
     'html/dom/traversal/unfinished',
     'html/domxpath',
     'html/html/browsers/browsing-the-web/read-media',
     'html/html/browsers/the-window-object',
diff --git a/dom/imptests/html/dom/Makefile.in b/dom/imptests/html/dom/Makefile.in
--- a/dom/imptests/html/dom/Makefile.in
+++ b/dom/imptests/html/dom/Makefile.in
@@ -1,14 +1,15 @@
 # THIS FILE IS AUTOGENERATED BY importTestsuite.py - DO NOT EDIT
 
+DEPTH := @DEPTH@
+
 topsrcdir := @top_srcdir@
 srcdir := @srcdir@
 VPATH := @srcdir@
-DEPTH := @DEPTH@
 relativesrcdir := @relativesrcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
 MOCHITEST_FILES := \
   test_historical.html \
   test_interface-objects.html \
   test_interfaces.html \
diff --git a/dom/imptests/html/dom/collections/Makefile.in b/dom/imptests/html/dom/collections/Makefile.in
--- a/dom/imptests/html/dom/collections/Makefile.in
+++ b/dom/imptests/html/dom/collections/Makefile.in
@@ -1,14 +1,15 @@
 # THIS FILE IS AUTOGENERATED BY importTestsuite.py - DO NOT EDIT
 
+DEPTH := @DEPTH@
+
 topsrcdir := @top_srcdir@
 srcdir := @srcdir@
 VPATH := @srcdir@
-DEPTH := @DEPTH@
 relativesrcdir := @relativesrcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
 MOCHITEST_FILES := \
   test_HTMLCollection-empty-name.html \
   $(NULL)
 
diff --git a/dom/imptests/html/dom/errors/Makefile.in b/dom/imptests/html/dom/errors/Makefile.in
--- a/dom/imptests/html/dom/errors/Makefile.in
+++ b/dom/imptests/html/dom/errors/Makefile.in
@@ -1,14 +1,15 @@
 # THIS FILE IS AUTOGENERATED BY importTestsuite.py - DO NOT EDIT
 
+DEPTH := @DEPTH@
+
 topsrcdir := @top_srcdir@
 srcdir := @srcdir@
 VPATH := @srcdir@
-DEPTH := @DEPTH@
 relativesrcdir := @relativesrcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
 MOCHITEST_FILES := \
   test_DOMException-constants.html \
   test_exceptions.html \
   $(NULL)
diff --git a/dom/imptests/html/dom/events/Makefile.in b/dom/imptests/html/dom/events/Makefile.in
--- a/dom/imptests/html/dom/events/Makefile.in
+++ b/dom/imptests/html/dom/events/Makefile.in
@@ -1,14 +1,15 @@
 # THIS FILE IS AUTOGENERATED BY importTestsuite.py - DO NOT EDIT
 
+DEPTH := @DEPTH@
+
 topsrcdir := @top_srcdir@
 srcdir := @srcdir@
 VPATH := @srcdir@
-DEPTH := @DEPTH@
 relativesrcdir := @relativesrcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
 MOCHITEST_FILES := \
   test_Event-constants.html \
   test_Event-constructors.html \
   test_Event-defaultPrevented.html \
diff --git a/dom/imptests/html/dom/events/test_EventTarget-dispatchEvent.html b/dom/imptests/html/dom/events/test_EventTarget-dispatchEvent.html
--- a/dom/imptests/html/dom/events/test_EventTarget-dispatchEvent.html
+++ b/dom/imptests/html/dom/events/test_EventTarget-dispatchEvent.html
@@ -1,16 +1,22 @@
 <!DOCTYPE html>
+<meta charset=utf-8>
 <title>EventTarget.dispatchEvent</title>
 <link rel="author" title="Olli Pettay" href="mailto:Olli.Pettay@gmail.com">
 <link rel="author" title="Ms2ger" href="mailto:Ms2ger@gmail.com">
+<link rel="help" href="http://dom.spec.whatwg.org/#dom-eventtarget-dispatchevent">
 <script src="/resources/testharness.js"></script>
 <script src="/resources/testharnessreport.js"></script>
 <div id="log"></div>
 <script>
+setup({
+  "allow_uncaught_exception": true,
+})
+
 test(function() {
   var e = document.createEvent("Event")
   assert_equals(e.type, "", "Event type should be empty string before initialization")
   assert_throws("InvalidStateError", function() { document.dispatchEvent(e) })
 }, "If the event's initialized flag is not set, an InvalidStateError must be thrown.")
 
 var dispatch_dispatch = async_test("If the event's dispatch flag is set, an InvalidStateError must be thrown.")
 dispatch_dispatch.step(function() {
diff --git a/dom/imptests/html/dom/lists/Makefile.in b/dom/imptests/html/dom/lists/Makefile.in
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/lists/Makefile.in
@@ -0,0 +1,16 @@
+# THIS FILE IS AUTOGENERATED BY importTestsuite.py - DO NOT EDIT
+
+DEPTH := @DEPTH@
+
+topsrcdir := @top_srcdir@
+srcdir := @srcdir@
+VPATH := @srcdir@
+relativesrcdir := @relativesrcdir@
+
+include $(DEPTH)/config/autoconf.mk
+
+MOCHITEST_FILES := \
+  test_DOMTokenList-stringifier.html \
+  $(NULL)
+
+include $(topsrcdir)/config/rules.mk
diff --git a/dom/imptests/html/dom/lists/moz.build b/dom/imptests/html/dom/lists/moz.build
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/lists/moz.build
@@ -0,0 +1,4 @@
+# THIS FILE IS AUTOGENERATED BY importTestsuite.py - DO NOT EDIT
+
+DIRS += [
+]
diff --git a/dom/imptests/html/dom/lists/test_DOMTokenList-stringifier.html b/dom/imptests/html/dom/lists/test_DOMTokenList-stringifier.html
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/lists/test_DOMTokenList-stringifier.html
@@ -0,0 +1,23 @@
+<!DOCTYPE html>
+<meta charset=utf-8>
+<title>DOMTokenList stringifier</title>
+<link rel=help href="http://dom.spec.whatwg.org/#dom-domtokenlist-stringifier">
+<link rel=author title=Ms2ger href="mailto:Ms2ger@gmail.com">
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<div id=log></div>
+<span class="   a  a b"></span>
+<script>
+test(function() {
+  var span = document.querySelector("span");
+  assert_equals(span.getAttribute("class"), "   a  a b",
+                "getAttribute should return the literal value");
+  assert_equals(span.className, "   a  a b",
+                "className should return the literal value");
+  assert_equals(String(span.classList), "a b",
+                "String(classList) should compress whitespace");
+  assert_equals(span.classList.toString(), "a b",
+                "classList.toString() should compress whitespace");
+  assert_class_string(span.classList, "DOMTokenList");
+});
+</script>
diff --git a/dom/imptests/html/dom/nodes/Document-createElement-namespace-tests/Makefile.in b/dom/imptests/html/dom/nodes/Document-createElement-namespace-tests/Makefile.in
--- a/dom/imptests/html/dom/nodes/Document-createElement-namespace-tests/Makefile.in
+++ b/dom/imptests/html/dom/nodes/Document-createElement-namespace-tests/Makefile.in
@@ -1,14 +1,15 @@
 # THIS FILE IS AUTOGENERATED BY importTestsuite.py - DO NOT EDIT
 
+DEPTH := @DEPTH@
+
 topsrcdir := @top_srcdir@
 srcdir := @srcdir@
 VPATH := @srcdir@
-DEPTH := @DEPTH@
 relativesrcdir := @relativesrcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
 MOCHITEST_FILES := \
   bare_mathml.html \
   bare_mathml.svg \
   bare_mathml.xhtml \
diff --git a/dom/imptests/html/dom/nodes/Makefile.in b/dom/imptests/html/dom/nodes/Makefile.in
--- a/dom/imptests/html/dom/nodes/Makefile.in
+++ b/dom/imptests/html/dom/nodes/Makefile.in
@@ -1,14 +1,15 @@
 # THIS FILE IS AUTOGENERATED BY importTestsuite.py - DO NOT EDIT
 
+DEPTH := @DEPTH@
+
 topsrcdir := @top_srcdir@
 srcdir := @srcdir@
 VPATH := @srcdir@
-DEPTH := @DEPTH@
 relativesrcdir := @relativesrcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
 MOCHITEST_FILES := \
   test_attributes.html \
   test_case.html \
   test_CharacterData-appendData.html \
@@ -31,20 +32,55 @@ MOCHITEST_FILES := \
   test_Document-getElementsByTagName.html \
   test_Document-getElementsByTagNameNS.html \
   test_Document-importNode.html \
   test_DocumentType-remove.html \
   test_DOMImplementation-createDocument.html \
   test_DOMImplementation-createDocumentType.html \
   test_DOMImplementation-createHTMLDocument.html \
   test_DOMImplementation-hasFeature.html \
+  test_Element-childElementCount-dynamic-add.html \
+  test_Element-childElementCount-dynamic-add.svg \
+  test_Element-childElementCount-dynamic-add.xhtml \
+  test_Element-childElementCount-dynamic-remove.html \
+  test_Element-childElementCount-dynamic-remove.svg \
+  test_Element-childElementCount-dynamic-remove.xhtml \
+  test_Element-childElementCount.html \
+  test_Element-childElementCount-nochild.html \
+  test_Element-childElementCount-nochild.svg \
+  test_Element-childElementCount-nochild.xhtml \
+  test_Element-childElementCount.svg \
+  test_Element-childElementCount.xhtml \
+  test_Element-childElement-null.html \
+  test_Element-childElement-null.svg \
+  test_Element-childElement-null.xhtml \
   test_Element-children.html \
+  test_Element-firstElementChild-entity.svg \
+  test_Element-firstElementChild-entity.xhtml \
+  test_Element-firstElementChild.html \
+  test_Element-firstElementChild-namespace.html \
+  test_Element-firstElementChild-namespace.svg \
+  test_Element-firstElementChild-namespace.xhtml \
+  test_Element-firstElementChild.svg \
+  test_Element-firstElementChild.xhtml \
   test_Element-getElementsByClassName.html \
+  test_Element-lastElementChild.html \
+  test_Element-lastElementChild.svg \
+  test_Element-lastElementChild.xhtml \
+  test_Element-nextElementSibling.html \
+  test_Element-nextElementSibling.svg \
+  test_Element-nextElementSibling.xhtml \
+  test_Element-previousElementSibling.html \
+  test_Element-previousElementSibling.svg \
+  test_Element-previousElementSibling.xhtml \
   test_Element-removeAttributeNS.html \
   test_Element-remove.html \
+  test_Element-siblingElement-null.html \
+  test_Element-siblingElement-null.svg \
+  test_Element-siblingElement-null.xhtml \
   test_Element-tagName.html \
   test_getElementsByClassName-01.htm \
   test_getElementsByClassName-02.htm \
   test_getElementsByClassName-03.htm \
   test_getElementsByClassName-04.htm \
   test_getElementsByClassName-05.htm \
   test_getElementsByClassName-06.htm \
   test_getElementsByClassName-07.htm \
diff --git a/dom/imptests/html/dom/nodes/test_DOMImplementation-createHTMLDocument.html b/dom/imptests/html/dom/nodes/test_DOMImplementation-createHTMLDocument.html
--- a/dom/imptests/html/dom/nodes/test_DOMImplementation-createHTMLDocument.html
+++ b/dom/imptests/html/dom/nodes/test_DOMImplementation-createHTMLDocument.html
@@ -1,39 +1,43 @@
 <!DOCTYPE html>
 <meta charset=utf-8>
 <title>DOMImplementation.createHTMLDocument</title>
-<link rel=help href="http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html#dom-domimplementation-createhtmldocument">
-<link rel=help href="http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html#dom-documenttype-name">
-<link rel=help href="http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html#dom-documenttype-publicid">
-<link rel=help href="http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html#dom-documenttype-systemid">
-<link rel=help href="http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html#dom-document-documentelement">
+<link rel=help href="http://dom.spec.whatwg.org/#dom-domimplementation-createhtmldocument">
+<link rel=help href="http://dom.spec.whatwg.org/#dom-documenttype-name">
+<link rel=help href="http://dom.spec.whatwg.org/#dom-documenttype-publicid">
+<link rel=help href="http://dom.spec.whatwg.org/#dom-documenttype-systemid">
+<link rel=help href="http://dom.spec.whatwg.org/#dom-document-documentelement">
 <script src="/resources/testharness.js"></script>
 <script src="/resources/testharnessreport.js"></script>
 <div id="log"></div>
 <script>
 function checkDoc(title, expectedtitle, normalizedtitle) {
   test(function() {
     var doc = document.implementation.createHTMLDocument(title);
     assert_equals(doc.doctype.name, "html")
     assert_equals(doc.doctype.publicId, "")
     assert_equals(doc.doctype.systemId, "")
     assert_equals(doc.documentElement.localName, "html")
     assert_equals(doc.documentElement.firstChild.localName, "head")
-    assert_equals(doc.documentElement.firstChild.childNodes.length, 1)
-    assert_equals(doc.documentElement.firstChild.firstChild.localName, "title")
-    assert_equals(doc.documentElement.firstChild.firstChild.firstChild.data,
-    expectedtitle)
+    if (title !== undefined) {
+      assert_equals(doc.documentElement.firstChild.childNodes.length, 1)
+      assert_equals(doc.documentElement.firstChild.firstChild.localName, "title")
+      assert_equals(doc.documentElement.firstChild.firstChild.firstChild.data,
+                    expectedtitle)
+    } else {
+      assert_equals(doc.documentElement.firstChild.childNodes.length, 0)
+    }
     assert_equals(doc.documentElement.lastChild.localName, "body")
     assert_equals(doc.documentElement.lastChild.childNodes.length, 0)
   })
 }
 checkDoc("", "", "")
 checkDoc(null, "null", "null")
-checkDoc(undefined, "undefined", "undefined")
+checkDoc(undefined, "", "")
 checkDoc("foo  bar baz", "foo  bar baz", "foo bar baz")
 checkDoc("foo\t\tbar baz", "foo\t\tbar baz", "foo bar baz")
 checkDoc("foo\n\nbar baz", "foo\n\nbar baz", "foo bar baz")
 checkDoc("foo\f\fbar baz", "foo\f\fbar baz", "foo bar baz")
 checkDoc("foo\r\rbar baz", "foo\r\rbar baz", "foo bar baz")
 
 test(function() {
   var doc = document.implementation.createHTMLDocument();
diff --git a/dom/imptests/html/dom/nodes/test_Element-childElement-null.html b/dom/imptests/html/dom/nodes/test_Element-childElement-null.html
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-childElement-null.html
@@ -0,0 +1,15 @@
+<!DOCTYPE HTML>
+<meta charset=utf-8>
+<title>Null test</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<h1>Test of firstElementChild and lastChildElement returning null</h1>
+<div id="log"></div>
+<p id="parentEl" style="font-weight:bold;">Test.</p>
+<script>
+test(function() {
+  var parentEl = document.getElementById("parentEl")
+  assert_equals(parentEl.firstElementChild, null)
+  assert_equals(parentEl.lastElementChild, null)
+})
+</script>
diff --git a/dom/imptests/html/dom/nodes/test_Element-childElement-null.svg b/dom/imptests/html/dom/nodes/test_Element-childElement-null.svg
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-childElement-null.svg
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg xmlns="http://www.w3.org/2000/svg"
+     xmlns:h="http://www.w3.org/1999/xhtml"
+     version="1.1"
+     width="100%" height="100%" viewBox="0 0 400 400">
+<title>Null test</title>
+<h:script src="/resources/testharness.js"/>
+<h:script src="/resources/testharnessreport.js"/>
+
+<text x="200" y="40" font-size="25" fill="black" text-anchor="middle">Test of firstElementChild and lastChildElement returning null</text>
+<text id="parentEl" x="200" y="70" font-size="20" fill="black" text-anchor="middle" font-weight="bold">Test</text>
+
+<h:script><![CDATA[
+test(function() {
+  var parentEl = document.getElementById("parentEl")
+  assert_equals(parentEl.firstElementChild, null)
+  assert_equals(parentEl.lastElementChild, null)
+})
+]]></h:script>	
+</svg>
diff --git a/dom/imptests/html/dom/nodes/test_Element-childElement-null.xhtml b/dom/imptests/html/dom/nodes/test_Element-childElement-null.xhtml
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-childElement-null.xhtml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+<title>Null Test</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+</head>
+<body>
+<h1>Test of firstElementChild and lastChildElement returning null</h1>
+<div id="log"></div>
+<p id="parentEl" style="font-weight:bold;">Test.</p>
+<script><![CDATA[
+test(function() {
+  var parentEl = document.getElementById("parentEl")
+  assert_equals(parentEl.firstElementChild, null)
+  assert_equals(parentEl.lastElementChild, null)
+})
+]]></script>
+</body>
+</html>
diff --git a/dom/imptests/html/dom/nodes/test_Element-childElementCount-dynamic-add.html b/dom/imptests/html/dom/nodes/test_Element-childElementCount-dynamic-add.html
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-childElementCount-dynamic-add.html
@@ -0,0 +1,17 @@
+<!DOCTYPE HTML>
+<meta charset=utf-8>
+<title>Dynamic Adding of Elements</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<h1>Test of Dynamic Adding of Elements</h1>
+<div id="log"></div>
+<p id="parentEl">The result of this test is
+<span id="first_element_child" style="font-weight:bold;">logged above.</span></p>
+<script>
+test(function() {
+  var parentEl = document.getElementById("parentEl");
+  var newChild = document.createElement("span");
+  parentEl.appendChild(newChild);
+  assert_equals(parentEl.childElementCount, 2)
+})
+</script>
diff --git a/dom/imptests/html/dom/nodes/test_Element-childElementCount-dynamic-add.svg b/dom/imptests/html/dom/nodes/test_Element-childElementCount-dynamic-add.svg
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-childElementCount-dynamic-add.svg
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg xmlns="http://www.w3.org/2000/svg"
+     xmlns:h="http://www.w3.org/1999/xhtml"
+     version="1.1"
+     width="100%" height="100%" viewBox="0 0 400 400">
+<title>Dynamic Adding of Elements</title>
+<h:script src="/resources/testharness.js"/>
+<h:script src="/resources/testharnessreport.js"/>
+
+<text x="200" y="40" font-size="25" fill="black" text-anchor="middle">Test of Dynamic Adding of Elements</text>
+<text id="parentEl" x="200" y="70" font-size="20" fill="black" text-anchor="middle">The result of this test is
+<tspan id="first_element_child" font-weight="bold">unknown.</tspan></text>
+
+<h:script><![CDATA[
+test(function() {
+  var parentEl = document.getElementById("parentEl");
+  var newChild = document.createElementNS("http://www.w3.org/2000/svg", "tspan");
+  parentEl.appendChild(newChild);
+  assert_equals(parentEl.childElementCount, 2)
+})
+]]></h:script>
+</svg>
diff --git a/dom/imptests/html/dom/nodes/test_Element-childElementCount-dynamic-add.xhtml b/dom/imptests/html/dom/nodes/test_Element-childElementCount-dynamic-add.xhtml
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-childElementCount-dynamic-add.xhtml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+<title>Dynamic Adding of Elements</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+</head>
+<body>
+<h1>Test of Dynamic Adding of Elements</h1>
+<div id="log"></div>
+<p id="parentEl">The result of this test is
+<span id="first_element_child" style="font-weight:bold;">logged above.</span></p>
+<script><![CDATA[
+test(function() {
+  var parentEl = document.getElementById("parentEl");
+  var newChild = document.createElement("span");
+  parentEl.appendChild(newChild);
+  assert_equals(parentEl.childElementCount, 2)
+})
+]]></script>
+</body>
+</html>
diff --git a/dom/imptests/html/dom/nodes/test_Element-childElementCount-dynamic-remove.html b/dom/imptests/html/dom/nodes/test_Element-childElementCount-dynamic-remove.html
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-childElementCount-dynamic-remove.html
@@ -0,0 +1,17 @@
+<!DOCTYPE HTML>
+<meta charset=utf-8>
+<title>Dynamic Removal of Elements</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<h1>Test of Dynamic Removal of Elements</h1>
+<div id="log"></div>
+<p id="parentEl">The result of this test is
+<span id="first_element_child" style="font-weight:bold;">unknown.</span><span id="last_element_child"> </span></p>
+<script>
+test(function() {
+  var parentEl = document.getElementById("parentEl");
+  var lec = parentEl.lastElementChild;
+  parentEl.removeChild(lec);
+  assert_equals(parentEl.childElementCount, 1)
+})
+</script>
diff --git a/dom/imptests/html/dom/nodes/test_Element-childElementCount-dynamic-remove.svg b/dom/imptests/html/dom/nodes/test_Element-childElementCount-dynamic-remove.svg
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-childElementCount-dynamic-remove.svg
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg xmlns="http://www.w3.org/2000/svg"
+     xmlns:h="http://www.w3.org/1999/xhtml"
+     version="1.1"
+     width="100%" height="100%" viewBox="0 0 400 400">
+<title>Dynamic Removal of Elements</title>
+<h:script src="/resources/testharness.js"/>
+<h:script src="/resources/testharnessreport.js"/>
+
+<text x="200" y="40" font-size="25" fill="black" text-anchor="middle">Test of Dynamic Removal of Elements</text>
+<text id="parentEl" x="200" y="70" font-size="20" fill="black" text-anchor="middle">The result of this test is
+<tspan id="first_element_child" font-weight="bold">unknown.</tspan><tspan id="last_element_child"> </tspan></text>
+
+<h:script><![CDATA[
+test(function() {
+  var parentEl = document.getElementById("parentEl");
+  var lec = parentEl.lastElementChild;
+  parentEl.removeChild(lec);
+  assert_equals(parentEl.childElementCount, 1)
+})
+]]></h:script>
+</svg>
diff --git a/dom/imptests/html/dom/nodes/test_Element-childElementCount-dynamic-remove.xhtml b/dom/imptests/html/dom/nodes/test_Element-childElementCount-dynamic-remove.xhtml
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-childElementCount-dynamic-remove.xhtml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+<title>Dynamic Removal of Elements</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+</head>
+<body>
+<h1>Test of Removal Adding of Elements</h1>
+<div id="log"></div>
+<p id="parentEl">The result of this test is
+<span id="first_element_child" style="font-weight:bold;">logged above.</span><span id="last_element_child"> </span></p>
+<script><![CDATA[
+test(function() {
+  var parentEl = document.getElementById("parentEl");
+  var lec = parentEl.lastElementChild;
+  parentEl.removeChild(lec);
+  assert_equals(parentEl.childElementCount, 1)
+})
+]]></script>
+</body>
+</html>
diff --git a/dom/imptests/html/dom/nodes/test_Element-childElementCount-nochild.html b/dom/imptests/html/dom/nodes/test_Element-childElementCount-nochild.html
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-childElementCount-nochild.html
@@ -0,0 +1,14 @@
+<!DOCTYPE HTML>
+<meta charset=utf-8>
+<title>childElementCount without Child Element Nodes</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<h1>Test of childElementCount with No Child Element Nodes</h1>
+<div id="log"></div>
+<p id="parentEl" style="font-weight:bold;">Test.</p>
+<script>
+test(function() {
+  var parentEl = document.getElementById("parentEl")
+  assert_equals(parentEl.childElementCount, 0)
+})
+</script>
diff --git a/dom/imptests/html/dom/nodes/test_Element-childElementCount-nochild.svg b/dom/imptests/html/dom/nodes/test_Element-childElementCount-nochild.svg
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-childElementCount-nochild.svg
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg xmlns="http://www.w3.org/2000/svg"
+     xmlns:h="http://www.w3.org/1999/xhtml"
+     version="1.1"
+     width="100%" height="100%" viewBox="0 0 400 400">
+<title>childElementCount</title>
+<h:script src="/resources/testharness.js"/>
+<h:script src="/resources/testharnessreport.js"/>
+
+<text x="200" y="40" font-size="25" fill="black" text-anchor="middle">Test of childElementCount with No Child Element Nodes</text>
+<text id="parentEl" x="200" y="70" font-size="20" fill="black" text-anchor="middle" font-weight="bold">Test</text>
+
+<h:script><![CDATA[
+test(function() {
+  var parentEl = document.getElementById("parentEl")
+  assert_equals(parentEl.childElementCount, 0)
+})
+]]></h:script>
+</svg>
diff --git a/dom/imptests/html/dom/nodes/test_Element-childElementCount-nochild.xhtml b/dom/imptests/html/dom/nodes/test_Element-childElementCount-nochild.xhtml
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-childElementCount-nochild.xhtml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+<title>childElementCount without Child Element Nodes</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+</head>
+<body>
+<h1>Test of childElementCount with No Child Element Nodes</h1>
+<div id="log"></div>
+<p id="parentEl" style="font-weight:bold;">Test.</p>
+<script><![CDATA[
+test(function() {
+  var parentEl = document.getElementById("parentEl")
+  assert_equals(parentEl.childElementCount, 0)
+})
+]]></script>
+</body>
+</html>
diff --git a/dom/imptests/html/dom/nodes/test_Element-childElementCount.html b/dom/imptests/html/dom/nodes/test_Element-childElementCount.html
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-childElementCount.html
@@ -0,0 +1,20 @@
+<!DOCTYPE HTML>
+<meta charset=utf-8>
+<title>childElementCount</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<h1>Test of childElementCount</h1>
+<div id="log"></div>
+<p id="parentEl">The result of <span id="first_element_child"><span>this</span> <span>test</span></span> is
+<span id="middle_element_child" style="font-weight:bold;">given above.</span>
+
+
+
+<span id="last_element_child" style="display:none;">fnord</span> </p>
+<script>
+test(function() {
+  var parentEl = document.getElementById("parentEl")
+  assert_true("childElementCount" in parentEl)
+  assert_equals(parentEl.childElementCount, 3)
+})
+</script>
diff --git a/dom/imptests/html/dom/nodes/test_Element-childElementCount.svg b/dom/imptests/html/dom/nodes/test_Element-childElementCount.svg
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-childElementCount.svg
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg xmlns="http://www.w3.org/2000/svg"
+     xmlns:h="http://www.w3.org/1999/xhtml"
+     version="1.1"
+     width="100%" height="100%" viewBox="0 0 400 400">
+<title>childElementCount</title>
+<h:script src="/resources/testharness.js"/>
+<h:script src="/resources/testharnessreport.js"/>
+
+<text x="200" y="40" font-size="25" fill="black" text-anchor="middle">Test of childElementCount</text>
+<text id="parentEl" x="200" y="70" font-size="20" fill="black" text-anchor="middle">The result of <tspan id="first_element_child"><tspan>this</tspan> <tspan>test</tspan></tspan> is 
+<tspan id="middle_element_child" font-weight="bold">unknown.</tspan>  
+
+
+
+<tspan id="last_element_child" style="display:none;">fnord</tspan> </text>
+
+<h:script><![CDATA[
+test(function() {
+  var parentEl = document.getElementById("parentEl")
+  assert_true("childElementCount" in parentEl)
+  assert_equals(parentEl.childElementCount, 3)
+})
+]]></h:script>
+</svg>
diff --git a/dom/imptests/html/dom/nodes/test_Element-childElementCount.xhtml b/dom/imptests/html/dom/nodes/test_Element-childElementCount.xhtml
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-childElementCount.xhtml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+<title>childElementCount</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+</head>
+<body>
+<h1>Test of childElementCount</h1>
+<div id="log"></div>
+<p id="parentEl">The result of <span id="first_element_child"><span>this</span> <span>test</span></span> is 
+<span id="middle_element_child" style="font-weight:bold;">unknown.</span>
+
+
+
+<span id="last_element_child" style="display:none;">fnord</span> </p>
+<script><![CDATA[
+test(function() {
+  var parentEl = document.getElementById("parentEl")
+  assert_true("childElementCount" in parentEl)
+  assert_equals(parentEl.childElementCount, 3)
+})
+]]></script>
+</body>
+</html>
diff --git a/dom/imptests/html/dom/nodes/test_Element-firstElementChild-entity.svg b/dom/imptests/html/dom/nodes/test_Element-firstElementChild-entity.svg
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-firstElementChild-entity.svg
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"
+[
+<!ENTITY tree "<tspan id='first_element_child' font-weight='bold'>unknown.</tspan>">
+]>
+<svg xmlns="http://www.w3.org/2000/svg"
+     xmlns:h="http://www.w3.org/1999/xhtml"
+     version="1.1"
+     width="100%" height="100%" viewBox="0 0 400 400">
+<title>Entity References</title>
+<h:script src="/resources/testharness.js"/>
+<h:script src="/resources/testharnessreport.js"/>
+
+<text x="200" y="40" font-size="25" fill="black" text-anchor="middle">Test of Entity References</text>
+<text id="parentEl" x="200" y="70" font-size="20" fill="black" text-anchor="middle">The result of this test is &tree;</text>
+
+<h:script><![CDATA[
+test(function() {
+  var parentEl = document.getElementById("parentEl")
+  var fec = parentEl.firstElementChild;
+  assert_true(!!fec)
+  assert_equals(fec.nodeType, 1)
+  assert_equals(fec.getAttribute("id"), "first_element_child")
+})
+]]></h:script>
+</svg>
diff --git a/dom/imptests/html/dom/nodes/test_Element-firstElementChild-entity.xhtml b/dom/imptests/html/dom/nodes/test_Element-firstElementChild-entity.xhtml
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-firstElementChild-entity.xhtml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
+        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"
+[
+<!ENTITY tree "<span id='first_element_child' style='font-weight:bold;'>unknown.</span>">
+]>
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
+<head>
+<title>Entity References</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+</head>
+<body>
+<h1>Test of Entity References</h1>
+<div id="log"></div>
+<p id="parentEl">The result of this test is &tree;</p>
+<script><![CDATA[
+test(function() {
+  var parentEl = document.getElementById("parentEl")
+  var fec = parentEl.firstElementChild;
+  assert_true(!!fec)
+  assert_equals(fec.nodeType, 1)
+  assert_equals(fec.getAttribute("id"), "first_element_child")
+})
+]]></script>
+</body>
+</html>
diff --git a/dom/imptests/html/dom/nodes/test_Element-firstElementChild-namespace.html b/dom/imptests/html/dom/nodes/test_Element-firstElementChild-namespace.html
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-firstElementChild-namespace.html
@@ -0,0 +1,21 @@
+<!DOCTYPE HTML>
+<meta charset=utf-8>
+<title>firstElementChild with namespaces</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<h1>Test of firstElementChild with namespaces</h1>
+<div id="log"></div>
+<p id="parentEl">The result of this test is a unknown.</p>
+<script>
+test(function() {
+  var parentEl = document.getElementById("parentEl")
+  var el = document.createElementNS("http://ns.example.org/pickle", "pickle:dill")
+  el.setAttribute("id", "first_element_child")
+  parentEl.appendChild(el)
+  var fec = parentEl.firstElementChild
+  assert_true(!!fec)
+  assert_equals(fec.nodeType, 1)
+  assert_equals(fec.getAttribute("id"), "first_element_child")
+  assert_equals(fec.localName, "dill")
+})
+</script>
diff --git a/dom/imptests/html/dom/nodes/test_Element-firstElementChild-namespace.svg b/dom/imptests/html/dom/nodes/test_Element-firstElementChild-namespace.svg
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-firstElementChild-namespace.svg
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg xmlns="http://www.w3.org/2000/svg"
+     xmlns:h="http://www.w3.org/1999/xhtml"
+     xmlns:pickle="http://ns.example.org/pickle"
+     version="1.1"
+     width="100%" height="100%" viewBox="0 0 400 400">
+<title>firstElementChild with namespaces</title>
+<h:script src="/resources/testharness.js"/>
+<h:script src="/resources/testharnessreport.js"/>
+
+<text x="200" y="40" font-size="25" fill="black" text-anchor="middle">Test of firstElementChild with namespaces</text>
+<g id="parentEl">
+  <pickle:dill id="first_element_child"/>
+</g>
+
+<h:script><![CDATA[
+test(function() {
+  var parentEl = document.getElementById("parentEl");
+  var fec = parentEl.firstElementChild;
+  assert_true(!!fec)
+  assert_equals(fec.nodeType, 1)
+  assert_equals(fec.getAttribute("id"), "first_element_child")
+  assert_equals(fec.localName, "dill")
+})
+]]></h:script>
+</svg>
diff --git a/dom/imptests/html/dom/nodes/test_Element-firstElementChild-namespace.xhtml b/dom/imptests/html/dom/nodes/test_Element-firstElementChild-namespace.xhtml
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-firstElementChild-namespace.xhtml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<html xmlns="http://www.w3.org/1999/xhtml"
+      xmlns:pickle="http://ns.example.org/pickle">
+<head>
+<title>firstElementChild with namespaces</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+</head>
+<body>
+<h1>Test of firstElementChild with namespaces</h1>
+<div id="parentEl">
+  <pickle:dill id="first_element_child"/>
+</div>
+<div id="log"></div>
+<p id="parentEl">The result of this test is
+<span id="first_element_child" style="font-weight:bold;">logged above.</span></p>
+<script><![CDATA[
+test(function() {
+  var parentEl = document.getElementById("parentEl");
+  var fec = parentEl.firstElementChild;
+  assert_true(!!fec)
+  assert_equals(fec.nodeType, 1)
+  assert_equals(fec.getAttribute("id"), "first_element_child")
+  assert_equals(fec.localName, "dill")
+})
+]]></script>
+</body>
+</html>
diff --git a/dom/imptests/html/dom/nodes/test_Element-firstElementChild.html b/dom/imptests/html/dom/nodes/test_Element-firstElementChild.html
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-firstElementChild.html
@@ -0,0 +1,18 @@
+<!DOCTYPE HTML>
+<meta charset=utf-8>
+<title>firstElementChild</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<h1>Test of firstElementChild</h1>
+<div id="log"></div>
+<p id="parentEl">The result of this test is
+<span id="first_element_child" style="font-weight:bold;">logged above.</span></p>
+<script>
+test(function() {
+  var parentEl = document.getElementById("parentEl");
+  var fec = parentEl.firstElementChild;
+  assert_true(!!fec)
+  assert_equals(fec.nodeType, 1)
+  assert_equals(fec.getAttribute("id"), "first_element_child")
+})
+</script>
diff --git a/dom/imptests/html/dom/nodes/test_Element-firstElementChild.svg b/dom/imptests/html/dom/nodes/test_Element-firstElementChild.svg
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-firstElementChild.svg
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg xmlns="http://www.w3.org/2000/svg"
+     xmlns:h="http://www.w3.org/1999/xhtml"
+     version="1.1"
+     width="100%" height="100%" viewBox="0 0 400 400">
+<title>firstElementChild</title>
+<h:script src="/resources/testharness.js"/>
+<h:script src="/resources/testharnessreport.js"/>
+
+<text x="200" y="40" font-size="25" fill="black" text-anchor="middle">Test of firstElementChild</text>
+<text id="parentEl" x="200" y="70" font-size="20" fill="black" text-anchor="middle">The result of this test is
+<tspan id="first_element_child" font-weight="bold">unknown.</tspan></text>
+
+<h:script><![CDATA[
+test(function() {
+  var parentEl = document.getElementById("parentEl");
+  var fec = parentEl.firstElementChild;
+  assert_true(!!fec)
+  assert_equals(fec.nodeType, 1)
+  assert_equals(fec.getAttribute("id"), "first_element_child")
+})
+]]></h:script>
+</svg>
diff --git a/dom/imptests/html/dom/nodes/test_Element-firstElementChild.xhtml b/dom/imptests/html/dom/nodes/test_Element-firstElementChild.xhtml
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-firstElementChild.xhtml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+<title>firstElementChild</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+</head>
+<body>
+<h1>Test of firstElementChild</h1>
+<div id="log"></div>
+<p id="parentEl">The result of this test is
+<span id="first_element_child" style="font-weight:bold;">logged above.</span></p>
+<script><![CDATA[
+test(function() {
+  var parentEl = document.getElementById("parentEl");
+  var fec = parentEl.firstElementChild;
+  assert_true(!!fec)
+  assert_equals(fec.nodeType, 1)
+  assert_equals(fec.getAttribute("id"), "first_element_child")
+})
+]]></script>
+</body>
+</html>
diff --git a/dom/imptests/html/dom/nodes/test_Element-lastElementChild.html b/dom/imptests/html/dom/nodes/test_Element-lastElementChild.html
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-lastElementChild.html
@@ -0,0 +1,17 @@
+<!DOCTYPE HTML>
+<meta charset=utf-8>
+<title>lastElementChild</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<h1>Test of lastElementChild</h1>
+<div id="log"></div>
+<p id="parentEl">The result of <span id="first_element_child">this test</span> is <span id="last_element_child" style="font-weight:bold;">logged</span> above.</p>
+<script>
+test(function() {
+  var parentEl = document.getElementById("parentEl");
+  var lec = parentEl.lastElementChild;
+  assert_true(!!lec)
+  assert_equals(lec.nodeType, 1)
+  assert_equals(lec.getAttribute("id"), "last_element_child")
+})
+</script>
diff --git a/dom/imptests/html/dom/nodes/test_Element-lastElementChild.svg b/dom/imptests/html/dom/nodes/test_Element-lastElementChild.svg
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-lastElementChild.svg
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg xmlns="http://www.w3.org/2000/svg"
+     xmlns:h="http://www.w3.org/1999/xhtml"
+     version="1.1"
+     width="100%" height="100%" viewBox="0 0 400 400">
+<title>lastElementChild</title>
+<h:script src="/resources/testharness.js"/>
+<h:script src="/resources/testharnessreport.js"/>
+
+<text x="200" y="40" font-size="25" fill="black" text-anchor="middle">Test of lastElementChild</text>
+<text id="parentEl" x="200" y="70" font-size="20" fill="black" text-anchor="middle">The result of <tspan id="first_element_child">this test</tspan> is <tspan id="last_element_child" font-weight="bold">not</tspan> known.</text>
+
+<h:script><![CDATA[
+test(function() {
+  var parentEl = document.getElementById("parentEl");
+  var lec = parentEl.lastElementChild;
+  assert_true(!!lec)
+  assert_equals(lec.nodeType, 1)
+  assert_equals(lec.getAttribute("id"), "last_element_child")
+})
+]]></h:script>
+</svg>
diff --git a/dom/imptests/html/dom/nodes/test_Element-lastElementChild.xhtml b/dom/imptests/html/dom/nodes/test_Element-lastElementChild.xhtml
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-lastElementChild.xhtml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+<title>firstElementChild</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+</head>
+<body>
+<h1>Test of firstElementChild</h1>
+<div id="log"></div>
+<p id="parentEl">The result of <span id="first_element_child">this test</span> is <span id="last_element_child" style="font-weight:bold;">logged</span> above.</p>
+<script><![CDATA[
+test(function() {
+  var parentEl = document.getElementById("parentEl");
+  var lec = parentEl.lastElementChild;
+  assert_true(!!lec)
+  assert_equals(lec.nodeType, 1)
+  assert_equals(lec.getAttribute("id"), "last_element_child")
+})
+]]></script>
+</body>
+</html>
diff --git a/dom/imptests/html/dom/nodes/test_Element-nextElementSibling.html b/dom/imptests/html/dom/nodes/test_Element-nextElementSibling.html
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-nextElementSibling.html
@@ -0,0 +1,18 @@
+<!DOCTYPE HTML>
+<meta charset=utf-8>
+<title>nextElementSibling</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<h1>Test of nextElementSibling</h1>
+<div id="log"></div>
+<p id="parentEl">The result of <span id="first_element_child">this test</span> is <span id="last_element_child" style="font-weight:bold;">unknown.</span></p>
+<script>
+test(function() {
+  var parentEl = document.getElementById("parentEl");
+  var fec = document.getElementById("first_element_child");
+  var nes = fec.nextElementSibling;
+  assert_true(!!nes)
+  assert_equals(nes.nodeType, 1)
+  assert_equals(nes.getAttribute("id"), "last_element_child")
+})
+</script>
diff --git a/dom/imptests/html/dom/nodes/test_Element-nextElementSibling.svg b/dom/imptests/html/dom/nodes/test_Element-nextElementSibling.svg
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-nextElementSibling.svg
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg xmlns="http://www.w3.org/2000/svg"
+     xmlns:h="http://www.w3.org/1999/xhtml"
+     version="1.1"
+     width="100%" height="100%" viewBox="0 0 400 400">
+<title>nextElementSibling</title>
+<h:script src="/resources/testharness.js"/>
+<h:script src="/resources/testharnessreport.js"/>
+
+<text x="200" y="40" font-size="25" fill="black" text-anchor="middle">Test of nextElementSibling</text>
+<text id="parentEl" x="200" y="70" font-size="20" fill="black" text-anchor="middle">The result of <tspan id="first_element_child">this test</tspan> is <tspan id="last_element_child" font-weight="bold">unknown.</tspan></text>
+
+<h:script><![CDATA[
+test(function() {
+  var parentEl = document.getElementById("parentEl");
+  var fec = document.getElementById("first_element_child");
+  var nes = fec.nextElementSibling;
+  assert_true(!!nes)
+  assert_equals(nes.nodeType, 1)
+  assert_equals(nes.getAttribute("id"), "last_element_child")
+})
+]]></h:script>
+</svg>
diff --git a/dom/imptests/html/dom/nodes/test_Element-nextElementSibling.xhtml b/dom/imptests/html/dom/nodes/test_Element-nextElementSibling.xhtml
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-nextElementSibling.xhtml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+<title>nextElementSibling</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+</head>
+<body>
+<h1>Test of nextElementSibling</h1>
+<div id="log"></div>
+<p id="parentEl">The result of <span id="first_element_child">this test</span> is <span id="last_element_child" style="font-weight:bold;">unknown.</span></p>
+<script><![CDATA[
+test(function() {
+  var parentEl = document.getElementById("parentEl");
+  var fec = document.getElementById("first_element_child");
+  var nes = fec.nextElementSibling;
+  assert_true(!!nes)
+  assert_equals(nes.nodeType, 1)
+  assert_equals(nes.getAttribute("id"), "last_element_child")
+})
+]]></script>
+</body>
+</html>
diff --git a/dom/imptests/html/dom/nodes/test_Element-previousElementSibling.html b/dom/imptests/html/dom/nodes/test_Element-previousElementSibling.html
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-previousElementSibling.html
@@ -0,0 +1,23 @@
+<!DOCTYPE HTML>
+<meta charset=utf-8>
+<title>previousElementSibling</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<h1>Test of previousElementSibling</h1>
+<div id="log"></div>
+<p id="parentEl">The result of <span id="first_element_child">this test</span> is
+<span id="middle_element_child" style="font-weight:bold;">unknown.</span>
+
+
+
+<span id="last_element_child" style="display:none;">fnord</span> </p>
+<script>
+test(function() {
+  var parentEl = document.getElementById("parentEl");
+  var lec = document.getElementById("last_element_child");
+  var pes = lec.previousElementSibling;
+  assert_true(!!pes)
+  assert_equals(pes.nodeType, 1)
+  assert_equals(pes.getAttribute("id"), "middle_element_child")
+})
+</script>
diff --git a/dom/imptests/html/dom/nodes/test_Element-previousElementSibling.svg b/dom/imptests/html/dom/nodes/test_Element-previousElementSibling.svg
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-previousElementSibling.svg
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg xmlns="http://www.w3.org/2000/svg"
+     xmlns:h="http://www.w3.org/1999/xhtml"
+     version="1.1"
+     width="100%" height="100%" viewBox="0 0 400 400">
+<title>previousElementSibling</title>
+<h:script src="/resources/testharness.js"/>
+<h:script src="/resources/testharnessreport.js"/>
+
+<text x="200" y="40" font-size="25" fill="black" text-anchor="middle">Test of previousElementSibling</text>
+<text id="parentEl" x="200" y="70" font-size="20" fill="black" text-anchor="middle">The result of <tspan id="first_element_child">this test</tspan> is 
+<tspan id="middle_element_child" font-weight="bold">unknown.</tspan>  
+
+
+
+<tspan id="last_element_child" display="none">fnord</tspan> </text>
+
+<h:script><![CDATA[
+test(function() {
+  var parentEl = document.getElementById("parentEl");
+  var lec = document.getElementById("last_element_child");
+  var pes = lec.previousElementSibling;
+  assert_true(!!pes)
+  assert_equals(pes.nodeType, 1)
+  assert_equals(pes.getAttribute("id"), "middle_element_child")
+})
+]]></h:script>
+</svg>
diff --git a/dom/imptests/html/dom/nodes/test_Element-previousElementSibling.xhtml b/dom/imptests/html/dom/nodes/test_Element-previousElementSibling.xhtml
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-previousElementSibling.xhtml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+<title>previousElementSibling</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+</head>
+<body>
+<h1>Test of previousElementSibling</h1>
+<div id="log"></div>
+<p id="parentEl">The result of <span id="first_element_child">this test</span> is 
+<span id="middle_element_child" style="font-weight:bold;">unknown.</span>  
+
+
+
+<span id="last_element_child" style="display:none;">fnord</span> </p>
+<script><![CDATA[
+test(function() {
+  var parentEl = document.getElementById("parentEl");
+  var lec = document.getElementById("last_element_child");
+  var pes = lec.previousElementSibling;
+  assert_true(!!pes)
+  assert_equals(pes.nodeType, 1)
+  assert_equals(pes.getAttribute("id"), "middle_element_child")
+})
+]]></script>
+</body>
+</html>
diff --git a/dom/imptests/html/dom/nodes/test_Element-siblingElement-null.html b/dom/imptests/html/dom/nodes/test_Element-siblingElement-null.html
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-siblingElement-null.html
@@ -0,0 +1,16 @@
+<!DOCTYPE HTML>
+<meta charset=utf-8>
+<title>Null test</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<h1>Test of previousElementSibling and nextElementSibling returning null</h1>
+<div id="log"></div>
+<p id="parentEl">The result of this test is <span id="first_element_child" style="font-weight:bold;">unknown.</span></p>
+<script>
+test(function() {
+  var fec = document.getElementById("first_element_child");
+  assert_equals(fec.previousElementSibling, null)
+  assert_equals(fec.nextElementSibling, null)
+})
+</script>
+
diff --git a/dom/imptests/html/dom/nodes/test_Element-siblingElement-null.svg b/dom/imptests/html/dom/nodes/test_Element-siblingElement-null.svg
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-siblingElement-null.svg
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg xmlns="http://www.w3.org/2000/svg"
+     xmlns:h="http://www.w3.org/1999/xhtml"
+     version="1.1"
+     width="100%" height="100%" viewBox="0 0 400 400">
+<title>Null test</title>
+<h:script src="/resources/testharness.js"/>
+<h:script src="/resources/testharnessreport.js"/>
+
+<text x="200" y="40" font-size="25" fill="black" text-anchor="middle">Test of previousElementSibling and nextElementSibling returning null</text>
+<text id="parentEl" x="200" y="70" font-size="20" fill="black" text-anchor="middle">The result of this test is <tspan id="first_element_child" font-weight="bold">unknown.</tspan></text>
+
+<h:script><![CDATA[
+test(function() {
+  var fec = document.getElementById("first_element_child");
+  assert_equals(fec.previousElementSibling, null)
+  assert_equals(fec.nextElementSibling, null)
+})
+]]></h:script>	
+</svg>
diff --git a/dom/imptests/html/dom/nodes/test_Element-siblingElement-null.xhtml b/dom/imptests/html/dom/nodes/test_Element-siblingElement-null.xhtml
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/nodes/test_Element-siblingElement-null.xhtml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<html xmlns="http://www.w3.org/1999/xhtml">
+<head>
+<title>Null Test</title>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+</head>
+<body>
+<h1>Test of previousElementSibling and nextElementSibling returning null</h1>
+<div id="log"></div>
+<p id="parentEl">The result of this test is <span id="first_element_child" style="font-weight:bold;">unknown.</span></p>
+<script><![CDATA[
+test(function() {
+  var fec = document.getElementById("first_element_child");
+  assert_equals(fec.previousElementSibling, null)
+  assert_equals(fec.nextElementSibling, null)
+})
+]]></script>
+</body>
+</html>
diff --git a/dom/imptests/html/dom/nodes/test_attributes.html b/dom/imptests/html/dom/nodes/test_attributes.html
--- a/dom/imptests/html/dom/nodes/test_attributes.html
+++ b/dom/imptests/html/dom/nodes/test_attributes.html
@@ -19,17 +19,18 @@ var XMLNS = "http://www.w3.org/2000/xmln
 test(function() {
   document.body.setAttribute("abc", "pass")
   var attr = document.body.attributes[0]
   assert_true(attr instanceof Attr)
   assert_false(attr instanceof Node)
   assert_throws(new TypeError(), function() { attr.appendChild(document.createTextNode("fail")) })
   assert_throws(new TypeError(), function() { attr.appendChild(null) })
   assert_equals(attr.value, "pass")
-  assert_false("childNodes" in attr)
+  assert_false("childNodes" in attr, "Should not have childNodes")
+  assert_false("textContent" in attr, "Should not have textContent")
 }, "AttrExodus")
 
 // setAttribute exhaustive tests
 // Step 1
 test(function() {
   var el = document.createElement("foo")
   for (var i = 0; i < invalid_names.length; i++) {
     assert_throws("INVALID_CHARACTER_ERR", function() { el.setAttribute(invalid_names[i], "test") })
diff --git a/dom/imptests/html/dom/ranges/Makefile.in b/dom/imptests/html/dom/ranges/Makefile.in
--- a/dom/imptests/html/dom/ranges/Makefile.in
+++ b/dom/imptests/html/dom/ranges/Makefile.in
@@ -1,14 +1,15 @@
 # THIS FILE IS AUTOGENERATED BY importTestsuite.py - DO NOT EDIT
 
+DEPTH := @DEPTH@
+
 topsrcdir := @top_srcdir@
 srcdir := @srcdir@
 VPATH := @srcdir@
-DEPTH := @DEPTH@
 relativesrcdir := @relativesrcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
 MOCHITEST_FILES := \
   test_Range-attributes.html \
   test_Range-cloneContents.html \
   test_Range-cloneRange.html \
diff --git a/dom/imptests/html/dom/test_interfaces.html b/dom/imptests/html/dom/test_interfaces.html
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/dom/test_interfaces.html
@@ -0,0 +1,479 @@
+<!doctype html>
+<title>DOM4 IDL tests</title>
+<div id=log></div>
+<script src=/resources/testharness.js></script>
+<script src=/resources/testharnessreport.js></script>
+<script src=/resources/WebIDLParser.js></script>
+<script src=/resources/idlharness.js></script>
+<script type=text/plain>
+exception DOMException {
+  const unsigned short INDEX_SIZE_ERR = 1;
+  const unsigned short DOMSTRING_SIZE_ERR = 2; // historical
+  const unsigned short HIERARCHY_REQUEST_ERR = 3;
+  const unsigned short WRONG_DOCUMENT_ERR = 4;
+  const unsigned short INVALID_CHARACTER_ERR = 5;
+  const unsigned short NO_DATA_ALLOWED_ERR = 6; // historical
+  const unsigned short NO_MODIFICATION_ALLOWED_ERR = 7;
+  const unsigned short NOT_FOUND_ERR = 8;
+  const unsigned short NOT_SUPPORTED_ERR = 9;
+  const unsigned short INUSE_ATTRIBUTE_ERR = 10; // historical
+  const unsigned short INVALID_STATE_ERR = 11;
+  const unsigned short SYNTAX_ERR = 12;
+  const unsigned short INVALID_MODIFICATION_ERR = 13;
+  const unsigned short NAMESPACE_ERR = 14;
+  const unsigned short INVALID_ACCESS_ERR = 15;
+  const unsigned short VALIDATION_ERR = 16; // historical
+  const unsigned short TYPE_MISMATCH_ERR = 17; // historical; use TypeError instead
+  const unsigned short SECURITY_ERR = 18;
+  const unsigned short NETWORK_ERR = 19;
+  const unsigned short ABORT_ERR = 20;
+  const unsigned short URL_MISMATCH_ERR = 21;
+  const unsigned short QUOTA_EXCEEDED_ERR = 22;
+  const unsigned short TIMEOUT_ERR = 23;
+  const unsigned short INVALID_NODE_TYPE_ERR = 24;
+  const unsigned short DATA_CLONE_ERR = 25;
+  unsigned short code;
+};
+
+[Constructor(DOMString name)]
+interface DOMError {
+  readonly attribute DOMString name;
+};
+
+[Constructor(DOMString type, optional EventInit eventInitDict)]
+interface Event {
+  readonly attribute DOMString type;
+  readonly attribute EventTarget? target;
+  readonly attribute EventTarget? currentTarget;
+
+  const unsigned short NONE = 0;
+  const unsigned short CAPTURING_PHASE = 1;
+  const unsigned short AT_TARGET = 2;
+  const unsigned short BUBBLING_PHASE = 3;
+  readonly attribute unsigned short eventPhase;
+
+  void stopPropagation();
+  void stopImmediatePropagation();
+
+  readonly attribute boolean bubbles;
+  readonly attribute boolean cancelable;
+  void preventDefault();
+  readonly attribute boolean defaultPrevented;
+
+  [Unforgeable] readonly attribute boolean isTrusted;
+  readonly attribute /* DOMTimeStamp */ unsigned long long timeStamp;
+
+  void initEvent(DOMString type, boolean bubbles, boolean cancelable);
+};
+
+dictionary EventInit {
+  boolean bubbles = false;
+  boolean cancelable = false;
+};
+
+[Constructor(DOMString type, optional CustomEventInit eventInitDict)]
+interface CustomEvent : Event {
+  readonly attribute any detail;
+
+  void initCustomEvent(DOMString type, boolean bubbles, boolean cancelable, any details);
+};
+
+dictionary CustomEventInit : EventInit {
+  any detail = null;
+};
+
+interface EventTarget {
+  void addEventListener(DOMString type, EventListener? callback, optional boolean capture);
+  void removeEventListener(DOMString type, EventListener? callback, optional boolean capture);
+  boolean dispatchEvent(Event event);
+};
+
+[Callback]
+interface EventListener {
+  void handleEvent(Event event);
+};
+
+[NoInterfaceObject]
+interface ParentNode {
+  readonly attribute HTMLCollection children;
+  readonly attribute Element? firstElementChild;
+  readonly attribute Element? lastElementChild;
+  readonly attribute unsigned long childElementCount;
+
+  void prepend((Node or DOMString)... nodes);
+  void append((Node or DOMString)... nodes);
+};
+Document implements ParentNode;
+DocumentFragment implements ParentNode;
+Element implements ParentNode;
+
+[NoInterfaceObject]
+interface ChildNode {
+  readonly attribute Element? previousElementSibling;
+  readonly attribute Element? nextElementSibling;
+
+  void before((Node or DOMString)... nodes);
+  void after((Node or DOMString)... nodes);
+  void replace((Node or DOMString)... nodes);
+  void remove();
+};
+DocumentType implements ChildNode;
+Element implements ChildNode;
+CharacterData implements ChildNode;
+
+[Constructor(MutationCallback callback)]
+interface MutationObserver {
+  void observe(Node target, MutationObserverInit options);
+  void disconnect();
+  sequence<MutationRecord> takeRecords();
+};
+
+callback MutationCallback = void (sequence<MutationRecord> mutations, MutationObserver observer);
+
+dictionary MutationObserverInit {
+  boolean childList = false;
+  boolean attributes = false;
+  boolean characterData = false;
+  boolean subtree = false;
+  boolean attributeOldValue = false;
+  boolean characterDataOldValue = false;
+  sequence<DOMString> attributeFilter;
+};
+
+interface MutationRecord {
+  readonly attribute DOMString type;
+  readonly attribute Node target;
+  readonly attribute NodeList addedNodes;
+  readonly attribute NodeList removedNodes;
+  readonly attribute Node? previousSibling;
+  readonly attribute Node? nextSibling;
+  readonly attribute DOMString? attributeName;
+  readonly attribute DOMString? attributeNamespace;
+  readonly attribute DOMString? oldValue;
+};
+
+interface Node : EventTarget {
+  const unsigned short ELEMENT_NODE = 1;
+  const unsigned short ATTRIBUTE_NODE = 2; // historical
+  const unsigned short TEXT_NODE = 3;
+  const unsigned short CDATA_SECTION_NODE = 4; // historical
+  const unsigned short ENTITY_REFERENCE_NODE = 5; // historical
+  const unsigned short ENTITY_NODE = 6; // historical
+  const unsigned short PROCESSING_INSTRUCTION_NODE = 7;
+  const unsigned short COMMENT_NODE = 8;
+  const unsigned short DOCUMENT_NODE = 9;
+  const unsigned short DOCUMENT_TYPE_NODE = 10;
+  const unsigned short DOCUMENT_FRAGMENT_NODE = 11;
+  const unsigned short NOTATION_NODE = 12; // historical
+  readonly attribute unsigned short nodeType;
+  readonly attribute DOMString nodeName;
+
+  readonly attribute DOMString? baseURI;
+
+  readonly attribute Document? ownerDocument;
+  readonly attribute Node? parentNode;
+  readonly attribute Element? parentElement;
+  boolean hasChildNodes();
+  readonly attribute NodeList childNodes;
+  readonly attribute Node? firstChild;
+  readonly attribute Node? lastChild;
+  readonly attribute Node? previousSibling;
+  readonly attribute Node? nextSibling;
+
+           attribute DOMString? nodeValue;
+           attribute DOMString? textContent;
+  void normalize();
+
+  Node cloneNode(optional boolean deep);
+  boolean isEqualNode(Node? node);
+
+  const unsigned short DOCUMENT_POSITION_DISCONNECTED = 0x01;
+  const unsigned short DOCUMENT_POSITION_PRECEDING = 0x02;
+  const unsigned short DOCUMENT_POSITION_FOLLOWING = 0x04;
+  const unsigned short DOCUMENT_POSITION_CONTAINS = 0x08;
+  const unsigned short DOCUMENT_POSITION_CONTAINED_BY = 0x10;
+  const unsigned short DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;
+  unsigned short compareDocumentPosition(Node other);
+  boolean contains(Node? other);
+
+  DOMString? lookupPrefix(DOMString? namespace);
+  DOMString? lookupNamespaceURI(DOMString? prefix);
+  boolean isDefaultNamespace(DOMString? namespace);
+
+  Node insertBefore(Node node, Node? child);
+  Node appendChild(Node node);
+  Node replaceChild(Node node, Node child);
+  Node removeChild(Node child);
+};
+
+[Constructor]
+interface Document : Node {
+  readonly attribute DOMImplementation implementation;
+  readonly attribute DOMString URL;
+  readonly attribute DOMString documentURI;
+  readonly attribute DOMString compatMode;
+  readonly attribute DOMString characterSet;
+  readonly attribute DOMString contentType;
+
+  readonly attribute DocumentType? doctype;
+  readonly attribute Element? documentElement;
+  HTMLCollection getElementsByTagName(DOMString localName);
+  HTMLCollection getElementsByTagNameNS(DOMString? namespace, DOMString localName);
+  HTMLCollection getElementsByClassName(DOMString classNames);
+  Element? getElementById(DOMString elementId);
+
+  Element createElement(DOMString localName);
+  Element createElementNS(DOMString? namespace, DOMString qualifiedName);
+  DocumentFragment createDocumentFragment();
+  Text createTextNode(DOMString data);
+  Comment createComment(DOMString data);
+  ProcessingInstruction createProcessingInstruction(DOMString target, DOMString data);
+
+  Node importNode(Node node, optional boolean deep);
+  Node adoptNode(Node node);
+
+  Event createEvent(DOMString interface);
+
+  Range createRange();
+
+  // NodeFilter.SHOW_ALL = 0xFFFFFFFF
+  NodeIterator createNodeIterator(Node root, optional unsigned long whatToShow, optional NodeFilter? filter);
+  TreeWalker createTreeWalker(Node root, optional unsigned long whatToShow, optional NodeFilter? filter);
+};
+
+interface XMLDocument : Document {};
+
+interface DOMImplementation {
+  DocumentType createDocumentType(DOMString qualifiedName, DOMString publicId, DOMString systemId);
+  XMLDocument createDocument(DOMString? namespace, [TreatNullAs=EmptyString] DOMString qualifiedName, optional DocumentType? doctype = null);
+  Document createHTMLDocument(optional DOMString title);
+
+  boolean hasFeature(DOMString feature, [TreatNullAs=EmptyString] DOMString version);
+};
+
+[Constructor]
+interface DocumentFragment : Node {
+};
+
+interface DocumentType : Node {
+  readonly attribute DOMString name;
+  readonly attribute DOMString publicId;
+  readonly attribute DOMString systemId;
+};
+
+interface Element : Node {
+  readonly attribute DOMString? namespaceURI;
+  readonly attribute DOMString? prefix;
+  readonly attribute DOMString localName;
+  readonly attribute DOMString tagName;
+
+           attribute DOMString id;
+           attribute DOMString className;
+  readonly attribute DOMTokenList classList;
+
+  readonly attribute Attr[] attributes;
+  DOMString? getAttribute(DOMString name);
+  DOMString? getAttributeNS(DOMString? namespace, DOMString localName);
+  void setAttribute(DOMString name, DOMString value);
+  void setAttributeNS(DOMString? namespace, DOMString name, DOMString value);
+  void removeAttribute(DOMString name);
+  void removeAttributeNS(DOMString? namespace, DOMString localName);
+  boolean hasAttribute(DOMString name);
+  boolean hasAttributeNS(DOMString? namespace, DOMString localName);
+
+  HTMLCollection getElementsByTagName(DOMString localName);
+  HTMLCollection getElementsByTagNameNS(DOMString? namespace, DOMString localName);
+  HTMLCollection getElementsByClassName(DOMString classNames);
+};
+
+interface Attr {
+  readonly attribute DOMString localName;
+           attribute DOMString value;
+
+  readonly attribute DOMString name;
+  readonly attribute DOMString? namespaceURI;
+  readonly attribute DOMString? prefix;
+};
+
+interface CharacterData : Node {
+  [TreatNullAs=EmptyString] attribute DOMString data;
+  readonly attribute unsigned long length;
+  DOMString substringData(unsigned long offset, unsigned long count);
+  void appendData(DOMString data);
+  void insertData(unsigned long offset, DOMString data);
+  void deleteData(unsigned long offset, unsigned long count);
+  void replaceData(unsigned long offset, unsigned long count, DOMString data);
+};
+
+[Constructor(optional DOMString data)]
+interface Text : CharacterData {
+  Text splitText(unsigned long offset);
+  readonly attribute DOMString wholeText;
+};
+
+interface ProcessingInstruction : CharacterData {
+  readonly attribute DOMString target;
+};
+
+[Constructor(optional DOMString data)]
+interface Comment : CharacterData {
+};
+
+[Constructor]
+interface Range {
+  readonly attribute Node startContainer;
+  readonly attribute unsigned long startOffset;
+  readonly attribute Node endContainer;
+  readonly attribute unsigned long endOffset;
+  readonly attribute boolean collapsed;
+  readonly attribute Node commonAncestorContainer;
+
+  void setStart(Node refNode, unsigned long offset);
+  void setEnd(Node refNode, unsigned long offset);
+  void setStartBefore(Node refNode);
+  void setStartAfter(Node refNode);
+  void setEndBefore(Node refNode);
+  void setEndAfter(Node refNode);
+  void collapse(optional boolean toStart = false);
+  void selectNode(Node refNode);
+  void selectNodeContents(Node refNode);
+
+  const unsigned short START_TO_START = 0;
+  const unsigned short START_TO_END = 1;
+  const unsigned short END_TO_END = 2;
+  const unsigned short END_TO_START = 3;
+  short compareBoundaryPoints(unsigned short how, Range sourceRange);
+
+  void deleteContents();
+  DocumentFragment extractContents();
+  DocumentFragment cloneContents();
+  void insertNode(Node node);
+  void surroundContents(Node newParent);
+
+  Range cloneRange();
+  void detach();
+
+  boolean isPointInRange(Node node, unsigned long offset);
+  short comparePoint(Node node, unsigned long offset);
+
+  boolean intersectsNode(Node node);
+
+  stringifier;
+};
+
+interface NodeIterator {
+  readonly attribute Node root;
+  readonly attribute Node? referenceNode;
+  readonly attribute boolean pointerBeforeReferenceNode;
+  readonly attribute unsigned long whatToShow;
+  readonly attribute NodeFilter? filter;
+
+  Node? nextNode();
+  Node? previousNode();
+
+  void detach();
+};
+
+interface TreeWalker {
+  readonly attribute Node root;
+  readonly attribute unsigned long whatToShow;
+  readonly attribute NodeFilter? filter;
+           attribute Node currentNode;
+
+  Node? parentNode();
+  Node? firstChild();
+  Node? lastChild();
+  Node? previousSibling();
+  Node? nextSibling();
+  Node? previousNode();
+  Node? nextNode();
+};
+
+[Callback]
+interface NodeFilter {
+  // Constants for acceptNode()
+  const unsigned short FILTER_ACCEPT = 1;
+  const unsigned short FILTER_REJECT = 2;
+  const unsigned short FILTER_SKIP = 3;
+
+  // Constants for whatToShow
+  const unsigned long SHOW_ALL = 0xFFFFFFFF;
+  const unsigned long SHOW_ELEMENT = 0x1;
+  const unsigned long SHOW_ATTRIBUTE = 0x2; // historical
+  const unsigned long SHOW_TEXT = 0x4;
+  const unsigned long SHOW_CDATA_SECTION = 0x8; // historical
+  const unsigned long SHOW_ENTITY_REFERENCE = 0x10; // historical
+  const unsigned long SHOW_ENTITY = 0x20; // historical
+  const unsigned long SHOW_PROCESSING_INSTRUCTION = 0x40;
+  const unsigned long SHOW_COMMENT = 0x80;
+  const unsigned long SHOW_DOCUMENT = 0x100;
+  const unsigned long SHOW_DOCUMENT_TYPE = 0x200;
+  const unsigned long SHOW_DOCUMENT_FRAGMENT = 0x400;
+  const unsigned long SHOW_NOTATION = 0x800; // historical
+
+  unsigned short acceptNode(Node node);
+};
+
+[ArrayClass]
+interface NodeList {
+  getter Node? item(unsigned long index);
+  readonly attribute unsigned long length;
+};
+
+interface HTMLCollection {
+  readonly attribute unsigned long length;
+  getter Element? item(unsigned long index);
+  getter object? namedItem(DOMString name); // only returns Element
+};
+
+interface DOMTokenList {
+  readonly attribute unsigned long length;
+  getter DOMString? item(unsigned long index);
+  boolean contains(DOMString token);
+  void add(DOMString... tokens);
+  void remove(DOMString... tokens);
+  boolean toggle(DOMString token, optional boolean force);
+  stringifier;
+};
+
+interface DOMSettableTokenList : DOMTokenList {
+            attribute DOMString value;
+};
+</script>
+<script>
+"use strict";
+var xmlDoc, domException, detachedRange, element;
+var idlArray;
+setup(function() {
+	xmlDoc = document.implementation.createDocument(null, "", null);
+	try { document.appendChild(document); } catch(e) { domException = e; }
+	detachedRange = document.createRange();
+	detachedRange.detach();
+	element = xmlDoc.createElementNS(null, "test");
+	element.setAttribute("bar", "baz");
+
+	idlArray = new IdlArray();
+	idlArray.add_idls(document.querySelector("script[type=text\\/plain]").textContent);
+	idlArray.add_objects({
+		DOMException: ['domException'],
+		Event: ['document.createEvent("Event")', 'new Event("foo")'],
+		CustomEvent: ['new CustomEvent("foo")'],
+		XMLDocument: ['xmlDoc'],
+		DOMImplementation: ['document.implementation'],
+		DocumentFragment: ['document.createDocumentFragment()'],
+		DocumentType: ['document.doctype'],
+		Element: ['element'],
+		Attr: ['document.querySelector("[id]").attributes[0]'],
+		Text: ['document.createTextNode("abc")'],
+		ProcessingInstruction: ['xmlDoc.createProcessingInstruction("abc", "def")'],
+		Comment: ['document.createComment("abc")'],
+		Range: ['document.createRange()', 'detachedRange'],
+		NodeIterator: ['document.createNodeIterator(document.body, NodeFilter.SHOW_ALL, null, false)'],
+		TreeWalker: ['document.createTreeWalker(document.body, NodeFilter.SHOW_ALL, null, false)'],
+		NodeList: ['document.querySelectorAll("script")'],
+		HTMLCollection: ['document.body.children'],
+		DOMTokenList: ['document.body.classList'],
+	});
+});
+idlArray.test();
+</script>
diff --git a/dom/imptests/html/dom/traversal/Makefile.in b/dom/imptests/html/dom/traversal/Makefile.in
--- a/dom/imptests/html/dom/traversal/Makefile.in
+++ b/dom/imptests/html/dom/traversal/Makefile.in
@@ -1,14 +1,15 @@
 # THIS FILE IS AUTOGENERATED BY importTestsuite.py - DO NOT EDIT
 
+DEPTH := @DEPTH@
+
 topsrcdir := @top_srcdir@
 srcdir := @srcdir@
 VPATH := @srcdir@
-DEPTH := @DEPTH@
 relativesrcdir := @relativesrcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
 MOCHITEST_FILES := \
   test_NodeFilter-constants.html \
   $(NULL)
 
diff --git a/dom/imptests/html/dom/traversal/unfinished/Makefile.in b/dom/imptests/html/dom/traversal/unfinished/Makefile.in
--- a/dom/imptests/html/dom/traversal/unfinished/Makefile.in
+++ b/dom/imptests/html/dom/traversal/unfinished/Makefile.in
@@ -1,14 +1,15 @@
 # THIS FILE IS AUTOGENERATED BY importTestsuite.py - DO NOT EDIT
 
+DEPTH := @DEPTH@
+
 topsrcdir := @top_srcdir@
 srcdir := @srcdir@
 VPATH := @srcdir@
-DEPTH := @DEPTH@
 relativesrcdir := @relativesrcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
 MOCHITEST_FILES := \
   TODO \
   $(NULL)
 
diff --git a/dom/imptests/html/html/dom/documents/dta/Makefile.in b/dom/imptests/html/html/dom/documents/dta/Makefile.in
--- a/dom/imptests/html/html/dom/documents/dta/Makefile.in
+++ b/dom/imptests/html/html/dom/documents/dta/Makefile.in
@@ -12,16 +12,17 @@ include $(DEPTH)/config/autoconf.mk
 MOCHITEST_FILES := \
   test_document.body-getter.html \
   test_document.body-setter-01.html \
   test_document.embeds-document.plugins-01.html \
   test_Document.getElementsByClassName-null-undef.html \
   test_document.getElementsByClassName-same.html \
   test_document.head-01.html \
   test_document.head-02.html \
+  test_document.images.html \
   test_document.title-01.html \
   test_document.title-02.xhtml \
   test_document.title-03.html \
   test_document.title-04.xhtml \
   test_document.title-05.html \
   test_document.title-06.html \
   test_document.title-07.html \
   test_Element.getElementsByClassName-null-undef.html \
diff --git a/dom/imptests/html/html/dom/documents/dta/test_document.images.html b/dom/imptests/html/html/dom/documents/dta/test_document.images.html
new file mode 100644
--- /dev/null
+++ b/dom/imptests/html/html/dom/documents/dta/test_document.images.html
@@ -0,0 +1,105 @@
+<!doctype html>
+<meta charset=utf-8>
+<title>Document.images</title>
+<script src=/resources/testharness.js></script>
+<script src=/resources/testharnessreport.js></script>
+<div id=log></div>
+<div id=test>
+<img>
+<img id=x><img name=y><img id=z1 name=z2>
+<img id=a><img id=a>
+<img name=b><img name=b>
+<img id=><img name=>
+<input type=image name=input>
+</div>
+<script>
+function assert_all(aAssertFunc, aCollection) {
+  for (var i = 0; i < aCollection.length; ++i) {
+    aAssertFunc(aCollection[i]);
+  }
+}
+
+var XHTML = "http://www.w3.org/1999/xhtml";
+var div, images, c;
+
+setup(function() {
+  div = document.getElementById("test");
+  var foreign =
+    div.appendChild(document.createElementNS("http://example.org", "img"));
+  foreign.setAttribute("id", "f");
+
+  images = [].slice.call(div.getElementsByTagNameNS(XHTML, "img"));
+
+  c = document.images;
+});
+
+test(function() {
+  assert_equals(c.length, 10);
+  assert_array_equals(c, images);
+
+  assert_all(function (aElement) {
+    assert_equals(aElement.namespaceURI, XHTML);
+  }, c);
+}, "document.images should contain all HTML img elements");
+
+test(function() {
+  assert_equals(c.x, images[1]);
+  assert_equals(c.namedItem("x"), images[1]);
+  assert_true("x" in c, '"x" in c');
+}, "img with id");
+
+test(function() {
+  assert_equals(c.y, images[2]);
+  assert_equals(c.namedItem("y"), images[2]);
+  assert_true("y" in c, '"y" in c');
+}, "img with name");
+
+test(function() {
+  assert_equals(c.z1, images[3]);
+  assert_equals(c.namedItem("z1"), images[3]);
+  assert_true("z1" in c, '"z1" in c');
+  assert_equals(c.z2, images[3]);
+  assert_equals(c.namedItem("z2"), images[3]);
+  assert_true("z2" in c, '"z2" in c');
+}, "img with id and name");
+
+test(function() {
+  assert_equals(c.a, images[4]);
+  assert_equals(c.namedItem("a"), images[4]);
+  assert_true("a" in c, '"a" in c');
+}, "Two img elements with the same id");
+
+test(function() {
+  assert_equals(c.b, images[6]);
+  assert_equals(c.namedItem("b"), images[6]);
+  assert_true("b" in c, '"b" in c');
+}, "Two img elements with the same name");
+
+test(function() {
+  assert_equals(c.c, undefined);
+  assert_equals(c.namedItem("c"), null);
+  assert_false("c" in c, '"c" in c');
+}, "Unknown name should not be in the collection");
+
+test(function() {
+  assert_equals(c.f, undefined);
+  assert_equals(c.namedItem("f"), null);
+  assert_false("f" in c, '"f" in c');
+}, "Foreign element should not be in the collection");
+
+test(function() {
+  assert_equals(c.input, undefined);
+  assert_equals(c.namedItem("input"), null);
+  assert_false("input" in c, '"input" in c');
+  var input = div.getElementsByTagName("input")[0];
+  assert_all(function (aElement) {
+    assert_not_equals(aElement.namespaceURI, input);
+  }, c);
+}, "Input elements should not be in the collection");
+
+test(function() {
+  assert_equals(c[""], undefined);
+  assert_equals(c.namedItem(""), null);
+  assert_false("" in c, '"" in c');
+}, "The empty string should not be in the collections");
+</script>
diff --git a/dom/imptests/html/html/dom/documents/dta/test_document.title-07.html b/dom/imptests/html/html/dom/documents/dta/test_document.title-07.html
--- a/dom/imptests/html/html/dom/documents/dta/test_document.title-07.html
+++ b/dom/imptests/html/html/dom/documents/dta/test_document.title-07.html
@@ -7,15 +7,20 @@
 function checkDoc(title, expectedtitle, normalizedtitle) {
   test(function() {
     var doc = document.implementation.createHTMLDocument(title);
     assert_equals(doc.title, normalizedtitle)
   })
 }
 checkDoc("", "", "")
 checkDoc(null, "null", "null")
-checkDoc(undefined, "undefined", "undefined")
+checkDoc(undefined, "", "")
 checkDoc("foo  bar baz", "foo  bar baz", "foo bar baz")
 checkDoc("foo\t\tbar baz", "foo\t\tbar baz", "foo bar baz")
 checkDoc("foo\n\nbar baz", "foo\n\nbar baz", "foo bar baz")
 checkDoc("foo\f\fbar baz", "foo\f\fbar baz", "foo bar baz")
 checkDoc("foo\r\rbar baz", "foo\r\rbar baz", "foo bar baz")
+
+test(function() {
+  var doc = document.implementation.createHTMLDocument()
+  assert_equals(doc.title, "")
+}, "Missing title argument");
 </script>
diff --git a/dom/imptests/html/html/editing/the-hidden-attribute/Makefile.in b/dom/imptests/html/html/editing/the-hidden-attribute/Makefile.in
--- a/dom/imptests/html/html/editing/the-hidden-attribute/Makefile.in
+++ b/dom/imptests/html/html/editing/the-hidden-attribute/Makefile.in
@@ -1,11 +1,10 @@
 # THIS FILE IS AUTOGENERATED BY importTestsuite.py - DO NOT EDIT
 
-
 DEPTH := @DEPTH@
 
 topsrcdir := @top_srcdir@
 srcdir := @srcdir@
 VPATH := @srcdir@
 relativesrcdir := @relativesrcdir@
 
 include $(DEPTH)/config/autoconf.mk
diff --git a/dom/imptests/html/microdata/microdata-dom-api/test_001.html b/dom/imptests/html/microdata/microdata-dom-api/test_001.html
--- a/dom/imptests/html/microdata/microdata-dom-api/test_001.html
+++ b/dom/imptests/html/microdata/microdata-dom-api/test_001.html
@@ -382,33 +382,38 @@ test(function () {
 test(function () {
         var elem = makeEl('div',{itemtype:'token1 token2 token3'});
         elem.itemType.remove('token2');
         assert_equals( elem.itemType.toString(), 'token1 token3' );
 }, 'itemType.remove must collapse whitespace around removed tokens');
 test(function () {
         var elem = makeEl('div',{itemtype:' token1 token2  '});
         elem.itemType.remove('token2');
-        assert_equals( elem.itemType.toString(), ' token1' );
-}, 'itemType.remove must only remove whitespace around removed tokens');
+        assert_equals( elem.itemType.toString(), 'token1' );
+}, 'itemType.remove must remove all useless whitespace');
+test(function () {
+        var elem = makeEl('div',{itemtype:'  token1  token2  token3  '});
+        elem.itemType.remove('token2');
+        assert_equals( elem.itemType.toString(), 'token1 token3' );
+}, 'itemType.remove must collapse multiple whitespace around removed tokens');
 test(function () {
         var elem = makeEl('div',{itemtype:'  token1  token2  token1  '});
         elem.itemType.remove('token2');
-        assert_equals( elem.itemType.toString(), '  token1 token1  ' );
-}, 'itemType.remove must collapse multiple whitespace around removed tokens');
-test(function () {
-        var elem = makeEl('div',{itemtype:'  token1  token2  token1  '});
-        elem.itemType.remove('token1');
+        assert_equals( elem.itemType.toString(), 'token1' );
+}, 'itemType.remove must remove duplicates when removing tokens');
+test(function () {
+        var elem = makeEl('div',{itemtype:'  token1  token2  token3  '});
+        elem.itemType.remove('token1', 'token3');
         assert_equals( elem.itemType.toString(), 'token2' );
 }, 'itemType.remove must collapse whitespace when removing multiple tokens');
 test(function () {
-        var elem = makeEl('div',{itemtype:'  token1  token1  '});
+        var elem = makeEl('div',{itemtype:'  token1  token2  '});
         elem.itemType.add('token1');
-        assert_equals( elem.itemType.toString(), '  token1  token1  ' );
-}, 'itemType.add must not affect whitespace when the token already exists');
+        assert_equals( elem.itemType.toString(), 'token1 token2' );
+}, 'itemType.add must remove unused whitespace when the token already exists');
 test(function () {
         var elem = makeEl('div',{itemtype:'FOO'});
         assert_true(elem.itemType.toggle('foo'));
         assert_equals( elem.itemType.length, 2 );
         assert_true( elem.itemType.contains('foo') );
         assert_true( elem.itemType.contains('FOO') );
 }, 'itemType.toggle must toggle tokens case-sensitively when adding');
 test(function () {
@@ -451,33 +456,33 @@ test(function () {
 test(function () {
         var elem = makeEl('div',{itemtype:'a '});
         elem.itemType.add('b');
         assert_equals(elem.itemType.toString(),'a b');
 }, 'itemType.add should treat " " as a space');
 test(function () {
         var elem = makeEl('div',{itemtype:'a\t'});
         elem.itemType.add('b');
-        assert_equals(elem.itemType.toString(),'a\tb');
-}, 'itemType.add should treat \\t as a space');
+        assert_equals(elem.itemType.toString(),'a b');
+}, 'itemType.add should normalize \\t as a space');
 test(function () {
         var elem = makeEl('div',{itemtype:'a\r'});
         elem.itemType.add('b');
-        assert_equals(elem.itemType.toString(),'a\rb');
-}, 'itemType.add should treat \\r as a space');
+        assert_equals(elem.itemType.toString(),'a b');
+}, 'itemType.add should normalize \\r as a space');
 test(function () {
         var elem = makeEl('div',{itemtype:'a\n'});
         elem.itemType.add('b');
-        assert_equals(elem.itemType.toString(),'a\nb');
-}, 'itemType.add should treat \\n as a space');
+        assert_equals(elem.itemType.toString(),'a b');
+}, 'itemType.add should normalize \\n as a space');
 test(function () {
         var elem = makeEl('div',{itemtype:'a\f'});
         elem.itemType.add('b');
-        assert_equals(elem.itemType.toString(),'a\fb');
-}, 'itemType.add should treat \\f as a space');
+        assert_equals(elem.itemType.toString(),'a b');
+}, 'itemType.add should normalize \\f as a space');
 test(function () {
         var elem = makeEl('div',{itemtype:'foo'});
         elem.itemType.remove('foo');
         elem.removeAttribute('itemtype');
         assert_true( elem.itemType.toggle('foo') );
 }, 'itemType.toggle must work after removing the itemtype attribute');
 test(function () {
         //WebIDL and ECMAScript 5 - a readonly property has a getter but not a setter
@@ -670,35 +675,30 @@ test(function () {
 	assert_false( elem.itemProp.contains('test') );
 }, 'itemProp.remove must remove duplicated tokens');
 test(function () {
 	var elem = makeEl('div',{itemprop:'token1 token2 token3'});
 	elem.itemProp.remove('token2');
 	assert_equals( elem.itemProp.toString(), 'token1 token3' );
 }, 'itemProp.remove must collapse whitespace around removed tokens');
 test(function () {
-	var elem = makeEl('div',{itemprop:' token1 token2  '});
+	var elem = makeEl('div',{itemprop:'  token1  token2  token3  '});
 	elem.itemProp.remove('token2');
-	assert_equals( elem.itemProp.toString(), ' token1' );
-}, 'itemProp.remove must only remove whitespace around removed tokens');
-test(function () {
-	var elem = makeEl('div',{itemprop:'  token1  token2  token1  '});
-	elem.itemProp.remove('token2');
-	assert_equals( elem.itemProp.toString(), '  token1 token1  ' );
-}, 'itemProp.remove must collapse multiple whitespace around removed tokens');
-test(function () {
-	var elem = makeEl('div',{itemprop:'  token1  token2  token1  '});
-	elem.itemProp.remove('token1');
+	assert_equals( elem.itemProp.toString(), 'token1 token3' );
+}, 'itemProp.remove must remove all useless whitespace');
+test(function () {
+	var elem = makeEl('div',{itemprop:'  token1  token2  token3  '});
+	elem.itemProp.remove('token1', 'token3');
 	assert_equals( elem.itemProp.toString(), 'token2' );
-}, 'itemProp.remove must collapse whitespace when removing multiple tokens');
+}, 'itemProp.remove must remove useless whitespace when removing multiple tokens');
 test(function () {
 	var elem = makeEl('div',{itemprop:'  token1  token1  '});
 	elem.itemProp.add('token1');
-	assert_equals( elem.itemProp.toString(), '  token1  token1  ' );
-}, 'itemProp.add must not affect whitespace when the token already exists');
+	assert_equals( elem.itemProp.toString(), 'token1' );
+}, 'itemProp.add must remove useless whitespace and duplicates when the token already exists');
 test(function () {
 	var elem = makeEl('div',{itemprop:'FOO'});
 	assert_true(elem.itemProp.toggle('foo'));
 	assert_equals( elem.itemProp.length, 2 );
 	assert_true( elem.itemProp.contains('foo') );
 	assert_true( elem.itemProp.contains('FOO') );
 }, 'itemProp.toggle must toggle tokens case-sensitively when adding');
 test(function () {
@@ -741,33 +741,33 @@ test(function () {
 test(function () {
 	var elem = makeEl('div',{itemprop:'a '});
 	elem.itemProp.add('b');
 	assert_equals(elem.itemProp.toString(),'a b');
 }, 'itemProp.add should treat " " as a space');
 test(function () {
 	var elem = makeEl('div',{itemprop:'a\t'});
 	elem.itemProp.add('b');
-	assert_equals(elem.itemProp.toString(),'a\tb');
-}, 'itemProp.add should treat \\t as a space');
+	assert_equals(elem.itemProp.toString(),'a b');
+}, 'itemProp.add should normalize \\t as a space');
 test(function () {
 	var elem = makeEl('div',{itemprop:'a\r'});
 	elem.itemProp.add('b');
-	assert_equals(elem.itemProp.toString(),'a\rb');
-}, 'itemProp.add should treat \\r as a space');
+	assert_equals(elem.itemProp.toString(),'a b');
+}, 'itemProp.add should normalize \\r as a space');
 test(function () {
 	var elem = makeEl('div',{itemprop:'a\n'});
 	elem.itemProp.add('b');
-	assert_equals(elem.itemProp.toString(),'a\nb');
-}, 'itemProp.add should treat \\n as a space');
+	assert_equals(elem.itemProp.toString(),'a b');
+}, 'itemProp.add should normalize \\n as a space');
 test(function () {
 	var elem = makeEl('div',{itemprop:'a\f'});
 	elem.itemProp.add('b');
-	assert_equals(elem.itemProp.toString(),'a\fb');
-}, 'itemProp.add should treat \\f as a space');
+	assert_equals(elem.itemProp.toString(),'a b');
+}, 'itemProp.add should normalize \\f as a space');
 test(function () {
 	var elem = makeEl('div',{itemprop:'foo'});
 	elem.itemProp.remove('foo');
 	elem.removeAttribute('itemprop');
 	assert_true( elem.itemProp.toggle('foo') );
 }, 'itemProp.toggle must work after removing the itemprop attribute');
 test(function () {
 	//WebIDL and ECMAScript 5 - a readonly property has a getter but not a setter
@@ -1004,33 +1004,33 @@ test(function () {
 test(function () {
 	var elem = makeEl('div',{itemref:'token1 token2 token3'});
 	elem.itemRef.remove('token2');
 	assert_equals( elem.itemRef.toString(), 'token1 token3' );
 }, 'itemRef.remove must collapse whitespace around removed tokens');
 test(function () {
 	var elem = makeEl('div',{itemref:' token1 token2  '});
 	elem.itemRef.remove('token2');
-	assert_equals( elem.itemRef.toString(), ' token1' );
-}, 'itemRef.remove must only remove whitespace around removed tokens');
-test(function () {
-	var elem = makeEl('div',{itemref:'  token1  token2  token1  '});
+	assert_equals( elem.itemRef.toString(), 'token1' );
+}, 'itemRef.remove must remove useless whitespace when removing tokens');
+test(function () {
+	var elem = makeEl('div',{itemref:'  token1  token2  token3  '});
 	elem.itemRef.remove('token2');
-	assert_equals( elem.itemRef.toString(), '  token1 token1  ' );
-}, 'itemRef.remove must collapse multiple whitespace around removed tokens');
-test(function () {
-	var elem = makeEl('div',{itemref:'  token1  token2  token1  '});
-	elem.itemRef.remove('token1');
+	assert_equals( elem.itemRef.toString(), 'token1 token3' );
+}, 'itemRef.remove must remove useless whitespace when removing tokens');
+test(function () {
+	var elem = makeEl('div',{itemref:'  token1  token2  token3  '});
+	elem.itemRef.remove('token1', 'token3');
 	assert_equals( elem.itemRef.toString(), 'token2' );
 }, 'itemRef.remove must collapse whitespace when removing multiple tokens');
 test(function () {
 	var elem = makeEl('div',{itemref:'  token1  token1  '});
 	elem.itemRef.add('token1');
-	assert_equals( elem.itemRef.toString(), '  token1  token1  ' );
-}, 'itemRef.add must not affect whitespace when the token already exists');
+	assert_equals( elem.itemRef.toString(), 'token1' );
+}, 'itemRef.add must remove whitespace and duplicate when the token already exists');
 test(function () {
 	var elem = makeEl('div',{itemref:'FOO'});
 	assert_true(elem.itemRef.toggle('foo'));
 	assert_equals( elem.itemRef.length, 2 );
 	assert_true( elem.itemRef.contains('foo') );
 	assert_true( elem.itemRef.contains('FOO') );
 }, 'itemRef.toggle must toggle tokens case-sensitively when adding');
 test(function () {
@@ -1073,33 +1073,33 @@ test(function () {
 test(function () {
 	var elem = makeEl('div',{itemref:'a '});
 	elem.itemRef.add('b');
 	assert_equals(elem.itemRef.toString(),'a b');
 }, 'itemRef.add should treat " " as a space');
 test(function () {
 	var elem = makeEl('div',{itemref:'a\t'});
 	elem.itemRef.add('b');
-	assert_equals(elem.itemRef.toString(),'a\tb');
-}, 'itemRef.add should treat \\t as a space');
+	assert_equals(elem.itemRef.toString(),'a b');
+}, 'itemRef.add should normalize \\t as a space');
 test(function () {
 	var elem = makeEl('div',{itemref:'a\r'});
 	elem.itemRef.add('b');
-	assert_equals(elem.itemRef.toString(),'a\rb');
-}, 'itemRef.add should treat \\r as a space');
+	assert_equals(elem.itemRef.toString(),'a b');
+}, 'itemRef.add should normalize \\r as a space');
 test(function () {
 	var elem = makeEl('div',{itemref:'a\n'});
 	elem.itemRef.add('b');
-	assert_equals(elem.itemRef.toString(),'a\nb');
-}, 'itemRef.add should treat \\n as a space');
+	assert_equals(elem.itemRef.toString(),'a b');
+}, 'itemRef.add should normalize \\n as a space');
 test(function () {
 	var elem = makeEl('div',{itemref:'a\f'});
 	elem.itemRef.add('b');
-	assert_equals(elem.itemRef.toString(),'a\fb');
-}, 'itemRef.add should treat \\f as a space');
+	assert_equals(elem.itemRef.toString(),'a b');
+}, 'itemRef.add should normalize \\f as a space');
 test(function () {
 	var elem = makeEl('div',{itemref:'foo'});
 	elem.itemRef.remove('foo');
 	elem.removeAttribute('itemref');
 	assert_true( elem.itemRef.toggle('foo') );
 }, 'itemRef.toggle must work after removing the itemref attribute');
 test(function () {
 	//WebIDL and ECMAScript 5 - a readonly property has a getter but not a setter
