From: Ms2ger <ms2ger@gmail.com>

diff --git a/dom/bindings/BindingGen.py b/dom/bindings/BindingGen.py
--- a/dom/bindings/BindingGen.py
+++ b/dom/bindings/BindingGen.py
@@ -14,26 +14,25 @@ def generate_binding_header(config, outp
     """
 
     filename = outputprefix + ".h"
     print "Generating binding header: %s" % (filename)
 
     prologue = """"""
     epilogue = """"""
 
-    config.prependIncludes([
+    contents = wrapHeaderGuard(prependIncludes(config.cgRoot, [
         "mozilla/dom/bindings/DOMJSClass.h",
         "mozilla/dom/bindings/Utils.h"
-    ])
-    config.wrapHeaderGuard(outputprefix)
+    ]), outputprefix)
 
     # Write recursively.
     f = open(filename, 'w')
     f.write(prologue)
-    f.write(config.cgRoot.declare())
+    f.write(contents.declare())
     f.write(epilogue)
     f.close()
 
 def generate_binding_cpp(config, outputprefix):
     """
     |config| Is the configuration object.
     |outputprefix| is a prefix to use for the header guards and filename.
     """
@@ -46,22 +45,22 @@ def generate_binding_cpp(config, outputp
         parentInterface = domClass.interface.parent
         if parentInterface:
             parentFileName = os.path.split(parentInterface.filename())[1].replace(".webidl", "");
             includes.append("%sBinding.h" % parentFileName)
 
     prologue = autogenerated_comment
     epilogue = """"""
 
-    config.prependIncludes(includes)
+    contents = prependIncludes(config.cgRoot, includes)
 
     # Write recursively.
     f = open(filename, 'w')
     f.write(prologue)
-    f.write(config.cgRoot.define())
+    f.write(contents.define())
     f.write(epilogue)
     f.close()
 
 def main():
 
     # Parse arguments.
     from optparse import OptionParser
     usagestring = "usage: %prog [header|cpp] configFile outputPrefix webIDLFile"
diff --git a/dom/bindings/Codegen.py b/dom/bindings/Codegen.py
--- a/dom/bindings/Codegen.py
+++ b/dom/bindings/Codegen.py
@@ -412,14 +412,8 @@ class Configuration:
             name = classConf['name']
             if name not in parseData:
                 continue
             self.dom_classes[name] = DOMClass(classConf, parseData[name])
 
         classCollection = [cls for cls in self.dom_classes.values()]
         self.cgRoot = CGNamespace.build(['mozilla', 'dom', 'bindings', 'prototypes'],
                                         CGWrapper(CGList(classCollection), pre="\n"))
-
-    def prependIncludes(self, headers):
-        self.cgRoot = prependIncludes(self.cgRoot, headers)
-
-    def wrapHeaderGuard(self, guard):
-        self.cgRoot = wrapHeaderGuard(self.cgRoot, guard)
