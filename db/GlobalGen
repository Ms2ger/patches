From: Ms2ger <ms2ger@gmail.com>

diff --git a/dom/bindings/BindingGen.py b/dom/bindings/BindingGen.py
--- a/dom/bindings/BindingGen.py
+++ b/dom/bindings/BindingGen.py
@@ -10,67 +10,56 @@ from Codegen import *
 def generate_binding_header(config, outputprefix):
     """
     |config| Is the configuration object.
     |outputprefix| is a prefix to use for the header guards and filename.
     """
 
     filename = outputprefix + ".h"
     print "Generating binding header: %s" % (filename)
-    f = open(filename, 'w')
 
-    prologue = autogenerated_comment + """
-#ifndef mozilla_dom_bindings_%s_h__
-#define mozilla_dom_bindings_%s_h__
+    prologue = """"""
+    epilogue = """"""
 
-#include "mozilla/dom/bindings/DOMJSClass.h"
-#include "mozilla/dom/bindings/Utils.h"
-
-""" % (outputprefix, outputprefix)
-
-    epilogue = """
-
-#endif // mozilla_dom_bindings_%s_h__
-""" % (outputprefix)
+    config.prependIncludes([
+        "mozilla/dom/bindings/DOMJSClass.h",
+        "mozilla/dom/bindings/Utils.h"
+    ])
+    config.wrapHeaderGuard(outputprefix)
 
     # Write recursively.
+    f = open(filename, 'w')
     f.write(prologue)
     f.write(config.cgRoot.declare())
     f.write(epilogue)
     f.close()
 
 def generate_binding_cpp(config, outputprefix):
     """
     |config| Is the configuration object.
     |outputprefix| is a prefix to use for the header guards and filename.
     """
 
     filename = outputprefix + ".cpp"
     print "Generating binding implementation: %s" % (filename)
-    f = open(filename, 'w')
 
-    parentIncludeTemplate = """#include "%sBinding.h"
-"""
-
-    includes = ""
+    includes = [outputprefix + ".h"]
     for domClass in config.dom_classes.values():
         parentInterface = domClass.interface.parent
         if parentInterface:
             parentFileName = os.path.split(parentInterface.filename())[1].replace(".webidl", "");
-            includes += parentIncludeTemplate % parentFileName
+            includes.append("%sBinding.h" % parentFileName)
 
-    prologue = autogenerated_comment + """
-%s
-#include "%s.h"
-
-""" % (includes, outputprefix)
-
+    prologue = autogenerated_comment
     epilogue = """"""
 
+    config.prependIncludes(includes)
+
     # Write recursively.
+    f = open(filename, 'w')
     f.write(prologue)
     f.write(config.cgRoot.define())
     f.write(epilogue)
     f.close()
 
 def main():
 
     # Parse arguments.
diff --git a/dom/bindings/Codegen.py b/dom/bindings/Codegen.py
--- a/dom/bindings/Codegen.py
+++ b/dom/bindings/Codegen.py
@@ -55,16 +55,29 @@ class CGList(CGThing):
         self.children.append(child)
     def prepend(self, child):
         self.children.insert(0, child)
     def declare(self):
         return ''.join([child.declare() for child in self.children])
     def define(self):
         return ''.join([child.define() for child in self.children])
 
+class CGLiteral(CGThing):
+    def __init__(self, literal):
+        CGThing.__init__(self)
+        self.literal = literal
+    def declare(self):
+        return self.literal
+    def define(self):
+        return self.literal
+
+class CGInclude(CGLiteral):
+    def __init__(self, header):
+        CGLiteral.__init__(self, "#include \"%s\"\n" % header)
+
 class CGWrapper(CGThing):
     """
     Generic CGThing that wraps other CGThings with pre and post text.
     """
     def __init__(self, child, pre="", post="",
                  declarePre=None, declarePost=None,
                  definePre=None, definePost=None):
         CGThing.__init__(self)
@@ -87,16 +100,38 @@ class CGNamespace(CGWrapper):
     def build(namespaces, child):
         """
         Static helper method to build multiple wrapped namespaces.
         """
         if not namespaces:
             return child
         return CGNamespace(namespaces[0], CGNamespace.build(namespaces[1:], child))
 
+class CGHeaderGuard(CGWrapper):
+    def __init__(self, guard, child):
+        pre = "\n#ifndef mozilla_dom_bindings_%s_h\n#define mozilla_dom_bindings_%s_h\n" % (guard, guard)
+        post = "\n#endif // mozilla_dom_bindings_%s_h\n" % guard
+        CGWrapper.__init__(self, child, pre=pre, post=post)
+
+class CGEnum(CGThing):
+    def __init__(self, name, elements):
+        CGThing.__init__(self)
+        self.name = name
+        self.elements = elements
+    def declare(self):
+        return ""
+    def define(self):
+        return """enum %s
+{
+  %s
+};
+
+""" % (self.name, ",\n  ".join(self.elements))
+
+
 class Argument():
     def __init__(self, argType, name):
         self.argType = argType
         self.name = name
     def __str__(self):
         return self.argType + ' ' + self.name
 
 class CGAbstractMethod(CGImplThing):
@@ -344,16 +379,28 @@ class DOMClass(CGThing):
         self.implementations = [DOMClassImplementation(self, implConf)
                                 for implConf in classConf['implementations']]
         self.cgRoot = CGList(self.implementations)
     def declare(self):
         return self.cgRoot.declare()
     def define(self):
         return self.cgRoot.define()
 
+def prependIncludes(root, headers):
+    contents = [CGInclude(header) for header in headers]
+    contents.append(CGLiteral("\n"))
+    contents.append(root)
+    return CGList(contents)
+
+def wrapHeaderGuard(root, guard):
+    return CGList([
+        CGLiteral(autogenerated_comment),
+        CGHeaderGuard(guard, CGList([CGLiteral("\n"), root]))
+    ])
+
 class Configuration:
     def __init__(self, filename, parseData):
         self.configFile = {}
         execfile(filename, self.configFile)
 
         # We need dom_classes.
         if 'dom_classes' not in self.configFile:
             raise UserError(filename + ": `dom_classes` was not defined.")
@@ -365,8 +412,14 @@ class Configuration:
             name = classConf['name']
             if name not in parseData:
                 continue
             self.dom_classes[name] = DOMClass(classConf, parseData[name])
 
         classCollection = [cls for cls in self.dom_classes.values()]
         self.cgRoot = CGNamespace.build(['mozilla', 'dom', 'bindings', 'prototypes'],
                                         CGWrapper(CGList(classCollection), pre="\n"))
+
+    def prependIncludes(self, headers):
+        self.cgRoot = prependIncludes(self.cgRoot, headers)
+
+    def wrapHeaderGuard(self, guard):
+        self.cgRoot = wrapHeaderGuard(self.cgRoot, guard)
diff --git a/dom/bindings/GlobalGen.py b/dom/bindings/GlobalGen.py
--- a/dom/bindings/GlobalGen.py
+++ b/dom/bindings/GlobalGen.py
@@ -4,104 +4,79 @@
 
 # We do one global pass over all the WebIDL to generate our prototype enum
 # and generate information for subsequent phases.
 
 import os
 import cStringIO
 import WebIDL
 import cPickle
-from Codegen import Configuration, DOMClass, DOMClassImplementation, autogenerated_comment
+from Codegen import *
 
 def generate_prototype_list(config, filename):
 
     # Read a copy of the old file, so that we don't touch it if it hasn't changed.
     oldFileContents = ""
     try:
         oldFile = open(filename, 'r')
         oldFileContents = ''.join(oldFile.readlines())
         oldFile.close()
     except:
         pass
 
-    prologue = autogenerated_comment + """
-#ifndef mozilla_dom_bindings_PrototypeList_h
-#define mozilla_dom_bindings_PrototypeList_h
+    prologue = """"""
 
-namespace mozilla {
-namespace dom {
-namespace bindings {
-namespace prototypes {
-namespace id {
-
-enum ID
-{
-"""
-
-    middle = """
-};
-
-} // namespace id
-
-namespace depth {
-
-/* The depths at which we expect the above IDs in inheritance chains;
-   0 means there is no superclass */
-enum Depth
-{
-"""
-    
-    epilogue = """
-};
-
-} // namespace depth
-
-typedef id::ID ID;
-typedef depth::Depth Depth;
-
-} // namespace prototypes
-} // namespace bindings
-} // namespace dom
-} // namespace mozilla
-
-#endif // mozilla_dom_bindings_PrototypeList_h
-"""
+    epilogue = """"""
 
     protoList = []
 
     domClasses = config.dom_classes.values()
     # Sort the class list so that it doesn't change from run to run
     domClasses.sort()
     for domClass in domClasses:
         for implementation in domClass.implementations:
             protoList.append(implementation.name)
 
     # Append the enum count.
     protoList.append('Count')
 
-    # Add appropriate indentation before the prototype strings.
-    protoList = ["  " + p for p in protoList]
-
     # Start the enum at 0
     protoList[0] = protoList[0] + " = 0"
 
+    protoEnum = CGNamespace("id", CGEnum("ID", protoList))
+
     indexList = []
     for domClass in domClasses:
         for implementation in domClass.implementations:
             index = 0
             interface = domClass.interface
             while interface.parent:
                 interface = interface.parent
                 index = index + 1
             indexList.append(implementation.name + " = " + str(index));
     indexList.append('IndexCount');
-    indexList = ["  " + i for i in indexList]
 
-    newFileContents = (prologue + ',\n'.join(protoList) + middle +
-                       ',\n'.join(indexList) + epilogue)
+    depthComment = """
+/* The depths at which we expect the above IDs in inheritance chains;
+   0 means there is no superclass */
+"""
+
+    indexEnum = CGNamespace("depth", CGList([CGLiteral(depthComment), CGEnum("Depth", indexList)]))
+
+    typedefs = CGLiteral("""
+typedef id::ID ID;
+typedef depth::Depth Depth;
+
+""")
+
+    newFileContents = wrapHeaderGuard(
+      CGNamespace.build(['mozilla', 'dom', 'bindings', 'prototypes'],
+                        CGList([protoEnum, CGLiteral("\n"), indexEnum, typedefs])),
+      "PrototypeList"
+    ).define()
 
     if newFileContents == oldFileContents:
         print "Prototype list hasn't changed - not touching %s" % (filename)
         return
 
     print "Generating prototype list: %s" % (filename)
     f = open(filename, 'w')
     f.write(newFileContents)
