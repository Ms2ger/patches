From: Ms2ger <ms2ger@gmail.com>

diff --git a/toolkit/components/url-classifier/nsUrlClassifierUtils.cpp b/toolkit/components/url-classifier/nsUrlClassifierUtils.cpp
--- a/toolkit/components/url-classifier/nsUrlClassifierUtils.cpp
+++ b/toolkit/components/url-classifier/nsUrlClassifierUtils.cpp
@@ -36,17 +36,16 @@
 
 #include "nsEscape.h"
 #include "nsString.h"
 #include "nsIURI.h"
 #include "nsNetUtil.h"
 #include "nsUrlClassifierUtils.h"
 #include "nsTArray.h"
 #include "nsReadableUtils.h"
-#include "plbase64.h"
 #include "prmem.h"
 #include "prprf.h"
 
 static char int_to_hex_digit(int32_t i)
 {
   NS_ASSERTION((i >= 0) && (i <= 15), "int too big in int_to_hex_digit");
   return static_cast<char>(((i < 10) ? (i + '0') : ((i - 10) + 'A')));
 }
@@ -390,59 +389,8 @@ nsUrlClassifierUtils::SpecialEncode(cons
   return changed;
 }
 
 bool
 nsUrlClassifierUtils::ShouldURLEscape(const unsigned char c) const
 {
   return c <= 32 || c == '%' || c >=127;
 }
-
-/* static */
-void
-nsUrlClassifierUtils::UnUrlsafeBase64(nsACString &str)
-{
-  nsACString::iterator iter, end;
-  str.BeginWriting(iter);
-  str.EndWriting(end);
-  while (iter != end) {
-    if (*iter == '-') {
-      *iter = '+';
-    } else if (*iter == '_') {
-      *iter = '/';
-    }
-    iter++;
-  }
-}
-
-/* static */
-nsresult
-nsUrlClassifierUtils::DecodeClientKey(const nsACString &key,
-                                      nsACString &_retval)
-{
-  // Client key is sent in urlsafe base64, we need to decode it first.
-  nsCAutoString base64(key);
-  UnUrlsafeBase64(base64);
-
-  // PL_Base64Decode doesn't null-terminate unless we let it allocate,
-  // so we need to calculate the length ourselves.
-  uint32_t destLength;
-  destLength = base64.Length();
-  if (destLength > 0 && base64[destLength - 1] == '=') {
-    if (destLength > 1 && base64[destLength - 2] == '=') {
-      destLength -= 2;
-    } else {
-      destLength -= 1;
-    }
-  }
-
-  destLength = ((destLength * 3) / 4);
-  _retval.SetLength(destLength);
-  if (destLength != _retval.Length())
-    return NS_ERROR_OUT_OF_MEMORY;
-
-  if (!PL_Base64Decode(base64.BeginReading(), base64.Length(),
-                       _retval.BeginWriting())) {
-    return NS_ERROR_FAILURE;
-  }
-
-  return NS_OK;
-}
diff --git a/toolkit/components/url-classifier/nsUrlClassifierUtils.h b/toolkit/components/url-classifier/nsUrlClassifierUtils.h
--- a/toolkit/components/url-classifier/nsUrlClassifierUtils.h
+++ b/toolkit/components/url-classifier/nsUrlClassifierUtils.h
@@ -37,16 +37,18 @@
 #ifndef nsUrlClassifierUtils_h_
 #define nsUrlClassifierUtils_h_
 
 #include "nsAutoPtr.h"
 #include "nsIUrlClassifierUtils.h"
 #include "nsTArray.h"
 #include "nsDataHashtable.h"
 
+#include "mozilla/Base64.h"
+
 class nsUrlClassifierUtils : public nsIUrlClassifierUtils
 {
 private:
   /**
    * A fast, bit-vector map for ascii characters.
    *
    * Internally stores 256 bits in an array of 8 ints.
    * Does quick bit-flicking to lookup needed characters.
@@ -105,18 +107,23 @@ public:
                     nsACString & _retval);
 
   // Convert an urlsafe base64 string to a normal base64 string.
   // This method will leave an already-normal base64 string alone.
   static void UnUrlsafeBase64(nsACString & str);
 
   // Takes an urlsafe-base64 encoded client key and gives back binary
   // key data
-  static nsresult DecodeClientKey(const nsACString & clientKey,
-                                  nsACString & _retval);
+  static nsresult DecodeClientKey(const nsACString& Base64urlEncode,
+                                  nsACString& _retval)
+  {
+    // Client key is sent in urlsafe base64, we need to decode it first.
+    return mozilla::Base64URLDecode(Base64urlEncode, _retval);
+  }
+
 private:
   // Disallow copy constructor
   nsUrlClassifierUtils(const nsUrlClassifierUtils&);
 
   // Function to tell if we should encode a character.
   bool ShouldURLEscape(const unsigned char c) const;
 
   void CleanupHostname(const nsACString & host, nsACString & _retval);
diff --git a/xpcom/io/Base64.cpp b/xpcom/io/Base64.cpp
--- a/xpcom/io/Base64.cpp
+++ b/xpcom/io/Base64.cpp
@@ -356,16 +356,40 @@ Base64Decode(const nsAString &aBinaryDat
     CopyASCIItoUTF16(string, aString);
   } else {
     aString.Truncate();
   }
 
   return rv;
 }
 
+static void
+UnUrlsafeBase64(nsACString& str)
+{
+  char* iter = str.BeginWriting();
+  char* end = str.EndWriting();
+  while (iter != end) {
+    if (*iter == '-') {
+      *iter = '+';
+    } else if (*iter == '_') {
+      *iter = '/';
+    }
+    iter++;
+  }
+}
+
+nsresult
+Base64URLDecode(const nsACString& aBinaryData, nsACString& aString)
+{
+  nsCAutoString base64(key);
+  UnUrlsafeBase64(base64);
+
+  return Base64Decode(base64, aString);
+}
+
 static bool
 Is8bit(const nsAString& aString)
 {
   static const PRUnichar EIGHT_BIT = PRUnichar(~0x00FF);
 
   nsAString::const_iterator done_reading;
   aString.EndReading(done_reading);
 
diff --git a/xpcom/io/Base64.h b/xpcom/io/Base64.h
--- a/xpcom/io/Base64.h
+++ b/xpcom/io/Base64.h
@@ -66,11 +66,14 @@ nsresult
 Base64Decode(const nsAString &aBinaryData, nsAString &aString);
 
 // These functions implement <http://www.whatwg.org/html/#atob>.
 nsresult
 Btoa(const nsAString& aBinaryData, nsAString& aAsciiBase64String);
 nsresult
 Atob(const nsAString& aAsciiString, nsAString& aBinaryData);
 
+nsresult
+Base64URLDecode(const nsACString& aBinaryData, nsACString& aString);
+
 } // namespace mozilla
 
 #endif
