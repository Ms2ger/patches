From: Ms2ger <ms2ger@gmail.com>

diff --git a/dom/workers/EventListenerManager.cpp b/dom/workers/EventListenerManager.cpp
--- a/dom/workers/EventListenerManager.cpp
+++ b/dom/workers/EventListenerManager.cpp
@@ -282,17 +282,18 @@ EventListenerManager::GetEventListener(c
     }
   }
 
   return NULL;
 }
 
 bool
 EventListenerManager::DispatchEvent(JSContext* aCx, const EventTarget& aTarget,
-                                    JSObject* aEvent, ErrorResult& aRv) const
+                                    JS::Handle<JSObject*> aEvent,
+                                    ErrorResult& aRv) const
 {
   using namespace mozilla::dom::workers::events;
 
   if (!IsSupportedEventClass(aEvent)) {
     aRv.Throw(NS_ERROR_FAILURE);
     return false;
   }
 
diff --git a/dom/workers/EventListenerManager.h b/dom/workers/EventListenerManager.h
--- a/dom/workers/EventListenerManager.h
+++ b/dom/workers/EventListenerManager.h
@@ -73,18 +73,18 @@ public:
   {
     if (mCollections.isEmpty()) {
       return;
     }
     Remove(aCx, aType, aListener, aCapturing ? Capturing : Bubbling, true);
   }
 
   bool
-  DispatchEvent(JSContext* aCx, const EventTarget& aTarget, JSObject* aEvent,
-                ErrorResult& aRv) const;
+  DispatchEvent(JSContext* aCx, const EventTarget& aTarget,
+                JS::Handle<JSObject*> aEvent, ErrorResult& aRv) const;
 
   JSObject*
   GetEventListener(const jsid& aType) const;
 
   void
   SetEventListener(JSContext* aCx, const jsid& aType, JSObject* aListener,
                    ErrorResult& aRv)
   {
