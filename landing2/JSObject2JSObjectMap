From: Ms2ger <ms2ger@gmail.com>

diff --git a/dom/base/nsGlobalWindow.cpp b/dom/base/nsGlobalWindow.cpp
--- a/dom/base/nsGlobalWindow.cpp
+++ b/dom/base/nsGlobalWindow.cpp
@@ -197,16 +197,17 @@
 #include "nsICookiePermission.h"
 #ifdef MOZ_XUL
 #include "nsXULPopupManager.h"
 #include "nsIDOMXULControlElement.h"
 #include "nsMenuPopupFrame.h"
 #endif
 
 #include "xpcprivate.h"
+#include "JSObject2JSObjectMap.h"
 
 #ifdef NS_PRINTING
 #include "nsIPrintSettings.h"
 #include "nsIPrintSettingsService.h"
 #include "nsIWebBrowserPrint.h"
 #endif
 
 #include "nsWindowRoot.h"
diff --git a/js/xpconnect/src/JSObject2JSObjectMap.h b/js/xpconnect/src/JSObject2JSObjectMap.h
new file mode 100644
--- /dev/null
+++ b/js/xpconnect/src/JSObject2JSObjectMap.h
@@ -0,0 +1,119 @@
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is __________________________________________.
+ *
+ * The Initial Developer of the Original Code is
+ * ____________________________________________.
+ * Portions created by the Initial Developer are Copyright (C) 2___
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#ifndef JSObject2JSObjectMap_h
+#define JSObject2JSObjectMap_h
+
+#include "jspubtd.h"
+#include "jsdhash.h"
+
+class JSObject2JSObjectMap
+{
+    static struct JSDHashTableOps sOps;
+
+public:
+    struct Entry : public JSDHashEntryHdr
+    {
+        JSObject* key;
+        JSObject* value;
+    };
+
+    static JSObject2JSObjectMap* newMap(int size)
+    {
+        JSObject2JSObjectMap* map = new JSObject2JSObjectMap(size);
+        if (map && map->mTable)
+            return map;
+        delete map;
+        return nsnull;
+    }
+
+    inline JSObject* Find(JSObject* key)
+    {
+        NS_PRECONDITION(key, "bad param");
+        Entry* entry = (Entry*)
+            JS_DHashTableOperate(mTable, key, JS_DHASH_LOOKUP);
+        if (JS_DHASH_ENTRY_IS_FREE(entry))
+            return nsnull;
+        return entry->value;
+    }
+
+    // Note: If the entry already exists, return the old value.
+    inline JSObject* Add(JSObject *key, JSObject *value)
+    {
+        NS_PRECONDITION(key,"bad param");
+        Entry* entry = (Entry*)
+            JS_DHashTableOperate(mTable, key, JS_DHASH_ADD);
+        if (!entry)
+            return nsnull;
+        if (entry->key)
+            return entry->value;
+        entry->key = key;
+        entry->value = value;
+        return value;
+    }
+
+    inline void Remove(JSObject* key)
+    {
+        NS_PRECONDITION(key,"bad param");
+        JS_DHashTableOperate(mTable, key, JS_DHASH_REMOVE);
+    }
+
+    inline uint32 Count() {return mTable->entryCount;}
+
+    inline uint32 Enumerate(JSDHashEnumerator f, void *arg)
+    {
+        return JS_DHashTableEnumerate(mTable, f, arg);
+    }
+
+    ~JSObject2JSObjectMap()
+    {
+        if (mTable)
+            JS_DHashTableDestroy(mTable);
+    }
+
+private:
+    JSObject2JSObjectMap(int size)
+    {
+        mTable = JS_NewDHashTable(&sOps, nsnull, sizeof(Entry), size);
+    }
+
+    JSObject2JSObjectMap(); // no implementation
+
+private:
+    JSDHashTable *mTable;
+};
+
+#endif // JSObject2JSObjectMap_h
diff --git a/js/xpconnect/src/Makefile.in b/js/xpconnect/src/Makefile.in
--- a/js/xpconnect/src/Makefile.in
+++ b/js/xpconnect/src/Makefile.in
@@ -45,18 +45,20 @@ VPATH		= @srcdir@
 include $(DEPTH)/config/autoconf.mk
 
 MODULE		= xpconnect
 
 LIBRARY_NAME    = xpconnect_s
 FORCE_STATIC_LIB = 1
 LIBXUL_LIBRARY = 1
 EXPORTS = \
-		xpcpublic.h \
-		dombindings_gen.h
+  xpcpublic.h \
+  dombindings_gen.h \
+  JSObject2JSObjectMap.h \
+  $(NULL)
 
 EXPORTS_NAMESPACES = mozilla/xpc
 EXPORTS_mozilla/xpc = \
   Base64.h \
   PtrAndPrincipalHashKey.h \
   QuickStubs.h \
   $(NULL)
 
diff --git a/js/xpconnect/src/XPCMaps.h b/js/xpconnect/src/XPCMaps.h
--- a/js/xpconnect/src/XPCMaps.h
+++ b/js/xpconnect/src/XPCMaps.h
@@ -1,11 +1,10 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * ***** BEGIN LICENSE BLOCK *****
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/* ***** BEGIN LICENSE BLOCK *****
  * Version: MPL 1.1/GPL 2.0/LGPL 2.1
  *
  * The contents of this file are subject to the Mozilla Public License Version
  * 1.1 (the "License"); you may not use this file except in compliance with
  * the License. You may obtain a copy of the License at
  * http://www.mozilla.org/MPL/
  *
  * Software distributed under the License is distributed on an "AS IS" basis,
@@ -708,85 +707,11 @@ public:
 private:
     WrappedNative2WrapperMap();    // no implementation
     WrappedNative2WrapperMap(int size);
 
 private:
     JSDHashTable *mTable;
 };
 
-class JSObject2JSObjectMap
-{
-    static struct JSDHashTableOps sOps;
-
-public:
-    struct Entry : public JSDHashEntryHdr
-    {
-        JSObject* key;
-        JSObject* value;
-    };
-
-    static JSObject2JSObjectMap* newMap(int size)
-    {
-        JSObject2JSObjectMap* map = new JSObject2JSObjectMap(size);
-        if (map && map->mTable)
-            return map;
-        delete map;
-        return nsnull;
-    }
-
-    inline JSObject* Find(JSObject* key)
-    {
-        NS_PRECONDITION(key, "bad param");
-        Entry* entry = (Entry*)
-            JS_DHashTableOperate(mTable, key, JS_DHASH_LOOKUP);
-        if (JS_DHASH_ENTRY_IS_FREE(entry))
-            return nsnull;
-        return entry->value;
-    }
-
-    // Note: If the entry already exists, return the old value.
-    inline JSObject* Add(JSObject *key, JSObject *value)
-    {
-        NS_PRECONDITION(key,"bad param");
-        Entry* entry = (Entry*)
-            JS_DHashTableOperate(mTable, key, JS_DHASH_ADD);
-        if (!entry)
-            return nsnull;
-        if (entry->key)
-            return entry->value;
-        entry->key = key;
-        entry->value = value;
-        return value;
-    }
-
-    inline void Remove(JSObject* key)
-    {
-        NS_PRECONDITION(key,"bad param");
-        JS_DHashTableOperate(mTable, key, JS_DHASH_REMOVE);
-    }
-
-    inline uint32 Count() {return mTable->entryCount;}
-
-    inline uint32 Enumerate(JSDHashEnumerator f, void *arg)
-    {
-        return JS_DHashTableEnumerate(mTable, f, arg);
-    }
-
-    ~JSObject2JSObjectMap()
-    {
-        if (mTable)
-            JS_DHashTableDestroy(mTable);
-    }
-
-private:
-    JSObject2JSObjectMap(int size)
-    {
-        mTable = JS_NewDHashTable(&sOps, nsnull, sizeof(Entry), size);
-    }
-
-    JSObject2JSObjectMap(); // no implementation
-
-private:
-    JSDHashTable *mTable;
-};
+#include "JSObject2JSObjectMap.h"
 
 #endif /* xpcmaps_h___ */
