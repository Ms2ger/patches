From: Ms2ger <ms2ger@gmail.com>

diff --git a/js/xpconnect/src/nsXPConnect.cpp b/js/xpconnect/src/nsXPConnect.cpp
--- a/js/xpconnect/src/nsXPConnect.cpp
+++ b/js/xpconnect/src/nsXPConnect.cpp
@@ -2593,54 +2593,56 @@ namespace xpc {
 
 bool
 Base64Encode(JSContext *cx, JS::Value val, JS::Value *out)
 {
     MOZ_ASSERT(cx);
     MOZ_ASSERT(out);
 
     JS::Value root = val;
-    xpc_qsACString encodedString(cx, root, &root, xpc_qsACString::eNull,
-                                 xpc_qsACString::eStringify);
+    xpc_qsDOMString encodedString(cx, root, &root, xpc_qsDOMString::eNull,
+                                  xpc_qsDOMString::eStringify);
     if (!encodedString.IsValid())
         return false;
 
-    nsCAutoString result;
-    if (NS_FAILED(mozilla::Base64Encode(encodedString, result))) {
-        JS_ReportError(cx, "Failed to encode base64 data!");
+    nsAutoString result;
+    nsresult rv = mozilla::Base64Encode(encodedString, result);
+    if (NS_FAILED(rv)) {
+        XPCThrower::Throw(rv, cx);
         return false;
     }
 
-    JSString *str = JS_NewStringCopyN(cx, result.get(), result.Length());
+    JSString *str = JS_NewUCStringCopyN(cx, result.get(), result.Length());
     if (!str)
         return false;
 
     *out = STRING_TO_JSVAL(str);
     return true;
 }
 
 bool
 Base64Decode(JSContext *cx, JS::Value val, JS::Value *out)
 {
     MOZ_ASSERT(cx);
     MOZ_ASSERT(out);
 
     JS::Value root = val;
-    xpc_qsACString encodedString(cx, root, &root, xpc_qsACString::eNull,
-                                 xpc_qsACString::eNull);
+    xpc_qsDOMString encodedString(cx, root, &root, xpc_qsDOMString::eNull,
+                                  xpc_qsDOMString::eNull);
     if (!encodedString.IsValid())
         return false;
 
-    nsCAutoString result;
-    if (NS_FAILED(mozilla::Base64Decode(encodedString, result))) {
-        JS_ReportError(cx, "Failed to decode base64 string!");
+    nsAutoString result;
+    nsresult rv = mozilla::Base64Decode(encodedString, result);
+    if (NS_FAILED(rv)) {
+        XPCThrower::Throw(rv, cx);
         return false;
     }
 
-    JSString *str = JS_NewStringCopyN(cx, result.get(), result.Length());
+    JSString *str = JS_NewUCStringCopyN(cx, result.get(), result.Length());
     if (!str)
         return false;
 
     *out = STRING_TO_JSVAL(str);
     return true;
 }
 
 #ifdef DEBUG
