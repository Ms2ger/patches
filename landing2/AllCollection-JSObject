From: Ms2ger <ms2ger@gmail.com>

diff --git a/content/html/document/src/HTMLAllCollection.cpp b/content/html/document/src/HTMLAllCollection.cpp
--- a/content/html/document/src/HTMLAllCollection.cpp
+++ b/content/html/document/src/HTMLAllCollection.cpp
@@ -142,16 +142,22 @@ HTMLAllCollection::GetNamedItem(const ns
 static nsHTMLDocument*
 GetDocument(JSObject *obj)
 {
   MOZ_ASSERT(js::GetObjectJSClass(obj) == &sHTMLDocumentAllClass);
   return static_cast<nsHTMLDocument*>(
     static_cast<nsINode*>(JS_GetPrivate(obj)));
 }
 
+static HTMLAllCollection*
+AllCollection(JSObject* aObject)
+{
+  return GetDocument(aObject)->All();
+}
+
 static inline nsresult
 WrapNative(JSContext *cx, JSObject *scope, nsISupports *native,
            nsWrapperCache *cache, const nsIID* aIID, jsval *vp,
            nsIXPConnectJSObjectHolder** aHolder, bool aAllowWrapping)
 {
   if (!native) {
     NS_ASSERTION(!aHolder || !*aHolder, "*aHolder should be null!");
 
@@ -205,41 +211,41 @@ nsHTMLDocumentSH::DocumentAllGetProperty
     if (!proto) {
       NS_ERROR("The JS engine lies!");
       return true;
     }
 
     obj = proto;
   }
 
-  nsHTMLDocument *doc = GetDocument(obj);
+  HTMLAllCollection* allCollection = AllCollection(obj);
   nsISupports *result;
   nsWrapperCache *cache;
   nsresult rv = NS_OK;
 
   if (JSID_IS_STRING(id)) {
     if (nsDOMClassInfo::sLength_id == id) {
       // Make sure <div id="length"> doesn't shadow document.all.length.
-      vp.setNumber(doc->All()->Length());
+      vp.setNumber(allCollection->Length());
       return true;
     }
 
     // For all other strings, look for an element by id or name.
     nsDependentJSString str(id);
-    result = doc->All()->GetNamedItem(str, &cache, &rv);
+    result = allCollection->GetNamedItem(str, &cache, &rv);
 
     if (NS_FAILED(rv)) {
       xpc::Throw(cx, rv);
       return false;
     }
   } else if (JSID_IS_INT(id) && JSID_TO_INT(id) >= 0) {
     // Map document.all[n] (where n is a number) to the n:th item in
     // the document.all node list.
 
-    nsIContent* node = doc->All()->Item(SafeCast<uint32_t>(JSID_TO_INT(id)));
+    nsIContent* node = allCollection->Item(SafeCast<uint32_t>(JSID_TO_INT(id)));
 
     result = node;
     cache = node;
   } else {
     result = nullptr;
   }
 
   if (result) {
