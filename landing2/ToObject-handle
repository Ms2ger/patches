From: Ms2ger <ms2ger@gmail.com>

diff --git a/dom/bindings/Codegen.py b/dom/bindings/Codegen.py
--- a/dom/bindings/Codegen.py
+++ b/dom/bindings/Codegen.py
@@ -7642,35 +7642,35 @@ class CGDictionary(CGThing):
                 "}\n")
 
         if self.dictionary.parent:
             body += (
                 "// Per spec, we define the parent's members first\n"
                 "if (!%s::ToObject(cx, parentObject, vp)) {\n"
                 "  return false;\n"
                 "}\n"
-                "JS::Rooted<JSObject*> obj(cx, &vp->toObject());\n"
+                "JS::Rooted<JSObject*> obj(cx, &vp.toObject());\n"
                 "\n") % self.makeClassName(self.dictionary.parent)
         else:
             body += (
                 "JS::Rooted<JSObject*> obj(cx, JS_NewObject(cx, nullptr, nullptr, nullptr));\n"
                 "if (!obj) {\n"
                 "  return false;\n"
                 "}\n"
-                "*vp = JS::ObjectValue(*obj);\n"
+                "vp.setObject(*obj);\n"
                 "\n")
 
         body += "\n\n".join(self.getMemberDefinition(m).define()
                             for m in self.memberInfo)
         body += "\n\nreturn true;"
 
         return ClassMethod("ToObject", "bool", [
             Argument('JSContext*', 'cx'),
             Argument('JS::Handle<JSObject*>', 'parentObject'),
-            Argument('JS::Value*', 'vp'),
+            Argument('JS::MutableHandle<JS::Value>', 'vp'),
         ], const=True, body=body)
 
     def initIdsMethod(self):
         assert self.needToInitIds
         idinit = [CGGeneric('!InternJSString(cx, %s, "%s")' %
                             (m.identifier.name + "_id", m.identifier.name))
                   for m in self.dictionary.members]
         idinit = CGList(idinit, " ||\n")
diff --git a/layout/inspector/src/inDOMUtils.cpp b/layout/inspector/src/inDOMUtils.cpp
--- a/layout/inspector/src/inDOMUtils.cpp
+++ b/layout/inspector/src/inDOMUtils.cpp
@@ -429,17 +429,18 @@ inDOMUtils::ColorNameToRGB(const nsAStri
     return NS_ERROR_INVALID_ARG;
   }
 
   InspectorRGBTriple triple;
   triple.mR = NS_GET_R(color);
   triple.mG = NS_GET_G(color);
   triple.mB = NS_GET_B(color);
 
-  if (!triple.ToObject(aCx, JS::NullPtr(), aValue)) {
+  if (!triple.ToObject(aCx, JS::NullPtr(),
+        JS::MutableHandle<JS::Value>::fromMarkedLocation(aValue))) {
     return NS_ERROR_FAILURE;
   }
 
   return NS_OK;
 }
 
 NS_IMETHODIMP
 inDOMUtils::RgbToColorName(uint8_t aR, uint8_t aG, uint8_t aB,
diff --git a/netwerk/base/src/Dashboard.cpp b/netwerk/base/src/Dashboard.cpp
--- a/netwerk/base/src/Dashboard.cpp
+++ b/netwerk/base/src/Dashboard.cpp
@@ -86,17 +86,17 @@ Dashboard::GetSockets()
         *tcp.AppendElement() = mSock.data[i].tcp;
         *sent.AppendElement() = (double) mSock.data[i].sent;
         *received.AppendElement() = (double) mSock.data[i].received;
         dict.mSent += mSock.data[i].sent;
         dict.mReceived += mSock.data[i].received;
     }
 
     JS::RootedValue val(cx);
-    if (!dict.ToObject(cx, JS::NullPtr(), val.address())) {
+    if (!dict.ToObject(cx, JS::NullPtr(), &val)) {
         mSock.cb = nullptr;
         mSock.data.Clear();
         return NS_ERROR_FAILURE;
     }
     mSock.cb->OnDashboardDataAvailable(val);
     mSock.cb = nullptr;
 
     return NS_OK;
@@ -193,17 +193,17 @@ Dashboard::GetHttpConnections()
         }
         for (uint32_t j = 0; j < mHttp.data[i].idle.Length(); j++) {
             *idle_rtt.AppendElement() = mHttp.data[i].idle[j].rtt;
             *idle_ttl.AppendElement() = mHttp.data[i].idle[j].ttl;
         }
     }
 
     JS::RootedValue val(cx);
-    if (!dict.ToObject(cx, JS::NullPtr(), val.address())) {
+    if (!dict.ToObject(cx, JS::NullPtr(), &val)) {
         mHttp.cb = nullptr;
         mHttp.data.Clear();
         return NS_ERROR_FAILURE;
     }
     mHttp.cb->OnDashboardDataAvailable(val);
     mHttp.cb = nullptr;
 
     return NS_OK;
@@ -333,17 +333,17 @@ Dashboard::GetWebSocketConnections()
         *sent.AppendElement() = mWs.data[i].mMsgSent;
         *received.AppendElement() = mWs.data[i].mMsgReceived;
         *receivedSize.AppendElement() = mWs.data[i].mSizeSent;
         *sentSize.AppendElement() = mWs.data[i].mSizeReceived;
         *encrypted.AppendElement() = mWs.data[i].mEncrypted;
     }
 
     JS::RootedValue val(cx);
-    if (!dict.ToObject(cx, JS::NullPtr(), val.address())) {
+    if (!dict.ToObject(cx, JS::NullPtr(), &val)) {
         mWs.cb = nullptr;
         mWs.data.Clear();
         return NS_ERROR_FAILURE;
     }
     mWs.cb->OnDashboardDataAvailable(val);
     mWs.cb = nullptr;
 
     return NS_OK;
@@ -422,17 +422,17 @@ Dashboard::GetDNSCacheEntries()
 
         if (mDns.data[i].family == PR_AF_INET6)
             CopyASCIItoUTF16("ipv6", *family.AppendElement());
         else
             CopyASCIItoUTF16("ipv4", *family.AppendElement());
     }
 
     JS::RootedValue val(cx);
-    if (!dict.ToObject(cx, JS::NullPtr(), val.address())) {
+    if (!dict.ToObject(cx, JS::NullPtr(), &val)) {
         mDns.cb = nullptr;
         mDns.data.Clear();
         return NS_ERROR_FAILURE;
     }
     mDns.cb->OnDashboardDataAvailable(val);
     mDns.cb = nullptr;
 
     return NS_OK;
