From: Ms2ger <ms2ger@gmail.com>

diff --git a/layout/base/nsFrameManager.cpp b/layout/base/nsFrameManager.cpp
--- a/layout/base/nsFrameManager.cpp
+++ b/layout/base/nsFrameManager.cpp
@@ -10,79 +10,49 @@
  * Modifications to Mozilla code or documentation identified per MPL Section 3.3
  *
  * Date             Modified by     Description of modification
  * 04/20/2000       IBM Corp.      OS/2 VisualAge build.
  */
 
 /* storage of the frame tree and information about it */
 
+#include "nsFrameManager.h"
+
 #include "nscore.h"
 #include "nsIPresShell.h"
 #include "nsStyleContext.h"
 #include "nsCOMPtr.h"
-#include "plhash.h"
 #include "nsPlaceholderFrame.h"
 #include "nsGkAtoms.h"
 #include "nsILayoutHistoryState.h"
 #include "nsPresState.h"
 #include "mozilla/dom/Element.h"
 #include "nsIDocument.h"
 
 #include "nsContentUtils.h"
 #include "nsError.h"
 #include "nsAutoPtr.h"
 #include "nsAbsoluteContainingBlock.h"
 #include "ChildIterator.h"
 
-#include "nsFrameManager.h"
 #include "GeckoProfiler.h"
 #include "nsIStatefulFrame.h"
 
   #ifdef DEBUG
     //#define DEBUG_UNDISPLAYED_MAP
   #else
     #undef DEBUG_UNDISPLAYED_MAP
   #endif
 
 using namespace mozilla;
 using namespace mozilla::dom;
 
 //----------------------------------------------------------------------
 
-struct PlaceholderMapEntry : public PLDHashEntryHdr {
-  // key (the out of flow frame) can be obtained through placeholder frame
-  nsPlaceholderFrame *placeholderFrame;
-};
-
-static bool
-PlaceholderMapMatchEntry(PLDHashTable *table, const PLDHashEntryHdr *hdr,
-                         const void *key)
-{
-  const PlaceholderMapEntry *entry =
-    static_cast<const PlaceholderMapEntry*>(hdr);
-  NS_ASSERTION(entry->placeholderFrame->GetOutOfFlowFrame() !=
-               (void*)0xdddddddd,
-               "Dead placeholder in placeholder map");
-  return entry->placeholderFrame->GetOutOfFlowFrame() == key;
-}
-
-static PLDHashTableOps PlaceholderMapOps = {
-  PL_DHashAllocTable,
-  PL_DHashFreeTable,
-  PL_DHashVoidPtrKeyStub,
-  PlaceholderMapMatchEntry,
-  PL_DHashMoveEntryStub,
-  PL_DHashClearEntryStub,
-  PL_DHashFinalizeStub,
-  NULL
-};
-
-//----------------------------------------------------------------------
-
 // XXXldb This seems too complicated for what I think it's doing, and it
 // should also be using pldhash rather than plhash to use less memory.
 
 class nsFrameManagerBase::UndisplayedMap {
 public:
   UndisplayedMap(uint32_t aNumBuckets = 16) NS_HIDDEN;
   ~UndisplayedMap(void) NS_HIDDEN;
 
@@ -144,85 +114,53 @@ nsFrameManager::Destroy()
 
 //----------------------------------------------------------------------
 
 // Placeholder frame functions
 nsPlaceholderFrame*
 nsFrameManager::GetPlaceholderFrameFor(const nsIFrame* aFrame)
 {
   NS_PRECONDITION(aFrame, "null param unexpected");
-
-  if (mPlaceholderMap.ops) {
-    PlaceholderMapEntry *entry = static_cast<PlaceholderMapEntry*>
-                                            (PL_DHashTableOperate(const_cast<PLDHashTable*>(&mPlaceholderMap),
-                                aFrame, PL_DHASH_LOOKUP));
-    if (PL_DHASH_ENTRY_IS_BUSY(entry)) {
-      return entry->placeholderFrame;
-    }
-  }
-
-  return nullptr;
+  return mPlaceholderMap.Get(aFrame);
 }
 
-nsresult
+void
 nsFrameManager::RegisterPlaceholderFrame(nsPlaceholderFrame* aPlaceholderFrame)
 {
   NS_PRECONDITION(aPlaceholderFrame, "null param unexpected");
   NS_PRECONDITION(nsGkAtoms::placeholderFrame == aPlaceholderFrame->GetType(),
                   "unexpected frame type");
-  if (!mPlaceholderMap.ops) {
-    if (!PL_DHashTableInit(&mPlaceholderMap, &PlaceholderMapOps, nullptr,
-                           sizeof(PlaceholderMapEntry), 16)) {
-      mPlaceholderMap.ops = nullptr;
-      return NS_ERROR_OUT_OF_MEMORY;
-    }
-  }
-  PlaceholderMapEntry *entry = static_cast<PlaceholderMapEntry*>(PL_DHashTableOperate(&mPlaceholderMap,
-                              aPlaceholderFrame->GetOutOfFlowFrame(),
-                              PL_DHASH_ADD));
-  if (!entry)
-    return NS_ERROR_OUT_OF_MEMORY;
-
-  NS_ASSERTION(!entry->placeholderFrame, "Registering a placeholder for a frame that already has a placeholder!");
-  entry->placeholderFrame = aPlaceholderFrame;
-
-  return NS_OK;
+  NS_ASSERTION(!mPlaceholderMap.Get(aPlaceholderFrame->GetOutOfFlowFrame()),
+               "Registering a placeholder for a frame that already has a "
+               "placeholder!");
+  mPlaceholderMap.Put(aPlaceholderFrame->GetOutOfFlowFrame(),
+                      aPlaceholderFrame);
 }
 
 void
 nsFrameManager::UnregisterPlaceholderFrame(nsPlaceholderFrame* aPlaceholderFrame)
 {
   NS_PRECONDITION(aPlaceholderFrame, "null param unexpected");
   NS_PRECONDITION(nsGkAtoms::placeholderFrame == aPlaceholderFrame->GetType(),
                   "unexpected frame type");
-
-  if (mPlaceholderMap.ops) {
-    PL_DHashTableOperate(&mPlaceholderMap,
-                         aPlaceholderFrame->GetOutOfFlowFrame(),
-                         PL_DHASH_REMOVE);
-  }
+  mPlaceholderMap.Remove(aPlaceholderFrame->GetOutOfFlowFrame());
 }
 
 static PLDHashOperator
-UnregisterPlaceholders(PLDHashTable* table, PLDHashEntryHdr* hdr,
-                       uint32_t number, void* arg)
+UnregisterPlaceholders(const nsIFrame*, nsPlaceholderFrame* aFrame, void* arg)
 {
-  PlaceholderMapEntry* entry = static_cast<PlaceholderMapEntry*>(hdr);
-  entry->placeholderFrame->SetOutOfFlowFrame(nullptr);
+  aFrame->SetOutOfFlowFrame(nullptr);
   return PL_DHASH_NEXT;
 }
 
 void
 nsFrameManager::ClearPlaceholderFrameMap()
 {
-  if (mPlaceholderMap.ops) {
-    PL_DHashTableEnumerate(&mPlaceholderMap, UnregisterPlaceholders, nullptr);
-    PL_DHashTableFinish(&mPlaceholderMap);
-    mPlaceholderMap.ops = nullptr;
-  }
+  mPlaceholderMap.EnumerateRead(UnregisterPlaceholders, nullptr);
+  mPlaceholderMap.Clear();
 }
 
 //----------------------------------------------------------------------
 
 nsStyleContext*
 nsFrameManager::GetUndisplayedContent(nsIContent* aContent)
 {
   if (!aContent || !mUndisplayedMap)
diff --git a/layout/base/nsFrameManager.h b/layout/base/nsFrameManager.h
--- a/layout/base/nsFrameManager.h
+++ b/layout/base/nsFrameManager.h
@@ -14,18 +14,19 @@
  * 04/20/2000       IBM Corp.      OS/2 VisualAge build.
  */
 
 /* storage of the frame tree and information about it */
 
 #ifndef _nsFrameManager_h_
 #define _nsFrameManager_h_
 
+#include "nsFrameManagerBase.h"
+
 #include "nsIFrame.h"
-#include "nsFrameManagerBase.h"
 
 namespace mozilla {
 /**
  * Node in a linked list, containing the style for an element that
  * does not have a frame but whose parent does have a frame.
  */
 struct UndisplayedNode {
   UndisplayedNode(nsIContent* aContent, nsStyleContext* aStyle)
@@ -85,17 +86,17 @@ public:
    * After Destroy is called, it is an error to call any FrameManager methods.
    * Destroy should be called when the frame tree managed by the frame
    * manager is no longer being displayed.
    */
   NS_HIDDEN_(void) Destroy();
 
   // Placeholder frame functions
   NS_HIDDEN_(nsPlaceholderFrame*) GetPlaceholderFrameFor(const nsIFrame* aFrame);
-  NS_HIDDEN_(nsresult)
+  NS_HIDDEN_(void)
     RegisterPlaceholderFrame(nsPlaceholderFrame* aPlaceholderFrame);
 
   NS_HIDDEN_(void)
     UnregisterPlaceholderFrame(nsPlaceholderFrame* aPlaceholderFrame);
 
   NS_HIDDEN_(void)      ClearPlaceholderFrameMap();
 
   // Mapping undisplayed content
diff --git a/layout/base/nsFrameManagerBase.h b/layout/base/nsFrameManagerBase.h
--- a/layout/base/nsFrameManagerBase.h
+++ b/layout/base/nsFrameManagerBase.h
@@ -14,17 +14,17 @@
  * 04/20/2000       IBM Corp.      OS/2 VisualAge build.
  */
 
 /* part of nsFrameManager, to work around header inclusionordering */
 
 #ifndef _nsFrameManagerBase_h_
 #define _nsFrameManagerBase_h_
 
-#include "pldhash.h"
+#include "nsDataHashtable.h"
 
 class nsIPresShell;
 class nsStyleSet;
 class nsIContent;
 class nsPlaceholderFrame;
 class nsIFrame;
 class nsStyleContext;
 class nsIAtom;
@@ -58,17 +58,17 @@ public:
 protected:
   class UndisplayedMap;
 
   // weak link, because the pres shell owns us
   nsIPresShell*                   mPresShell;
   // the pres shell owns the style set
   nsStyleSet*                     mStyleSet;
   nsIFrame*                       mRootFrame;
-  PLDHashTable                    mPlaceholderMap;
+  nsDataHashtable<nsPtrHashKey<const nsIFrame>, nsPlaceholderFrame*> mPlaceholderMap;
   UndisplayedMap*                 mUndisplayedMap;
   bool                            mIsDestroyingFrames;  // The frame manager is destroying some frame(s).
 
   // The frame tree generation number
   // We use this to avoid unnecessary screenshotting
   // on Android. Unfortunately, this is static to match
   // the single consumer which is also static. Keeping
   // this the same greatly simplifies lifetime issues and
