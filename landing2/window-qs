From: Ms2ger <ms2ger@gmail.com>

diff --git a/dom/bindings/Bindings.conf b/dom/bindings/Bindings.conf
--- a/dom/bindings/Bindings.conf
+++ b/dom/bindings/Bindings.conf
@@ -1346,25 +1346,35 @@ DOMInterfaces = {
 
 'WheelEvent': {
     'headerFile': 'DOMWheelEvent.h',
     'nativeType': 'mozilla::dom::DOMWheelEvent',
 },
 
 'WindowProxy': [
 {
+    'hasXPConnectImpls': True,
     'nativeType': 'nsIDOMWindow',
-    'concrete': False
+    'concrete': False,
+    'register': False,
 },
 {
     # We need a worker descriptor for WindowProxy because EventTarget exists in
     # workers.  But it's an external interface, so it'll just map to JSObject*.
-    'workers': True
+    'workers': True,
+    'register': False,
 }],
 
+'Window': {
+    'hasXPConnectImpls': True,
+    'nativeType': 'nsIDOMWindow',
+    'concrete': False,
+    'register': False,
+},
+
 'WorkerLocation': {
     'headerFile': 'mozilla/dom/workers/bindings/Location.h',
     'castable': True,
     'workers': True,
 },
 
 'WorkerNavigator': {
     'headerFile': 'mozilla/dom/workers/bindings/Navigator.h',
@@ -1772,16 +1782,15 @@ addExternalIface('PrintCallback', native
                  headerFile='nsIDOMHTMLCanvasElement.h')
 addExternalIface('Selection', nativeType='nsISelection')
 addExternalIface('StyleSheetList')
 addExternalIface('SVGLength')
 addExternalIface('SVGNumber')
 addExternalIface('URI', nativeType='nsIURI', headerFile='nsIURI.h',
                  notflattened=True)
 addExternalIface('UserDataHandler')
-addExternalIface('Window')
 addExternalIface('XPathResult', nativeType='nsISupports')
 addExternalIface('XPathExpression')
 addExternalIface('XPathNSResolver')
 addExternalIface('XULCommandDispatcher')
 addExternalIface('DataTransfer', notflattened=True)
 addExternalIface('GetCameraCallback', nativeType='nsICameraGetCameraCallback', headerFile='nsIDOMCameraManager.h')
 addExternalIface('CameraErrorCallback', nativeType='nsICameraErrorCallback', headerFile='nsIDOMCameraManager.h')
diff --git a/dom/webidl/CanvasRenderingContext2D.webidl b/dom/webidl/CanvasRenderingContext2D.webidl
--- a/dom/webidl/CanvasRenderingContext2D.webidl
+++ b/dom/webidl/CanvasRenderingContext2D.webidl
@@ -7,17 +7,16 @@
  * http://www.whatwg.org/specs/web-apps/current-work/
  *
  * Â© Copyright 2004-2011 Apple Computer, Inc., Mozilla Foundation, and
  * Opera Software ASA. You are granted a license to use, reproduce
  * and create derivative works of this document.
  */
 
 interface HitRegionOptions;
-interface Window;
 
 enum CanvasWindingRule { "nonzero", "evenodd" };
 
 interface CanvasRenderingContext2D {
 
   // back-reference to the canvas.  Might be null if we're not
   // associated with a canvas.
   readonly attribute HTMLCanvasElement? canvas;
diff --git a/dom/webidl/DOMRequest.webidl b/dom/webidl/DOMRequest.webidl
--- a/dom/webidl/DOMRequest.webidl
+++ b/dom/webidl/DOMRequest.webidl
@@ -1,14 +1,13 @@
 /* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
-interface Window;
 interface nsISupports;
 
 enum DOMRequestReadyState { "pending", "done" };
 
 interface DOMRequest : EventTarget {
   readonly attribute DOMRequestReadyState readyState;
 
   readonly attribute any result;
diff --git a/dom/webidl/PopupBlockedEvent.webidl b/dom/webidl/PopupBlockedEvent.webidl
--- a/dom/webidl/PopupBlockedEvent.webidl
+++ b/dom/webidl/PopupBlockedEvent.webidl
@@ -1,14 +1,14 @@
 /* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/.
  */
-interface Window;
+
 interface URI;
 
 [Constructor(DOMString type, optional PopupBlockedEventInit eventInitDict), HeaderFile="GeneratedEventClasses.h"]
 interface PopupBlockedEvent : Event
 {
   readonly attribute Window? requestingWindow;
   readonly attribute URI? popupWindowURI;
   readonly attribute DOMString? popupWindowName;
diff --git a/dom/webidl/Window.webidl b/dom/webidl/Window.webidl
--- a/dom/webidl/Window.webidl
+++ b/dom/webidl/Window.webidl
@@ -3,8 +3,110 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
  * You can obtain one at http://mozilla.org/MPL/2.0/.
  *
  * The origin of this IDL file is:
  * https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/RequestAnimationFrame/Overview.html
  */
 
 callback FrameRequestCallback = void (DOMHighResTimeStamp time);
+
+/**
+ * The Window interface is the primary interface for a DOM
+ * window object. It represents a single window object that may
+ * contain child windows if the document in the window contains a
+ * HTML frameset document or if the document contains iframe elements.
+ *
+ * @see <http://www.whatwg.org/html/#window>
+ */
+
+interface Window : EventTarget {
+  /**
+   * Set/Get the name of this window.
+   *
+   * This attribute is "replaceable" in JavaScript
+   */
+           attribute DOMString name;
+
+  /**
+   * |parent| gets this window's parent window.  If this window has no parent,
+   * we return the window itself.
+   *
+   * This property does not cross chrome-content boundaries, so if this
+   * window's parent is of a different type, we return the window itself as its
+   * parent.
+   *
+   * When script reads the property (or when C++ calls ScriptableTop), this
+   * property does not cross <iframe mozbrowser> boundaries.  In contrast, when
+   * C++ calls GetParent, we ignore the mozbrowser attribute.
+   */
+//  [binaryname(ScriptableParent)]
+  readonly attribute WindowProxy parent;
+
+  /**
+   * |top| gets the root of the window hierarchy.
+   *
+   * This function does not cross chrome-content boundaries, so if this
+   * window's parent is of a different type, |top| will return this window.
+   *
+   * When script reads the top property, we run GetScriptableTop, which
+   * will not cross an <iframe mozbrowser> boundary.
+   *
+   * In contrast, C++ calls to GetTop are forwarded to GetRealTop, which
+   * ignores <iframe mozbrowser> boundaries.
+   *
+   * This property is "replaceable" in JavaScript.
+   */
+//  [binaryname(ScriptableTop)]
+  [Unforgeable] readonly attribute WindowProxy top;
+
+  /* [replaceable] self */
+  [Replaceable] readonly attribute WindowProxy self;
+};
+
+[NoInterfaceObject]
+interface WindowSessionStorage {
+  readonly attribute Storage sessionStorage;
+};
+Window implements WindowSessionStorage;
+
+[NoInterfaceObject]
+interface WindowLocalStorage {
+  readonly attribute Storage localStorage;
+};
+Window implements WindowLocalStorage;
+
+// https://dvcs.w3.org/hg/editing/raw-file/tip/editing.html
+partial interface Window {
+  /**
+   * Method for accessing this window's selection object.
+   */
+  Selection getSelection();
+};
+
+// http://dev.w3.org/csswg/cssom/#extensions-to-the-window-interface
+partial interface Window {
+  CSSStyleDeclaration getComputedStyle(Element elt,
+                                       optional DOMString pseudoElt);
+};
+
+// GlobalEventHandlers
+partial interface Window {
+  [LenientThis, SetterThrows]
+  attribute EventHandler onmouseenter;
+  [LenientThis, SetterThrows]
+  attribute EventHandler onmouseleave;
+};
+
+// https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/NavigationTiming/Overview.html#sec-window.performance-attribute
+partial interface Window {
+  [Replaceable] readonly attribute Performance performance;
+};
+
+// Mozilla extensions
+partial interface Window {
+  /**
+   * Method for scrolling this window by a number of lines.
+   */
+  void scrollByLines(long numLines);
+
+  void dump(DOMString str);
+};
diff --git a/js/xpconnect/src/dom_quickstubs.qsconf b/js/xpconnect/src/dom_quickstubs.qsconf
--- a/js/xpconnect/src/dom_quickstubs.qsconf
+++ b/js/xpconnect/src/dom_quickstubs.qsconf
@@ -9,48 +9,18 @@ name = 'DOM'
 #
 # Attributes or methods that call GetCurrentNativeCallContext must not be
 # quick-stubbed, because quick stubs don't generate a native call context.
 # qsgen.py has no way of knowing which attributes and methods do this, as it
 # looks at interfaces, not implementations.  The symptoms, if you quick-stub
 # one of those, can be really weird, because GetCurrentNativeCallContext
 # doesn't crash--it may in fact return a plausible wrong answer.
 
-members = [ 
+members = [
     # dom/interfaces/base
-    #
-    # Note that many implementations of interfaces in this directory
-    # use GetCurrentNativeCallContext, notably:
-    #   - nsIDOMCrypto.{generateCRMFRequest,signText}
-    #   - nsIDOMLocation.reload
-    #   - nsIDOMNSHistory.go
-    #   - nsIDOMJSPluginArray.refresh
-    #   - nsIDOMWindow.postMessage
-    #   - nsIDOMJSWindow.{prompt,setTimeout,setInterval,open,openDialog}
-    #
-    # (And nsIDOMModalContentWindow.returnValue is an attribute of type
-    # nsIVariant, which qsgen.py can't handle.)
-    #
-    'nsIDOMWindow.name',
-    'nsIDOMWindow.parent',
-    'nsIDOMWindow.top',
-    'nsIDOMWindow.self',
-    # Several window properties are magically resolved, including
-    # location, _content, navigator, document, and window itself.
-    # These do not need quick stubs.
-    #'nsIDOMWindow.document',
-    'nsIDOMWindow.getSelection',
-    'nsIDOMWindow.scrollByLines',
-    'nsIDOMWindow.getComputedStyle',
-    'nsIDOMWindow.sessionStorage',
-    'nsIDOMWindow.localStorage',
-    'nsIDOMWindow.onmouseenter',
-    'nsIDOMWindow.onmouseleave',
-    'nsIDOMWindowPerformance.performance',
-    'nsIDOMJSWindow.dump',
     # nsLocationSH has ~ALLOW_PROP_MODS_TO_PROTOTYPE, so don't try.
     #'nsIDOMLocation.hostname',
     #'nsIDOMLocation.href',
 
     # dom/interfaces/core
     'nsIDOMDOMStringList.*',
 
     # dom/interfaces/storage
@@ -109,55 +79,35 @@ members = [
 # don't have their own files, just for extra wackiness.  So qsgen.py needs
 # a little help.
 #
 irregularFilenames = {
     # stowaways
     'nsIDOMBlob': 'nsIDOMFile',
     'nsIIndexedDatabaseUsageCallback': 'nsIIndexedDatabaseManager',
     'nsITelephoneCallback': 'nsITelephone',
-    'nsIDOMWindowPerformance': 'nsIDOMWindow',
     }
 
 customIncludes = [
     'nsDOMQS.h',
     'nsPerformance.h',
     'mozilla/dom/EventTargetBinding.h',
+    'mozilla/dom/WindowBinding.h',
     ]
 
 nsIDOMStorage_Clear_customMethodCallCode = """
     rv = self->Clear();
     if (NS_SUCCEEDED(rv))
         JS_ClearNonGlobalObject(cx, obj);
 """
 
 customMethodCalls = {
     'nsIDOMStorage_Clear': {
         'code': nsIDOMStorage_Clear_customMethodCallCode
         },
-    'nsIDOMWindow_GetOnmouseenter' : {
-        'thisType' : 'nsIDOMWindow',
-        'unwrapThisFailureFatal' : False
-        },
-    'nsIDOMWindow_SetOnmouseenter' : {
-        'thisType' : 'nsIDOMWindow',
-        'unwrapThisFailureFatal' : False
-        },
-    'nsIDOMWindow_GetOnmouseleave' : {
-        'thisType' : 'nsIDOMWindow',
-        'unwrapThisFailureFatal' : False
-        },
-    'nsIDOMWindow_SetOnmouseleave' : {
-        'thisType' : 'nsIDOMWindow',
-        'unwrapThisFailureFatal' : False
-        },
-    'nsIDOMWindowPerformance_GetPerformance' : {
-        'thisType': 'nsPIDOMWindow',
-        'code' : '    nsPerformance* result = self->GetPerformance();\n',
-        'canFail': False,
-        },
     }
 
 newBindingProperties = {
     # Once the last entry here goes away, we can make the sNativePropertyHooks
     # of bindings static.
     'nsIDOMEventTarget': 'mozilla::dom::EventTargetBinding::sNativePropertyHooks.mNativeProperties.regular',
+    'nsIDOMWindow': 'mozilla::dom::WindowBinding::sNativePropertyHooks.mNativeProperties.regular',
     }
