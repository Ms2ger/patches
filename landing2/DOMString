From: Ms2ger <ms2ger@gmail.com>

diff --git a/content/base/src/nsAttrValue.h b/content/base/src/nsAttrValue.h
--- a/content/base/src/nsAttrValue.h
+++ b/content/base/src/nsAttrValue.h
@@ -17,17 +17,17 @@
 #include "nsColor.h"
 #include "nsCaseTreatment.h"
 #include "nsMargin.h"
 #include "nsCOMPtr.h"
 #include "SVGAttrValueWrapper.h"
 #include "nsTArrayForwardDeclare.h"
 #include "nsIAtom.h"
 #include "mozilla/MemoryReporting.h"
-#include "mozilla/dom/BindingDeclarations.h"
+#include "mozilla/dom/DOMString.h"
 
 class nsAString;
 class nsIDocument;
 class nsStyledElementNotElementCSSInlineStyle;
 struct MiscContainer;
 
 namespace mozilla {
 namespace css {
diff --git a/dom/base/Crypto.h b/dom/base/Crypto.h
--- a/dom/base/Crypto.h
+++ b/dom/base/Crypto.h
@@ -6,20 +6,21 @@
 
 #ifdef MOZ_DISABLE_CRYPTOLEGACY
 #include "nsIDOMCrypto.h"
 #else
 #include "nsIDOMCryptoLegacy.h"
 class nsIDOMCRMFObject;
 #endif
 
+#include "mozilla/dom/TypedArray.h"
 #include "nsPIDOMWindow.h"
+#include "nsStringFwd.h"
+#include "nsWrapperCache.h"
 
-#include "nsWrapperCache.h"
-#include "mozilla/dom/TypedArray.h"
 #define NS_DOMCRYPTO_CID \
   {0x929d9320, 0x251e, 0x11d4, { 0x8a, 0x7c, 0x00, 0x60, 0x08, 0xc8, 0x44, 0xc3} }
 
 namespace mozilla {
 
 class ErrorResult;
 
 namespace dom {
diff --git a/dom/bindings/BindingDeclarations.h b/dom/bindings/BindingDeclarations.h
--- a/dom/bindings/BindingDeclarations.h
+++ b/dom/bindings/BindingDeclarations.h
@@ -13,18 +13,16 @@
 #ifndef mozilla_dom_BindingDeclarations_h__
 #define mozilla_dom_BindingDeclarations_h__
 
 #include "nsStringGlue.h"
 #include "js/Value.h"
 #include "js/RootingAPI.h"
 #include "mozilla/Maybe.h"
 #include "nsCOMPtr.h"
-#include "nsDOMString.h"
-#include "nsStringBuffer.h"
 #include "nsTArray.h"
 #include "nsAutoPtr.h" // for nsRefPtr member variables
 
 class nsWrapperCache;
 
 // nsGlobalWindow implements nsWrapperCache, but doesn't always use it. Don't
 // try to use it without fixing that first.
 class nsGlobalWindow;
@@ -84,143 +82,16 @@ public:
 
 protected:
   JS::RootedObject mGlobalJSObject;
   JSContext* mCx;
   mutable nsISupports* mGlobalObject;
   mutable nsCOMPtr<nsISupports> mGlobalObjectRef;
 };
 
-/**
- * A class for representing string return values.  This can be either passed to
- * callees that have an nsString or nsAString out param or passed to a callee
- * that actually knows about this class and can work with it.  Such a callee may
- * call SetStringBuffer on this object, but only if it plans to keep holding a
- * strong ref to the stringbuffer!
- *
- * The proper way to store a value in this class is to either to do nothing
- * (which leaves this as an empty string), to call SetStringBuffer with a
- * non-null stringbuffer, to call SetNull(), or to call AsAString() and set the
- * value in the resulting nsString.  These options are mutually exclusive!
- * Don't do more than one of them.
- *
- * The proper way to extract a value is to check IsNull().  If not null, then
- * check HasStringBuffer().  If that's true, check for a zero length, and if the
- * length is nonzero call StringBuffer().  If the length is zero this is the
- * empty string.  If HasStringBuffer() returns false, call AsAString() and get
- * the value from that.
- */
-class MOZ_STACK_CLASS DOMString {
-public:
-  DOMString()
-    : mStringBuffer(nullptr)
-    , mLength(0)
-    , mIsNull(false)
-  {}
-  ~DOMString()
-  {
-    MOZ_ASSERT(mString.empty() || !mStringBuffer,
-               "Shouldn't have both present!");
-  }
-
-  operator nsString&()
-  {
-    return AsAString();
-  }
-
-  nsString& AsAString()
-  {
-    MOZ_ASSERT(!mStringBuffer, "We already have a stringbuffer?");
-    MOZ_ASSERT(!mIsNull, "We're already set as null");
-    if (mString.empty()) {
-      mString.construct();
-    }
-    return mString.ref();
-  }
-
-  bool HasStringBuffer() const
-  {
-    MOZ_ASSERT(mString.empty() || !mStringBuffer,
-               "Shouldn't have both present!");
-    MOZ_ASSERT(!mIsNull, "Caller should have checked IsNull() first");
-    return mString.empty();
-  }
-
-  // Get the stringbuffer.  This can only be called if HasStringBuffer()
-  // returned true and StringBufferLength() is nonzero.  If that's true, it will
-  // never return null.
-  nsStringBuffer* StringBuffer() const
-  {
-    MOZ_ASSERT(!mIsNull, "Caller should have checked IsNull() first");
-    MOZ_ASSERT(HasStringBuffer(),
-               "Don't ask for the stringbuffer if we don't have it");
-    MOZ_ASSERT(StringBufferLength() != 0, "Why are you asking for this?");
-    MOZ_ASSERT(mStringBuffer,
-               "If our length is nonzero, we better have a stringbuffer.");
-    return mStringBuffer;
-  }
-
-  // Get the length of the stringbuffer.  Can only be called if
-  // HasStringBuffer().
-  uint32_t StringBufferLength() const
-  {
-    MOZ_ASSERT(HasStringBuffer(), "Don't call this if there is no stringbuffer");
-    return mLength;
-  }
-
-  void SetStringBuffer(nsStringBuffer* aStringBuffer, uint32_t aLength)
-  {
-    MOZ_ASSERT(mString.empty(), "We already have a string?");
-    MOZ_ASSERT(!mIsNull, "We're already set as null");
-    MOZ_ASSERT(!mStringBuffer, "Setting stringbuffer twice?");
-    MOZ_ASSERT(aStringBuffer, "Why are we getting null?");
-    mStringBuffer = aStringBuffer;
-    mLength = aLength;
-  }
-
-  void SetNull()
-  {
-    MOZ_ASSERT(!mStringBuffer, "Should have no stringbuffer if null");
-    MOZ_ASSERT(mString.empty(), "Should have no string if null");
-    mIsNull = true;
-  }
-
-  bool IsNull() const
-  {
-    MOZ_ASSERT(!mStringBuffer || mString.empty(),
-               "How could we have a stringbuffer and a nonempty string?");
-    return mIsNull || (!mString.empty() && mString.ref().IsVoid());
-  }
-
-  void ToString(nsAString& aString)
-  {
-    if (IsNull()) {
-      SetDOMStringToNull(aString);
-    } else if (HasStringBuffer()) {
-      if (StringBufferLength() == 0) {
-        aString.Truncate();
-      } else {
-        StringBuffer()->ToString(StringBufferLength(), aString);
-      }
-    } else {
-      aString = AsAString();
-    }
-  }
-
-private:
-  // We need to be able to act like a string as needed
-  Maybe<nsString> mString;
-
-  // For callees that know we exist, we can be a stringbuffer/length/null-flag
-  // triple.
-  nsStringBuffer* mStringBuffer;
-  uint32_t mLength;
-  bool mIsNull;
-};
-
 // Class for representing optional arguments.
 template<typename T, typename InternalType>
 class Optional_base
 {
 public:
   Optional_base()
   {}
 
diff --git a/dom/bindings/DOMString.h b/dom/bindings/DOMString.h
new file mode 100644
--- /dev/null
+++ b/dom/bindings/DOMString.h
@@ -0,0 +1,154 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/* A class for representing fast string return values. */
+
+#ifndef mozilla_dom_DOMString_h
+#define mozilla_dom_DOMString_h
+
+#include <stdint.h>
+
+#include "mozilla/Attributes.h"
+#include "mozilla/Maybe.h"
+#include "nsDOMString.h"
+#include "nsStringBuffer.h"
+#include "nsStringGlue.h"
+
+namespace mozilla {
+namespace dom {
+
+/**
+ * A class for representing string return values.  This can be either passed to
+ * callees that have an nsString or nsAString out param or passed to a callee
+ * that actually knows about this class and can work with it.  Such a callee may
+ * call SetStringBuffer on this object, but only if it plans to keep holding a
+ * strong ref to the stringbuffer!
+ *
+ * The proper way to store a value in this class is to either to do nothing
+ * (which leaves this as an empty string), to call SetStringBuffer with a
+ * non-null stringbuffer, to call SetNull(), or to call AsAString() and set the
+ * value in the resulting nsString.  These options are mutually exclusive!
+ * Don't do more than one of them.
+ *
+ * The proper way to extract a value is to check IsNull().  If not null, then
+ * check HasStringBuffer().  If that's true, check for a zero length, and if the
+ * length is nonzero call StringBuffer().  If the length is zero this is the
+ * empty string.  If HasStringBuffer() returns false, call AsAString() and get
+ * the value from that.
+ */
+class MOZ_STACK_CLASS DOMString
+{
+public:
+  DOMString()
+    : mStringBuffer(nullptr)
+    , mLength(0)
+    , mIsNull(false)
+  {}
+  ~DOMString()
+  {
+    MOZ_ASSERT(mString.empty() || !mStringBuffer,
+               "Shouldn't have both present!");
+  }
+
+  operator nsString&()
+  {
+    return AsAString();
+  }
+
+  nsString& AsAString()
+  {
+    MOZ_ASSERT(!mStringBuffer, "We already have a stringbuffer?");
+    MOZ_ASSERT(!mIsNull, "We're already set as null");
+    if (mString.empty()) {
+      mString.construct();
+    }
+    return mString.ref();
+  }
+
+  bool HasStringBuffer() const
+  {
+    MOZ_ASSERT(mString.empty() || !mStringBuffer,
+               "Shouldn't have both present!");
+    MOZ_ASSERT(!mIsNull, "Caller should have checked IsNull() first");
+    return mString.empty();
+  }
+
+  // Get the stringbuffer.  This can only be called if HasStringBuffer()
+  // returned true and StringBufferLength() is nonzero.  If that's true, it will
+  // never return null.
+  nsStringBuffer* StringBuffer() const
+  {
+    MOZ_ASSERT(!mIsNull, "Caller should have checked IsNull() first");
+    MOZ_ASSERT(HasStringBuffer(),
+               "Don't ask for the stringbuffer if we don't have it");
+    MOZ_ASSERT(StringBufferLength() != 0, "Why are you asking for this?");
+    MOZ_ASSERT(mStringBuffer,
+               "If our length is nonzero, we better have a stringbuffer.");
+    return mStringBuffer;
+  }
+
+  // Get the length of the stringbuffer.  Can only be called if
+  // HasStringBuffer().
+  uint32_t StringBufferLength() const
+  {
+    MOZ_ASSERT(HasStringBuffer(), "Don't call this if there is no stringbuffer");
+    return mLength;
+  }
+
+  void SetStringBuffer(nsStringBuffer* aStringBuffer, uint32_t aLength)
+  {
+    MOZ_ASSERT(mString.empty(), "We already have a string?");
+    MOZ_ASSERT(!mIsNull, "We're already set as null");
+    MOZ_ASSERT(!mStringBuffer, "Setting stringbuffer twice?");
+    MOZ_ASSERT(aStringBuffer, "Why are we getting null?");
+    mStringBuffer = aStringBuffer;
+    mLength = aLength;
+  }
+
+  void SetNull()
+  {
+    MOZ_ASSERT(!mStringBuffer, "Should have no stringbuffer if null");
+    MOZ_ASSERT(mString.empty(), "Should have no string if null");
+    mIsNull = true;
+  }
+
+  bool IsNull() const
+  {
+    MOZ_ASSERT(!mStringBuffer || mString.empty(),
+               "How could we have a stringbuffer and a nonempty string?");
+    return mIsNull || (!mString.empty() && mString.ref().IsVoid());
+  }
+
+  void ToString(nsAString& aString)
+  {
+    if (IsNull()) {
+      SetDOMStringToNull(aString);
+    } else if (HasStringBuffer()) {
+      if (StringBufferLength() == 0) {
+        aString.Truncate();
+      } else {
+        StringBuffer()->ToString(StringBufferLength(), aString);
+      }
+    } else {
+      aString = AsAString();
+    }
+  }
+
+private:
+  // We need to be able to act like a string as needed
+  Maybe<nsString> mString;
+
+  // For callees that know we exist, we can be a stringbuffer/length/null-flag
+  // triple.
+  nsStringBuffer* mStringBuffer;
+  uint32_t mLength;
+  bool mIsNull;
+};
+
+} // namespace dom
+} // namespace mozilla
+
+#endif // mozilla_dom_DOMString_h
diff --git a/dom/bindings/moz.build b/dom/bindings/moz.build
--- a/dom/bindings/moz.build
+++ b/dom/bindings/moz.build
@@ -14,16 +14,17 @@ EXPORTS.mozilla.dom += [
     'AtomList.h',
     'BindingDeclarations.h',
     'BindingUtils.h',
     'CallbackFunction.h',
     'CallbackInterface.h',
     'CallbackObject.h',
     'DOMJSClass.h',
     'DOMJSProxyHandler.h',
+    'DOMString.h',
     'Date.h',
     'Errors.msg',
     'Exceptions.h',
     'JSSlots.h',
     'NonRefcountedDOMObject.h',
     'Nullable.h',
     'OwningNonNull.h',
     'PrimitiveConversions.h',
diff --git a/dom/src/events/nsJSEventListener.cpp b/dom/src/events/nsJSEventListener.cpp
--- a/dom/src/events/nsJSEventListener.cpp
+++ b/dom/src/events/nsJSEventListener.cpp
@@ -16,16 +16,17 @@
 #include "nsIDOMBeforeUnloadEvent.h"
 #include "nsGkAtoms.h"
 #include "xpcpublic.h"
 #include "nsJSEnvironment.h"
 #include "nsDOMJSUtils.h"
 #include "mozilla/Likely.h"
 #include "mozilla/dom/UnionTypes.h"
 #include "nsDOMEvent.h"
+#include "nsDOMString.h"
 
 #ifdef DEBUG
 
 #include "nspr.h" // PR_fprintf
 
 class EventListenerCounter
 {
 public:
diff --git a/dom/src/offline/nsDOMOfflineResourceList.cpp b/dom/src/offline/nsDOMOfflineResourceList.cpp
--- a/dom/src/offline/nsDOMOfflineResourceList.cpp
+++ b/dom/src/offline/nsDOMOfflineResourceList.cpp
@@ -18,17 +18,17 @@
 #include "nsAutoPtr.h"
 #include "nsContentUtils.h"
 #include "nsEventDispatcher.h"
 #include "nsIObserverService.h"
 #include "nsIScriptGlobalObject.h"
 #include "nsIWebNavigation.h"
 #include "mozilla/dom/OfflineResourceListBinding.h"
 #include "mozilla/Preferences.h"
-
+#include "nsDOMString.h"
 #include "nsXULAppAPI.h"
 #define IS_CHILD_PROCESS() \
     (GeckoProcessType_Default != XRE_GetProcessType())
 
 using namespace mozilla;
 using namespace mozilla::dom;
 
 // Event names
diff --git a/js/xpconnect/src/xpcpublic.h b/js/xpconnect/src/xpcpublic.h
--- a/js/xpconnect/src/xpcpublic.h
+++ b/js/xpconnect/src/xpcpublic.h
@@ -14,16 +14,17 @@
 #include "js/GCAPI.h"
 
 #include "nsISupports.h"
 #include "nsIURI.h"
 #include "nsIPrincipal.h"
 #include "nsWrapperCache.h"
 #include "nsStringGlue.h"
 #include "nsTArray.h"
+#include "mozilla/dom/DOMString.h"
 #include "mozilla/dom/JSSlots.h"
 #include "nsMathUtils.h"
 #include "nsStringBuffer.h"
 #include "nsIGlobalObject.h"
 #include "mozilla/dom/BindingDeclarations.h"
 
 class nsIPrincipal;
 class nsIXPConnectWrappedJS;
diff --git a/xpcom/string/public/nsStringBuffer.h b/xpcom/string/public/nsStringBuffer.h
--- a/xpcom/string/public/nsStringBuffer.h
+++ b/xpcom/string/public/nsStringBuffer.h
@@ -2,18 +2,23 @@
 /* vim:set ts=2 sw=2 sts=2 et cindent: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef nsStringBuffer_h__
 #define nsStringBuffer_h__
 
+#include <stddef.h>
+#include <stdint.h>
+
 #include "mozilla/Atomics.h"
 #include "mozilla/MemoryReporting.h"
+#include "nscore.h" // for NS_FASTCALL
+#include "nsStringGlue.h"
 
 template<class T> struct already_AddRefed;
 
 /**
  * This structure precedes the string buffers "we" allocate.  It may be the
  * case that nsTAString::mData does not point to one of these special
  * buffers.  The mFlags member variable distinguishes the buffer type.
  *
