diff --git a/js/xpconnect/src/XPCWrappedNative.cpp b/js/xpconnect/src/XPCWrappedNative.cpp
--- a/js/xpconnect/src/XPCWrappedNative.cpp
+++ b/js/xpconnect/src/XPCWrappedNative.cpp
@@ -36,16 +36,18 @@
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 /* Wrapper object for reflecting native xpcom objects into JavaScript. */
 
+#include "XPCWrappedNative.h"
+
 #include "xpcprivate.h"
 #include "nsCRT.h"
 #include "XPCWrapper.h"
 #include "nsWrapperCacheInlines.h"
 #include "XPCLog.h"
 #include "nsINode.h"
 #include "XPCQuickStubs.h"
 #include "jsproxy.h"
diff --git a/js/xpconnect/src/XPCWrappedNative.h b/js/xpconnect/src/XPCWrappedNative.h
new file mode 100644
--- /dev/null
+++ b/js/xpconnect/src/XPCWrappedNative.h
@@ -0,0 +1,464 @@
+/* ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is __________________________________________.
+ *
+ * The Initial Developer of the Original Code is
+ * ____________________________________________.
+ * Portions created by the Initial Developer are Copyright (C) 2___
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
+
+#ifndef XPCWrappedNative_h
+#define XPCWrappedNative_h
+
+#include "nsIXPConnect.h"
+
+#include "xpcpublic.h"
+#include "XPCForwards.h"
+#include "XPCLock.h"
+#include "XPCLog.h"
+#include "XPCWrappedNativeTearOffChunk.h"
+#include "XPCWrappedNativeProto.h"
+#include "XPCWrappedNativeScope.h"
+
+// XXX Duplicated
+#define XPC_CHECK_WRAPPER_THREADSAFETY
+
+#define INVALID_OBJECT ((JSObject *)1)
+
+namespace mozilla {
+class ReentrantMonitor;
+}
+typedef mozilla::ReentrantMonitor XPCLock;
+class xpcObjectHelper;
+
+void *xpc_GetJSPrivate(JSObject *obj);
+
+extern JSBool ConstructSlimWrapper(XPCCallContext &ccx,
+                                   xpcObjectHelper &aHelper,
+                                   XPCWrappedNativeScope* xpcScope,
+                                   jsval *rval);
+extern JSBool MorphSlimWrapper(JSContext *cx, JSObject *obj);
+
+static inline XPCWrappedNativeProto*
+GetSlimWrapperProto(JSObject *obj)
+{
+  const JS::Value &v = js::GetReservedSlot(obj, 0);
+  return static_cast<XPCWrappedNativeProto*>(v.toPrivate());
+}
+
+/**
+ * XPCWrappedNative the wrapper around one instance of a native xpcom object
+ * to be used from JavaScript.
+ */
+class XPCWrappedNative : public nsIXPConnectWrappedNative
+{
+public:
+    NS_DECL_ISUPPORTS
+    NS_DECL_NSIXPCONNECTJSOBJECTHOLDER
+    NS_DECL_NSIXPCONNECTWRAPPEDNATIVE
+    // No need to unlink the JS objects, if the XPCWrappedNative will be cycle
+    // collected then its mFlatJSObject will be cycle collected too and
+    // finalization of the mFlatJSObject will unlink the js objects (see
+    // XPC_WN_NoHelper_Finalize and FlatJSObjectFinalized).
+    // We also give XPCWrappedNative empty Root/Unroot methods, to avoid
+    // root/unrooting the JS objects from addrefing/releasing the
+    // XPCWrappedNative during unlinking, which would make the JS objects
+    // uncollectable to the JS GC.
+    class NS_CYCLE_COLLECTION_INNERCLASS
+     : public nsXPCOMCycleCollectionParticipant
+    {
+      NS_DECL_CYCLE_COLLECTION_CLASS_BODY_NO_UNLINK(XPCWrappedNative,
+                                                    XPCWrappedNative)
+      NS_IMETHOD Root(void *p) { return NS_OK; }
+      NS_IMETHOD Unlink(void *p);
+      NS_IMETHOD Unroot(void *p) { return NS_OK; }
+    };
+    NS_CYCLE_COLLECTION_PARTICIPANT_INSTANCE
+    NS_DECL_CYCLE_COLLECTION_UNMARK_PURPLE_STUB(XPCWrappedNative)
+
+    nsIPrincipal* GetObjectPrincipal() const;
+
+    JSBool
+    IsValid() const {return nsnull != mFlatJSObject;}
+
+#define XPC_SCOPE_WORD(s)   ((jsword)(s))
+#define XPC_SCOPE_MASK      ((jsword)0x3)
+#define XPC_SCOPE_TAG       ((jsword)0x1)
+#define XPC_WRAPPER_EXPIRED ((jsword)0x2)
+
+    static inline JSBool
+    IsTaggedScope(XPCWrappedNativeScope* s)
+        {return XPC_SCOPE_WORD(s) & XPC_SCOPE_TAG;}
+
+    static inline XPCWrappedNativeScope*
+    TagScope(XPCWrappedNativeScope* s)
+        {NS_ASSERTION(!IsTaggedScope(s), "bad pointer!");
+         return (XPCWrappedNativeScope*)(XPC_SCOPE_WORD(s) | XPC_SCOPE_TAG);}
+
+    static inline XPCWrappedNativeScope*
+    UnTagScope(XPCWrappedNativeScope* s)
+        {return (XPCWrappedNativeScope*)(XPC_SCOPE_WORD(s) & ~XPC_SCOPE_TAG);}
+
+    inline JSBool
+    IsWrapperExpired() const
+        {return XPC_SCOPE_WORD(mMaybeScope) & XPC_WRAPPER_EXPIRED;}
+
+    JSBool
+    HasProto() const {return !IsTaggedScope(mMaybeScope);}
+
+    XPCWrappedNativeProto*
+    GetProto() const
+        {return HasProto() ?
+         (XPCWrappedNativeProto*)
+         (XPC_SCOPE_WORD(mMaybeProto) & ~XPC_SCOPE_MASK) : nsnull;}
+
+    void SetProto(XPCWrappedNativeProto* p);
+
+    XPCWrappedNativeScope*
+    GetScope() const
+        {return GetProto() ? GetProto()->GetScope() :
+         (XPCWrappedNativeScope*)
+         (XPC_SCOPE_WORD(mMaybeScope) & ~XPC_SCOPE_MASK);}
+
+    nsISupports*
+    GetIdentityObject() const {return mIdentity;}
+
+    /**
+     * This getter clears the gray bit before handing out the JSObject which
+     * means that the object is guaranteed to be kept alive past the next CC.
+     */
+    JSObject*
+    GetFlatJSObject() const
+        {if (mFlatJSObject != INVALID_OBJECT)
+             xpc_UnmarkGrayObject(mFlatJSObject);
+         return mFlatJSObject;}
+
+    /**
+     * This getter does not change the color of the JSObject meaning that the
+     * object returned is not guaranteed to be kept alive past the next CC.
+     *
+     * This should only be called if you are certain that the return value won't
+     * be passed into a JS API function and that it won't be stored without
+     * being rooted (or otherwise signaling the stored value to the CC).
+     */
+    JSObject*
+    GetFlatJSObjectPreserveColor() const {return mFlatJSObject;}
+
+    XPCLock*
+    GetLock() const {return IsValid() && HasProto() ?
+                                GetProto()->GetLock() : nsnull;}
+
+    XPCNativeSet*
+    GetSet() const {XPCAutoLock al(GetLock()); return mSet;}
+
+    void
+    SetSet(XPCNativeSet* set) {XPCAutoLock al(GetLock()); mSet = set;}
+
+private:
+    inline void
+    ExpireWrapper()
+        {mMaybeScope = (XPCWrappedNativeScope*)
+                       (XPC_SCOPE_WORD(mMaybeScope) | XPC_WRAPPER_EXPIRED);}
+
+public:
+
+    XPCNativeScriptableInfo*
+    GetScriptableInfo() const {return mScriptableInfo;}
+
+    nsIXPCScriptable*      // call this wrong and you deserve to crash
+    GetScriptableCallback() const  {return mScriptableInfo->GetCallback();}
+
+    void**
+    GetSecurityInfoAddr() {return HasProto() ?
+                                   GetProto()->GetSecurityInfoAddr() : nsnull;}
+
+    nsIClassInfo*
+    GetClassInfo() const {return IsValid() && HasProto() ?
+                            GetProto()->GetClassInfo() : nsnull;}
+
+    JSBool
+    HasSharedProto() const {return IsValid() && HasProto() &&
+                            GetProto()->IsShared();}
+
+    JSBool
+    HasMutatedSet() const {return IsValid() &&
+                                  (!HasProto() ||
+                                   GetSet() != GetProto()->GetSet());}
+
+    XPCJSRuntime*
+    GetRuntime() const {XPCWrappedNativeScope* scope = GetScope();
+                        return scope ? scope->GetRuntime() : nsnull;}
+
+    static nsresult
+    GetNewOrUsed(XPCCallContext& ccx,
+                 xpcObjectHelper& helper,
+                 XPCWrappedNativeScope* Scope,
+                 XPCNativeInterface* Interface,
+                 JSBool isGlobal,
+                 XPCWrappedNative** wrapper);
+
+    static nsresult
+    Morph(XPCCallContext& ccx,
+          JSObject* existingJSObject,
+          XPCNativeInterface* Interface,
+          nsWrapperCache *cache,
+          XPCWrappedNative** resultWrapper);
+
+public:
+    static nsresult
+    GetUsedOnly(XPCCallContext& ccx,
+                nsISupports* Object,
+                XPCWrappedNativeScope* Scope,
+                XPCNativeInterface* Interface,
+                XPCWrappedNative** wrapper);
+
+    // If pobj2 is not null and *pobj2 is not null after the call then *pobj2
+    // points to an object for which IS_SLIM_WRAPPER_OBJECT is true.
+    // cx is null when invoked from the marking phase of the GC. In this case
+    // fubobj must be null as well.
+    static XPCWrappedNative*
+    GetWrappedNativeOfJSObject(JSContext* cx, JSObject* obj,
+                               JSObject* funobj = nsnull,
+                               JSObject** pobj2 = nsnull,
+                               XPCWrappedNativeTearOff** pTearOff = nsnull);
+    static XPCWrappedNative*
+    GetAndMorphWrappedNativeOfJSObject(JSContext* cx, JSObject* obj)
+    {
+        JSObject *obj2 = nsnull;
+        XPCWrappedNative* wrapper =
+            GetWrappedNativeOfJSObject(cx, obj, nsnull, &obj2);
+        if (wrapper || !obj2)
+            return wrapper;
+
+        NS_ASSERTION(IS_SLIM_WRAPPER(obj2),
+                     "Hmm, someone changed GetWrappedNativeOfJSObject?");
+        SLIM_LOG_WILL_MORPH(cx, obj2);
+        return MorphSlimWrapper(cx, obj2) ?
+               (XPCWrappedNative*)xpc_GetJSPrivate(obj2) :
+               nsnull;
+    }
+
+    static nsresult
+    ReparentWrapperIfFound(XPCCallContext& ccx,
+                           XPCWrappedNativeScope* aOldScope,
+                           XPCWrappedNativeScope* aNewScope,
+                           JSObject* aNewParent,
+                           nsISupports* aCOMObj,
+                           XPCWrappedNative** aWrapper);
+
+    void FlatJSObjectFinalized(JSContext *cx);
+
+    void SystemIsBeingShutDown(JSContext* cx);
+
+    enum CallMode {CALL_METHOD, CALL_GETTER, CALL_SETTER};
+
+    static JSBool CallMethod(XPCCallContext& ccx,
+                             CallMode mode = CALL_METHOD);
+
+    static JSBool GetAttribute(XPCCallContext& ccx)
+        {return CallMethod(ccx, CALL_GETTER);}
+
+    static JSBool SetAttribute(XPCCallContext& ccx)
+        {return CallMethod(ccx, CALL_SETTER);}
+
+    inline JSBool HasInterfaceNoQI(const nsIID& iid);
+
+    XPCWrappedNativeTearOff* LocateTearOff(XPCCallContext& ccx,
+                                           XPCNativeInterface* aInterface);
+    XPCWrappedNativeTearOff* FindTearOff(XPCCallContext& ccx,
+                                         XPCNativeInterface* aInterface,
+                                         JSBool needJSObject = false,
+                                         nsresult* pError = nsnull);
+    void Mark() const
+    {
+        mSet->Mark();
+        if (mScriptableInfo) mScriptableInfo->Mark();
+        if (HasProto()) GetProto()->Mark();
+    }
+
+    // Yes, we *do* need to mark the mScriptableInfo in both cases.
+    inline void TraceJS(JSTracer* trc)
+    {
+        if (mScriptableInfo && JS_IsGCMarkingTracer(trc))
+            mScriptableInfo->Mark();
+        if (HasProto()) GetProto()->TraceJS(trc);
+        JSObject* wrapper = GetWrapperPreserveColor();
+        if (wrapper)
+            JS_CALL_OBJECT_TRACER(trc, wrapper, "XPCWrappedNative::mWrapper");
+        if (mScriptableInfo &&
+            (mScriptableInfo->GetJSClass()->flags & JSCLASS_XPCONNECT_GLOBAL))
+            GetScope()->TraceDOMPrototypes(trc);
+    }
+
+    inline void AutoTrace(JSTracer* trc)
+    {
+        // If this got called, we're being kept alive by someone who really
+        // needs us alive and whole.  Do not let our mFlatJSObject go away.
+        // This is the only time we should be tracing our mFlatJSObject,
+        // normally somebody else is doing that. Be careful not to trace the
+        // bogus INVALID_OBJECT value we can have during init, though.
+        if (mFlatJSObject && mFlatJSObject != INVALID_OBJECT) {
+            JS_CALL_OBJECT_TRACER(trc, mFlatJSObject,
+                                  "XPCWrappedNative::mFlatJSObject");
+        }
+    }
+
+#ifdef DEBUG
+    void ASSERT_SetsNotMarked() const
+        {mSet->ASSERT_NotMarked();
+         if (HasProto()){GetProto()->ASSERT_SetNotMarked();}}
+
+    int DEBUG_CountOfTearoffChunks() const
+        {int i = 0; const XPCWrappedNativeTearOffChunk* to;
+         for (to = &mFirstChunk; to; to = to->mNextChunk) {i++;} return i;}
+#endif
+
+    inline void SweepTearOffs();
+
+    // Returns a string that shuld be free'd using JS_smprintf_free (or null).
+    char* ToString(XPCCallContext& ccx,
+                   XPCWrappedNativeTearOff* to = nsnull) const;
+
+    static void GatherProtoScriptableCreateInfo(nsIClassInfo* classInfo,
+                                                XPCNativeScriptableCreateInfo& sciProto);
+
+    JSBool HasExternalReference() const {return mRefCnt > 1;}
+
+    JSBool NeedsSOW() { return !!(mWrapperWord & NEEDS_SOW); }
+    void SetNeedsSOW() { mWrapperWord |= NEEDS_SOW; }
+    JSBool NeedsCOW() { return !!(mWrapperWord & NEEDS_COW); }
+    void SetNeedsCOW() { mWrapperWord |= NEEDS_COW; }
+    JSBool MightHaveExpandoObject() { return !!(mWrapperWord & MIGHT_HAVE_EXPANDO); }
+    void SetHasExpandoObject() { mWrapperWord |= MIGHT_HAVE_EXPANDO; }
+
+    JSObject* GetWrapperPreserveColor() const
+        {return (JSObject*)(mWrapperWord & (size_t)~(size_t)FLAG_MASK);}
+
+    JSObject* GetWrapper()
+    {
+        JSObject* wrapper = GetWrapperPreserveColor();
+        if (wrapper) {
+            xpc_UnmarkGrayObject(wrapper);
+            // Call this to unmark mFlatJSObject.
+            GetFlatJSObject();
+        }
+        return wrapper;
+    }
+    void SetWrapper(JSObject *obj)
+    {
+        PRWord newval = PRWord(obj) | (mWrapperWord & FLAG_MASK);
+        JS_ModifyReference((void **)&mWrapperWord, (void *)newval);
+    }
+
+    void NoteTearoffs(nsCycleCollectionTraversalCallback& cb);
+
+    QITableEntry* GetOffsets()
+    {
+        if (!HasProto() || !GetProto()->ClassIsDOMObject())
+            return nsnull;
+
+        XPCWrappedNativeProto* proto = GetProto();
+        QITableEntry* offsets = proto->GetOffsets();
+        if (!offsets) {
+            static NS_DEFINE_IID(kThisPtrOffsetsSID, NS_THISPTROFFSETS_SID);
+            mIdentity->QueryInterface(kThisPtrOffsetsSID, (void**)&offsets);
+        }
+        return offsets;
+    }
+
+    // Make ctor and dtor protected (rather than private) to placate nsCOMPtr.
+protected:
+    XPCWrappedNative(); // not implemented
+
+    // This ctor is used if this object will have a proto.
+    XPCWrappedNative(already_AddRefed<nsISupports> aIdentity,
+                     XPCWrappedNativeProto* aProto);
+
+    // This ctor is used if this object will NOT have a proto.
+    XPCWrappedNative(already_AddRefed<nsISupports> aIdentity,
+                     XPCWrappedNativeScope* aScope,
+                     XPCNativeSet* aSet);
+
+    virtual ~XPCWrappedNative();
+    void Destroy();
+
+    void UpdateScriptableInfo(XPCNativeScriptableInfo *si);
+
+private:
+    enum {
+        NEEDS_SOW = JS_BIT(0),
+        NEEDS_COW = JS_BIT(1),
+        MIGHT_HAVE_EXPANDO = JS_BIT(2),
+        FLAG_MASK = JS_BITMASK(3)
+    };
+
+private:
+
+    JSBool Init(XPCCallContext& ccx, JSObject* parent, JSBool isGlobal,
+                const XPCNativeScriptableCreateInfo* sci);
+    JSBool Init(XPCCallContext &ccx, JSObject *existingJSObject);
+    JSBool FinishInit(XPCCallContext &ccx);
+
+    JSBool ExtendSet(XPCCallContext& ccx, XPCNativeInterface* aInterface);
+
+    nsresult InitTearOff(XPCCallContext& ccx,
+                         XPCWrappedNativeTearOff* aTearOff,
+                         XPCNativeInterface* aInterface,
+                         JSBool needJSObject);
+
+    JSBool InitTearOffJSObject(XPCCallContext& ccx,
+                               XPCWrappedNativeTearOff* to);
+
+public:
+    static const XPCNativeScriptableCreateInfo& GatherScriptableCreateInfo(nsISupports* obj,
+                                                                           nsIClassInfo* classInfo,
+                                                                           XPCNativeScriptableCreateInfo& sciProto,
+                                                                           XPCNativeScriptableCreateInfo& sciWrapper);
+
+private:
+    union
+    {
+        XPCWrappedNativeScope*   mMaybeScope;
+        XPCWrappedNativeProto*   mMaybeProto;
+    };
+    XPCNativeSet*                mSet;
+    JSObject*                    mFlatJSObject;
+    XPCNativeScriptableInfo*     mScriptableInfo;
+    XPCWrappedNativeTearOffChunk mFirstChunk;
+    PRWord                       mWrapperWord;
+
+#ifdef XPC_CHECK_WRAPPER_THREADSAFETY
+public:
+    // Don't want to overload _mOwningThread
+    PRThread*                    mThread;
+#endif
+};
+
+#endif // XPCWrappedNative_h
diff --git a/js/xpconnect/src/xpcprivate.h b/js/xpconnect/src/xpcprivate.h
--- a/js/xpconnect/src/xpcprivate.h
+++ b/js/xpconnect/src/xpcprivate.h
@@ -157,16 +157,17 @@
 #include "XPCNativeMember.h"
 #include "XPCNativeInterface.h"
 #include "XPCNativeSetKey.h"
 #include "XPCNativeScriptableFlags.h"
 #include "XPCNativeScriptableShared.h"
 #include "XPCNativeScriptableInfo.h"
 #include "XPCNativeScriptableCreateInfo.h"
 #include "XPCWrappedNativeProto.h"
+#include "XPCWrappedNative.h"
 
 class XPCRootSetElem;
 
 /***************************************************************************/
 // Compile time switches for instrumentation and stuff....
 
 // Note that one would not normally turn *any* of these on in a non-DEBUG build.
 
@@ -266,18 +267,16 @@ extern const char XPC_XPCONNECT_CONTRACT
     else                                                                      \
         result = nsnull;                                                      \
     *dest = result;                                                           \
     return (result || !src) ? NS_OK : NS_ERROR_OUT_OF_MEMORY
 
 
 #define WRAPPER_SLOTS (JSCLASS_HAS_PRIVATE | JSCLASS_HAS_RESERVED_SLOTS(1))
 
-#define INVALID_OBJECT ((JSObject *)1)
-
 /***************************************************************************/
 // Auto locking support class...
 
 // We PROMISE to never screw this up.
 #ifdef _MSC_VER
 #pragma warning(disable : 4355) // OK to pass "this" in member initializer
 #endif
 
@@ -453,423 +452,16 @@ enum WrapperType {
 
     XOW             = 1 << 3,
     COW             = 1 << 4,
     SOW             = 1 << 5
 };
 
 }
 
-/***************************************************************************/
-
-/***********************************************/
-class xpcObjectHelper;
-extern JSBool ConstructSlimWrapper(XPCCallContext &ccx,
-                                   xpcObjectHelper &aHelper,
-                                   XPCWrappedNativeScope* xpcScope,
-                                   jsval *rval);
-extern JSBool MorphSlimWrapper(JSContext *cx, JSObject *obj);
-
-static inline XPCWrappedNativeProto*
-GetSlimWrapperProto(JSObject *obj)
-{
-  const js::Value &v = js::GetReservedSlot(obj, 0);
-  return static_cast<XPCWrappedNativeProto*>(v.toPrivate());
-}
-
-void *xpc_GetJSPrivate(JSObject *obj);
-
-/***************************************************************************/
-// XPCWrappedNative the wrapper around one instance of a native xpcom object
-// to be used from JavaScript.
-
-class XPCWrappedNative : public nsIXPConnectWrappedNative
-{
-public:
-    NS_DECL_ISUPPORTS
-    NS_DECL_NSIXPCONNECTJSOBJECTHOLDER
-    NS_DECL_NSIXPCONNECTWRAPPEDNATIVE
-    // No need to unlink the JS objects, if the XPCWrappedNative will be cycle
-    // collected then its mFlatJSObject will be cycle collected too and
-    // finalization of the mFlatJSObject will unlink the js objects (see
-    // XPC_WN_NoHelper_Finalize and FlatJSObjectFinalized).
-    // We also give XPCWrappedNative empty Root/Unroot methods, to avoid
-    // root/unrooting the JS objects from addrefing/releasing the
-    // XPCWrappedNative during unlinking, which would make the JS objects
-    // uncollectable to the JS GC.
-    class NS_CYCLE_COLLECTION_INNERCLASS
-     : public nsXPCOMCycleCollectionParticipant
-    {
-      NS_DECL_CYCLE_COLLECTION_CLASS_BODY_NO_UNLINK(XPCWrappedNative,
-                                                    XPCWrappedNative)
-      NS_IMETHOD Root(void *p) { return NS_OK; }
-      NS_IMETHOD Unlink(void *p);
-      NS_IMETHOD Unroot(void *p) { return NS_OK; }
-    };
-    NS_CYCLE_COLLECTION_PARTICIPANT_INSTANCE
-    NS_DECL_CYCLE_COLLECTION_UNMARK_PURPLE_STUB(XPCWrappedNative)
-
-    nsIPrincipal* GetObjectPrincipal() const;
-
-    JSBool
-    IsValid() const {return nsnull != mFlatJSObject;}
-
-#define XPC_SCOPE_WORD(s)   ((jsword)(s))
-#define XPC_SCOPE_MASK      ((jsword)0x3)
-#define XPC_SCOPE_TAG       ((jsword)0x1)
-#define XPC_WRAPPER_EXPIRED ((jsword)0x2)
-
-    static inline JSBool
-    IsTaggedScope(XPCWrappedNativeScope* s)
-        {return XPC_SCOPE_WORD(s) & XPC_SCOPE_TAG;}
-
-    static inline XPCWrappedNativeScope*
-    TagScope(XPCWrappedNativeScope* s)
-        {NS_ASSERTION(!IsTaggedScope(s), "bad pointer!");
-         return (XPCWrappedNativeScope*)(XPC_SCOPE_WORD(s) | XPC_SCOPE_TAG);}
-
-    static inline XPCWrappedNativeScope*
-    UnTagScope(XPCWrappedNativeScope* s)
-        {return (XPCWrappedNativeScope*)(XPC_SCOPE_WORD(s) & ~XPC_SCOPE_TAG);}
-
-    inline JSBool
-    IsWrapperExpired() const
-        {return XPC_SCOPE_WORD(mMaybeScope) & XPC_WRAPPER_EXPIRED;}
-
-    JSBool
-    HasProto() const {return !IsTaggedScope(mMaybeScope);}
-
-    XPCWrappedNativeProto*
-    GetProto() const
-        {return HasProto() ?
-         (XPCWrappedNativeProto*)
-         (XPC_SCOPE_WORD(mMaybeProto) & ~XPC_SCOPE_MASK) : nsnull;}
-
-    void SetProto(XPCWrappedNativeProto* p);
-
-    XPCWrappedNativeScope*
-    GetScope() const
-        {return GetProto() ? GetProto()->GetScope() :
-         (XPCWrappedNativeScope*)
-         (XPC_SCOPE_WORD(mMaybeScope) & ~XPC_SCOPE_MASK);}
-
-    nsISupports*
-    GetIdentityObject() const {return mIdentity;}
-
-    /**
-     * This getter clears the gray bit before handing out the JSObject which
-     * means that the object is guaranteed to be kept alive past the next CC.
-     */
-    JSObject*
-    GetFlatJSObject() const
-        {if (mFlatJSObject != INVALID_OBJECT)
-             xpc_UnmarkGrayObject(mFlatJSObject);
-         return mFlatJSObject;}
-
-    /**
-     * This getter does not change the color of the JSObject meaning that the
-     * object returned is not guaranteed to be kept alive past the next CC.
-     *
-     * This should only be called if you are certain that the return value won't
-     * be passed into a JS API function and that it won't be stored without
-     * being rooted (or otherwise signaling the stored value to the CC).
-     */
-    JSObject*
-    GetFlatJSObjectPreserveColor() const {return mFlatJSObject;}
-
-    XPCLock*
-    GetLock() const {return IsValid() && HasProto() ?
-                                GetProto()->GetLock() : nsnull;}
-
-    XPCNativeSet*
-    GetSet() const {XPCAutoLock al(GetLock()); return mSet;}
-
-    void
-    SetSet(XPCNativeSet* set) {XPCAutoLock al(GetLock()); mSet = set;}
-
-private:
-    inline void
-    ExpireWrapper()
-        {mMaybeScope = (XPCWrappedNativeScope*)
-                       (XPC_SCOPE_WORD(mMaybeScope) | XPC_WRAPPER_EXPIRED);}
-
-public:
-
-    XPCNativeScriptableInfo*
-    GetScriptableInfo() const {return mScriptableInfo;}
-
-    nsIXPCScriptable*      // call this wrong and you deserve to crash
-    GetScriptableCallback() const  {return mScriptableInfo->GetCallback();}
-
-    void**
-    GetSecurityInfoAddr() {return HasProto() ?
-                                   GetProto()->GetSecurityInfoAddr() : nsnull;}
-
-    nsIClassInfo*
-    GetClassInfo() const {return IsValid() && HasProto() ?
-                            GetProto()->GetClassInfo() : nsnull;}
-
-    JSBool
-    HasSharedProto() const {return IsValid() && HasProto() &&
-                            GetProto()->IsShared();}
-
-    JSBool
-    HasMutatedSet() const {return IsValid() &&
-                                  (!HasProto() ||
-                                   GetSet() != GetProto()->GetSet());}
-
-    XPCJSRuntime*
-    GetRuntime() const {XPCWrappedNativeScope* scope = GetScope();
-                        return scope ? scope->GetRuntime() : nsnull;}
-
-    static nsresult
-    GetNewOrUsed(XPCCallContext& ccx,
-                 xpcObjectHelper& helper,
-                 XPCWrappedNativeScope* Scope,
-                 XPCNativeInterface* Interface,
-                 JSBool isGlobal,
-                 XPCWrappedNative** wrapper);
-
-    static nsresult
-    Morph(XPCCallContext& ccx,
-          JSObject* existingJSObject,
-          XPCNativeInterface* Interface,
-          nsWrapperCache *cache,
-          XPCWrappedNative** resultWrapper);
-
-public:
-    static nsresult
-    GetUsedOnly(XPCCallContext& ccx,
-                nsISupports* Object,
-                XPCWrappedNativeScope* Scope,
-                XPCNativeInterface* Interface,
-                XPCWrappedNative** wrapper);
-
-    // If pobj2 is not null and *pobj2 is not null after the call then *pobj2
-    // points to an object for which IS_SLIM_WRAPPER_OBJECT is true.
-    // cx is null when invoked from the marking phase of the GC. In this case
-    // fubobj must be null as well.
-    static XPCWrappedNative*
-    GetWrappedNativeOfJSObject(JSContext* cx, JSObject* obj,
-                               JSObject* funobj = nsnull,
-                               JSObject** pobj2 = nsnull,
-                               XPCWrappedNativeTearOff** pTearOff = nsnull);
-    static XPCWrappedNative*
-    GetAndMorphWrappedNativeOfJSObject(JSContext* cx, JSObject* obj)
-    {
-        JSObject *obj2 = nsnull;
-        XPCWrappedNative* wrapper =
-            GetWrappedNativeOfJSObject(cx, obj, nsnull, &obj2);
-        if (wrapper || !obj2)
-            return wrapper;
-
-        NS_ASSERTION(IS_SLIM_WRAPPER(obj2),
-                     "Hmm, someone changed GetWrappedNativeOfJSObject?");
-        SLIM_LOG_WILL_MORPH(cx, obj2);
-        return MorphSlimWrapper(cx, obj2) ?
-               (XPCWrappedNative*)xpc_GetJSPrivate(obj2) :
-               nsnull;
-    }
-
-    static nsresult
-    ReparentWrapperIfFound(XPCCallContext& ccx,
-                           XPCWrappedNativeScope* aOldScope,
-                           XPCWrappedNativeScope* aNewScope,
-                           JSObject* aNewParent,
-                           nsISupports* aCOMObj,
-                           XPCWrappedNative** aWrapper);
-
-    void FlatJSObjectFinalized(JSContext *cx);
-
-    void SystemIsBeingShutDown(JSContext* cx);
-
-    enum CallMode {CALL_METHOD, CALL_GETTER, CALL_SETTER};
-
-    static JSBool CallMethod(XPCCallContext& ccx,
-                             CallMode mode = CALL_METHOD);
-
-    static JSBool GetAttribute(XPCCallContext& ccx)
-        {return CallMethod(ccx, CALL_GETTER);}
-
-    static JSBool SetAttribute(XPCCallContext& ccx)
-        {return CallMethod(ccx, CALL_SETTER);}
-
-    inline JSBool HasInterfaceNoQI(const nsIID& iid);
-
-    XPCWrappedNativeTearOff* LocateTearOff(XPCCallContext& ccx,
-                                           XPCNativeInterface* aInterface);
-    XPCWrappedNativeTearOff* FindTearOff(XPCCallContext& ccx,
-                                         XPCNativeInterface* aInterface,
-                                         JSBool needJSObject = false,
-                                         nsresult* pError = nsnull);
-    void Mark() const
-    {
-        mSet->Mark();
-        if (mScriptableInfo) mScriptableInfo->Mark();
-        if (HasProto()) GetProto()->Mark();
-    }
-
-    // Yes, we *do* need to mark the mScriptableInfo in both cases.
-    inline void TraceJS(JSTracer* trc)
-    {
-        if (mScriptableInfo && JS_IsGCMarkingTracer(trc))
-            mScriptableInfo->Mark();
-        if (HasProto()) GetProto()->TraceJS(trc);
-        JSObject* wrapper = GetWrapperPreserveColor();
-        if (wrapper)
-            JS_CALL_OBJECT_TRACER(trc, wrapper, "XPCWrappedNative::mWrapper");
-        if (mScriptableInfo &&
-            (mScriptableInfo->GetJSClass()->flags & JSCLASS_XPCONNECT_GLOBAL))
-            GetScope()->TraceDOMPrototypes(trc);
-    }
-
-    inline void AutoTrace(JSTracer* trc)
-    {
-        // If this got called, we're being kept alive by someone who really
-        // needs us alive and whole.  Do not let our mFlatJSObject go away.
-        // This is the only time we should be tracing our mFlatJSObject,
-        // normally somebody else is doing that. Be careful not to trace the
-        // bogus INVALID_OBJECT value we can have during init, though.
-        if (mFlatJSObject && mFlatJSObject != INVALID_OBJECT) {
-            JS_CALL_OBJECT_TRACER(trc, mFlatJSObject,
-                                  "XPCWrappedNative::mFlatJSObject");
-        }
-    }
-
-#ifdef DEBUG
-    void ASSERT_SetsNotMarked() const
-        {mSet->ASSERT_NotMarked();
-         if (HasProto()){GetProto()->ASSERT_SetNotMarked();}}
-
-    int DEBUG_CountOfTearoffChunks() const
-        {int i = 0; const XPCWrappedNativeTearOffChunk* to;
-         for (to = &mFirstChunk; to; to = to->mNextChunk) {i++;} return i;}
-#endif
-
-    inline void SweepTearOffs();
-
-    // Returns a string that shuld be free'd using JS_smprintf_free (or null).
-    char* ToString(XPCCallContext& ccx,
-                   XPCWrappedNativeTearOff* to = nsnull) const;
-
-    static void GatherProtoScriptableCreateInfo(nsIClassInfo* classInfo,
-                                                XPCNativeScriptableCreateInfo& sciProto);
-
-    JSBool HasExternalReference() const {return mRefCnt > 1;}
-
-    JSBool NeedsSOW() { return !!(mWrapperWord & NEEDS_SOW); }
-    void SetNeedsSOW() { mWrapperWord |= NEEDS_SOW; }
-    JSBool NeedsCOW() { return !!(mWrapperWord & NEEDS_COW); }
-    void SetNeedsCOW() { mWrapperWord |= NEEDS_COW; }
-    JSBool MightHaveExpandoObject() { return !!(mWrapperWord & MIGHT_HAVE_EXPANDO); }
-    void SetHasExpandoObject() { mWrapperWord |= MIGHT_HAVE_EXPANDO; }
-
-    JSObject* GetWrapperPreserveColor() const
-        {return (JSObject*)(mWrapperWord & (size_t)~(size_t)FLAG_MASK);}
-
-    JSObject* GetWrapper()
-    {
-        JSObject* wrapper = GetWrapperPreserveColor();
-        if (wrapper) {
-            xpc_UnmarkGrayObject(wrapper);
-            // Call this to unmark mFlatJSObject.
-            GetFlatJSObject();
-        }
-        return wrapper;
-    }
-    void SetWrapper(JSObject *obj)
-    {
-        PRWord newval = PRWord(obj) | (mWrapperWord & FLAG_MASK);
-        JS_ModifyReference((void **)&mWrapperWord, (void *)newval);
-    }
-
-    void NoteTearoffs(nsCycleCollectionTraversalCallback& cb);
-
-    QITableEntry* GetOffsets()
-    {
-        if (!HasProto() || !GetProto()->ClassIsDOMObject())
-            return nsnull;
-
-        XPCWrappedNativeProto* proto = GetProto();
-        QITableEntry* offsets = proto->GetOffsets();
-        if (!offsets) {
-            static NS_DEFINE_IID(kThisPtrOffsetsSID, NS_THISPTROFFSETS_SID);
-            mIdentity->QueryInterface(kThisPtrOffsetsSID, (void**)&offsets);
-        }
-        return offsets;
-    }
-
-    // Make ctor and dtor protected (rather than private) to placate nsCOMPtr.
-protected:
-    XPCWrappedNative(); // not implemented
-
-    // This ctor is used if this object will have a proto.
-    XPCWrappedNative(already_AddRefed<nsISupports> aIdentity,
-                     XPCWrappedNativeProto* aProto);
-
-    // This ctor is used if this object will NOT have a proto.
-    XPCWrappedNative(already_AddRefed<nsISupports> aIdentity,
-                     XPCWrappedNativeScope* aScope,
-                     XPCNativeSet* aSet);
-
-    virtual ~XPCWrappedNative();
-    void Destroy();
-
-    void UpdateScriptableInfo(XPCNativeScriptableInfo *si);
-
-private:
-    enum {
-        NEEDS_SOW = JS_BIT(0),
-        NEEDS_COW = JS_BIT(1),
-        MIGHT_HAVE_EXPANDO = JS_BIT(2),
-        FLAG_MASK = JS_BITMASK(3)
-    };
-
-private:
-
-    JSBool Init(XPCCallContext& ccx, JSObject* parent, JSBool isGlobal,
-                const XPCNativeScriptableCreateInfo* sci);
-    JSBool Init(XPCCallContext &ccx, JSObject *existingJSObject);
-    JSBool FinishInit(XPCCallContext &ccx);
-
-    JSBool ExtendSet(XPCCallContext& ccx, XPCNativeInterface* aInterface);
-
-    nsresult InitTearOff(XPCCallContext& ccx,
-                         XPCWrappedNativeTearOff* aTearOff,
-                         XPCNativeInterface* aInterface,
-                         JSBool needJSObject);
-
-    JSBool InitTearOffJSObject(XPCCallContext& ccx,
-                               XPCWrappedNativeTearOff* to);
-
-public:
-    static const XPCNativeScriptableCreateInfo& GatherScriptableCreateInfo(nsISupports* obj,
-                                                                           nsIClassInfo* classInfo,
-                                                                           XPCNativeScriptableCreateInfo& sciProto,
-                                                                           XPCNativeScriptableCreateInfo& sciWrapper);
-
-private:
-    union
-    {
-        XPCWrappedNativeScope*   mMaybeScope;
-        XPCWrappedNativeProto*   mMaybeProto;
-    };
-    XPCNativeSet*                mSet;
-    JSObject*                    mFlatJSObject;
-    XPCNativeScriptableInfo*     mScriptableInfo;
-    XPCWrappedNativeTearOffChunk mFirstChunk;
-    PRWord                       mWrapperWord;
-
-#ifdef XPC_CHECK_WRAPPER_THREADSAFETY
-public:
-    // Don't want to overload _mOwningThread
-    PRThread*                    mThread;
-#endif
-};
-
 /***************************************************************************
 ****************************************************************************
 *
 * Core classes for wrapped JSObject for use from native code...
 *
 ****************************************************************************
 ***************************************************************************/
 
