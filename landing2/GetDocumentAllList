From: Ms2ger <ms2ger@gmail.com>

diff --git a/content/html/document/src/HTMLAllCollection.cpp b/content/html/document/src/HTMLAllCollection.cpp
--- a/content/html/document/src/HTMLAllCollection.cpp
+++ b/content/html/document/src/HTMLAllCollection.cpp
@@ -128,17 +128,34 @@ HTMLAllCollection::Collection()
   return mCollection;
 }
 
 nsISupports*
 HTMLAllCollection::GetNamedItem(const nsAString& aID,
                                 nsWrapperCache** aCache,
                                 nsresult* aResult)
 {
-  return mDocument->GetDocumentAllResult(aID, aCache, aResult);
+  nsContentList* docAllList = mDocument->GetDocumentAllList(aID, aResult);
+  if (!docAllList) {
+    return nullptr;
+  }
+
+  // Check if there are more than 1 entries. Do this by getting the second one
+  // rather than the length since getting the length always requires walking
+  // the entire document.
+
+  nsIContent* cont = docAllList->Item(1, true);
+  if (cont) {
+    *aCache = docAllList;
+    return static_cast<nsINodeList*>(docAllList);
+  }
+
+  // There's only 0 or 1 items. Return the first one or null.
+  *aCache = cont = docAllList->Item(0, true);
+  return cont;
 }
 
 } // namespace dom
 } // namespace mozilla
 
 static nsHTMLDocument*
 GetDocument(JSObject *obj)
 {
diff --git a/content/html/document/src/nsHTMLDocument.cpp b/content/html/document/src/nsHTMLDocument.cpp
--- a/content/html/document/src/nsHTMLDocument.cpp
+++ b/content/html/document/src/nsHTMLDocument.cpp
@@ -2645,22 +2645,19 @@ DocAllResultMatch(nsIContent* aContent, 
   }
 
   const nsAttrValue* val = elm->GetParsedAttr(nsGkAtoms::name);
   return val && val->Type() == nsAttrValue::eAtom &&
          val->GetAtomValue() == aAtom;
 }
 
 
-nsISupports*
-nsHTMLDocument::GetDocumentAllResult(const nsAString& aID,
-                                     nsWrapperCache** aCache,
-                                     nsresult *aResult)
+nsContentList*
+nsHTMLDocument::GetDocumentAllList(const nsAString& aID, nsresult *aResult)
 {
-  *aCache = nullptr;
   *aResult = NS_OK;
 
   nsIdentifierMapEntry *entry = mIdentifierMap.PutEntry(aID);
   if (!entry) {
     *aResult = NS_ERROR_OUT_OF_MEMORY;
 
     return nullptr;
   }
@@ -2674,30 +2671,17 @@ nsHTMLDocument::GetDocumentAllResult(con
   if (!docAllList) {
     nsCOMPtr<nsIAtom> id = do_GetAtom(aID);
 
     docAllList = new nsContentList(root, DocAllResultMatch,
                                    nullptr, nullptr, true, id);
     entry->SetDocAllList(docAllList);
   }
 
-  // Check if there are more than 1 entries. Do this by getting the second one
-  // rather than the length since getting the length always requires walking
-  // the entire document.
-
-  nsIContent* cont = docAllList->Item(1, true);
-  if (cont) {
-    *aCache = docAllList;
-    return static_cast<nsINodeList*>(docAllList);
-  }
-
-  // There's only 0 or 1 items. Return the first one or null.
-  *aCache = cont = docAllList->Item(0, true);
-
-  return cont;
+  return docAllList;
 }
 
 HTMLAllCollection*
 nsHTMLDocument::All()
 {
   if (!mAll) {
     mAll = new HTMLAllCollection(this);
   }
diff --git a/content/html/document/src/nsHTMLDocument.h b/content/html/document/src/nsHTMLDocument.h
--- a/content/html/document/src/nsHTMLDocument.h
+++ b/content/html/document/src/nsHTMLDocument.h
@@ -102,19 +102,17 @@ public:
   // nsIDOMHTMLDocument interface
   NS_DECL_NSIDOMHTMLDOCUMENT
 
   /**
    * Returns the result of document.all[aID] which can either be a node
    * or a nodelist depending on if there are multiple nodes with the same
    * id.
    */
-  nsISupports *GetDocumentAllResult(const nsAString& aID,
-                                    nsWrapperCache **aCache,
-                                    nsresult *aResult);
+  nsContentList* GetDocumentAllList(const nsAString& aID, nsresult* aResult);
   mozilla::dom::HTMLAllCollection* All();
   JSObject* GetAll(JSContext* aCx, mozilla::ErrorResult& aRv);
 
   nsISupports* ResolveName(const nsAString& aName, nsWrapperCache **aCache);
 
   virtual void AddedForm() MOZ_OVERRIDE;
   virtual void RemovedForm() MOZ_OVERRIDE;
   virtual int32_t GetNumFormsSynchronous() MOZ_OVERRIDE;
