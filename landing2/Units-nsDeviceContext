From: Ms2ger <ms2ger@gmail.com>

diff --git a/content/events/src/Touch.h b/content/events/src/Touch.h
--- a/content/events/src/Touch.h
+++ b/content/events/src/Touch.h
@@ -2,16 +2,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef mozilla_dom_Touch_h
 #define mozilla_dom_Touch_h
 
 #include "mozilla/Attributes.h"
+#include "nsCOMPtr.h"
 #include "nsWrapperCache.h"
 #include "Units.h"
 
 class nsPresContext;
 class nsEvent;
 
 namespace mozilla {
 namespace dom {
diff --git a/layout/base/Units.h b/layout/base/Units.h
--- a/layout/base/Units.h
+++ b/layout/base/Units.h
@@ -5,17 +5,16 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef MOZ_UNITS_H_
 #define MOZ_UNITS_H_
 
 #include "mozilla/gfx/Point.h"
 #include "mozilla/gfx/Rect.h"
 #include "mozilla/gfx/ScaleFactor.h"
-#include "nsDeviceContext.h"
 #include "nsRect.h"
 
 namespace mozilla {
 
 struct CSSPixel;
 struct LayoutDevicePixel;
 struct LayerPixel;
 struct ScreenPixel;
@@ -69,66 +68,67 @@ typedef gfx::ScaleFactor<ScreenPixel, La
 typedef gfx::ScaleFactor<LayerPixel, ScreenPixel> LayerToScreenScale;
 typedef gfx::ScaleFactor<ScreenPixel, LayerPixel> ScreenToLayerScale;
 typedef gfx::ScaleFactor<ScreenPixel, ScreenPixel> ScreenToScreenScale;
 
 /*
  * The pixels that content authors use to specify sizes in.
  */
 struct CSSPixel {
+  static float AppUnitsPerCSSPixel() { return 60; }
 
   // Conversions from app units
 
   static CSSPoint FromAppUnits(const nsPoint& aPoint) {
-    return CSSPoint(NSAppUnitsToFloatPixels(aPoint.x, float(nsDeviceContext::AppUnitsPerCSSPixel())),
-                    NSAppUnitsToFloatPixels(aPoint.y, float(nsDeviceContext::AppUnitsPerCSSPixel())));
+    return CSSPoint(NSAppUnitsToFloatPixels(aPoint.x, AppUnitsPerCSSPixel()),
+                    NSAppUnitsToFloatPixels(aPoint.y, AppUnitsPerCSSPixel()));
   }
 
   static CSSRect FromAppUnits(const nsRect& aRect) {
-    return CSSRect(NSAppUnitsToFloatPixels(aRect.x, float(nsDeviceContext::AppUnitsPerCSSPixel())),
-                   NSAppUnitsToFloatPixels(aRect.y, float(nsDeviceContext::AppUnitsPerCSSPixel())),
-                   NSAppUnitsToFloatPixels(aRect.width, float(nsDeviceContext::AppUnitsPerCSSPixel())),
-                   NSAppUnitsToFloatPixels(aRect.height, float(nsDeviceContext::AppUnitsPerCSSPixel())));
+    return CSSRect(NSAppUnitsToFloatPixels(aRect.x, AppUnitsPerCSSPixel()),
+                   NSAppUnitsToFloatPixels(aRect.y, AppUnitsPerCSSPixel()),
+                   NSAppUnitsToFloatPixels(aRect.width, AppUnitsPerCSSPixel()),
+                   NSAppUnitsToFloatPixels(aRect.height, AppUnitsPerCSSPixel()));
   }
 
   static CSSIntPoint FromAppUnitsRounded(const nsPoint& aPoint) {
-    return CSSIntPoint(NSAppUnitsToIntPixels(aPoint.x, float(nsDeviceContext::AppUnitsPerCSSPixel())),
-                       NSAppUnitsToIntPixels(aPoint.y, float(nsDeviceContext::AppUnitsPerCSSPixel())));
+    return CSSIntPoint(NSAppUnitsToIntPixels(aPoint.x, AppUnitsPerCSSPixel()),
+                       NSAppUnitsToIntPixels(aPoint.y, AppUnitsPerCSSPixel()));
   }
 
   static CSSIntSize FromAppUnitsRounded(const nsSize& aSize)
   {
-    return CSSIntSize(NSAppUnitsToIntPixels(aSize.width, float(nsDeviceContext::AppUnitsPerCSSPixel())),
-                      NSAppUnitsToIntPixels(aSize.height, float(nsDeviceContext::AppUnitsPerCSSPixel())));
+    return CSSIntSize(NSAppUnitsToIntPixels(aSize.width, AppUnitsPerCSSPixel()),
+                      NSAppUnitsToIntPixels(aSize.height, AppUnitsPerCSSPixel()));
   }
 
   static CSSIntRect FromAppUnitsRounded(const nsRect& aRect) {
-    return CSSIntRect(NSAppUnitsToIntPixels(aRect.x, float(nsDeviceContext::AppUnitsPerCSSPixel())),
-                      NSAppUnitsToIntPixels(aRect.y, float(nsDeviceContext::AppUnitsPerCSSPixel())),
-                      NSAppUnitsToIntPixels(aRect.width, float(nsDeviceContext::AppUnitsPerCSSPixel())),
-                      NSAppUnitsToIntPixels(aRect.height, float(nsDeviceContext::AppUnitsPerCSSPixel())));
+    return CSSIntRect(NSAppUnitsToIntPixels(aRect.x, AppUnitsPerCSSPixel()),
+                      NSAppUnitsToIntPixels(aRect.y, AppUnitsPerCSSPixel()),
+                      NSAppUnitsToIntPixels(aRect.width, AppUnitsPerCSSPixel()),
+                      NSAppUnitsToIntPixels(aRect.height, AppUnitsPerCSSPixel()));
   }
 
   // Conversions to app units
 
   static nsPoint ToAppUnits(const CSSPoint& aPoint) {
-    return nsPoint(NSToCoordRoundWithClamp(aPoint.x * float(nsDeviceContext::AppUnitsPerCSSPixel())),
-                   NSToCoordRoundWithClamp(aPoint.y * float(nsDeviceContext::AppUnitsPerCSSPixel())));
+    return nsPoint(NSToCoordRoundWithClamp(aPoint.x * AppUnitsPerCSSPixel()),
+                   NSToCoordRoundWithClamp(aPoint.y * AppUnitsPerCSSPixel()));
   }
 
   static nsPoint ToAppUnits(const CSSIntPoint& aPoint) {
-    return nsPoint(NSToCoordRoundWithClamp(float(aPoint.x) * float(nsDeviceContext::AppUnitsPerCSSPixel())),
-                   NSToCoordRoundWithClamp(float(aPoint.y) * float(nsDeviceContext::AppUnitsPerCSSPixel())));
+    return nsPoint(NSToCoordRoundWithClamp(float(aPoint.x) * AppUnitsPerCSSPixel()),
+                   NSToCoordRoundWithClamp(float(aPoint.y) * AppUnitsPerCSSPixel()));
   }
 
   static nsRect ToAppUnits(const CSSRect& aRect) {
-    return nsRect(NSToCoordRoundWithClamp(aRect.x * float(nsDeviceContext::AppUnitsPerCSSPixel())),
-                  NSToCoordRoundWithClamp(aRect.y * float(nsDeviceContext::AppUnitsPerCSSPixel())),
-                  NSToCoordRoundWithClamp(aRect.width * float(nsDeviceContext::AppUnitsPerCSSPixel())),
-                  NSToCoordRoundWithClamp(aRect.height * float(nsDeviceContext::AppUnitsPerCSSPixel())));
+    return nsRect(NSToCoordRoundWithClamp(aRect.x * AppUnitsPerCSSPixel()),
+                  NSToCoordRoundWithClamp(aRect.y * AppUnitsPerCSSPixel()),
+                  NSToCoordRoundWithClamp(aRect.width * AppUnitsPerCSSPixel()),
+                  NSToCoordRoundWithClamp(aRect.height * AppUnitsPerCSSPixel()));
   }
 };
 
 /*
  * The pixels that are referred to as "device pixels" in layout code. In
  * general this is obtained by converting a value in app units value by the
  * nsDeviceContext::AppUnitsPerDevPixel() value. The size of these pixels
  * are affected by:
