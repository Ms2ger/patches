From: Ms2ger <ms2ger@gmail.com>

diff --git a/editor/libeditor/html/nsHTMLEditRules.cpp b/editor/libeditor/html/nsHTMLEditRules.cpp
--- a/editor/libeditor/html/nsHTMLEditRules.cpp
+++ b/editor/libeditor/html/nsHTMLEditRules.cpp
@@ -6261,30 +6261,30 @@ nsHTMLEditRules::MakeTransitionList(nsCO
 already_AddRefed<nsIDOMNode>
 nsHTMLEditRules::IsInListItem(nsIDOMNode* aNode)
 {
   nsCOMPtr<nsINode> node = do_QueryInterface(aNode);
   nsCOMPtr<nsIDOMNode> retval = do_QueryInterface(IsInListItem(node));
   return retval.forget();
 }
 
-nsINode*
+dom::Element*
 nsHTMLEditRules::IsInListItem(nsINode* aNode)
 {
   NS_ENSURE_TRUE(aNode, nsnull);
   if (aNode->IsElement() && nsHTMLEditUtils::IsListItem(aNode->AsElement())) {
-    return aNode;
+    return aNode->AsElement();
   }
 
   nsINode* parent = aNode->GetNodeParent();
   while (parent && mHTMLEditor->IsDescendantOfEditorRoot(parent) &&
          !(parent->IsElement() &&
            nsHTMLEditUtils::IsTableElement(parent->AsElement()))) {
     if (nsHTMLEditUtils::IsListItem(parent->AsElement())) {
-      return parent;
+      return parent->AsElement();
     }
     parent = parent->GetNodeParent();
   }
   return nsnull;
 }
 
 
 ///////////////////////////////////////////////////////////////////////////
@@ -6622,83 +6622,88 @@ nsHTMLEditRules::ReturnInListItem(nsISel
   NS_ENSURE_SUCCESS(res, res);
   // now split list item
   int32_t newOffset;
   res = mHTMLEditor->SplitNodeDeep( aListItem, selNode, aOffset, &newOffset, false);
   NS_ENSURE_SUCCESS(res, res);
   // hack: until I can change the damaged doc range code back to being
   // extra inclusive, I have to manually detect certain list items that
   // may be left empty.
-  nsCOMPtr<nsIDOMNode> prevItem;
-  mHTMLEditor->GetPriorHTMLSibling(aListItem, address_of(prevItem));
-
-  if (prevItem && nsHTMLEditUtils::IsListItem(prevItem))
-  {
-    bool bIsEmptyNode;
-    res = mHTMLEditor->IsEmptyNode(prevItem, &bIsEmptyNode);
-    NS_ENSURE_SUCCESS(res, res);
-    if (bIsEmptyNode) {
-      res = CreateMozBR(prevItem, 0);
-      NS_ENSURE_SUCCESS(res, res);
-    } else {
-      res = mHTMLEditor->IsEmptyNode(aListItem, &bIsEmptyNode, true);
-      NS_ENSURE_SUCCESS(res, res);
-      if (bIsEmptyNode) 
-      {
-        nsCOMPtr<nsIAtom> nodeAtom = nsEditor::GetTag(aListItem);
-        if (nodeAtom == nsEditProperty::dd || nodeAtom == nsEditProperty::dt)
-        {
-          nsCOMPtr<nsIDOMNode> list;
-          int32_t itemOffset;
-          res = nsEditor::GetNodeLocation(aListItem, address_of(list), &itemOffset);
-          NS_ENSURE_SUCCESS(res, res);
-
-          nsAutoString listTag((nodeAtom == nsEditProperty::dt) ? NS_LITERAL_STRING("dd") : NS_LITERAL_STRING("dt"));
-          nsCOMPtr<nsIDOMNode> newListItem;
-          res = mHTMLEditor->CreateNode(listTag, list, itemOffset+1, getter_AddRefs(newListItem));
-          NS_ENSURE_SUCCESS(res, res);
-          res = mEditor->DeleteNode(aListItem);
-          NS_ENSURE_SUCCESS(res, res);
-          return aSelection->Collapse(newListItem, 0);
-        }
-
-        nsCOMPtr<nsIDOMNode> brNode;
-        res = mHTMLEditor->CopyLastEditableChildStyles(prevItem, aListItem, getter_AddRefs(brNode));
-        NS_ENSURE_SUCCESS(res, res);
-        if (brNode) 
-        {
-          nsCOMPtr<nsIDOMNode> brParent;
-          int32_t offset;
-          res = nsEditor::GetNodeLocation(brNode, address_of(brParent), &offset);
-          return aSelection->Collapse(brParent, offset);
-        }
-      }
-      else
-      {
-        nsWSRunObject wsObj(mHTMLEditor, aListItem, 0);
-        nsCOMPtr<nsIDOMNode> visNode;
-        int32_t visOffset = 0;
-        int16_t wsType;
-        res = wsObj.NextVisibleNode(aListItem, 0, address_of(visNode), &visOffset, &wsType);
-        NS_ENSURE_SUCCESS(res, res);
-        if ( (wsType==nsWSRunObject::eSpecial)  || 
-             (wsType==nsWSRunObject::eBreak)    ||
-             nsHTMLEditUtils::IsHR(visNode) ) 
-        {
-          nsCOMPtr<nsIDOMNode> parent;
-          int32_t offset;
-          res = nsEditor::GetNodeLocation(visNode, address_of(parent), &offset);
-          NS_ENSURE_SUCCESS(res, res);
-          return aSelection->Collapse(parent, offset);
-        }
-        else
-        {
-          return aSelection->Collapse(visNode, visOffset);
-        }
-      }
+
+  nsCOMPtr<nsINode> listItem = do_QueryInterface(aListItem);
+  NS_ENSURE_STATE(listItem);
+
+  nsIContent* prevItem = mHTMLEditor->GetPriorHTMLSibling(listItem);
+  if (!prevItem || !prevItem->IsElement() ||
+      !nsHTMLEditUtils::IsListItem(prevItem->AsElement())) {
+    return aSelection->CollapseNative(listItem, 0);
+  }
+
+  bool bIsEmptyNode;
+  res = mHTMLEditor->IsEmptyNode(prevItem, &bIsEmptyNode);
+  NS_ENSURE_SUCCESS(res, res);
+  if (bIsEmptyNode) {
+    res = CreateMozBR(prevItem, 0);
+    NS_ENSURE_SUCCESS(res, res);
+    return aSelection->CollapseNative(listItem, 0);
+  }
+
+  res = mHTMLEditor->IsEmptyNode(listItem, &bIsEmptyNode, true);
+  NS_ENSURE_SUCCESS(res, res);
+  if (bIsEmptyNode) {
+    if (
+    nsCOMPtr<nsIAtom> nodeAtom = nsEditor::GetTag(aListItem);
+    if (nodeAtom == nsEditProperty::dd || nodeAtom == nsEditProperty::dt)
+    {
+      nsCOMPtr<nsIDOMNode> list;
+      int32_t itemOffset;
+      res = nsEditor::GetNodeLocation(aListItem, address_of(list), &itemOffset);
+      NS_ENSURE_SUCCESS(res, res);
+
+      nsAutoString listTag((nodeAtom == nsEditProperty::dt) ? NS_LITERAL_STRING("dd") : NS_LITERAL_STRING("dt"));
+      nsCOMPtr<nsIDOMNode> newListItem;
+      res = mHTMLEditor->CreateNode(listTag, list, itemOffset+1, getter_AddRefs(newListItem));
+      NS_ENSURE_SUCCESS(res, res);
+      res = mEditor->DeleteNode(aListItem);
+      NS_ENSURE_SUCCESS(res, res);
+      return aSelection->Collapse(newListItem, 0);
+    }
+
+    nsCOMPtr<nsIDOMNode> brNode;
+    res = mHTMLEditor->CopyLastEditableChildStyles(prevItem, aListItem, getter_AddRefs(brNode));
+    NS_ENSURE_SUCCESS(res, res);
+    if (brNode) 
+    {
+      nsCOMPtr<nsIDOMNode> brParent;
+      int32_t offset;
+      res = nsEditor::GetNodeLocation(brNode, address_of(brParent), &offset);
+      return aSelection->Collapse(brParent, offset);
+    }
+  }
+  else
+  {
+    nsWSRunObject wsObj(mHTMLEditor, aListItem, 0);
+    nsCOMPtr<nsIDOMNode> visNode;
+    int32_t visOffset = 0;
+    int16_t wsType;
+    res = wsObj.NextVisibleNode(aListItem, 0, address_of(visNode), &visOffset, &wsType);
+    NS_ENSURE_SUCCESS(res, res);
+    if ( (wsType==nsWSRunObject::eSpecial)  || 
+         (wsType==nsWSRunObject::eBreak)    ||
+         nsHTMLEditUtils::IsHR(visNode) ) 
+    {
+      nsCOMPtr<nsIDOMNode> parent;
+      int32_t offset;
+      res = nsEditor::GetNodeLocation(visNode, address_of(parent), &offset);
+      NS_ENSURE_SUCCESS(res, res);
+      return aSelection->Collapse(parent, offset);
+    }
+    else
+    {
+      return aSelection->Collapse(visNode, visOffset);
     }
   }
   res = aSelection->Collapse(aListItem,0);
   return res;
 }
 
 
 ///////////////////////////////////////////////////////////////////////////
diff --git a/editor/libeditor/html/nsHTMLEditRules.h b/editor/libeditor/html/nsHTMLEditRules.h
--- a/editor/libeditor/html/nsHTMLEditRules.h
+++ b/editor/libeditor/html/nsHTMLEditRules.h
@@ -151,17 +151,17 @@ protected:
   nsresult AlignBlockContents(nsIDOMNode *aNode, const nsAString *alignType);
   nsresult AppendInnerFormatNodes(nsCOMArray<nsIDOMNode>& aArray,
                                   nsINode* aNode);
   nsresult AppendInnerFormatNodes(nsCOMArray<nsIDOMNode>& aArray,
                                   nsIDOMNode *aNode);
   nsresult GetFormatString(nsIDOMNode *aNode, nsAString &outFormat);
   nsresult GetInnerContent(nsIDOMNode *aNode, nsCOMArray<nsIDOMNode>& outArrayOfNodes, int32_t *aIndex, bool aList = true, bool aTble = true);
   already_AddRefed<nsIDOMNode> IsInListItem(nsIDOMNode* aNode);
-  nsINode* IsInListItem(nsINode* aNode);
+  mozilla::dom::Element* IsInListItem(nsINode* aNode);
   nsresult ReturnInHeader(nsISelection *aSelection, nsIDOMNode *aHeader, nsIDOMNode *aTextNode, int32_t aOffset);
   nsresult ReturnInParagraph(nsISelection *aSelection, nsIDOMNode *aHeader, nsIDOMNode *aTextNode, int32_t aOffset, bool *aCancel, bool *aHandled);
   nsresult SplitParagraph(nsIDOMNode *aPara,
                           nsIDOMNode *aBRNode, 
                           nsISelection *aSelection,
                           nsCOMPtr<nsIDOMNode> *aSelNode, 
                           int32_t *aOffset);
   nsresult ReturnInListItem(nsISelection *aSelection, nsIDOMNode *aHeader, nsIDOMNode *aTextNode, int32_t aOffset);
