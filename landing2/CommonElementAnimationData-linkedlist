From: Ms2ger <ms2ger@gmail.com>

diff --git a/layout/style/AnimationCommon.cpp b/layout/style/AnimationCommon.cpp
--- a/layout/style/AnimationCommon.cpp
+++ b/layout/style/AnimationCommon.cpp
@@ -36,17 +36,16 @@ IsGeometricProperty(nsCSSProperty aPrope
     default:
       return false;
   }
 }
 
 CommonAnimationManager::CommonAnimationManager(nsPresContext *aPresContext)
   : mPresContext(aPresContext)
 {
-  PR_INIT_CLIST(&mElementData);
 }
 
 CommonAnimationManager::~CommonAnimationManager()
 {
   NS_ABORT_IF_FALSE(!mPresContext, "Disconnect should have been called");
 }
 
 void
@@ -56,42 +55,40 @@ CommonAnimationManager::Disconnect()
   RemoveAllElementData();
 
   mPresContext = nullptr;
 }
 
 void
 CommonAnimationManager::AddElementData(CommonElementAnimationData* aData)
 {
-  if (PR_CLIST_IS_EMPTY(&mElementData)) {
+  if (mElementData.isEmpty()) {
     // We need to observe the refresh driver.
     nsRefreshDriver *rd = mPresContext->RefreshDriver();
     rd->AddRefreshObserver(this, Flush_Style);
   }
 
-  PR_INSERT_BEFORE(aData, &mElementData);
+  mElementData.insertBack(aData);
 }
 
 void
 CommonAnimationManager::ElementDataRemoved()
 {
   // If we have no transitions or animations left, remove ourselves from
   // the refresh driver.
-  if (PR_CLIST_IS_EMPTY(&mElementData)) {
+  if (mElementData.isEmpty()) {
     mPresContext->RefreshDriver()->RemoveRefreshObserver(this, Flush_Style);
   }
 }
 
 void
 CommonAnimationManager::RemoveAllElementData()
 {
-  while (!PR_CLIST_IS_EMPTY(&mElementData)) {
-    CommonElementAnimationData *head =
-      static_cast<CommonElementAnimationData*>(PR_LIST_HEAD(&mElementData));
-    head->Destroy();
+  while (!mElementData.isEmpty()) {
+    mElementData.getFirst()->Destroy();
   }
 }
 
 /*
  * nsISupports implementation
  */
 
 NS_IMPL_ISUPPORTS1(CommonAnimationManager, nsIStyleRuleProcessor)
diff --git a/layout/style/AnimationCommon.h b/layout/style/AnimationCommon.h
--- a/layout/style/AnimationCommon.h
+++ b/layout/style/AnimationCommon.h
@@ -1,26 +1,26 @@
 /* vim: set shiftwidth=2 tabstop=8 autoindent cindent expandtab: */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef mozilla_css_AnimationCommon_h
 #define mozilla_css_AnimationCommon_h
 
+#include "mozilla/Attributes.h"
+#include "mozilla/dom/Element.h"
+#include "mozilla/LinkedList.h"
+#include "nsCSSProperty.h"
+#include "nsIStyleRule.h"
 #include "nsIStyleRuleProcessor.h"
-#include "nsIStyleRule.h"
 #include "nsRefreshDriver.h"
-#include "prclist.h"
+#include "nsSMILKeySpline.h"
 #include "nsStyleAnimation.h"
-#include "nsCSSProperty.h"
-#include "mozilla/dom/Element.h"
-#include "nsSMILKeySpline.h"
 #include "nsStyleStruct.h"
-#include "mozilla/Attributes.h"
 
 class nsPresContext;
 
 
 namespace mozilla {
 namespace css {
 
 bool IsGeometricProperty(nsCSSProperty aProperty);
@@ -64,17 +64,17 @@ public:
   static bool ThrottlingEnabled();
 protected:
   friend struct CommonElementAnimationData; // for ElementDataRemoved
 
   void AddElementData(CommonElementAnimationData* aData);
   void ElementDataRemoved();
   void RemoveAllElementData();
 
-  PRCList mElementData;
+  LinkedList<CommonElementAnimationData> mElementData;
   nsPresContext *mPresContext; // weak (non-null from ctor to Disconnect)
 };
 
 /**
  * A style rule that maps property-nsStyleAnimation::Value pairs.
  */
 class AnimValuesStyleRule MOZ_FINAL : public nsIStyleRule
 {
@@ -123,37 +123,35 @@ public:
   Type GetType() const { return mType; }
   uint32_t GetSteps() const { return mSteps; }
 private:
   Type mType;
   nsSMILKeySpline mTimingFunction;
   uint32_t mSteps;
 };
 
-struct CommonElementAnimationData : public PRCList
+struct CommonElementAnimationData : public LinkedListElement<CommonElementAnimationData>
 {
   CommonElementAnimationData(dom::Element *aElement, nsIAtom *aElementProperty,
                              CommonAnimationManager *aManager)
     : mElement(aElement)
     , mElementProperty(aElementProperty)
     , mManager(aManager)
     , mAnimationGeneration(0)
 #ifdef DEBUG
     , mCalledPropertyDtor(false)
 #endif
   {
     MOZ_COUNT_CTOR(CommonElementAnimationData);
-    PR_INIT_CLIST(this);
   }
   ~CommonElementAnimationData()
   {
     NS_ABORT_IF_FALSE(mCalledPropertyDtor,
                       "must call destructor through element property dtor");
     MOZ_COUNT_DTOR(CommonElementAnimationData);
-    PR_REMOVE_LINK(this);
     mManager->ElementDataRemoved();
   }
 
   void Destroy()
   {
     // This will call our destructor.
     mElement->DeleteProperty(mElementProperty);
   }
diff --git a/layout/style/nsAnimationManager.cpp b/layout/style/nsAnimationManager.cpp
--- a/layout/style/nsAnimationManager.cpp
+++ b/layout/style/nsAnimationManager.cpp
@@ -420,17 +420,17 @@ ElementAnimations::CanPerformOnComposito
   return true;
 }
 
 ElementAnimations*
 nsAnimationManager::GetElementAnimations(dom::Element *aElement,
                                          nsCSSPseudoElements::Type aPseudoType,
                                          bool aCreateIfNeeded)
 {
-  if (!aCreateIfNeeded && PR_CLIST_IS_EMPTY(&mElementData)) {
+  if (!aCreateIfNeeded && mElementData.isEmpty()) {
     // Early return for the most common case.
     return nullptr;
   }
 
   nsIAtom *propName;
   if (aPseudoType == nsCSSPseudoElements::ePseudo_NotPseudoElement) {
     propName = nsGkAtoms::animationsProperty;
   } else if (aPseudoType == nsCSSPseudoElements::ePseudo_before) {
@@ -996,19 +996,20 @@ nsAnimationManager::WillRefresh(mozilla:
 void
 nsAnimationManager::FlushAnimations(FlushFlags aFlags)
 {
   // FIXME: check that there's at least one style rule that's not
   // in its "done" state, and if there isn't, remove ourselves from
   // the refresh driver (but leave the animations!).
   TimeStamp now = mPresContext->RefreshDriver()->MostRecentRefresh();
   bool didThrottle = false;
-  for (PRCList *l = PR_LIST_HEAD(&mElementData); l != &mElementData;
-       l = PR_NEXT_LINK(l)) {
-    ElementAnimations *ea = static_cast<ElementAnimations*>(l);
+  for (CommonElementAnimationData* l = mElementData.getFirst();
+       l;
+       l = l->getNext()) {
+    ElementAnimations* ea = static_cast<ElementAnimations*>(l);
     bool canThrottleTick = aFlags == Can_Throttle &&
       ea->CanPerformOnCompositorThread(
         CommonElementAnimationData::CanAnimateFlags(0)) &&
       ea->CanThrottleAnimation(now);
 
     nsRefPtr<css::AnimValuesStyleRule> oldStyleRule = ea->mStyleRule;
     ea->EnsureStyleRuleFor(now, mPendingEvents, canThrottleTick);
     if (oldStyleRule != ea->mStyleRule) {
diff --git a/layout/style/nsTransitionManager.cpp b/layout/style/nsTransitionManager.cpp
--- a/layout/style/nsTransitionManager.cpp
+++ b/layout/style/nsTransitionManager.cpp
@@ -368,17 +368,17 @@ nsTransitionManager::UpdateThrottledStyl
       UpdateThrottledStylesForSubtree(child, newStyle, aChangeList);
     }
   }
 }
 
 void
 nsTransitionManager::UpdateAllThrottledStyles()
 {
-  if (PR_CLIST_IS_EMPTY(&mElementData)) {
+  if (mElementData.isEmpty()) {
     // no throttled transitions, leave early
     mPresContext->TickLastUpdateThrottledStyle();
     return;
   }
 
   if (mPresContext->ThrottledStyleIsUpToDate()) {
     // throttled transitions are up to date, leave early
     return;
@@ -386,20 +386,20 @@ nsTransitionManager::UpdateAllThrottledS
 
   mPresContext->TickLastUpdateThrottledStyle();
   TimeStamp now = mPresContext->RefreshDriver()->MostRecentRefresh();
 
   nsStyleChangeList changeList;
 
   // update each transitioning element by finding its root-most ancestor with a
   // transition, and flushing the style on that ancestor and all its descendants
-  PRCList *next = PR_LIST_HEAD(&mElementData);
-  while (next != &mElementData) {
-    ElementTransitions* et = static_cast<ElementTransitions*>(next);
-    next = PR_NEXT_LINK(next);
+  for (CommonElementAnimationData* l = mElementData.getFirst();
+       l;
+       l = l->getNext()) {
+    ElementTransitions* et = static_cast<ElementTransitions*>(l);
 
     if (et->mFlushGeneration == now) {
       // this element has been ticked already
       continue;
     }
 
     // element is initialised to the starting element (i.e., one we know has
     // a transition) and ends up with the root-most transitioning ancestor,
@@ -833,17 +833,17 @@ nsTransitionManager::ConsiderStartingTra
   aWhichStarted->AddProperty(aProperty);
 }
 
 ElementTransitions*
 nsTransitionManager::GetElementTransitions(dom::Element *aElement,
                                            nsCSSPseudoElements::Type aPseudoType,
                                            bool aCreateIfNeeded)
 {
-  if (!aCreateIfNeeded && PR_CLIST_IS_EMPTY(&mElementData)) {
+  if (!aCreateIfNeeded && mElementData.isEmpty()) {
     // Early return for the most common case.
     return nullptr;
   }
 
   nsIAtom *propName;
   if (aPseudoType == nsCSSPseudoElements::ePseudo_NotPseudoElement) {
     propName = nsGkAtoms::transitionsProperty;
   } else if (aPseudoType == nsCSSPseudoElements::ePseudo_before) {
@@ -1001,31 +1001,31 @@ nsTransitionManager::WillRefresh(mozilla
   }
 
   FlushTransitions(Can_Throttle);
 }
 
 void
 nsTransitionManager::FlushTransitions(FlushFlags aFlags)
 { 
-  if (PR_CLIST_IS_EMPTY(&mElementData)) {
+  if (mElementData.isEmpty()) {
     // no transitions, leave early
     return;
   }
 
   nsTArray<TransitionEventInfo> events;
   TimeStamp now = mPresContext->RefreshDriver()->MostRecentRefresh();
   bool didThrottle = false;
   // Trim transitions that have completed, post restyle events for frames that
   // are still transitioning, and start transitions with delays.
   {
-    PRCList *next = PR_LIST_HEAD(&mElementData);
-    while (next != &mElementData) {
-      ElementTransitions *et = static_cast<ElementTransitions*>(next);
-      next = PR_NEXT_LINK(next);
+    for (CommonElementAnimationData* l = mElementData.getFirst();
+         l;
+         l = l->getNext()) {
+      ElementTransitions* et = static_cast<ElementTransitions*>(l);
 
       bool canThrottleTick = aFlags == Can_Throttle &&
         et->CanPerformOnCompositorThread(
           CommonElementAnimationData::CanAnimateFlags(0)) &&
         et->CanThrottleAnimation(now);
 
       NS_ABORT_IF_FALSE(et->mElement->GetCurrentDoc() ==
                           mPresContext->Document(),
