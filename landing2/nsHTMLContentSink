From: Ms2ger <ms2ger@gmail.com>

diff --git a/content/html/document/src/nsHTMLContentSink.cpp b/content/html/document/src/nsHTMLContentSink.cpp
--- a/content/html/document/src/nsHTMLContentSink.cpp
+++ b/content/html/document/src/nsHTMLContentSink.cpp
@@ -176,21 +176,16 @@ public:
   NS_IMETHOD IsEnabled(int32_t aTag, bool* aReturn);
 
 #ifdef DEBUG
   // nsIDebugDumpContent
   NS_IMETHOD DumpContentModel();
 #endif
 
 protected:
-  // If aCheckIfPresent is true, will only set an attribute in cases
-  // when it's not already set.
-  nsresult AddAttributes(const nsIParserNode& aNode, nsIContent* aContent,
-                         bool aNotify = false,
-                         bool aCheckIfPresent = false);
   already_AddRefed<nsGenericHTMLElement>
   CreateContentObject(const nsIParserNode& aNode, nsHTMLTag aNodeType);
 
 #ifdef DEBUG
   void SinkTraceNode(uint32_t aBit,
                      const char* aMsg,
                      const nsHTMLTag aTag,
                      int32_t aStackPos,
@@ -254,18 +249,16 @@ class SinkContext
 public:
   SinkContext(HTMLContentSink* aSink);
   ~SinkContext();
 
   nsresult Begin(nsHTMLTag aNodeType, nsGenericHTMLElement* aRoot,
                  uint32_t aNumFlushed, int32_t aInsertionPoint);
   nsresult OpenContainer(const nsIParserNode& aNode);
   nsresult CloseContainer(const nsHTMLTag aTag);
-  nsresult AddLeaf(const nsIParserNode& aNode);
-  nsresult AddLeaf(nsIContent* aContent);
   nsresult End();
 
   nsresult GrowStack();
   nsresult AddText(const nsAString& aText);
   nsresult FlushText(bool* aDidFlush = nullptr,
                      bool aReleaseLast = false);
   nsresult FlushTextAndRelease(bool* aDidFlush = nullptr)
   {
@@ -329,101 +322,16 @@ HTMLContentSink::SinkTraceNode(uint32_t 
 
     NS_ConvertUTF16toUTF8 tag(parserService->HTMLIdToStringTag(aTag));
     PR_LogPrint("%s: this=%p node='%s' stackPos=%d", 
                 aMsg, aThis, tag.get(), aStackPos);
   }
 }
 #endif
 
-nsresult
-HTMLContentSink::AddAttributes(const nsIParserNode& aNode,
-                               nsIContent* aContent, bool aNotify,
-                               bool aCheckIfPresent)
-{
-  // Add tag attributes to the content attributes
-
-  int32_t ac = aNode.GetAttributeCount();
-
-  if (ac == 0) {
-    // No attributes, nothing to do. Do an early return to avoid
-    // constructing the nsAutoString object for nothing.
-
-    return NS_OK;
-  }
-
-  nsHTMLTag nodeType = nsHTMLTag(aNode.GetNodeType());
-
-  // The attributes are on the parser node in the order they came in in the
-  // source.  What we want to happen if a single attribute is set multiple
-  // times on an element is that the first time should "win".  That is, <input
-  // value="foo" value="bar"> should show "foo".  So we loop over the
-  // attributes backwards; this ensures that the first attribute in the set
-  // wins.  This does mean that we do some extra work in the case when the same
-  // attribute is set multiple times, but we save a HasAttr call in the much
-  // more common case of reasonable HTML.  Note that if aCheckIfPresent is set
-  // then we actually want to loop _forwards_ to preserve the "first attribute
-  // wins" behavior.  That does mean that when aCheckIfPresent is set the order
-  // of attributes will get "reversed" from the point of view of the
-  // serializer.  But aCheckIfPresent is only true for malformed documents with
-  // multiple <html>, <head>, or <body> tags, so we're doing fixup anyway at
-  // that point.
-
-  int32_t i, limit, step;
-  if (aCheckIfPresent) {
-    i = 0;
-    limit = ac;
-    step = 1;
-  } else {
-    i = ac - 1;
-    limit = -1;
-    step = -1;
-  }
-  
-  nsAutoString key;
-  for (; i != limit; i += step) {
-    // Get lower-cased key
-    nsresult rv = nsContentUtils::ASCIIToLower(aNode.GetKeyAt(i), key);
-    if (NS_FAILED(rv)) {
-      return rv;
-    }
-
-    nsCOMPtr<nsIAtom> keyAtom = do_GetAtom(key);
-
-    if (aCheckIfPresent && aContent->HasAttr(kNameSpaceID_None, keyAtom)) {
-      continue;
-    }
-
-    // Get value and remove mandatory quotes
-    static const char* kWhitespace = "\n\r\t\b";
-
-    // Bug 114997: Don't trim whitespace on <input value="...">:
-    // Using ?: outside the function call would be more efficient, but
-    // we don't trust ?: with references.
-    const nsAString& v =
-      nsContentUtils::TrimCharsInSet(
-        (nodeType == eHTMLTag_input &&
-          keyAtom == nsGkAtoms::value) ?
-        "" : kWhitespace, aNode.GetValueAt(i));
-
-    if (nodeType == eHTMLTag_a && keyAtom == nsGkAtoms::name) {
-      NS_ConvertUTF16toUTF8 cname(v);
-      NS_ConvertUTF8toUTF16 uv(nsUnescape(cname.BeginWriting()));
-
-      // Add attribute to content
-      aContent->SetAttr(kNameSpaceID_None, keyAtom, uv, aNotify);
-    } else {
-      // Add attribute to content
-      aContent->SetAttr(kNameSpaceID_None, keyAtom, v, aNotify);
-    }
-  }
-
-  return NS_OK;
-}
-
 /**
  * Factory subroutine to create all of the html content objects.
  */
 already_AddRefed<nsGenericHTMLElement>
 HTMLContentSink::CreateContentObject(const nsIParserNode& aNode,
                                      nsHTMLTag aNodeType)
 {
   // Find/create atom for the tag name
@@ -644,56 +552,24 @@ SinkContext::OpenContainer(const nsIPars
   }
 
   mStack[mStackPos].mType = nodeType;
   mStack[mStackPos].mContent = content;
   mStack[mStackPos].mNumFlushed = 0;
   mStack[mStackPos].mInsertionPoint = -1;
   ++mStackPos;
 
-  rv = mSink->AddAttributes(aNode, content);
+  MOZ_ASSERT(aNode.GetAttributeCount() == 0);
 
   mStack[mStackPos - 2].Add(content);
 
-  NS_ENSURE_SUCCESS(rv, rv);
-
   if (mSink->IsMonolithicContainer(nodeType)) {
     mSink->mInMonolithicContainer++;
   }
 
-  // Special handling for certain tags
-  switch (nodeType) {
-    case eHTMLTag_form:
-      MOZ_NOT_REACHED("Must not use HTMLContentSink for forms.");
-      break;
-
-    case eHTMLTag_frameset:
-      MOZ_NOT_REACHED("Must not use HTMLContentSink for frames.");
-      break;
-
-    case eHTMLTag_noembed:
-    case eHTMLTag_noframes:
-      MOZ_NOT_REACHED("Must not use HTMLContentSink for noembed/noframes.");
-      break;
-
-    case eHTMLTag_script:
-    case eHTMLTag_style:
-      MOZ_NOT_REACHED("Must not use HTMLContentSink for styles and scripts.");
-      break;
-
-    case eHTMLTag_button:
-    case eHTMLTag_audio:
-    case eHTMLTag_video:
-      content->DoneCreatingElement();
-      break;
-
-    default:
-      break;
-  }
-
   return NS_OK;
 }
 
 bool
 SinkContext::HaveNotifiedForCurrentContent() const
 {
   if (0 < mStackPos) {
     nsIContent* parent = mStack[mStackPos - 1].mContent;
@@ -821,114 +697,16 @@ SinkContext::CloseContainer(const nsHTML
     mSink->ForceReflow();
   }
 #endif
 
   return result;
 }
 
 nsresult
-SinkContext::AddLeaf(const nsIParserNode& aNode)
-{
-  SINK_TRACE_NODE(SINK_TRACE_CALLS,
-                  "SinkContext::AddLeaf", 
-                  nsHTMLTag(aNode.GetNodeType()), 
-                  mStackPos, mSink);
-
-  nsresult rv = NS_OK;
-
-  switch (aNode.GetTokenType()) {
-  case eToken_start:
-    {
-      FlushTextAndRelease();
-
-      // Create new leaf content object
-      nsHTMLTag nodeType = nsHTMLTag(aNode.GetNodeType());
-      nsRefPtr<nsGenericHTMLElement> content =
-        mSink->CreateContentObject(aNode, nodeType);
-      NS_ENSURE_TRUE(content, NS_ERROR_OUT_OF_MEMORY);
-
-      rv = mSink->AddAttributes(aNode, content);
-      NS_ENSURE_SUCCESS(rv, rv);
-
-      // Add new leaf to its parent
-      AddLeaf(content);
-
-      // Additional processing needed once the element is in the tree
-      switch (nodeType) {
-      case eHTMLTag_meta:
-        MOZ_NOT_REACHED("Must not use HTMLContentSink for metas.");
-        rv = NS_ERROR_NOT_IMPLEMENTED;
-        break;
-
-      case eHTMLTag_input:
-        content->DoneCreatingElement();
-        break;
-
-      case eHTMLTag_menuitem:
-        content->DoneCreatingElement();
-        break;
-
-      default:
-        break;
-      }
-    }
-    break;
-
-  case eToken_text:
-  case eToken_whitespace:
-  case eToken_newline:
-    rv = AddText(aNode.GetText());
-
-    break;
-  case eToken_entity:
-    {
-      nsAutoString tmp;
-      int32_t unicode = aNode.TranslateToUnicodeStr(tmp);
-      if (unicode < 0) {
-        rv = AddText(aNode.GetText());
-      } else {
-        // Map carriage returns to newlines
-        if (!tmp.IsEmpty()) {
-          if (tmp.CharAt(0) == '\r') {
-            tmp.Assign((PRUnichar)'\n');
-          }
-          rv = AddText(tmp);
-        }
-      }
-    }
-
-    break;
-  default:
-    break;
-  }
-
-  return rv;
-}
-
-nsresult
-SinkContext::AddLeaf(nsIContent* aContent)
-{
-  NS_ASSERTION(mStackPos > 0, "leaf w/o container");
-  if (mStackPos <= 0) {
-    return NS_ERROR_FAILURE;
-  }
-  
-  DidAddContent(mStack[mStackPos - 1].Add(aContent));
-
-#ifdef DEBUG
-  if (SINK_LOG_TEST(gSinkLogModuleInfo, SINK_ALWAYS_REFLOW)) {
-    mSink->ForceReflow();
-  }
-#endif
-
-  return NS_OK;
-}
-
-nsresult
 SinkContext::End()
 {
   for (int32_t i = 0; i < mStackPos; i++) {
     NS_RELEASE(mStack[i].mContent);
   }
 
   mStackPos = 0;
   mTextLength = 0;
@@ -1134,80 +912,29 @@ SinkContext::UpdateChildCounts()
 
 /**
  * Flush any buffered text out by creating a text content object and
  * adding it to the content.
  */
 nsresult
 SinkContext::FlushText(bool* aDidFlush, bool aReleaseLast)
 {
-  nsresult rv = NS_OK;
-  bool didFlush = false;
-
-  if (mTextLength != 0) {
-    if (mLastTextNode) {
-      if ((mLastTextNodeSize + mTextLength) > mSink->mMaxTextRun) {
-        mLastTextNodeSize = 0;
-        mLastTextNode = nullptr;
-        FlushText(aDidFlush, aReleaseLast);
-      } else {
-        bool notify = HaveNotifiedForCurrentContent();
-        // We could probably always increase mInNotification here since
-        // if AppendText doesn't notify it shouldn't trigger evil code.
-        // But just in case it does, we don't want to mask any notifications.
-        if (notify) {
-          ++mSink->mInNotification;
-        }
-        rv = mLastTextNode->AppendText(mText, mTextLength, notify);
-        if (notify) {
-          --mSink->mInNotification;
-        }
-
-        mLastTextNodeSize += mTextLength;
-        mTextLength = 0;
-        didFlush = true;
-      }
-    } else {
-      nsRefPtr<nsTextNode> textContent =
-        new nsTextNode(mSink->mNodeInfoManager);
-
-      mLastTextNode = textContent;
-
-      // Set the text in the text node
-      mLastTextNode->SetText(mText, mTextLength, false);
-
-      // Eat up the rest of the text up in state.
-      mLastTextNodeSize += mTextLength;
-      mTextLength = 0;
-
-      rv = AddLeaf(mLastTextNode);
-      NS_ENSURE_SUCCESS(rv, rv);
-
-      didFlush = true;
-    }
-  }
+  MOZ_ASSERT(mTextLength == 0);
 
   if (aDidFlush) {
-    *aDidFlush = didFlush;
+    *aDidFlush = false;
   }
 
   if (aReleaseLast) {
     mLastTextNodeSize = 0;
     mLastTextNode = nullptr;
     mLastTextCharWasCR = false;
   }
 
-#ifdef DEBUG
-  if (didFlush &&
-      SINK_LOG_TEST(gSinkLogModuleInfo, SINK_ALWAYS_REFLOW)) {
-    mSink->ForceReflow();
-  }
-#endif
-
-  return rv;
+  return NS_OK;
 }
 
 
 nsresult
 NS_NewHTMLContentSink(nsIHTMLContentSink** aResult,
                       nsIDocument* aDoc,
                       nsIURI* aURI,
                       nsISupports* aContainer,
@@ -1650,19 +1377,18 @@ HTMLContentSink::OpenBody(const nsIParse
   SINK_TRACE_NODE(SINK_TRACE_CALLS,
                   "HTMLContentSink::OpenBody", 
                   eHTMLTag_body,
                   mCurrentContext->mStackPos, 
                   this);
 
   CloseHeadContext();  // do this just in case if the HEAD was left open!
 
-  // Add attributes, if any, to the current BODY node
   if (mBody) {
-    AddAttributes(aNode, mBody, true, true);
+    MOZ_ASSERT(aNode.GetAttributeCount() == 0);
     return NS_OK;
   }
 
   nsresult rv = mCurrentContext->OpenContainer(aNode);
 
   if (NS_FAILED(rv)) {
     return rv;
   }
@@ -1751,28 +1477,28 @@ HTMLContentSink::OpenContainer(const nsI
   switch (aNode.GetNodeType()) {
     case eHTMLTag_frameset:
       MOZ_NOT_REACHED("Must not use HTMLContentSink for frames.");
       rv = NS_ERROR_NOT_IMPLEMENTED;
       break;
     case eHTMLTag_head:
       rv = OpenHeadContext();
       if (NS_SUCCEEDED(rv)) {
-        rv = AddAttributes(aNode, mHead, true, mHaveSeenHead);
+        MOZ_ASSERT(aNode.GetAttributeCount() == 0);
         mHaveSeenHead = true;
       }
       break;
     case eHTMLTag_body:
       rv = OpenBody(aNode);
       break;
     case eHTMLTag_html:
       if (mRoot) {
         // If we've already hit this code once, need to check for
         // already-present attributes on the root.
-        AddAttributes(aNode, mRoot, true, mNotifiedRootInsertion);
+        MOZ_ASSERT(aNode.GetAttributeCount() == 0);
         if (!mNotifiedRootInsertion) {
           NotifyRootInsertion();
         }
         ProcessOfflineManifest(mRoot);
       }
       break;
     case eHTMLTag_form:
       MOZ_NOT_REACHED("Must not use HTMLContentSink for forms.");
@@ -1821,32 +1547,18 @@ NS_IMETHODIMP
 HTMLContentSink::CloseMalformedContainer(const eHTMLTags aTag)
 {
   return mCurrentContext->CloseContainer(aTag);
 }
 
 NS_IMETHODIMP
 HTMLContentSink::AddLeaf(const nsIParserNode& aNode)
 {
-  nsresult rv;
-
-  nsHTMLTag nodeType = nsHTMLTag(aNode.GetNodeType());
-  switch (nodeType) {
-  case eHTMLTag_link:
-    rv = NS_ERROR_NOT_IMPLEMENTED;
-    MOZ_NOT_REACHED("Must not use HTMLContentSink for links.");
-
-    break;
-  default:
-    rv = mCurrentContext->AddLeaf(aNode);
-
-    break;
-  }
-
-  return rv;
+  MOZ_NOT_REACHED("Must not add leafs in HTMLContentSink.");
+  return NS_ERROR_NOT_IMPLEMENTED;
 }
 
 NS_IMETHODIMP
 HTMLContentSink::DidProcessTokens(void)
 {
   return NS_OK;
 }
 
