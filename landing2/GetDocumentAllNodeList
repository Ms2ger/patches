From: Ms2ger <ms2ger@gmail.com>

diff --git a/content/html/document/src/HTMLAllCollection.cpp b/content/html/document/src/HTMLAllCollection.cpp
--- a/content/html/document/src/HTMLAllCollection.cpp
+++ b/content/html/document/src/HTMLAllCollection.cpp
@@ -14,21 +14,16 @@
 #include "nsJSUtils.h"
 #include "xpcpublic.h"
 
 using namespace mozilla;
 using namespace mozilla::dom;
 
 class nsHTMLDocumentSH
 {
-protected:
-  static bool GetDocumentAllNodeList(JSContext*,
-                                     JS::Handle<JSObject*>,
-                                     nsHTMLDocument* aDocument,
-                                     nsContentList** aNodeList);
 public:
   static bool DocumentAllGetProperty(JSContext *cx, JS::Handle<JSObject*> obj, JS::Handle<jsid> id,
                                      JS::MutableHandle<JS::Value> vp);
   static bool DocumentAllNewResolve(JSContext *cx, JS::Handle<JSObject*> obj, JS::Handle<jsid> id,
                                     unsigned flags, JS::MutableHandle<JSObject*> objp);
   static void ReleaseDocument(JSFreeOp *fop, JSObject *obj);
   static bool CallToGetPropMapper(JSContext *cx, unsigned argc, JS::Value *vp);
 };
@@ -162,28 +157,16 @@ WrapNative(JSContext *cx, JSObject *scop
            // If non-null aHolder will keep the jsval alive
            // while there's a ref to it
            nsIXPConnectJSObjectHolder** aHolder = nullptr)
 {
   return WrapNative(cx, scope, native, cache, nullptr, vp, aHolder,
                     aAllowWrapping);
 }
 
-// static
-bool
-nsHTMLDocumentSH::GetDocumentAllNodeList(JSContext*,
-                                         JS::Handle<JSObject*>,
-                                         nsHTMLDocument* aDocument,
-                                         nsContentList** aNodeList)
-{
-  nsRefPtr<nsContentList> collection = aDocument->All()->Collection();
-  collection.forget(aNodeList);
-  return true;
-}
-
 bool
 nsHTMLDocumentSH::DocumentAllGetProperty(JSContext *cx, JS::Handle<JSObject*> obj_,
                                          JS::Handle<jsid> id, JS::MutableHandle<JS::Value> vp)
 {
   JS::Rooted<JSObject*> obj(cx, obj_);
 
   // document.all.item and .namedItem get their value in the
   // newResolve hook, so nothing to do for those properties here. And
@@ -213,20 +196,17 @@ nsHTMLDocumentSH::DocumentAllGetProperty
   nsresult rv = NS_OK;
 
   if (JSID_IS_STRING(id)) {
     if (nsDOMClassInfo::sLength_id == id) {
       // Map document.all.length to the length of the collection
       // document.getElementsByTagName("*"), and make sure <div
       // id="length"> doesn't shadow document.all.length.
 
-      nsRefPtr<nsContentList> nodeList;
-      if (!GetDocumentAllNodeList(cx, obj, doc, getter_AddRefs(nodeList))) {
-        return false;
-      }
+      nsRefPtr<nsContentList> nodeList = doc->All()->Collection();
 
       uint32_t length;
       rv = nodeList->GetLength(&length);
 
       if (NS_FAILED(rv)) {
         xpc::Throw(cx, rv);
 
         return false;
@@ -244,20 +224,17 @@ nsHTMLDocumentSH::DocumentAllGetProperty
     if (NS_FAILED(rv)) {
       xpc::Throw(cx, rv);
       return false;
     }
   } else if (JSID_IS_INT(id) && JSID_TO_INT(id) >= 0) {
     // Map document.all[n] (where n is a number) to the n:th item in
     // the document.all node list.
 
-    nsRefPtr<nsContentList> nodeList;
-    if (!GetDocumentAllNodeList(cx, obj, doc, getter_AddRefs(nodeList))) {
-      return false;
-    }
+    nsRefPtr<nsContentList> nodeList = doc->All()->Collection();
 
     nsIContent *node = nodeList->Item(JSID_TO_INT(id));
 
     result = node;
     cache = node;
   } else {
     result = nullptr;
   }
