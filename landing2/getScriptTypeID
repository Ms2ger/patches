From: Ms2ger <ms2ger@gmail.com>

diff --git a/content/xul/content/src/nsXULElement.h b/content/xul/content/src/nsXULElement.h
--- a/content/xul/content/src/nsXULElement.h
+++ b/content/xul/content/src/nsXULElement.h
@@ -333,20 +333,17 @@ public:
                      nsIURI* aURI, uint32_t aLineNo,
                      nsIDocument* aDocument,
                      nsIScriptGlobalObjectOwner* aGlobalOwner);
 
     void UnlinkJSObjects();
 
     void Set(nsScriptObjectHolder<JSScript>& aHolder)
     {
-        NS_ASSERTION(mScriptObject.mLangID == aHolder.getScriptTypeID(),
-                     "Wrong language, this will leak the previous object.");
-
-        mScriptObject.mLangID = aHolder.getScriptTypeID();
+        mScriptObject.mLangID = nsIProgrammingLanguage::JAVASCRIPT;
         Set(aHolder.get());
     }
     void Set(JSScript* aObject);
 
     struct ScriptObjectHolder
     {
         ScriptObjectHolder(uint32_t aLangID) : mLangID(aLangID),
                                                mObject(nsnull)
diff --git a/dom/base/nsDOMScriptObjectHolder.h b/dom/base/nsDOMScriptObjectHolder.h
--- a/dom/base/nsDOMScriptObjectHolder.h
+++ b/dom/base/nsDOMScriptObjectHolder.h
@@ -94,40 +94,33 @@ public:
     if (mObject) {
       rv = mContext->DropScriptObject(mObject);
       mObject = nsnull;
     }
     return rv;
   }
 
   nsresult set(T* object) {
-    NS_ASSERTION(getScriptTypeID() != nsIProgrammingLanguage::UNKNOWN,
-                 "Must know the language!");
     nsresult rv = drop();
     if (NS_FAILED(rv))
       return rv;
     if (object) {
       rv = mContext->HoldScriptObject(object);
       // don't store the pointer if we failed to lock it.
       if (NS_SUCCEEDED(rv)) {
         mObject = object;
       }
     }
     return rv;
   }
   nsresult set(const nsScriptObjectHolder<T> &other) {
-    NS_ASSERTION(getScriptTypeID() == other.getScriptTypeID(),
-                 "Must have identical languages!");
     nsresult rv = drop();
     if (NS_FAILED(rv))
       return rv;
     return set(other.mObject);
   }
-  // Get the language ID.
-  uint32_t getScriptTypeID() const {
-    return mContext->GetScriptTypeID();
-  }
+
 protected:
   T* mObject;
   nsCOMPtr<nsIScriptContext> mContext;
 };
 
 #endif // nsDOMScriptObjectHolder_h__
diff --git a/dom/base/nsJSEnvironment.cpp b/dom/base/nsJSEnvironment.cpp
--- a/dom/base/nsJSEnvironment.cpp
+++ b/dom/base/nsJSEnvironment.cpp
@@ -1552,18 +1552,16 @@ nsJSContext::CompileScript(const PRUnich
                                              static_cast<const jschar*>(aText),
                                              aTextLength,
                                              aURL,
                                              aLineNo,
                                              JSVersion(aVersion));
   if (!script) {
     return NS_ERROR_OUT_OF_MEMORY;
   }
-  NS_ASSERTION(aScriptObject.getScriptTypeID()==JAVASCRIPT,
-               "Expecting JS script object holder");
   return aScriptObject.set(script);
 }
 
 nsresult
 nsJSContext::ExecuteScript(JSScript* aScriptObject,
                            JSObject* aScopeObject,
                            nsAString* aRetValue,
                            bool* aIsUndefined)
@@ -1743,20 +1741,17 @@ nsJSContext::CompileEventHandler(nsIAtom
                                                  aBody.Length(),
                                                  aURL, aLineNo, JSVersion(aVersion));
 
   if (!fun) {
     ReportPendingException();
     return NS_ERROR_ILLEGAL_VALUE;
   }
 
-  JSObject *handler = ::JS_GetFunctionObject(fun);
-  NS_ASSERTION(aHandler.getScriptTypeID()==JAVASCRIPT,
-               "Expecting JS script object holder");
-  return aHandler.set(handler);
+  return aHandler.set(JS_GetFunctionObject(fun));
 }
 
 // XXX - note that CompileFunction doesn't yet play the nsScriptObjectHolder
 // game - caller must still ensure JS GC root.
 nsresult
 nsJSContext::CompileFunction(JSObject* aTarget,
                              const nsACString& aName,
                              uint32_t aArgCount,
@@ -2089,18 +2084,16 @@ nsJSContext::Deserialize(nsIObjectInputS
             ::JS_XDRMemSetData(xdr, NULL, 0);
         ::JS_XDRDestroy(xdr);
     }
 
     // If data is null now, it must have been freed while deserializing an
     // XPCOM object (e.g., a principal) beneath ::JS_XDRScript.
     if (data)
         nsMemory::Free(data);
-    NS_ASSERTION(aResult.getScriptTypeID()==JAVASCRIPT,
-                 "Expecting JS script object holder");
 
     // Now that we've cleaned up, handle the case when rv is a failure
     // code, which could happen for all sorts of reasons above.
     NS_ENSURE_SUCCESS(rv, rv);
 
     return aResult.set(result);
 }
 
