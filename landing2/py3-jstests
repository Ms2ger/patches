From: Ms2ger <ms2ger@gmail.com>

diff --git a/js/src/tests/jstests.py b/js/src/tests/jstests.py
--- a/js/src/tests/jstests.py
+++ b/js/src/tests/jstests.py
@@ -178,17 +178,17 @@ def parse_args():
 
     # Handle output redirection, if requested and relevant.
     options.output_fp = sys.stdout
     if options.output_file:
         if not options.show_cmd:
             options.show_output = True
         try:
             options.output_fp = open(options.output_file, 'w')
-        except IOError, ex:
+        except IOError as ex:
             raise SystemExit("Failed to open output file: " + str(ex))
 
     options.show = options.show_cmd or options.show_output
 
     # Hide the progress bar if it will get in the way of other output.
     options.hide_progress = (options.tinderbox or
                              not ProgressBar.conservative_isatty() or
                              options.hide_progress)
@@ -281,31 +281,31 @@ def load_tests(options, requested_paths,
 
     return skip_list, test_list
 
 def main():
     options, requested_paths, excluded_paths = parse_args()
     skip_list, test_list = load_tests(options, requested_paths, excluded_paths)
 
     if not test_list:
-        print 'no tests selected'
+        print('no tests selected')
         return 1
 
     test_dir = os.path.dirname(os.path.abspath(__file__))
 
     if options.debug:
         if len(test_list) > 1:
             print('Multiple tests match command line arguments, debugger can only run one')
             for tc in test_list:
                 print('    %s'%tc.path)
             return 2
 
         cmd = test_list[0].get_command(TestCase.js_cmd_prefix)
         if options.show_cmd:
-            print list2cmdline(cmd)
+            print(list2cmdline(cmd))
         if test_dir not in ('', '.'):
             os.chdir(test_dir)
         call(cmd)
         return 0
 
     curdir = os.getcwd()
     if test_dir not in ('', '.'):
         os.chdir(test_dir)
diff --git a/js/src/tests/lib/manifest.py b/js/src/tests/lib/manifest.py
--- a/js/src/tests/lib/manifest.py
+++ b/js/src/tests/lib/manifest.py
@@ -1,16 +1,16 @@
 # Library for JSTest manifests.
 #
 # This includes classes for representing and parsing JS manifests.
 
 import os, os.path, re, sys
 from subprocess import *
 
-from tests import TestCase
+from .tests import TestCase
 
 
 def split_path_into_dirs(path):
     dirs = [path]
 
     while True:
         path, tail = os.path.split(path)
         if not tail:
@@ -84,19 +84,19 @@ class XULInfoTester:
 
     def test(self, cond):
         """Test a XUL predicate condition against this local info."""
         ans = self.cache.get(cond, None)
         if ans is None:
             cmd = [ self.js_bin, '-e', self.js_prolog, '-e', 'print(!!(%s))'%cond ]
             p = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE)
             out, err = p.communicate()
-            if out in ('true\n', 'true\r\n'):
+            if out in (b'true\n', b'true\r\n'):
                 ans = True
-            elif out in ('false\n', 'false\r\n'):
+            elif out in (b'false\n', b'false\r\n'):
                 ans = False
             else:
                 raise Exception(("Failed to test XUL condition %r;"
                                  + " output was %r, stderr was %r")
                                  % (cond, out, err))
             self.cache[cond] = ans
         return ans
 
@@ -164,17 +164,17 @@ def _parse_one(testcase, xul_tester):
             # silentfails use tons of memory, and Darwin doesn't support ulimit.
             if xul_tester.test("xulRuntime.OS == 'Darwin'"):
                 testcase.expect = testcase.enable = False
             pos += 1
         elif parts[pos] == 'pref(javascript.options.xml.content,true)':
             testcase.options += ['-e', 'options("allow_xml");']
             pos += 1
         else:
-            print 'warning: invalid manifest line element "%s"'%parts[pos]
+            print('warning: invalid manifest line element "%s"'%parts[pos])
             pos += 1
 
 def _build_manifest_script_entry(script_name, test):
     line = []
     if test.terms:
         line.append(test.terms)
     line.append("script")
     line.append(script_name)
@@ -241,46 +241,52 @@ def make_manifests(location, test_list):
 
 def _find_all_js_files(base, location):
     for root, dirs, files in os.walk(location):
         root = root[len(base) + 1:]
         for fn in files:
             if fn.endswith('.js'):
                 yield root, fn
 
-TEST_HEADER_PATTERN_INLINE = re.compile(r'//\s*\|(.*?)\|\s*(.*?)\s*(--\s*(.*))?$')
-TEST_HEADER_PATTERN_MULTI  = re.compile(r'/\*\s*\|(.*?)\|\s*(.*?)\s*(--\s*(.*))?\*/')
+TEST_HEADER_PATTERN_INLINE = re.compile(br'//\s*\|(.*?)\|\s*(.*?)\s*(--\s*(.*))?$')
+TEST_HEADER_PATTERN_MULTI  = re.compile(br'/\*\s*\|(.*?)\|\s*(.*?)\s*(--\s*(.*))?\*/')
 
 def _parse_test_header(fullpath, testcase, xul_tester):
     """
     This looks a bit weird.  The reason is that it needs to be efficient, since
     it has to be done on every test
     """
-    fp = open(fullpath, 'r')
+    fp = open(fullpath, 'rb')
     try:
         buf = fp.read(512)
     finally:
         fp.close()
 
     # Bail early if we do not start with a single comment.
-    if not buf.startswith("//"):
+    if not buf.startswith(b"//"):
         return
 
     # Extract the token.
-    buf, _, _ = buf.partition('\n')
+    buf, _, _ = buf.partition(b'\n')
     matches = TEST_HEADER_PATTERN_INLINE.match(buf)
 
     if not matches:
         matches = TEST_HEADER_PATTERN_MULTI.match(buf)
         if not matches:
             return
 
     testcase.tag = matches.group(1)
+    if testcase.tag:
+        testcase.tag = testcase.tag.decode('utf-8')
     testcase.terms = matches.group(2)
+    if testcase.terms:
+        testcase.terms = testcase.terms.decode('utf-8')
     testcase.comment = matches.group(4)
+    if testcase.comment:
+        testcase.comment = testcase.comment.decode('utf-8')
 
     _parse_one(testcase, xul_tester)
 
 def load(location, xul_tester, reldir = ''):
     """
     Locates all tests by walking the filesystem starting at |location|.
     Uses xul_tester to evaluate any test conditions in the test header.
     """
diff --git a/js/src/tests/lib/progressbar.py b/js/src/tests/lib/progressbar.py
--- a/js/src/tests/lib/progressbar.py
+++ b/js/src/tests/lib/progressbar.py
@@ -1,18 +1,18 @@
 # Text progress bar library, like curl or scp.
 
 from datetime import datetime, timedelta
 import math
 import sys
 
 if sys.platform.startswith('win'):
-    from terminal_win import Terminal
+    from .terminal_win import Terminal
 else:
-    from terminal_unix import Terminal
+    from .terminal_unix import Terminal
 
 class NullProgressBar(object):
     def update(self, current, data): pass
     def poke(self): pass
     def finish(self, complete=True): pass
     def beginline(self): pass
     def message(self, msg): sys.stdout.write(msg + '\n')
     def update_granularity(self): return timedelta.max
diff --git a/js/src/tests/lib/results.py b/js/src/tests/lib/results.py
--- a/js/src/tests/lib/results.py
+++ b/js/src/tests/lib/results.py
@@ -1,10 +1,12 @@
+from __future__ import print_function
+
 import re
-from progressbar import NullProgressBar, ProgressBar
+from .progressbar import NullProgressBar, ProgressBar
 import pipes
 
 # subprocess.list2cmdline does not properly escape for sh-like shells
 def escape_cmdline(args):
     return ' '.join([ pipes.quote(a) for a in args ])
 
 class TestOutput:
     """Output from a test run."""
@@ -120,20 +122,20 @@ class ResultsSink:
             show = self.options.show
             if self.options.failed_only and dev_label not in ('REGRESSIONS', 'TIMEOUTS'):
                 show = False
             if show:
                 self.pb.beginline()
 
             if show:
                 if self.options.show_output:
-                    print >> self.fp, '## %s: rc = %d, run time = %f' % (output.test.path, output.rc, output.dt)
+                    print('## %s: rc = %d, run time = %f' % (output.test.path, output.rc, output.dt), file=self.fp)
 
                 if self.options.show_cmd:
-                    print >> self.fp, escape_cmdline(output.cmd)
+                    print(escape_cmdline(output.cmd), file=self.fp)
 
                 if self.options.show_output:
                     self.fp.write(output.out)
                     self.fp.write(output.err)
 
             self.n += 1
 
             if result.result == TestResult.PASS and not result.test.random:
@@ -184,46 +186,47 @@ class ResultsSink:
         (TestResult.PASS,  False, False): ('TEST-UNEXPECTED-PASS',               'FIXES'),
         (TestResult.PASS,  False, True):  ('TEST-PASS (EXPECTED RANDOM)',        ''),
         (TestResult.PASS,  True,  False): ('TEST-PASS',                          ''),
         (TestResult.PASS,  True,  True):  ('TEST-PASS (EXPECTED RANDOM)',        ''),
         }
 
     def list(self, completed):
         for label, paths in sorted(self.groups.items()):
-            if label == '': continue
+            if label == '':
+                continue
 
-            print label
+            print(label)
             for path in paths:
-                print '    %s'%path
+                print('    %s' % path)
 
         if self.options.failure_file:
               failure_file = open(self.options.failure_file, 'w')
               if not self.all_passed():
                   if 'REGRESSIONS' in self.groups:
                       for path in self.groups['REGRESSIONS']:
-                          print >> failure_file, path
+                          print(path, file=failure_file)
                   if 'TIMEOUTS' in self.groups:
                       for path in self.groups['TIMEOUTS']:
-                          print >> failure_file, path
+                          print(path, file=failure_file)
               failure_file.close()
 
         suffix = '' if completed else ' (partial run -- interrupted by user)'
         if self.all_passed():
-            print 'PASS' + suffix
+            print('PASS' + suffix)
         else:
-            print 'FAIL' + suffix
+            print('FAIL' + suffix)
 
     def all_passed(self):
         return 'REGRESSIONS' not in self.groups and 'TIMEOUTS' not in self.groups
 
     def print_tinderbox_result(self, label, path, message=None, skip=False, time=None):
         result = label
         result += " | " + path
         result += " |" + self.options.shell_args
         if message:
             result += " | " + message
         if skip:
             result += ' | (SKIP)'
         if time > self.options.timeout:
             result += ' | (TIMEOUT)'
-        print result
+        print(result)
 
diff --git a/js/src/tests/lib/tasks_unix.py b/js/src/tests/lib/tasks_unix.py
--- a/js/src/tests/lib/tasks_unix.py
+++ b/js/src/tests/lib/tasks_unix.py
@@ -1,15 +1,15 @@
 # A unix-oriented process dispatcher.  Uses a single thread with select and
 # waitpid to dispatch tasks.  This avoids several deadlocks that are possible
 # with fork/exec + threads + Python.
 
 import errno, os, sys, select
 from datetime import datetime, timedelta
-from results import TestOutput
+from .results import TestOutput
 
 class Task(object):
     def __init__(self, test, pid, stdout, stderr):
         self.test = test
         self.cmd = test.get_command(test.js_cmd_prefix)
         self.pid = pid
         self.stdout = stdout
         self.stderr = stderr
@@ -67,27 +67,27 @@ def get_max_wait(tasks, results, timeout
     # Return the wait time in seconds, clamped to zero.
     return max(total_seconds(wait), 0)
 
 def flush_input(fd, frags):
     """
     Read any pages sitting in the file descriptor 'fd' into the list 'frags'.
     """
     rv = os.read(fd, 4096)
-    frags.append(rv)
+    frags.append(rv.decode('utf-8'))
     while len(rv) == 4096:
         # If read() returns a full buffer, it may indicate there was 1 buffer
         # worth of data, or that there is more data to read.  Poll the socket
         # before we read again to ensure that we will not block indefinitly.
         readable, _, _ = select.select([fd], [], [], 0)
         if not readable:
             return
 
         rv = os.read(fd, 4096)
-        frags.append(rv)
+        frags.append(rv.decode('utf-8'))
 
 def read_input(tasks, timeout):
     """
     Select on input or errors from the given task list for a max of timeout
     seconds.
     """
     rlist = []
     exlist = []
@@ -139,17 +139,17 @@ def reap_zombies(tasks, results, timeout
     results channel.  This method returns a new task list that has had the ended
     tasks removed.
     """
     while True:
         try:
             pid, status = os.waitpid(0, os.WNOHANG)
             if pid == 0:
                 break
-        except OSError, e:
+        except OSError as e:
             if e.errno == errno.ECHILD:
                 break
             raise e
 
         ended = remove_task(tasks, pid)
         flush_input(ended.stdout, ended.out)
         flush_input(ended.stderr, ended.err)
         os.close(ended.stdout)
diff --git a/js/src/tests/lib/tests.py b/js/src/tests/lib/tests.py
--- a/js/src/tests/lib/tests.py
+++ b/js/src/tests/lib/tests.py
@@ -2,17 +2,17 @@
 #
 # This contains classes that represent an individual test, including
 # metadata, and know how to run the tests and determine failures.
 
 import datetime, os, re, sys, time
 from subprocess import *
 from threading import *
 
-from results import TestOutput
+from .results import TestOutput
 
 def do_run_cmd(cmd):
     l = [ None, None ]
     th_run_cmd(cmd, l)
     return l[1]
 
 def set_limits():
     # resource module not supported on all platforms
@@ -54,17 +54,17 @@ def run_cmd(cmd, timeout=60.0):
         if l[0] is not None:
             try:
                 # In Python 3, we could just do l[0].kill().
                 import signal
                 if sys.platform != 'win32':
                     os.kill(l[0].pid, signal.SIGKILL)
                 time.sleep(.1)
                 timed_out = True
-            except OSError, e:
+            except OSError as e:
                 # Expecting a "No such process" error
                 pass
     th.join()
     return l[1] + (timed_out,)
 
 class Test(object):
     """A runnable test."""
     def __init__(self, path):
