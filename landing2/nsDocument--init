From: Ms2ger <ms2ger@gmail.com>
Cleanup nsDocument::Init a bit.

diff --git a/caps/include/Makefile.in b/caps/include/Makefile.in
--- a/caps/include/Makefile.in
+++ b/caps/include/Makefile.in
@@ -1,20 +1,21 @@
 #
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-DEPTH		= ../..
+DEPTH = ../..
 topsrcdir	= @top_srcdir@
-srcdir		= @srcdir@
-VPATH		= @srcdir@
+srcdir = @srcdir@
+VPATH = @srcdir@
 
 include $(DEPTH)/config/autoconf.mk
 
-MODULE		= caps
+MODULE = caps
 
-EXPORTS		= \
-            nsJSPrincipals.h \
-            $(NULL)
+EXPORTS = \
+  nsJSPrincipals.h \
+  nsNullPrincipal.h \
+  $(NULL)
 
 include $(topsrcdir)/config/rules.mk
 
diff --git a/content/base/public/nsINode.h b/content/base/public/nsINode.h
--- a/content/base/public/nsINode.h
+++ b/content/base/public/nsINode.h
@@ -772,34 +772,30 @@ public:
    * while observers are being notified, it may also be notified.  In general,
    * adding observers while inside a notification is not a good idea.  An
    * observer that is already observing the node must not be added without
    * being removed first.
    */
   void AddMutationObserver(nsIMutationObserver* aMutationObserver)
   {
     nsSlots* s = GetSlots();
-    if (s) {
-      NS_ASSERTION(s->mMutationObservers.IndexOf(aMutationObserver) ==
-                   nsTArray<int>::NoIndex,
-                   "Observer already in the list");
-      s->mMutationObservers.AppendElement(aMutationObserver);
-    }
+    NS_ASSERTION(s->mMutationObservers.IndexOf(aMutationObserver) ==
+                 nsTArray<int>::NoIndex,
+                 "Observer already in the list");
+    s->mMutationObservers.AppendElement(aMutationObserver);
   }
 
   /**
    * Same as above, but only adds the observer if its not observing
    * the node already.
    */
   void AddMutationObserverUnlessExists(nsIMutationObserver* aMutationObserver)
   {
     nsSlots* s = GetSlots();
-    if (s) {
-      s->mMutationObservers.AppendElementUnlessExists(aMutationObserver);
-    }
+    s->mMutationObservers.AppendElementUnlessExists(aMutationObserver);
   }
 
   /**
    * Removes a mutation observer.
    */
   void RemoveMutationObserver(nsIMutationObserver* aMutationObserver)
   {
     nsSlots* s = GetExistingSlots();
@@ -1396,16 +1392,17 @@ protected:
     return mSlots;
   }
 
   nsSlots* GetSlots()
   {
     if (!HasSlots()) {
       mSlots = CreateSlots();
     }
+    MOZ_ASSERT(GetExistingSlots());
     return GetExistingSlots();
   }
 
   nsTObserverArray<nsIMutationObserver*> *GetMutationObservers()
   {
     return HasSlots() ? &GetExistingSlots()->mMutationObservers : nsnull;
   }
 
diff --git a/content/base/src/nsDocument.cpp b/content/base/src/nsDocument.cpp
--- a/content/base/src/nsDocument.cpp
+++ b/content/base/src/nsDocument.cpp
@@ -1508,18 +1508,25 @@ nsDocument::nsDocument(const char* aCont
            ("DOCUMENT %p created", this));
 
   if (!gCspPRLog)
     gCspPRLog = PR_NewLogModule("CSP");
 #endif
 
   // Start out mLastStyleSheetSet as null, per spec
   SetDOMStringToNull(mLastStyleSheetSet);
-  
+
   mLinksToUpdate.Init();
+
+  mNodeInfoManager = new nsNodeInfoManager(this);
+
+  // mNodeInfo keeps NodeInfoManager alive!
+  mNodeInfo = mNodeInfoManager->GetDocumentNodeInfo();
+  MOZ_ASSERT(mNodeInfo->NodeType() == nsIDOMNode::DOCUMENT_NODE);
+  MOZ_ASSERT(OwnerDoc() == this);
 }
 
 static PLDHashOperator
 ClearAllBoxObjects(nsIContent* aKey, nsPIBoxObject* aBoxObject, void* aUserArg)
 {
   if (aBoxObject) {
     aBoxObject->Clear();
   }
@@ -1940,61 +1947,43 @@ NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN(ns
   
   tmp->mInUnlinkOrDeletion = false;
 NS_IMPL_CYCLE_COLLECTION_UNLINK_END
 
 
 nsresult
 nsDocument::Init()
 {
-  if (mCSSLoader || mNodeInfoManager || mScriptLoader) {
+  if (mCSSLoader || mScriptLoader) {
     return NS_ERROR_ALREADY_INITIALIZED;
   }
 
   mIdentifierMap.Init();
   mStyledLinks.Init();
   mRadioGroups.Init();
 
   // Force initialization.
   nsINode::nsSlots* slots = GetSlots();
-  NS_ENSURE_TRUE(slots,NS_ERROR_OUT_OF_MEMORY);
 
   // Prepend self as mutation-observer whether we need it or not (some
   // subclasses currently do, other don't). This is because the code in
   // nsNodeUtils always notifies the first observer first, expecting the
   // first observer to be the document.
   NS_ENSURE_TRUE(slots->mMutationObservers.PrependElementUnlessExists(static_cast<nsIMutationObserver*>(this)),
                  NS_ERROR_OUT_OF_MEMORY);
 
 
   mOnloadBlocker = new nsOnloadBlocker();
-  NS_ENSURE_TRUE(mOnloadBlocker, NS_ERROR_OUT_OF_MEMORY);
 
   mCSSLoader = new mozilla::css::Loader(this);
-  NS_ENSURE_TRUE(mCSSLoader, NS_ERROR_OUT_OF_MEMORY);
   NS_ADDREF(mCSSLoader);
   // Assume we're not quirky, until we know otherwise
   mCSSLoader->SetCompatibilityMode(eCompatibility_FullStandards);
 
-  mNodeInfoManager = new nsNodeInfoManager();
-  NS_ENSURE_TRUE(mNodeInfoManager, NS_ERROR_OUT_OF_MEMORY);
-
-  nsresult  rv = mNodeInfoManager->Init(this);
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  // mNodeInfo keeps NodeInfoManager alive!
-  mNodeInfo = mNodeInfoManager->GetDocumentNodeInfo();
-  NS_ENSURE_TRUE(mNodeInfo, NS_ERROR_OUT_OF_MEMORY);
-  NS_ABORT_IF_FALSE(mNodeInfo->NodeType() == nsIDOMNode::DOCUMENT_NODE,
-                    "Bad NodeType in aNodeInfo");
-
-  NS_ASSERTION(OwnerDoc() == this, "Our nodeinfo is busted!");
-
   mScriptLoader = new nsScriptLoader(this);
-  NS_ENSURE_TRUE(mScriptLoader, NS_ERROR_OUT_OF_MEMORY);
 
   mImageTracker.Init();
   mPlugins.Init();
 
   return NS_OK;
 }
 
 void 
diff --git a/content/base/src/nsNodeInfoManager.cpp b/content/base/src/nsNodeInfoManager.cpp
--- a/content/base/src/nsNodeInfoManager.cpp
+++ b/content/base/src/nsNodeInfoManager.cpp
@@ -3,31 +3,33 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 /*
  * A class for handing out nodeinfos and ensuring sharing of them as needed.
  */
 
 #include "nsNodeInfoManager.h"
+
 #include "nsNodeInfo.h"
 #include "nsCOMPtr.h"
 #include "nsString.h"
 #include "nsIAtom.h"
 #include "nsIDocument.h"
 #include "nsIPrincipal.h"
 #include "nsIURI.h"
 #include "nsContentUtils.h"
 #include "nsReadableUtils.h"
 #include "nsGkAtoms.h"
 #include "nsComponentManagerUtils.h"
 #include "nsLayoutStatics.h"
 #include "nsBindingManager.h"
 #include "nsHashKeys.h"
 #include "nsCCUncollectableMarker.h"
+#include "nsNullPrincipal.h"
 
 using namespace mozilla;
 
 #ifdef MOZ_LOGGING
 // so we can get logging even in release builds
 #define FORCE_PR_LOG 1
 #endif
 #include "prlog.h"
@@ -79,39 +81,52 @@ nsNodeInfoManager::NodeInfoInnerKeyCompa
   }
   if (node2->mName) {
     return (node2->mName->Equals(*(node1->mNameString)));
   }
   return (node1->mNameString->Equals(*(node2->mNameString)));
 }
 
 
-nsNodeInfoManager::nsNodeInfoManager()
-  : mDocument(nsnull),
+nsNodeInfoManager::nsNodeInfoManager(nsIDocument* aDocument)
+  : mDocument(aDocument),
     mNonDocumentNodeInfos(0),
     mPrincipal(nsnull),
     mTextNodeInfo(nsnull),
     mCommentNodeInfo(nsnull),
     mDocumentNodeInfo(nsnull),
     mBindingManager(nsnull)
 {
   nsLayoutStatics::AddRef();
 
 #ifdef PR_LOGGING
   if (!gNodeInfoManagerLeakPRLog)
     gNodeInfoManagerLeakPRLog = PR_NewLogModule("NodeInfoManagerLeak");
 
   if (gNodeInfoManagerLeakPRLog)
     PR_LOG(gNodeInfoManagerLeakPRLog, PR_LOG_DEBUG,
-           ("NODEINFOMANAGER %p created", this));
+           ("NODEINFOMANAGER %p created, document=%p", this, aDocument));
 #endif
 
   mNodeInfoHash = PL_NewHashTable(32, GetNodeInfoInnerHashValue,
                                   NodeInfoInnerKeyCompare,
                                   PL_CompareValues, nsnull, nsnull);
+  if (!mNodeInfoHash) {
+    MOZ_CRASH();
+  }
+
+  mPrincipal = new nsNullPrincipal();
+  NS_ADDREF(mPrincipal);
+
+  if (aDocument) {
+    mBindingManager = new nsBindingManager(aDocument);
+    NS_ADDREF(mBindingManager);
+  }
+
+  mDefaultPrincipal = mPrincipal;
 }
 
 
 nsNodeInfoManager::~nsNodeInfoManager()
 {
   if (mNodeInfoHash)
     PL_HashTableDestroy(mNodeInfoHash);
 
@@ -141,47 +156,16 @@ NS_IMPL_CYCLE_COLLECTION_TRAVERSE_NATIVE
     return NS_SUCCESS_INTERRUPTED_TRAVERSE;
   }
   if (tmp->mNonDocumentNodeInfos) {
     NS_IMPL_CYCLE_COLLECTION_TRAVERSE_RAWPTR(mDocument)
   }
   NS_IMPL_CYCLE_COLLECTION_TRAVERSE_RAWPTR(mBindingManager)
 NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
 
-nsresult
-nsNodeInfoManager::Init(nsIDocument *aDocument)
-{
-  NS_ENSURE_TRUE(mNodeInfoHash, NS_ERROR_OUT_OF_MEMORY);
-
-  NS_PRECONDITION(!mPrincipal,
-                  "Being inited when we already have a principal?");
-  nsresult rv = CallCreateInstance("@mozilla.org/nullprincipal;1",
-                                   &mPrincipal);
-  NS_ENSURE_TRUE(mPrincipal, rv);
-
-  if (aDocument) {
-    mBindingManager = new nsBindingManager(aDocument);
-    NS_ENSURE_TRUE(mBindingManager, NS_ERROR_OUT_OF_MEMORY);
-
-    NS_ADDREF(mBindingManager);
-  }
-
-  mDefaultPrincipal = mPrincipal;
-
-  mDocument = aDocument;
-
-#ifdef PR_LOGGING
-  if (gNodeInfoManagerLeakPRLog)
-    PR_LOG(gNodeInfoManagerLeakPRLog, PR_LOG_DEBUG,
-           ("NODEINFOMANAGER %p Init document=%p", this, aDocument));
-#endif
-
-  return NS_OK;
-}
-
 // static
 int
 nsNodeInfoManager::DropNodeInfoDocument(PLHashEntry *he, int hashIndex, void *arg)
 {
   static_cast<nsINodeInfo*>(he->value)->mDocument = nsnull;
   return HT_ENUMERATE_NEXT;
 }
 
@@ -341,16 +325,19 @@ nsNodeInfoManager::GetCommentNodeInfo()
 already_AddRefed<nsINodeInfo>
 nsNodeInfoManager::GetDocumentNodeInfo()
 {
   if (!mDocumentNodeInfo) {
     NS_ASSERTION(mDocument, "Should have mDocument!");
     mDocumentNodeInfo = GetNodeInfo(nsGkAtoms::documentNodeName, nsnull,
                                     kNameSpaceID_None,
                                     nsIDOMNode::DOCUMENT_NODE, nsnull).get();
+    if (!mDocumentNodeInfo) {
+      MOZ_CRASH();
+    }
     --mNonDocumentNodeInfos;
     if (!mNonDocumentNodeInfos) {
       mDocument->Release(); // Don't set mDocument to null!
     }
   }
   else {
     NS_ADDREF(mDocumentNodeInfo);
   }
diff --git a/content/base/src/nsNodeInfoManager.h b/content/base/src/nsNodeInfoManager.h
--- a/content/base/src/nsNodeInfoManager.h
+++ b/content/base/src/nsNodeInfoManager.h
@@ -26,29 +26,24 @@ class nsIDOMDocument;
 class nsAString;
 class nsIDOMNamedNodeMap;
 class nsXULPrototypeDocument;
 class nsBindingManager;
 
 class nsNodeInfoManager
 {
 public:
-  nsNodeInfoManager();
+  nsNodeInfoManager(nsIDocument* aDocument);
   ~nsNodeInfoManager();
 
   NS_DECL_CYCLE_COLLECTION_NATIVE_CLASS(nsNodeInfoManager)
 
   NS_INLINE_DECL_REFCOUNTING(nsNodeInfoManager)
 
   /**
-   * Initialize the nodeinfo manager with a document.
-   */
-  nsresult Init(nsIDocument *aDocument);
-
-  /**
    * Release the reference to the document, this will be called when
    * the document is going away.
    */
   void DropDocumentReference();
 
   /**
    * Methods for creating nodeinfo's from atoms and/or strings.
    */
diff --git a/content/xul/document/src/nsXULPrototypeDocument.cpp b/content/xul/document/src/nsXULPrototypeDocument.cpp
--- a/content/xul/document/src/nsXULPrototypeDocument.cpp
+++ b/content/xul/document/src/nsXULPrototypeDocument.cpp
@@ -121,33 +121,24 @@ JSClass nsXULPDGlobalObject::gSharedGlob
 
 
 //----------------------------------------------------------------------
 //
 // ctors, dtors, n' stuff
 //
 
 nsXULPrototypeDocument::nsXULPrototypeDocument()
-    : mRoot(nsnull),
-      mLoaded(false),
-      mCCGeneration(0)
+    : mRoot(nsnull)
+    , mLoaded(false)
+    , mNodeInfoManager(new nsNodeInfoManager(nsnull))
+    , mCCGeneration(0)
 {
     ++gRefCnt;
 }
 
-
-nsresult
-nsXULPrototypeDocument::Init()
-{
-    mNodeInfoManager = new nsNodeInfoManager();
-    NS_ENSURE_TRUE(mNodeInfoManager, NS_ERROR_OUT_OF_MEMORY);
-
-    return mNodeInfoManager->Init(nsnull);
-}
-
 nsXULPrototypeDocument::~nsXULPrototypeDocument()
 {
     if (mGlobalObject) {
         // cleaup cycles etc.
         mGlobalObject->ClearGlobalObjectOwner();
     }
 
     if (mRoot)
@@ -186,29 +177,18 @@ NS_INTERFACE_MAP_END
 
 NS_IMPL_CYCLE_COLLECTING_ADDREF(nsXULPrototypeDocument)
 NS_IMPL_CYCLE_COLLECTING_RELEASE(nsXULPrototypeDocument)
 
 NS_IMETHODIMP
 NS_NewXULPrototypeDocument(nsXULPrototypeDocument** aResult)
 {
     *aResult = new nsXULPrototypeDocument();
-    if (! *aResult)
-        return NS_ERROR_OUT_OF_MEMORY;
-
-    nsresult rv;
-    rv = (*aResult)->Init();
-    if (NS_FAILED(rv)) {
-        delete *aResult;
-        *aResult = nsnull;
-        return rv;
-    }
-
     NS_ADDREF(*aResult);
-    return rv;
+    return NS_OK;
 }
 
 // Helper method that shares a system global among all prototype documents
 // that have the system principal as their security principal.   Called by
 // nsXULPrototypeDocument::Read and
 // nsXULPrototypeDocument::GetScriptGlobalObject.
 // This method greatly reduces the number of nsXULPDGlobalObjects and their
 // nsIScriptContexts in apps that load many XUL documents via chrome: URLs.
diff --git a/content/xul/document/src/nsXULPrototypeDocument.h b/content/xul/document/src/nsXULPrototypeDocument.h
--- a/content/xul/document/src/nsXULPrototypeDocument.h
+++ b/content/xul/document/src/nsXULPrototypeDocument.h
@@ -131,17 +131,16 @@ protected:
     nsTArray< nsRefPtr<nsXULDocument> > mPrototypeWaiters;
 
     nsRefPtr<nsNodeInfoManager> mNodeInfoManager;
 
     uint32_t mCCGeneration;
 
     nsXULPrototypeDocument();
     virtual ~nsXULPrototypeDocument();
-    nsresult Init();
 
     friend NS_IMETHODIMP
     NS_NewXULPrototypeDocument(nsXULPrototypeDocument** aResult);
 
     nsXULPDGlobalObject *NewXULPDGlobalObject();
 
     static nsIPrincipal* gSystemPrincipal;
     static nsXULPDGlobalObject* gSystemGlobal;
