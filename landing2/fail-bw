From: Ms2ger <ms2ger@gmail.com>

diff --git a/dom/bindings/Codegen.py b/dom/bindings/Codegen.py
--- a/dom/bindings/Codegen.py
+++ b/dom/bindings/Codegen.py
@@ -4478,17 +4478,17 @@ class CGClassForwardDeclare(CGThing):
         # Header only
         return ''
 
 class CGProxySpecialOperation(CGPerSignatureCall):
     """
     Base class for classes for calling an indexed or named special operation
     (don't use this directly, use the derived classes below).
     """
-    def __init__(self, descriptor, operation):
+    def __init__(self, descriptor, operation, usesresult=True):
         nativeName = MakeNativeName(descriptor.binaryNames.get(operation, operation))
         operation = descriptor.operations[operation]
         assert len(operation.signatures()) == 1
         signature = operation.signatures()[0]
         extendedAttributes = descriptor.getExtendedAttributes(operation)
 
         (returnType, arguments) = signature
 
@@ -4530,35 +4530,37 @@ class CGProxySpecialOperation(CGPerSigna
         wrap = CGIfWrapper(wrap, "found")
         return "\n" + wrap.define()
 
 class CGProxyIndexedGetter(CGProxySpecialOperation):
     """
     Class to generate a call to an indexed getter. If templateValues is not None
     the returned value will be wrapped with wrapForType using templateValues.
     """
-    def __init__(self, descriptor, templateValues=None):
+    def __init__(self, descriptor, templateValues=None, usesresult=True):
         self.templateValues = templateValues
-        CGProxySpecialOperation.__init__(self, descriptor, 'IndexedGetter')
+        CGProxySpecialOperation.__init__(self, descriptor, 'IndexedGetter',
+                                         usesresult=usesresult)
 
 class CGProxyIndexedSetter(CGProxySpecialOperation):
     """
     Class to generate a call to an indexed setter.
     """
     def __init__(self, descriptor):
         CGProxySpecialOperation.__init__(self, descriptor, 'IndexedSetter')
 
 class CGProxyNamedGetter(CGProxySpecialOperation):
     """
     Class to generate a call to an named getter. If templateValues is not None
     the returned value will be wrapped with wrapForType using templateValues.
     """
-    def __init__(self, descriptor, templateValues=None):
+    def __init__(self, descriptor, templateValues=None, usesresult=True):
         self.templateValues = templateValues
-        CGProxySpecialOperation.__init__(self, descriptor, 'NamedGetter')
+        CGProxySpecialOperation.__init__(self, descriptor, 'NamedGetter',
+                                         usesresult=usesresult)
 
 class CGProxyNamedSetter(CGProxySpecialOperation):
     """
     Class to generate a call to a named setter.
     """
     def __init__(self, descriptor):
         CGProxySpecialOperation.__init__(self, descriptor, 'NamedSetter')
 
@@ -4729,28 +4731,28 @@ class CGDOMJSProxyHandler_defineProperty
                     "  JS::Value nameVal = STRING_TO_JSVAL(JSID_TO_STRING(id));\n" +
                     "  FakeDependentString name;\n"
                     "  if (!ConvertJSValueToString(cx, nameVal, &nameVal,\n" +
                     "                              eStringify, eStringify, name)) {\n" +
                     "    return false;\n" +
                     "  }\n" +
                     "\n" +
                     "  %s* self = UnwrapProxy(proxy);\n" +
-                    CGIndenter(CGProxyNamedSetter(self.descriptor)).define() + "\n" +
+                    CGIndenter(CGProxyNamedSetter(self.descriptor, usesresult=False)).define() + "\n" +
                     "}\n") % (self.descriptor.nativeType)
         elif self.descriptor.operations['NamedGetter']:
             set += ("if (JSID_IS_STRING(id)) {\n" +
                     "  JS::Value nameVal = STRING_TO_JSVAL(JSID_TO_STRING(id));\n" +
                     "  FakeDependentString name;\n"
                     "  if (!ConvertJSValueToString(cx, nameVal, &nameVal,\n" +
                     "                              eStringify, eStringify, name)) {\n" +
                     "    return false;\n" +
                     "  }\n" +
                     "  %s* self = UnwrapProxy(proxy);\n" +
-                    CGIndenter(CGProxyNamedGetter(self.descriptor)).define() +
+                    CGIndenter(CGProxyNamedGetter(self.descriptor, usesresult=False)).define() +
                     "  if (found) {\n"
                     "    return ThrowErrorMessage(cx, MSG_NO_PROPERTY_SETTER, \"%s\");\n" +
                     "  }\n" +
                     "  return true;\n"
                     "}\n") % (self.descriptor.nativeType, self.descriptor.name)
         return set + """return mozilla::dom::DOMProxyHandler::defineProperty(%s);""" % ", ".join(a.name for a in self.args)
 
 class CGDOMJSProxyHandler_getOwnPropertyNames(ClassMethod):
@@ -4790,17 +4792,17 @@ class CGDOMJSProxyHandler_hasOwn(ClassMe
         ClassMethod.__init__(self, "hasOwn", "bool", args)
         self.descriptor = descriptor
     def getBody(self):
         indexedGetter = self.descriptor.operations['IndexedGetter']
         if indexedGetter:
             indexed = ("int32_t index = GetArrayIndexFromId(cx, id);\n" + 
                        "if (index >= 0) {\n" +
                        "  %s* self = UnwrapProxy(proxy);\n" +
-                       CGIndenter(CGProxyIndexedGetter(self.descriptor)).define() + "\n" +
+                       CGIndenter(CGProxyIndexedGetter(self.descriptor, usesresult=False)).define() + "\n" +
                        "  *bp = found;\n" +
                        "  return true;\n" +
                        "}\n\n") % (self.descriptor.nativeType)
         else:
             indexed = ""
 
         namedGetter = self.descriptor.operations['NamedGetter']
         if namedGetter:
@@ -4808,17 +4810,17 @@ class CGDOMJSProxyHandler_hasOwn(ClassMe
                      "  jsval nameVal = STRING_TO_JSVAL(JSID_TO_STRING(id));\n" +
                      "  FakeDependentString name;\n"
                      "  if (!ConvertJSValueToString(cx, nameVal, &nameVal,\n" +
                      "                              eStringify, eStringify, name)) {\n" +
                      "    return false;\n" +
                      "  }\n" +
                      "\n" +
                      "  %s* self = UnwrapProxy(proxy);\n" +
-                     CGIndenter(CGProxyNamedGetter(self.descriptor)).define() + "\n" +
+                     CGIndenter(CGProxyNamedGetter(self.descriptor, usesresult=False)).define() + "\n" +
                      "  *bp = found;\n"
                      "  return true;\n"
                      "}\n" +
                      "\n") % (self.descriptor.nativeType)
         else:
             named = ""
 
         return indexed + """JSObject* expando = GetExpandoObject(proxy);
