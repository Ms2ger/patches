From: Ms2ger <ms2ger@gmail.com>

diff --git a/content/svg/content/src/SVGAltGlyphElement.cpp b/content/svg/content/src/SVGAltGlyphElement.cpp
--- a/content/svg/content/src/SVGAltGlyphElement.cpp
+++ b/content/svg/content/src/SVGAltGlyphElement.cpp
@@ -63,19 +63,17 @@ NS_IMETHODIMP SVGAltGlyphElement::GetHre
 {
   *aHref = Href().get();
   return NS_OK;
 }
 
 already_AddRefed<nsIDOMSVGAnimatedString>
 SVGAltGlyphElement::Href()
 {
-  nsCOMPtr<nsIDOMSVGAnimatedString> href;
-  mStringAttributes[HREF].ToDOMAnimatedString(getter_AddRefs(href), this);
-  return href.forget();
+  return mStringAttributes[HREF].ToDOMAnimatedString(this);
 }
 
 //----------------------------------------------------------------------
 // nsIDOMSVGAltGlyphElement methods
 
 /* attribute DOMString glyphRef; */
 NS_IMETHODIMP SVGAltGlyphElement::GetGlyphRef(nsAString & aGlyphRef)
 {
diff --git a/content/svg/content/src/SVGGradientElement.cpp b/content/svg/content/src/SVGGradientElement.cpp
--- a/content/svg/content/src/SVGGradientElement.cpp
+++ b/content/svg/content/src/SVGGradientElement.cpp
@@ -136,19 +136,17 @@ NS_IMETHODIMP SVGGradientElement::GetSpr
 
 //----------------------------------------------------------------------
 // nsIDOMSVGURIReference methods:
 
 /* readonly attribute nsIDOMSVGAnimatedString href; */
 already_AddRefed<nsIDOMSVGAnimatedString>
 SVGGradientElement::Href()
 {
-  nsCOMPtr<nsIDOMSVGAnimatedString> href;
-  mStringAttributes[HREF].ToDOMAnimatedString(getter_AddRefs(href), this);
-  return href.forget();
+  return mStringAttributes[HREF].ToDOMAnimatedString(this);
 }
 
 NS_IMETHODIMP
 SVGGradientElement::GetHref(nsIDOMSVGAnimatedString * *aHref)
 {
   *aHref = Href().get();
   return NS_OK;
 }
diff --git a/content/svg/content/src/SVGImageElement.cpp b/content/svg/content/src/SVGImageElement.cpp
--- a/content/svg/content/src/SVGImageElement.cpp
+++ b/content/svg/content/src/SVGImageElement.cpp
@@ -159,19 +159,17 @@ SVGImageElement::GetHref(nsIDOMSVGAnimat
 {
   *aHref = Href().get();
   return NS_OK;
 }
 
 already_AddRefed<nsIDOMSVGAnimatedString>
 SVGImageElement::Href()
 {
-  nsCOMPtr<nsIDOMSVGAnimatedString> href;
-  mStringAttributes[HREF].ToDOMAnimatedString(getter_AddRefs(href), this);
-  return href.forget();;
+  return mStringAttributes[HREF].ToDOMAnimatedString(this);
 }
 
 //----------------------------------------------------------------------
 
 nsresult
 SVGImageElement::LoadSVGImage(bool aForce, bool aNotify)
 {
   // resolve href attribute
diff --git a/content/svg/content/src/SVGMPathElement.cpp b/content/svg/content/src/SVGMPathElement.cpp
--- a/content/svg/content/src/SVGMPathElement.cpp
+++ b/content/svg/content/src/SVGMPathElement.cpp
@@ -86,19 +86,17 @@ NS_IMPL_ELEMENT_CLONE_WITH_INIT(SVGMPath
 
 //----------------------------------------------------------------------
 // nsIDOMSVGURIReference methods
 
 /* readonly attribute nsIDOMSVGAnimatedString href; */
 already_AddRefed<nsIDOMSVGAnimatedString>
 SVGMPathElement::Href()
 {
-  nsCOMPtr<nsIDOMSVGAnimatedString> href;
-  mStringAttributes[HREF].ToDOMAnimatedString(getter_AddRefs(href), this);
-  return href.forget();
+  return mStringAttributes[HREF].ToDOMAnimatedString(this);
 }
 
 NS_IMETHODIMP
 SVGMPathElement::GetHref(nsIDOMSVGAnimatedString** aHref)
 {
   *aHref = Href().get();
   return NS_OK;
 }
diff --git a/content/svg/content/src/SVGScriptElement.cpp b/content/svg/content/src/SVGScriptElement.cpp
--- a/content/svg/content/src/SVGScriptElement.cpp
+++ b/content/svg/content/src/SVGScriptElement.cpp
@@ -98,19 +98,17 @@ SVGScriptElement::GetHref(nsIDOMSVGAnima
 {
   *aHref = Href().get();
   return NS_OK;
 }
 
 already_AddRefed<nsIDOMSVGAnimatedString>
 SVGScriptElement::Href()
 {
-  nsCOMPtr<nsIDOMSVGAnimatedString> href;
-  mStringAttributes[HREF].ToDOMAnimatedString(getter_AddRefs(href), this);
-  return href.forget();
+  return mStringAttributes[HREF].ToDOMAnimatedString(this);
 }
 
 //----------------------------------------------------------------------
 // nsIScriptElement methods
 
 void
 SVGScriptElement::GetScriptType(nsAString& type)
 {
diff --git a/content/svg/content/src/SVGTextPathElement.cpp b/content/svg/content/src/SVGTextPathElement.cpp
--- a/content/svg/content/src/SVGTextPathElement.cpp
+++ b/content/svg/content/src/SVGTextPathElement.cpp
@@ -96,19 +96,17 @@ NS_IMETHODIMP SVGTextPathElement::GetHre
 {
   *aHref = Href().get();
   return NS_OK;
 }
 
 already_AddRefed<nsIDOMSVGAnimatedString>
 SVGTextPathElement::Href()
 {
-  nsCOMPtr<nsIDOMSVGAnimatedString> href;
-  mStringAttributes[HREF].ToDOMAnimatedString(getter_AddRefs(href), this);
-  return href.forget();
+  return mStringAttributes[HREF].ToDOMAnimatedString(this);
 }
 
 //----------------------------------------------------------------------
 // nsIDOMSVGTextPathElement methods
 
 NS_IMETHODIMP SVGTextPathElement::GetStartOffset(nsIDOMSVGAnimatedLength * *aStartOffset)
 {
   *aStartOffset = StartOffset().get();
diff --git a/content/svg/content/src/nsSVGClass.cpp b/content/svg/content/src/nsSVGClass.cpp
--- a/content/svg/content/src/nsSVGClass.cpp
+++ b/content/svg/content/src/nsSVGClass.cpp
@@ -67,25 +67,16 @@ nsSVGClass::SetAnimValue(const nsAString
   if (!mAnimVal) {
     mAnimVal = new nsString();
   }
   *mAnimVal = aValue;
   aSVGElement->SetFlags(NODE_MAY_HAVE_CLASS);
   aSVGElement->DidAnimateClass();
 }
 
-nsresult
-nsSVGClass::ToDOMAnimatedString(nsIDOMSVGAnimatedString **aResult,
-                                nsSVGElement *aSVGElement)
-{
-  *aResult = new DOMAnimatedString(this, aSVGElement);
-  NS_ADDREF(*aResult);
-  return NS_OK;
-}
-
 NS_IMETHODIMP
 nsSVGClass::DOMAnimatedString::GetAnimVal(nsAString& aResult)
 { 
   mSVGElement->FlushAnimations();
   mVal->GetAnimValue(aResult, mSVGElement);
   return NS_OK;
 }
 
diff --git a/content/svg/content/src/nsSVGClass.h b/content/svg/content/src/nsSVGClass.h
--- a/content/svg/content/src/nsSVGClass.h
+++ b/content/svg/content/src/nsSVGClass.h
@@ -29,18 +29,29 @@ public:
                     bool aDoSetAttr);
   void GetBaseValue(nsAString& aValue, const nsSVGElement *aSVGElement) const;
 
   void SetAnimValue(const nsAString& aValue, nsSVGElement *aSVGElement);
   void GetAnimValue(nsAString& aValue, const nsSVGElement *aSVGElement) const;
   bool IsAnimated() const
     { return !!mAnimVal; }
 
+  already_AddRefed<nsIDOMSVGAnimatedString>
+  ToDOMAnimatedString(nsSVGElement* aSVGElement)
+  {
+    nsRefPtr<DOMAnimatedString> result = new DOMAnimatedString(this, aSVGElement);
+    return result.forget();
+  }
   nsresult ToDOMAnimatedString(nsIDOMSVGAnimatedString **aResult,
-                               nsSVGElement *aSVGElement);
+                               nsSVGElement *aSVGElement)
+  {
+    *aResult = ToDOMAnimatedString(aSVGElement).get();
+    return NS_OK;
+  }
+
   // Returns a new nsISMILAttr object that the caller must delete
   nsISMILAttr* ToSMILAttr(nsSVGElement *aSVGElement);
 
 private:
 
   nsAutoPtr<nsString> mAnimVal;
 
 public:
diff --git a/content/svg/content/src/nsSVGElement.cpp b/content/svg/content/src/nsSVGElement.cpp
--- a/content/svg/content/src/nsSVGElement.cpp
+++ b/content/svg/content/src/nsSVGElement.cpp
@@ -1184,19 +1184,17 @@ nsSVGElement*
 nsSVGElement::GetViewportElement()
 {
   return SVGContentUtils::GetNearestViewportElement(this);
 }
 
 already_AddRefed<nsIDOMSVGAnimatedString>
 nsSVGElement::ClassName()
 {
-  nsCOMPtr<nsIDOMSVGAnimatedString> className;
-  mClassAttribute.ToDOMAnimatedString(getter_AddRefs(className), this);
-  return className.forget();
+  return mClassAttribute.ToDOMAnimatedString(this);
 }
 
 //------------------------------------------------------------------------
 // Helper class: MappedAttrParser, for parsing values of mapped attributes
 
 namespace {
 
 class MappedAttrParser {
diff --git a/content/svg/content/src/nsSVGString.cpp b/content/svg/content/src/nsSVGString.cpp
--- a/content/svg/content/src/nsSVGString.cpp
+++ b/content/svg/content/src/nsSVGString.cpp
@@ -71,25 +71,31 @@ nsSVGString::SetAnimValue(const nsAStrin
     aSVGElement->DidAnimateString(mAttrEnum);
   }
 }
 
 nsresult
 nsSVGString::ToDOMAnimatedString(nsIDOMSVGAnimatedString **aResult,
                                  nsSVGElement *aSVGElement)
 {
+  *aResult = ToDOMAnimatedString(aSVGElement).get();
+  return NS_OK;
+}
+
+already_AddRefed<nsIDOMSVGAnimatedString>
+nsSVGString::ToDOMAnimatedString(nsSVGElement* aSVGElement)
+{
   nsRefPtr<DOMAnimatedString> domAnimatedString =
     sSVGAnimatedStringTearoffTable.GetTearoff(this);
   if (!domAnimatedString) {
     domAnimatedString = new DOMAnimatedString(this, aSVGElement);
     sSVGAnimatedStringTearoffTable.AddTearoff(this, domAnimatedString);
   }
 
-  domAnimatedString.forget(aResult);
-  return NS_OK;
+  return domAnimatedString.forget();
 }
 
 nsSVGString::DOMAnimatedString::~DOMAnimatedString()
 {
   sSVGAnimatedStringTearoffTable.RemoveTearoff(mVal);
 }
 
 nsISMILAttr*
diff --git a/content/svg/content/src/nsSVGString.h b/content/svg/content/src/nsSVGString.h
--- a/content/svg/content/src/nsSVGString.h
+++ b/content/svg/content/src/nsSVGString.h
@@ -35,16 +35,19 @@ public:
   // explicitly set by markup or a DOM call), false otherwise.
   // If this returns false, the animated value is still valid, that is,
   // useable, and represents the default base value of the attribute.
   bool IsExplicitlySet() const
     { return !!mAnimVal || mIsBaseSet; }
 
   nsresult ToDOMAnimatedString(nsIDOMSVGAnimatedString **aResult,
                                nsSVGElement *aSVGElement);
+  already_AddRefed<nsIDOMSVGAnimatedString>
+  ToDOMAnimatedString(nsSVGElement* aSVGElement);
+
   // Returns a new nsISMILAttr object that the caller must delete
   nsISMILAttr* ToSMILAttr(nsSVGElement *aSVGElement);
 
 private:
 
   nsAutoPtr<nsString> mAnimVal;
   uint8_t mAttrEnum; // element specified tracking for attribute
   bool mIsBaseSet;
