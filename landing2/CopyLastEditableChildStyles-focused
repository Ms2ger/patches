From: Ms2ger <ms2ger@gmail.com>

diff --git a/editor/libeditor/html/nsHTMLEditUtils.cpp b/editor/libeditor/html/nsHTMLEditUtils.cpp
--- a/editor/libeditor/html/nsHTMLEditUtils.cpp
+++ b/editor/libeditor/html/nsHTMLEditUtils.cpp
@@ -30,25 +30,17 @@ bool
 nsHTMLEditUtils::IsBig(nsIDOMNode *node)
 {
   return nsEditor::NodeIsType(node, nsEditProperty::big);
 }
 
 
 ///////////////////////////////////////////////////////////////////////////
 // IsInlineStyle true if node is an inline style
-//                  
-bool 
-nsHTMLEditUtils::IsInlineStyle(nsIDOMNode *node)
-{
-  NS_PRECONDITION(node, "null parent passed to nsHTMLEditUtils::IsInlineStyle");
-  nsCOMPtr<dom::Element> element = do_QueryInterface(node);
-  return element && IsInlineStyle(element);
-}
-
+//
 bool
 nsHTMLEditUtils::IsInlineStyle(dom::Element* aElement)
 {
   MOZ_ASSERT(aElement);
   nsIAtom* nodeAtom = aElement->Tag();
   return (nodeAtom == nsEditProperty::b)
       || (nodeAtom == nsEditProperty::i)
       || (nodeAtom == nsEditProperty::u)
diff --git a/editor/libeditor/html/nsHTMLEditUtils.h b/editor/libeditor/html/nsHTMLEditUtils.h
--- a/editor/libeditor/html/nsHTMLEditUtils.h
+++ b/editor/libeditor/html/nsHTMLEditUtils.h
@@ -20,17 +20,16 @@ class nsHTMLEditUtils
 {
 public:
   // from nsTextEditRules:
   static bool IsBig(nsIDOMNode *aNode);
   static bool IsSmall(nsIDOMNode *aNode);
 
   // from nsHTMLEditRules:
   static bool IsInlineStyle(mozilla::dom::Element* aNode);
-  static bool IsInlineStyle(nsIDOMNode *aNode);
   static bool IsFormatNode(mozilla::dom::Element* aNode);
   static bool IsFormatNode(nsIDOMNode *aNode);
   static bool IsNodeThatCanOutdent(nsIDOMNode *aNode);
   static bool IsHeader(nsIDOMNode *aNode);
   static bool IsParagraph(nsIDOMNode *aNode);
   static bool IsHR(nsIDOMNode *aNode);
   static bool IsListItem(mozilla::dom::Element* aNode);
   static bool IsListItem(nsIDOMNode *aNode);
diff --git a/editor/libeditor/html/nsHTMLEditor.cpp b/editor/libeditor/html/nsHTMLEditor.cpp
--- a/editor/libeditor/html/nsHTMLEditor.cpp
+++ b/editor/libeditor/html/nsHTMLEditor.cpp
@@ -5157,39 +5157,39 @@ nsHTMLEditor::CopyLastEditableChildStyle
   while (child && nsTextEditUtils::IsBreak(child)) {
     nsCOMPtr<nsIDOMNode> priorNode;
     res = GetPriorHTMLNode(child, address_of(priorNode));
     NS_ENSURE_SUCCESS(res, res);
     child = priorNode;
   }
   nsCOMPtr<nsIDOMNode> newStyles = nsnull, deepestStyle = nsnull;
   while (child && (child != aPreviousBlock)) {
-    if (nsHTMLEditUtils::IsInlineStyle(child) ||
-        nsEditor::NodeIsType(child, nsEditProperty::span)) {
-      nsAutoString domTagName;
-      child->GetNodeName(domTagName);
-      ToLowerCase(domTagName);
-      if (newStyles) {
-        nsCOMPtr<nsIDOMNode> newContainer;
-        res = InsertContainerAbove(newStyles, address_of(newContainer), domTagName);
+    nsCOMPtr<nsINode> childNode = do_QueryInterface(child);
+    NS_ENSURE_STATE(childNode);
+    if (childNode->IsElement()) {
+      dom::Element* element = childNode->AsElement();
+      if (nsHTMLEditUtils::IsInlineStyle(element) ||
+          element->IsHTML(nsGkAtoms::span)) {
+        nsDependentAtomString domTagName(element->Tag());
+        if (newStyles) {
+          nsCOMPtr<nsIDOMNode> newContainer;
+          res = InsertContainerAbove(newStyles, address_of(newContainer), domTagName);
+          NS_ENSURE_SUCCESS(res, res);
+          newStyles = newContainer;
+        } else {
+          res = CreateNode(domTagName, aNewBlock, 0, getter_AddRefs(newStyles));
+          NS_ENSURE_SUCCESS(res, res);
+          deepestStyle = newStyles;
+        }
+        res = CloneAttributes(newStyles, child);
         NS_ENSURE_SUCCESS(res, res);
-        newStyles = newContainer;
       }
-      else {
-        res = CreateNode(domTagName, aNewBlock, 0, getter_AddRefs(newStyles));
-        NS_ENSURE_SUCCESS(res, res);
-        deepestStyle = newStyles;
-      }
-      res = CloneAttributes(newStyles, child);
-      NS_ENSURE_SUCCESS(res, res);
     }
-    nsCOMPtr<nsIDOMNode> tmp;
-    res = child->GetParentNode(getter_AddRefs(tmp));
-    NS_ENSURE_SUCCESS(res, res);
-    child = tmp;
+    nsINode* tmp = childNode->GetNodeParent();
+    child = tmp ? tmp->AsDOMNode() : nsnull;
   }
   if (deepestStyle) {
     nsCOMPtr<nsIDOMNode> outBRNode;
     res = CreateBR(deepestStyle, 0, address_of(outBRNode));
     NS_ENSURE_SUCCESS(res, res);
     // Getters must addref
     outBRNode.forget(aOutBrNode);
   }
