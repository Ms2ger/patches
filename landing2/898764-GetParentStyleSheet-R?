From: Ms2ger <ms2ger@gmail.com>
Bug 898764 - Part e: Introduce CSSRule::GetParentStyleSheet(); r=?heycam

diff --git a/layout/style/CSSRule.h b/layout/style/CSSRule.h
--- a/layout/style/CSSRule.h
+++ b/layout/style/CSSRule.h
@@ -5,29 +5,32 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef mozilla_dom_CSSRule_h
 #define mozilla_dom_CSSRule_h
 
 #include "mozilla/ErrorResult.h"
 #include "nsStringGlue.h"
 
+class nsCSSStyleSheet;
+
 namespace mozilla {
 namespace dom {
 
 class CSSRule
 {
 public:
   virtual uint16_t Type() const = 0;
   virtual void GetDOMCssText(nsAString& aCssText) = 0;
   virtual void SetDOMCssText(const nsAString& aCssText, ErrorResult& aRv)
   {
     // bug 443978
     aRv.Throw(NS_ERROR_NOT_IMPLEMENTED);
   }
+  virtual nsCSSStyleSheet* GetParentStyleSheet() = 0;
 };
 
 #define FORWARD_NSIDOMCSSRULE_TO_CSSRULE                                      \
   NS_IMETHOD                                                                  \
   GetType(uint16_t* aType) MOZ_OVERRIDE                                       \
   {                                                                           \
     *aType = Type();                                                          \
     return NS_OK;                                                             \
@@ -40,18 +43,23 @@ public:
   }                                                                           \
   NS_IMETHOD                                                                  \
   SetCssText(const nsAString& aCssText) MOZ_OVERRIDE                          \
   {                                                                           \
     mozilla::ErrorResult rv;                                                  \
     SetDOMCssText(aCssText, rv);                                              \
     return rv.ErrorCode();                                                    \
   }                                                                           \
-  NS_IMETHOD GetParentStyleSheet(nsIDOMCSSStyleSheet** aParentStyleSheet)     \
-    MOZ_OVERRIDE;                                                             \
+  NS_IMETHOD                                                                  \
+  GetParentStyleSheet(nsIDOMCSSStyleSheet** aParentStyleSheet) MOZ_OVERRIDE   \
+  {                                                                           \
+    NS_ENSURE_ARG_POINTER(aParentStyleSheet);                                 \
+    NS_IF_ADDREF(*aParentStyleSheet = GetParentStyleSheet());                 \
+    return NS_OK;                                                             \
+  }                                                                           \
   NS_IMETHOD GetParentRule(nsIDOMCSSRule** aParentRule) MOZ_OVERRIDE;         \
   virtual mozilla::dom::CSSRule* GetCSSRule() MOZ_OVERRIDE                    \
   {                                                                           \
     return this;                                                              \
   }
 
 } // namespace dom
 } // namespace mozilla
diff --git a/layout/style/ImportRule.h b/layout/style/ImportRule.h
--- a/layout/style/ImportRule.h
+++ b/layout/style/ImportRule.h
@@ -54,16 +54,20 @@ public:
   virtual size_t SizeOfIncludingThis(mozilla::MallocSizeOf aMallocSizeOf) const;
 
   // dom::CSSRule
   virtual uint16_t Type() const MOZ_OVERRIDE
   {
     return nsIDOMCSSRule::IMPORT_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
+  virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE
+  {
+    return GetStyleSheet();
+  }
 
   // nsIDOMCSSRule interface
   FORWARD_NSIDOMCSSRULE_TO_CSSRULE
 
   // nsIDOMCSSImportRule interface
   NS_DECL_NSIDOMCSSIMPORTRULE
 
 private:
diff --git a/layout/style/NameSpaceRule.h b/layout/style/NameSpaceRule.h
--- a/layout/style/NameSpaceRule.h
+++ b/layout/style/NameSpaceRule.h
@@ -58,16 +58,20 @@ public:
     MOZ_MUST_OVERRIDE;
 
   // dom::CSSRule
   virtual uint16_t Type() const MOZ_OVERRIDE
   {
     return nsIDOMCSSRule::NAMESPACE_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
+  virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE
+  {
+    return GetStyleSheet();
+  }
 
   // nsIDOMCSSRule interface
   FORWARD_NSIDOMCSSRULE_TO_CSSRULE
 
 private:
   nsCOMPtr<nsIAtom> mPrefix;
   nsString          mURLSpec;
 };
diff --git a/layout/style/Rule.h b/layout/style/Rule.h
--- a/layout/style/Rule.h
+++ b/layout/style/Rule.h
@@ -103,17 +103,16 @@ public:
   // supposed to have a DOM rule representation (and our code wouldn't work).
   virtual nsIDOMCSSRule* GetDOMRule() = 0;
 
   // Like GetDOMRule(), but won't create one if we don't have one yet
   virtual nsIDOMCSSRule* GetExistingDOMRule() = 0;
 
   // to implement methods on nsIDOMCSSRule
   nsresult GetParentRule(nsIDOMCSSRule** aParentRule);
-  nsresult GetParentStyleSheet(nsIDOMCSSStyleSheet** aSheet);
 
   // This is pure virtual because all of Rule's data members are non-owning and
   // thus measured elsewhere.
   virtual size_t SizeOfIncludingThis(mozilla::MallocSizeOf aMallocSizeOf)
     const MOZ_MUST_OVERRIDE = 0;
 
   // This is used to measure nsCOMArray<Rule>s.
   static size_t SizeOfCOMArrayElementIncludingThis(css::Rule* aElement,
diff --git a/layout/style/StyleRule.cpp b/layout/style/StyleRule.cpp
--- a/layout/style/StyleRule.cpp
+++ b/layout/style/StyleRule.cpp
@@ -1016,16 +1016,17 @@ public:
   // dom::CSSRule
   virtual uint16_t Type() const MOZ_OVERRIDE
   {
     return nsIDOMCSSRule::STYLE_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
   virtual void SetDOMCssText(const nsAString& aCssText, ErrorResult&)
     MOZ_OVERRIDE;
+  virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE;
 
   // nsICSSStyleRuleDOMWrapper
   NS_IMETHOD GetCSSStyleRule(StyleRule **aResult);
 
   DOMCSSDeclarationImpl* DOMDeclaration() { return &mDOMDeclaration; }
 
   friend class ::DOMCSSDeclarationImpl;
 
@@ -1207,24 +1208,23 @@ DOMCSSStyleRule::GetDOMCssText(nsAString
 /* virtual */ void
 DOMCSSStyleRule::SetDOMCssText(const nsAString& aCssText, ErrorResult&)
 {
   if (Rule()) {
     Rule()->SetCssText(aCssText);
   }
 }
 
-NS_IMETHODIMP
-DOMCSSStyleRule::GetParentStyleSheet(nsIDOMCSSStyleSheet** aSheet)
+/* virtual */ nsCSSStyleSheet*
+DOMCSSStyleRule::GetParentStyleSheet()
 {
   if (!Rule()) {
-    *aSheet = nullptr;
-    return NS_OK;
+    return nullptr;
   }
-  return Rule()->GetParentStyleSheet(aSheet);
+  return Rule()->GetStyleSheet();
 }
 
 NS_IMETHODIMP
 DOMCSSStyleRule::GetParentRule(nsIDOMCSSRule** aParentRule)
 {
   if (!Rule()) {
     *aParentRule = nullptr;
     return NS_OK;
diff --git a/layout/style/nsCSSRules.cpp b/layout/style/nsCSSRules.cpp
--- a/layout/style/nsCSSRules.cpp
+++ b/layout/style/nsCSSRules.cpp
@@ -102,25 +102,16 @@ Rule::GetParentRule(nsIDOMCSSRule** aPar
   if (mParentRule) {
     NS_IF_ADDREF(*aParentRule = mParentRule->GetDOMRule());
   } else {
     *aParentRule = nullptr;
   }
   return NS_OK;
 }
 
-nsresult
-Rule::GetParentStyleSheet(nsIDOMCSSStyleSheet** aSheet)
-{
-  NS_ENSURE_ARG_POINTER(aSheet);
-
-  NS_IF_ADDREF(*aSheet = GetStyleSheet());
-  return NS_OK;
-}
-
 size_t
 Rule::SizeOfCOMArrayElementIncludingThis(css::Rule* aElement,
                                          MallocSizeOf aMallocSizeOf,
                                          void* aData)
 {
   return aElement->SizeOfIncludingThis(aMallocSizeOf);
 }
 
@@ -284,22 +275,16 @@ CharsetRule::SetEncoding(const nsAString
 CharsetRule::GetDOMCssText(nsAString& aCssText)
 {
   aCssText.AssignLiteral("@charset \"");
   aCssText.Append(mEncoding);
   aCssText.AppendLiteral("\";");
 }
 
 NS_IMETHODIMP
-CharsetRule::GetParentStyleSheet(nsIDOMCSSStyleSheet** aSheet)
-{
-  return Rule::GetParentStyleSheet(aSheet);
-}
-
-NS_IMETHODIMP
 CharsetRule::GetParentRule(nsIDOMCSSRule** aParentRule)
 {
   return Rule::GetParentRule(aParentRule);
 }
 
 /* virtual */ size_t
 CharsetRule::SizeOfIncludingThis(MallocSizeOf aMallocSizeOf) const
 {
@@ -420,22 +405,16 @@ ImportRule::GetDOMCssText(nsAString& aCs
       aCssText.AppendLiteral(" ");
       aCssText.Append(mediaText);
     }
   }
   aCssText.AppendLiteral(";");
 }
 
 NS_IMETHODIMP
-ImportRule::GetParentStyleSheet(nsIDOMCSSStyleSheet** aSheet)
-{
-  return Rule::GetParentStyleSheet(aSheet);
-}
-
-NS_IMETHODIMP
 ImportRule::GetParentRule(nsIDOMCSSRule** aParentRule)
 {
   return Rule::GetParentRule(aParentRule);
 }
 
 NS_IMETHODIMP
 ImportRule::GetHref(nsAString & aHref)
 {
@@ -832,22 +811,16 @@ MediaRule::SetMedia(nsMediaList* aMedia)
 MediaRule::GetDOMCssText(nsAString& aCssText)
 {
   aCssText.AssignLiteral("@media ");
   AppendConditionText(aCssText);
   GroupRule::AppendRulesToCssText(aCssText);
 }
 
 NS_IMETHODIMP
-MediaRule::GetParentStyleSheet(nsIDOMCSSStyleSheet** aSheet)
-{
-  return GroupRule::GetParentStyleSheet(aSheet);
-}
-
-NS_IMETHODIMP
 MediaRule::GetParentRule(nsIDOMCSSRule** aParentRule)
 {
   return GroupRule::GetParentRule(aParentRule);
 }
 
 // nsIDOMCSSGroupingRule methods
 NS_IMETHODIMP
 MediaRule::GetCssRules(nsIDOMCSSRuleList* *aRuleList)
@@ -1025,22 +998,16 @@ DocumentRule::Clone() const
 DocumentRule::GetDOMCssText(nsAString& aCssText)
 {
   aCssText.AssignLiteral("@-moz-document ");
   AppendConditionText(aCssText);
   GroupRule::AppendRulesToCssText(aCssText);
 }
 
 NS_IMETHODIMP
-DocumentRule::GetParentStyleSheet(nsIDOMCSSStyleSheet** aSheet)
-{
-  return GroupRule::GetParentStyleSheet(aSheet);
-}
-
-NS_IMETHODIMP
 DocumentRule::GetParentRule(nsIDOMCSSRule** aParentRule)
 {
   return GroupRule::GetParentRule(aParentRule);
 }
 
 // nsIDOMCSSGroupingRule methods
 NS_IMETHODIMP
 DocumentRule::GetCssRules(nsIDOMCSSRuleList* *aRuleList)
@@ -1259,22 +1226,16 @@ NameSpaceRule::GetDOMCssText(nsAString& 
     aCssText.Append(nsDependentAtomString(mPrefix) + NS_LITERAL_STRING(" "));
   }
   aCssText.AppendLiteral("url(");
   nsStyleUtil::AppendEscapedCSSString(mURLSpec, aCssText);
   aCssText.Append(NS_LITERAL_STRING(");"));
 }
 
 NS_IMETHODIMP
-NameSpaceRule::GetParentStyleSheet(nsIDOMCSSStyleSheet** aSheet)
-{
-  return Rule::GetParentStyleSheet(aSheet);
-}
-
-NS_IMETHODIMP
 NameSpaceRule::GetParentRule(nsIDOMCSSRule** aParentRule)
 {
   return Rule::GetParentRule(aParentRule);
 }
 
 /* virtual */ size_t
 NameSpaceRule::SizeOfIncludingThis(MallocSizeOf aMallocSizeOf) const
 {
@@ -1755,22 +1716,16 @@ nsCSSFontFaceRule::GetDOMCssText(nsAStri
   mDecl.GetCssText(propText);
 
   aCssText.AssignLiteral("@font-face {\n");
   aCssText.Append(propText);
   aCssText.Append('}');
 }
 
 NS_IMETHODIMP
-nsCSSFontFaceRule::GetParentStyleSheet(nsIDOMCSSStyleSheet** aSheet)
-{
-  return Rule::GetParentStyleSheet(aSheet);
-}
-
-NS_IMETHODIMP
 nsCSSFontFaceRule::GetParentRule(nsIDOMCSSRule** aParentRule)
 {
   return Rule::GetParentRule(aParentRule);
 }
 
 NS_IMETHODIMP
 nsCSSFontFaceRule::GetStyle(nsIDOMCSSStyleDeclaration** aStyle)
 {
@@ -1939,22 +1894,16 @@ nsCSSFontFeatureValuesRule::GetType() co
 
 /* virtual */ void
 nsCSSFontFeatureValuesRule::GetDOMCssText(nsAString& aCssText)
 {
   FontFeatureValuesRuleToString(mFamilyList, mFeatureValues, aCssText);
 }
 
 NS_IMETHODIMP
-nsCSSFontFeatureValuesRule::GetParentStyleSheet(nsIDOMCSSStyleSheet** aSheet)
-{
-  return Rule::GetParentStyleSheet(aSheet);
-}
-
-NS_IMETHODIMP
 nsCSSFontFeatureValuesRule::GetParentRule(nsIDOMCSSRule** aParentRule)
 {
   return Rule::GetParentRule(aParentRule);
 }
 
 NS_IMETHODIMP
 nsCSSFontFeatureValuesRule::GetFontFamily(nsAString& aFontFamily)
 {
@@ -2209,22 +2158,16 @@ nsCSSKeyframeRule::GetDOMCssText(nsAStri
   aCssText.AppendLiteral(" { ");
   nsAutoString tmp;
   mDeclaration->ToString(tmp);
   aCssText.Append(tmp);
   aCssText.AppendLiteral(" }");
 }
 
 NS_IMETHODIMP
-nsCSSKeyframeRule::GetParentStyleSheet(nsIDOMCSSStyleSheet** aSheet)
-{
-  return Rule::GetParentStyleSheet(aSheet);
-}
-
-NS_IMETHODIMP
 nsCSSKeyframeRule::GetParentRule(nsIDOMCSSRule** aParentRule)
 {
   return Rule::GetParentRule(aParentRule);
 }
 
 NS_IMETHODIMP
 nsCSSKeyframeRule::GetKeyText(nsAString& aKeyText)
 {
@@ -2373,22 +2316,16 @@ nsCSSKeyframesRule::GetDOMCssText(nsAStr
     static_cast<nsCSSKeyframeRule*>(mRules[i])->GetCssText(tmp);
     aCssText.Append(tmp);
     aCssText.AppendLiteral("\n");
   }
   aCssText.AppendLiteral("}");
 }
 
 NS_IMETHODIMP
-nsCSSKeyframesRule::GetParentStyleSheet(nsIDOMCSSStyleSheet** aSheet)
-{
-  return GroupRule::GetParentStyleSheet(aSheet);
-}
-
-NS_IMETHODIMP
 nsCSSKeyframesRule::GetParentRule(nsIDOMCSSRule** aParentRule)
 {
   return GroupRule::GetParentRule(aParentRule);
 }
 
 NS_IMETHODIMP
 nsCSSKeyframesRule::GetName(nsAString& aName)
 {
@@ -2650,22 +2587,16 @@ nsCSSPageRule::GetDOMCssText(nsAString& 
   aCssText.AppendLiteral("@page { ");
   nsAutoString tmp;
   mDeclaration->ToString(tmp);
   aCssText.Append(tmp);
   aCssText.AppendLiteral(" }");
 }
 
 NS_IMETHODIMP
-nsCSSPageRule::GetParentStyleSheet(nsIDOMCSSStyleSheet** aSheet)
-{
-  return Rule::GetParentStyleSheet(aSheet);
-}
-
-NS_IMETHODIMP
 nsCSSPageRule::GetParentRule(nsIDOMCSSRule** aParentRule)
 {
   return Rule::GetParentRule(aParentRule);
 }
 
 css::ImportantRule*
 nsCSSPageRule::GetImportantRule()
 {
@@ -2783,22 +2714,16 @@ NS_INTERFACE_MAP_END_INHERITING(GroupRul
 CSSSupportsRule::GetDOMCssText(nsAString& aCssText)
 {
   aCssText.AssignLiteral("@supports ");
   aCssText.Append(mCondition);
   css::GroupRule::AppendRulesToCssText(aCssText);
 }
 
 NS_IMETHODIMP
-CSSSupportsRule::GetParentStyleSheet(nsIDOMCSSStyleSheet** aSheet)
-{
-  return css::GroupRule::GetParentStyleSheet(aSheet);
-}
-
-NS_IMETHODIMP
 CSSSupportsRule::GetParentRule(nsIDOMCSSRule** aParentRule)
 {
   return css::GroupRule::GetParentRule(aParentRule);
 }
 
 // nsIDOMCSSGroupingRule methods
 NS_IMETHODIMP
 CSSSupportsRule::GetCssRules(nsIDOMCSSRuleList* *aRuleList)
diff --git a/layout/style/nsCSSRules.h b/layout/style/nsCSSRules.h
--- a/layout/style/nsCSSRules.h
+++ b/layout/style/nsCSSRules.h
@@ -76,16 +76,20 @@ public:
   }
 
   // dom::CSSRule
   virtual uint16_t Type() const MOZ_OVERRIDE
   {
     return nsIDOMCSSRule::MEDIA_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
+  virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE
+  {
+    return GetStyleSheet();
+  }
 
   // nsIDOMCSSRule interface
   FORWARD_NSIDOMCSSRULE_TO_CSSRULE
 
   // nsIDOMCSSGroupingRule interface
   NS_DECL_NSIDOMCSSGROUPINGRULE
 
   // nsIDOMCSSConditionRule interface
@@ -142,16 +146,20 @@ public:
 
   // dom::CSSRule
   virtual uint16_t Type() const MOZ_OVERRIDE
   {
     // XXX What should really happen here?
     return nsIDOMCSSRule::UNKNOWN_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
+  virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE
+  {
+    return GetStyleSheet();
+  }
 
   // nsIDOMCSSRule interface
   FORWARD_NSIDOMCSSRULE_TO_CSSRULE
 
   // nsIDOMCSSGroupingRule interface
   NS_DECL_NSIDOMCSSGROUPINGRULE
 
   // nsIDOMCSSConditionRule interface
@@ -271,16 +279,20 @@ public:
   virtual already_AddRefed<mozilla::css::Rule> Clone() const;
 
   // dom::CSSRule
   virtual uint16_t Type() const MOZ_OVERRIDE
   {
     return nsIDOMCSSRule::FONT_FACE_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
+  virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE
+  {
+    return GetStyleSheet();
+  }
 
   // nsIDOMCSSRule interface
   FORWARD_NSIDOMCSSRULE_TO_CSSRULE
 
   // nsIDOMCSSFontFaceRule interface
   NS_DECL_NSIDOMCSSFONTFACERULE
 
   void SetDesc(nsCSSFontDesc aDescID, nsCSSValue const & aValue);
@@ -342,16 +354,20 @@ public:
   virtual already_AddRefed<mozilla::css::Rule> Clone() const MOZ_OVERRIDE;
 
   // dom::CSSRule
   virtual uint16_t Type() const MOZ_OVERRIDE
   {
     return nsIDOMCSSRule::FONT_FEATURE_VALUES_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
+  virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE
+  {
+    return GetStyleSheet();
+  }
 
   // nsIDOMCSSRule interface
   FORWARD_NSIDOMCSSRULE_TO_CSSRULE
 
   // nsIDOMCSSFontFaceRule interface
   NS_DECL_NSIDOMCSSFONTFEATUREVALUESRULE
 
   const nsTArray<nsString>& GetFamilyList() { return mFamilyList; }
@@ -406,16 +422,20 @@ public:
   virtual already_AddRefed<Rule> Clone() const;
 
   // dom::CSSRule
   virtual uint16_t Type() const MOZ_OVERRIDE
   {
     return nsIDOMCSSRule::CHARSET_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
+  virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE
+  {
+    return GetStyleSheet();
+  }
 
   // nsIDOMCSSRule interface
   FORWARD_NSIDOMCSSRULE_TO_CSSRULE
 
   // nsIDOMCSSCharsetRule methods
   NS_IMETHOD GetEncoding(nsAString& aEncoding) MOZ_OVERRIDE;
   NS_IMETHOD SetEncoding(const nsAString& aEncoding) MOZ_OVERRIDE;
 
@@ -485,16 +505,20 @@ public:
   virtual already_AddRefed<mozilla::css::Rule> Clone() const;
 
   // dom::CSSRule
   virtual uint16_t Type() const MOZ_OVERRIDE
   {
     return nsIDOMCSSRule::KEYFRAME_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
+  virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE
+  {
+    return GetStyleSheet();
+  }
 
   // nsIDOMCSSRule interface
   FORWARD_NSIDOMCSSRULE_TO_CSSRULE
 
   // nsIDOMMozCSSKeyframeRule interface
   NS_DECL_NSIDOMMOZCSSKEYFRAMERULE
 
   const nsTArray<float>& GetKeys() const     { return mKeys; }
@@ -546,16 +570,20 @@ public:
   }
 
   // dom::CSSRule
   virtual uint16_t Type() const MOZ_OVERRIDE
   {
     return nsIDOMCSSRule::KEYFRAMES_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
+  virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE
+  {
+    return GetStyleSheet();
+  }
 
   // nsIDOMCSSRule interface
   FORWARD_NSIDOMCSSRULE_TO_CSSRULE
 
   // nsIDOMMozCSSKeyframesRule interface
   NS_DECL_NSIDOMMOZCSSKEYFRAMESRULE
 
   // rest of GroupRule
@@ -628,16 +656,20 @@ public:
   virtual already_AddRefed<mozilla::css::Rule> Clone() const;
 
   // dom::CSSRule
   virtual uint16_t Type() const MOZ_OVERRIDE
   {
     return nsIDOMCSSRule::PAGE_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
+  virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE
+  {
+    return GetStyleSheet();
+  }
 
   // nsIDOMCSSRule interface
   FORWARD_NSIDOMCSSRULE_TO_CSSRULE
 
   // nsIDOMCSSPageRule interface
   NS_DECL_NSIDOMCSSPAGERULE
 
   mozilla::css::Declaration* Declaration()   { return mDeclaration; }
@@ -686,16 +718,20 @@ public:
   NS_DECL_ISUPPORTS_INHERITED
 
   // dom::CSSRule
   virtual uint16_t Type() const MOZ_OVERRIDE
   {
     return nsIDOMCSSRule::SUPPORTS_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
+  virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE
+  {
+    return GetStyleSheet();
+  }
 
   // nsIDOMCSSRule interface
   FORWARD_NSIDOMCSSRULE_TO_CSSRULE
 
   // nsIDOMCSSGroupingRule interface
   NS_DECL_NSIDOMCSSGROUPINGRULE
 
   // nsIDOMCSSConditionRule interface
