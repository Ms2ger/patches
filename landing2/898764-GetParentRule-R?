From: Ms2ger <ms2ger@gmail.com>
Bug 898764 - Part f: Introduce CSSRule::GetParentRule(); r=?heycam

diff --git a/layout/style/CSSRule.h b/layout/style/CSSRule.h
--- a/layout/style/CSSRule.h
+++ b/layout/style/CSSRule.h
@@ -3,16 +3,17 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef mozilla_dom_CSSRule_h
 #define mozilla_dom_CSSRule_h
 
 #include "mozilla/ErrorResult.h"
+#include "nsIDOMCSSRule.h"
 #include "nsStringGlue.h"
 
 class nsCSSStyleSheet;
 
 namespace mozilla {
 namespace dom {
 
 class CSSRule
@@ -21,16 +22,22 @@ public:
   virtual uint16_t Type() const = 0;
   virtual void GetDOMCssText(nsAString& aCssText) = 0;
   virtual void SetDOMCssText(const nsAString& aCssText, ErrorResult& aRv)
   {
     // bug 443978
     aRv.Throw(NS_ERROR_NOT_IMPLEMENTED);
   }
   virtual nsCSSStyleSheet* GetParentStyleSheet() = 0;
+  virtual nsIDOMCSSRule* GetDOMParentRule() = 0;
+  CSSRule* GetParentRule()
+  {
+    nsIDOMCSSRule* parent = GetDOMParentRule();
+    return parent ? parent->GetCSSRule() : nullptr;
+  }
 };
 
 #define FORWARD_NSIDOMCSSRULE_TO_CSSRULE                                      \
   NS_IMETHOD                                                                  \
   GetType(uint16_t* aType) MOZ_OVERRIDE                                       \
   {                                                                           \
     *aType = Type();                                                          \
     return NS_OK;                                                             \
@@ -50,17 +57,22 @@ public:
   }                                                                           \
   NS_IMETHOD                                                                  \
   GetParentStyleSheet(nsIDOMCSSStyleSheet** aParentStyleSheet) MOZ_OVERRIDE   \
   {                                                                           \
     NS_ENSURE_ARG_POINTER(aParentStyleSheet);                                 \
     NS_IF_ADDREF(*aParentStyleSheet = GetParentStyleSheet());                 \
     return NS_OK;                                                             \
   }                                                                           \
-  NS_IMETHOD GetParentRule(nsIDOMCSSRule** aParentRule) MOZ_OVERRIDE;         \
+  NS_IMETHOD                                                                  \
+  GetParentRule(nsIDOMCSSRule** aParentRule) MOZ_OVERRIDE                     \
+  {                                                                           \
+    NS_IF_ADDREF(*aParentRule = GetDOMParentRule());                          \
+    return NS_OK;                                                             \
+  }                                                                           \
   virtual mozilla::dom::CSSRule* GetCSSRule() MOZ_OVERRIDE                    \
   {                                                                           \
     return this;                                                              \
   }
 
 } // namespace dom
 } // namespace mozilla
 
diff --git a/layout/style/ImportRule.h b/layout/style/ImportRule.h
--- a/layout/style/ImportRule.h
+++ b/layout/style/ImportRule.h
@@ -58,16 +58,20 @@ public:
   {
     return nsIDOMCSSRule::IMPORT_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
   virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE
   {
     return GetStyleSheet();
   }
+  virtual nsIDOMCSSRule* GetDOMParentRule() MOZ_OVERRIDE
+  {
+    return Rule::GetParentRule();
+  }
 
   // nsIDOMCSSRule interface
   FORWARD_NSIDOMCSSRULE_TO_CSSRULE
 
   // nsIDOMCSSImportRule interface
   NS_DECL_NSIDOMCSSIMPORTRULE
 
 private:
diff --git a/layout/style/NameSpaceRule.h b/layout/style/NameSpaceRule.h
--- a/layout/style/NameSpaceRule.h
+++ b/layout/style/NameSpaceRule.h
@@ -62,16 +62,20 @@ public:
   {
     return nsIDOMCSSRule::NAMESPACE_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
   virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE
   {
     return GetStyleSheet();
   }
+  virtual nsIDOMCSSRule* GetDOMParentRule() MOZ_OVERRIDE
+  {
+    return Rule::GetParentRule();
+  }
 
   // nsIDOMCSSRule interface
   FORWARD_NSIDOMCSSRULE_TO_CSSRULE
 
 private:
   nsCOMPtr<nsIAtom> mPrefix;
   nsString          mURLSpec;
 };
diff --git a/layout/style/Rule.h b/layout/style/Rule.h
--- a/layout/style/Rule.h
+++ b/layout/style/Rule.h
@@ -102,17 +102,17 @@ public:
   // Note that this returns null for inline style rules since they aren't
   // supposed to have a DOM rule representation (and our code wouldn't work).
   virtual nsIDOMCSSRule* GetDOMRule() = 0;
 
   // Like GetDOMRule(), but won't create one if we don't have one yet
   virtual nsIDOMCSSRule* GetExistingDOMRule() = 0;
 
   // to implement methods on nsIDOMCSSRule
-  nsresult GetParentRule(nsIDOMCSSRule** aParentRule);
+  nsIDOMCSSRule* GetParentRule();
 
   // This is pure virtual because all of Rule's data members are non-owning and
   // thus measured elsewhere.
   virtual size_t SizeOfIncludingThis(mozilla::MallocSizeOf aMallocSizeOf)
     const MOZ_MUST_OVERRIDE = 0;
 
   // This is used to measure nsCOMArray<Rule>s.
   static size_t SizeOfCOMArrayElementIncludingThis(css::Rule* aElement,
diff --git a/layout/style/StyleRule.cpp b/layout/style/StyleRule.cpp
--- a/layout/style/StyleRule.cpp
+++ b/layout/style/StyleRule.cpp
@@ -1017,16 +1017,17 @@ public:
   virtual uint16_t Type() const MOZ_OVERRIDE
   {
     return nsIDOMCSSRule::STYLE_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
   virtual void SetDOMCssText(const nsAString& aCssText, ErrorResult&)
     MOZ_OVERRIDE;
   virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE;
+  virtual nsIDOMCSSRule* GetDOMParentRule() MOZ_OVERRIDE;
 
   // nsICSSStyleRuleDOMWrapper
   NS_IMETHOD GetCSSStyleRule(StyleRule **aResult);
 
   DOMCSSDeclarationImpl* DOMDeclaration() { return &mDOMDeclaration; }
 
   friend class ::DOMCSSDeclarationImpl;
 
@@ -1217,24 +1218,23 @@ DOMCSSStyleRule::SetDOMCssText(const nsA
 DOMCSSStyleRule::GetParentStyleSheet()
 {
   if (!Rule()) {
     return nullptr;
   }
   return Rule()->GetStyleSheet();
 }
 
-NS_IMETHODIMP
-DOMCSSStyleRule::GetParentRule(nsIDOMCSSRule** aParentRule)
+/* virtual */ nsIDOMCSSRule*
+DOMCSSStyleRule::GetDOMParentRule()
 {
   if (!Rule()) {
-    *aParentRule = nullptr;
-    return NS_OK;
+    return nullptr;
   }
-  return Rule()->GetParentRule(aParentRule);
+  return Rule()->GetParentRule();
 }
 
 NS_IMETHODIMP
 DOMCSSStyleRule::GetSelectorText(nsAString& aSelectorText)
 {
   if (!Rule()) {
     aSelectorText.Truncate();
   } else {
diff --git a/layout/style/nsCSSRules.cpp b/layout/style/nsCSSRules.cpp
--- a/layout/style/nsCSSRules.cpp
+++ b/layout/style/nsCSSRules.cpp
@@ -91,25 +91,20 @@ Rule::SetHTMLCSSStyleSheet(nsHTMLCSSStyl
 {
   // We don't reference count this up reference. The style sheet
   // will tell us when it's going away or when we're detached from
   // it.
   mSheet = reinterpret_cast<uintptr_t>(aSheet);
   mSheet |= 0x1;
 }
 
-nsresult
-Rule::GetParentRule(nsIDOMCSSRule** aParentRule)
+nsIDOMCSSRule*
+Rule::GetParentRule()
 {
-  if (mParentRule) {
-    NS_IF_ADDREF(*aParentRule = mParentRule->GetDOMRule());
-  } else {
-    *aParentRule = nullptr;
-  }
-  return NS_OK;
+  return mParentRule ? mParentRule->GetDOMRule() : nullptr;
 }
 
 size_t
 Rule::SizeOfCOMArrayElementIncludingThis(css::Rule* aElement,
                                          MallocSizeOf aMallocSizeOf,
                                          void* aData)
 {
   return aElement->SizeOfIncludingThis(aMallocSizeOf);
@@ -274,22 +269,16 @@ CharsetRule::SetEncoding(const nsAString
 /* virtual */ void
 CharsetRule::GetDOMCssText(nsAString& aCssText)
 {
   aCssText.AssignLiteral("@charset \"");
   aCssText.Append(mEncoding);
   aCssText.AppendLiteral("\";");
 }
 
-NS_IMETHODIMP
-CharsetRule::GetParentRule(nsIDOMCSSRule** aParentRule)
-{
-  return Rule::GetParentRule(aParentRule);
-}
-
 /* virtual */ size_t
 CharsetRule::SizeOfIncludingThis(MallocSizeOf aMallocSizeOf) const
 {
   return aMallocSizeOf(this);
 
   // Measurement of the following members may be added later if DMD finds it is
   // worthwhile:
   // - mEncoding
@@ -405,22 +394,16 @@ ImportRule::GetDOMCssText(nsAString& aCs
       aCssText.AppendLiteral(" ");
       aCssText.Append(mediaText);
     }
   }
   aCssText.AppendLiteral(";");
 }
 
 NS_IMETHODIMP
-ImportRule::GetParentRule(nsIDOMCSSRule** aParentRule)
-{
-  return Rule::GetParentRule(aParentRule);
-}
-
-NS_IMETHODIMP
 ImportRule::GetHref(nsAString & aHref)
 {
   aHref = mURLSpec;
   return NS_OK;
 }
 
 NS_IMETHODIMP
 ImportRule::GetMedia(nsIDOMMediaList * *aMedia)
@@ -810,22 +793,16 @@ MediaRule::SetMedia(nsMediaList* aMedia)
 /* virtual */ void
 MediaRule::GetDOMCssText(nsAString& aCssText)
 {
   aCssText.AssignLiteral("@media ");
   AppendConditionText(aCssText);
   GroupRule::AppendRulesToCssText(aCssText);
 }
 
-NS_IMETHODIMP
-MediaRule::GetParentRule(nsIDOMCSSRule** aParentRule)
-{
-  return GroupRule::GetParentRule(aParentRule);
-}
-
 // nsIDOMCSSGroupingRule methods
 NS_IMETHODIMP
 MediaRule::GetCssRules(nsIDOMCSSRuleList* *aRuleList)
 {
   return GroupRule::GetCssRules(aRuleList);
 }
 
 NS_IMETHODIMP
@@ -997,22 +974,16 @@ DocumentRule::Clone() const
 /* virtual */ void
 DocumentRule::GetDOMCssText(nsAString& aCssText)
 {
   aCssText.AssignLiteral("@-moz-document ");
   AppendConditionText(aCssText);
   GroupRule::AppendRulesToCssText(aCssText);
 }
 
-NS_IMETHODIMP
-DocumentRule::GetParentRule(nsIDOMCSSRule** aParentRule)
-{
-  return GroupRule::GetParentRule(aParentRule);
-}
-
 // nsIDOMCSSGroupingRule methods
 NS_IMETHODIMP
 DocumentRule::GetCssRules(nsIDOMCSSRuleList* *aRuleList)
 {
   return GroupRule::GetCssRules(aRuleList);
 }
 
 NS_IMETHODIMP
@@ -1225,22 +1196,16 @@ NameSpaceRule::GetDOMCssText(nsAString& 
   if (mPrefix) {
     aCssText.Append(nsDependentAtomString(mPrefix) + NS_LITERAL_STRING(" "));
   }
   aCssText.AppendLiteral("url(");
   nsStyleUtil::AppendEscapedCSSString(mURLSpec, aCssText);
   aCssText.Append(NS_LITERAL_STRING(");"));
 }
 
-NS_IMETHODIMP
-NameSpaceRule::GetParentRule(nsIDOMCSSRule** aParentRule)
-{
-  return Rule::GetParentRule(aParentRule);
-}
-
 /* virtual */ size_t
 NameSpaceRule::SizeOfIncludingThis(MallocSizeOf aMallocSizeOf) const
 {
   return aMallocSizeOf(this);
 
   // Measurement of the following members may be added later if DMD finds it is
   // worthwhile:
   // - mPrefix
@@ -1716,22 +1681,16 @@ nsCSSFontFaceRule::GetDOMCssText(nsAStri
   mDecl.GetCssText(propText);
 
   aCssText.AssignLiteral("@font-face {\n");
   aCssText.Append(propText);
   aCssText.Append('}');
 }
 
 NS_IMETHODIMP
-nsCSSFontFaceRule::GetParentRule(nsIDOMCSSRule** aParentRule)
-{
-  return Rule::GetParentRule(aParentRule);
-}
-
-NS_IMETHODIMP
 nsCSSFontFaceRule::GetStyle(nsIDOMCSSStyleDeclaration** aStyle)
 {
   NS_IF_ADDREF(*aStyle = &mDecl);
   return NS_OK;
 }
 
 // Arguably these should forward to nsCSSFontFaceStyleDecl methods.
 void
@@ -1894,22 +1853,16 @@ nsCSSFontFeatureValuesRule::GetType() co
 
 /* virtual */ void
 nsCSSFontFeatureValuesRule::GetDOMCssText(nsAString& aCssText)
 {
   FontFeatureValuesRuleToString(mFamilyList, mFeatureValues, aCssText);
 }
 
 NS_IMETHODIMP
-nsCSSFontFeatureValuesRule::GetParentRule(nsIDOMCSSRule** aParentRule)
-{
-  return Rule::GetParentRule(aParentRule);
-}
-
-NS_IMETHODIMP
 nsCSSFontFeatureValuesRule::GetFontFamily(nsAString& aFontFamily)
 {
   FamilyListToString(mFamilyList, aFontFamily);
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsCSSFontFeatureValuesRule::SetFontFamily(const nsAString& aFontFamily)
@@ -2158,22 +2111,16 @@ nsCSSKeyframeRule::GetDOMCssText(nsAStri
   aCssText.AppendLiteral(" { ");
   nsAutoString tmp;
   mDeclaration->ToString(tmp);
   aCssText.Append(tmp);
   aCssText.AppendLiteral(" }");
 }
 
 NS_IMETHODIMP
-nsCSSKeyframeRule::GetParentRule(nsIDOMCSSRule** aParentRule)
-{
-  return Rule::GetParentRule(aParentRule);
-}
-
-NS_IMETHODIMP
 nsCSSKeyframeRule::GetKeyText(nsAString& aKeyText)
 {
   DoGetKeyText(aKeyText);
   return NS_OK;
 }
 
 void
 nsCSSKeyframeRule::DoGetKeyText(nsAString& aKeyText) const
@@ -2316,22 +2263,16 @@ nsCSSKeyframesRule::GetDOMCssText(nsAStr
     static_cast<nsCSSKeyframeRule*>(mRules[i])->GetCssText(tmp);
     aCssText.Append(tmp);
     aCssText.AppendLiteral("\n");
   }
   aCssText.AppendLiteral("}");
 }
 
 NS_IMETHODIMP
-nsCSSKeyframesRule::GetParentRule(nsIDOMCSSRule** aParentRule)
-{
-  return GroupRule::GetParentRule(aParentRule);
-}
-
-NS_IMETHODIMP
 nsCSSKeyframesRule::GetName(nsAString& aName)
 {
   aName = mName;
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsCSSKeyframesRule::SetName(const nsAString& aName)
@@ -2586,22 +2527,16 @@ nsCSSPageRule::GetDOMCssText(nsAString& 
 {
   aCssText.AppendLiteral("@page { ");
   nsAutoString tmp;
   mDeclaration->ToString(tmp);
   aCssText.Append(tmp);
   aCssText.AppendLiteral(" }");
 }
 
-NS_IMETHODIMP
-nsCSSPageRule::GetParentRule(nsIDOMCSSRule** aParentRule)
-{
-  return Rule::GetParentRule(aParentRule);
-}
-
 css::ImportantRule*
 nsCSSPageRule::GetImportantRule()
 {
   if (!mDeclaration->HasImportantData()) {
     return nullptr;
   }
   if (!mImportantRule) {
     mImportantRule = new css::ImportantRule(mDeclaration);
@@ -2713,22 +2648,16 @@ NS_INTERFACE_MAP_END_INHERITING(GroupRul
 /* virtual */ void
 CSSSupportsRule::GetDOMCssText(nsAString& aCssText)
 {
   aCssText.AssignLiteral("@supports ");
   aCssText.Append(mCondition);
   css::GroupRule::AppendRulesToCssText(aCssText);
 }
 
-NS_IMETHODIMP
-CSSSupportsRule::GetParentRule(nsIDOMCSSRule** aParentRule)
-{
-  return css::GroupRule::GetParentRule(aParentRule);
-}
-
 // nsIDOMCSSGroupingRule methods
 NS_IMETHODIMP
 CSSSupportsRule::GetCssRules(nsIDOMCSSRuleList* *aRuleList)
 {
   return css::GroupRule::GetCssRules(aRuleList);
 }
 
 NS_IMETHODIMP
diff --git a/layout/style/nsCSSRules.h b/layout/style/nsCSSRules.h
--- a/layout/style/nsCSSRules.h
+++ b/layout/style/nsCSSRules.h
@@ -80,16 +80,20 @@ public:
   {
     return nsIDOMCSSRule::MEDIA_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
   virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE
   {
     return GetStyleSheet();
   }
+  virtual nsIDOMCSSRule* GetDOMParentRule() MOZ_OVERRIDE
+  {
+    return Rule::GetParentRule();
+  }
 
   // nsIDOMCSSRule interface
   FORWARD_NSIDOMCSSRULE_TO_CSSRULE
 
   // nsIDOMCSSGroupingRule interface
   NS_DECL_NSIDOMCSSGROUPINGRULE
 
   // nsIDOMCSSConditionRule interface
@@ -150,16 +154,20 @@ public:
     // XXX What should really happen here?
     return nsIDOMCSSRule::UNKNOWN_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
   virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE
   {
     return GetStyleSheet();
   }
+  virtual nsIDOMCSSRule* GetDOMParentRule() MOZ_OVERRIDE
+  {
+    return Rule::GetParentRule();
+  }
 
   // nsIDOMCSSRule interface
   FORWARD_NSIDOMCSSRULE_TO_CSSRULE
 
   // nsIDOMCSSGroupingRule interface
   NS_DECL_NSIDOMCSSGROUPINGRULE
 
   // nsIDOMCSSConditionRule interface
@@ -283,16 +291,20 @@ public:
   {
     return nsIDOMCSSRule::FONT_FACE_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
   virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE
   {
     return GetStyleSheet();
   }
+  virtual nsIDOMCSSRule* GetDOMParentRule() MOZ_OVERRIDE
+  {
+    return Rule::GetParentRule();
+  }
 
   // nsIDOMCSSRule interface
   FORWARD_NSIDOMCSSRULE_TO_CSSRULE
 
   // nsIDOMCSSFontFaceRule interface
   NS_DECL_NSIDOMCSSFONTFACERULE
 
   void SetDesc(nsCSSFontDesc aDescID, nsCSSValue const & aValue);
@@ -358,16 +370,20 @@ public:
   {
     return nsIDOMCSSRule::FONT_FEATURE_VALUES_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
   virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE
   {
     return GetStyleSheet();
   }
+  virtual nsIDOMCSSRule* GetDOMParentRule() MOZ_OVERRIDE
+  {
+    return Rule::GetParentRule();
+  }
 
   // nsIDOMCSSRule interface
   FORWARD_NSIDOMCSSRULE_TO_CSSRULE
 
   // nsIDOMCSSFontFaceRule interface
   NS_DECL_NSIDOMCSSFONTFEATUREVALUESRULE
 
   const nsTArray<nsString>& GetFamilyList() { return mFamilyList; }
@@ -426,16 +442,20 @@ public:
   {
     return nsIDOMCSSRule::CHARSET_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
   virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE
   {
     return GetStyleSheet();
   }
+  virtual nsIDOMCSSRule* GetDOMParentRule() MOZ_OVERRIDE
+  {
+    return Rule::GetParentRule();
+  }
 
   // nsIDOMCSSRule interface
   FORWARD_NSIDOMCSSRULE_TO_CSSRULE
 
   // nsIDOMCSSCharsetRule methods
   NS_IMETHOD GetEncoding(nsAString& aEncoding) MOZ_OVERRIDE;
   NS_IMETHOD SetEncoding(const nsAString& aEncoding) MOZ_OVERRIDE;
 
@@ -509,16 +529,20 @@ public:
   {
     return nsIDOMCSSRule::KEYFRAME_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
   virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE
   {
     return GetStyleSheet();
   }
+  virtual nsIDOMCSSRule* GetDOMParentRule() MOZ_OVERRIDE
+  {
+    return Rule::GetParentRule();
+  }
 
   // nsIDOMCSSRule interface
   FORWARD_NSIDOMCSSRULE_TO_CSSRULE
 
   // nsIDOMMozCSSKeyframeRule interface
   NS_DECL_NSIDOMMOZCSSKEYFRAMERULE
 
   const nsTArray<float>& GetKeys() const     { return mKeys; }
@@ -574,16 +598,20 @@ public:
   {
     return nsIDOMCSSRule::KEYFRAMES_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
   virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE
   {
     return GetStyleSheet();
   }
+  virtual nsIDOMCSSRule* GetDOMParentRule() MOZ_OVERRIDE
+  {
+    return Rule::GetParentRule();
+  }
 
   // nsIDOMCSSRule interface
   FORWARD_NSIDOMCSSRULE_TO_CSSRULE
 
   // nsIDOMMozCSSKeyframesRule interface
   NS_DECL_NSIDOMMOZCSSKEYFRAMESRULE
 
   // rest of GroupRule
@@ -660,16 +688,20 @@ public:
   {
     return nsIDOMCSSRule::PAGE_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
   virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE
   {
     return GetStyleSheet();
   }
+  virtual nsIDOMCSSRule* GetDOMParentRule() MOZ_OVERRIDE
+  {
+    return Rule::GetParentRule();
+  }
 
   // nsIDOMCSSRule interface
   FORWARD_NSIDOMCSSRULE_TO_CSSRULE
 
   // nsIDOMCSSPageRule interface
   NS_DECL_NSIDOMCSSPAGERULE
 
   mozilla::css::Declaration* Declaration()   { return mDeclaration; }
@@ -722,16 +754,20 @@ public:
   {
     return nsIDOMCSSRule::SUPPORTS_RULE;
   }
   virtual void GetDOMCssText(nsAString& aCssText) MOZ_OVERRIDE;
   virtual nsCSSStyleSheet* GetParentStyleSheet() MOZ_OVERRIDE
   {
     return GetStyleSheet();
   }
+  virtual nsIDOMCSSRule* GetDOMParentRule() MOZ_OVERRIDE
+  {
+    return Rule::GetParentRule();
+  }
 
   // nsIDOMCSSRule interface
   FORWARD_NSIDOMCSSRULE_TO_CSSRULE
 
   // nsIDOMCSSGroupingRule interface
   NS_DECL_NSIDOMCSSGROUPINGRULE
 
   // nsIDOMCSSConditionRule interface
