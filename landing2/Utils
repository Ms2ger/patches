From: Ms2ger <ms2ger@gmail.com>

diff --git a/mfbt/DebugOnly.h b/mfbt/DebugOnly.h
new file mode 100644
--- /dev/null
+++ b/mfbt/DebugOnly.h
@@ -0,0 +1,76 @@
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/* A templated class to avoid unused variable warnings in optimized builds. */
+
+#ifndef mozilla_DebugOnly_h
+#define mozilla_DebugOnly_h
+
+namespace mozilla {
+
+/**
+ * DebugOnly contains a value of type T, but only in debug builds.  In release
+ * builds, it does not contain a value.  This helper is intended to be used with
+ * MOZ_ASSERT()-style macros, allowing one to write:
+ *
+ *   DebugOnly<bool> check = func();
+ *   MOZ_ASSERT(check);
+ *
+ * more concisely than declaring |check| conditional on #ifdef DEBUG, but also
+ * without allocating storage space for |check| in release builds.
+ *
+ * DebugOnly instances can only be coerced to T in debug builds.  In release
+ * builds they don't have a value, so type coercion is not well defined.
+ */
+template<typename T>
+struct DebugOnly
+{
+#ifdef DEBUG
+  private:
+    T value;
+
+  public:
+    DebugOnly() { }
+    DebugOnly(const T& other) : value(other) { }
+    DebugOnly(const DebugOnly& other) : value(other.value) { }
+    DebugOnly& operator=(const T& rhs) {
+      value = rhs;
+      return *this;
+    }
+    void operator++(int) {
+      value++;
+    }
+    void operator--(int) {
+      value--;
+    }
+
+    T *operator&() { return &value; }
+
+    operator T&() { return value; }
+    operator const T&() const { return value; }
+
+    T& operator->() { return value; }
+
+#else
+  public:
+    DebugOnly() { }
+    DebugOnly(const T&) { }
+    DebugOnly(const DebugOnly&) { }
+    DebugOnly& operator=(const T&) { return *this; }
+    void operator++(int) { }
+    void operator--(int) { }
+#endif
+
+    /*
+     * DebugOnly must always have a destructor or else it will
+     * generate "unused variable" warnings, exactly what it's intended
+     * to avoid!
+     */
+    ~DebugOnly() {}
+};
+
+} // namespace mozilla
+
+#endif // mozilla_DebugOnly_h
diff --git a/mfbt/Util.h b/mfbt/Util.h
--- a/mfbt/Util.h
+++ b/mfbt/Util.h
@@ -12,76 +12,20 @@
 #define mozilla_Util_h_
 
 #include "mozilla/Assertions.h"
 #include "mozilla/Attributes.h"
 #include "mozilla/Types.h"
 
 #ifdef __cplusplus
 
+#include "mozilla/DebugOnly.h"
+
 namespace mozilla {
 
-/**
- * DebugOnly contains a value of type T, but only in debug builds.  In release
- * builds, it does not contain a value.  This helper is intended to be used with
- * MOZ_ASSERT()-style macros, allowing one to write:
- *
- *   DebugOnly<bool> check = func();
- *   MOZ_ASSERT(check);
- *
- * more concisely than declaring |check| conditional on #ifdef DEBUG, but also
- * without allocating storage space for |check| in release builds.
- *
- * DebugOnly instances can only be coerced to T in debug builds.  In release
- * builds they don't have a value, so type coercion is not well defined.
- */
-template<typename T>
-struct DebugOnly
-{
-#ifdef DEBUG
-    T value;
-
-    DebugOnly() { }
-    DebugOnly(const T& other) : value(other) { }
-    DebugOnly(const DebugOnly& other) : value(other.value) { }
-    DebugOnly& operator=(const T& rhs) {
-      value = rhs;
-      return *this;
-    }
-    void operator++(int) {
-      value++;
-    }
-    void operator--(int) {
-      value--;
-    }
-
-    T *operator&() { return &value; }
-
-    operator T&() { return value; }
-    operator const T&() const { return value; }
-
-    T& operator->() { return value; }
-
-#else
-    DebugOnly() { }
-    DebugOnly(const T&) { }
-    DebugOnly(const DebugOnly&) { }
-    DebugOnly& operator=(const T&) { return *this; }
-    void operator++(int) { }
-    void operator--(int) { }
-#endif
-
-    /*
-     * DebugOnly must always have a destructor or else it will
-     * generate "unused variable" warnings, exactly what it's intended
-     * to avoid!
-     */
-    ~DebugOnly() {}
-};
-
 /*
  * This class, and the corresponding macro MOZ_ALIGNOF, figure out how many 
  * bytes of alignment a given type needs.
  */
 template<class T>
 class AlignmentFinder
 {
     struct Aligner
diff --git a/mfbt/exported_headers.mk b/mfbt/exported_headers.mk
--- a/mfbt/exported_headers.mk
+++ b/mfbt/exported_headers.mk
@@ -9,16 +9,17 @@
 EXPORTS_NAMESPACES += mozilla
 
 EXPORTS_mozilla += \
   Assertions.h \
   Attributes.h \
   BloomFilter.h \
   CheckedInt.h \
   Constants.h \
+  DebugOnly.h \
   FloatingPoint.h \
   GuardObjects.h \
   HashFunctions.h \
   Likely.h \
   LinkedList.h \
   MathAlgorithms.h \
   MSStdInt.h \
   NullPtr.h \
