From: Ms2ger <ms2ger@gmail.com>

diff --git a/js/xpconnect/src/XPCConvert.cpp b/js/xpconnect/src/XPCConvert.cpp
--- a/js/xpconnect/src/XPCConvert.cpp
+++ b/js/xpconnect/src/XPCConvert.cpp
@@ -396,103 +396,112 @@ XPCConvert::JSData2Native(XPCCallContext
     case nsXPTType::T_U64    :
         return ValueToPrimitive(cx, s, static_cast<uint64_t*>(d));
     case nsXPTType::T_FLOAT  :
         return ValueToPrimitive(cx, s, static_cast<float*>(d));
     case nsXPTType::T_DOUBLE :
         return ValueToPrimitive(cx, s, static_cast<double*>(d));
     case nsXPTType::T_BOOL   :
         return ValueToPrimitive(cx, s, static_cast<bool*>(d));
+
     case nsXPTType::T_CHAR   :
     {
-        JSString* str = JS_ValueToString(cx, s);
-        if (!str) {
+        JSString *str = JS_ValueToString(cx, s);
+        if (!str)
             return false;
-        }
+
         size_t length;
-        const jschar* chars = JS_GetStringCharsAndLength(cx, str, &length);
-        if (!chars) {
+        const jschar *chars = JS_GetStringCharsAndLength(cx, str, &length);
+        if (!chars)
             return false;
-        }
+
         jschar ch = length ? chars[0] : 0;
 #ifdef DEBUG
         CheckJSCharInCharRange(ch);
 #endif
         *((char*)d) = char(ch);
-        break;
+        return true;
     }
+
     case nsXPTType::T_WCHAR  :
     {
-        JSString* str;
-        if (!(str = JS_ValueToString(cx, s))) {
+        JSString *str = JS_ValueToString(cx, s);
+        if (!str)
             return false;
-        }
+
         size_t length;
-        const jschar* chars = JS_GetStringCharsAndLength(cx, str, &length);
-        if (!chars) {
+        const jschar *chars = JS_GetStringCharsAndLength(cx, str, &length);
+        if (!chars)
             return false;
-        }
+
         if (length == 0) {
             *((uint16_t*)d) = 0;
-            break;
+            return true;
         }
+
         *((uint16_t*)d) = uint16_t(chars[0]);
-        break;
+        return true;
     }
     case nsXPTType::T_JSVAL :
         *((jsval*)d) = s;
-        break;
+        return true;
+
     case nsXPTType::T_VOID:
         XPC_LOG_ERROR(("XPCConvert::JSData2Native : void* params not supported"));
         NS_ERROR("void* params not supported");
         return false;
+
     case nsXPTType::T_IID:
     {
-        const nsID* pid = nullptr;
-
         // There's no good reason to pass a null IID.
         if (s.isNullOrUndefined()) {
             if (pErr)
                 *pErr = NS_ERROR_XPC_BAD_CONVERT_JS;
             return false;
         }
 
-        if (!s.isObject() ||
-            (!(pid = xpc_JSObjectToID(cx, &s.toObject()))) ||
-            (!(pid = (const nsID*) nsMemory::Clone(pid, sizeof(nsID))))) {
+        if (!s.isObject())
             return false;
-        }
+
+        const nsID* pid = xpc_JSObjectToID(cx, &s.toObject());
+        if (!pid)
+            return false;
+
+        pid = static_cast<const nsID*>(nsMemory::Clone(pid, sizeof(nsID)));
+        if (!pid)
+            return false;
+
         *((const nsID**)d) = pid;
         return true;
     }
 
     case nsXPTType::T_ASTRING:
     {
         isDOMString = false;
         // Fall through to T_DOMSTRING case.
     }
     case nsXPTType::T_DOMSTRING:
     {
         static const PRUnichar EMPTY_STRING[] = { '\0' };
         static const PRUnichar VOID_STRING[] = { 'u', 'n', 'd', 'e', 'f', 'i', 'n', 'e', 'd', '\0' };
 
         const PRUnichar* chars = nullptr;
         JSString* str = nullptr;
-        JSBool isNewString = false;
+        bool isNewString = false;
         uint32_t length = 0;
 
-        if (JSVAL_IS_VOID(s)) {
+        if (s.isUndefined()) {
             if (isDOMString) {
                 chars  = VOID_STRING;
                 length = ArrayLength(VOID_STRING) - 1;
             } else {
                 chars = EMPTY_STRING;
                 length = 0;
             }
-        } else if (!JSVAL_IS_NULL(s)) {
+        } else if (!s.isNull()) {
             str = JS_ValueToString(cx, s);
             if (!str)
                 return false;
 
             length = (uint32_t) JS_GetStringLength(str);
             if (length) {
                 chars = JS_GetStringCharsZ(cx, str);
                 if (!chars)
@@ -500,75 +509,77 @@ XPCConvert::JSData2Native(XPCCallContext
                 if (STRING_TO_JSVAL(str) != s)
                     isNewString = true;
             } else {
                 str = nullptr;
                 chars = EMPTY_STRING;
             }
         }
 
-        if (useAllocator) {
-            // XXX extra string copy when isNewString
-            if (str && !isNewString) {
-                size_t strLength;
-                const jschar *strChars = JS_GetStringCharsZAndLength(cx, str, &strLength);
-                if (!strChars)
-                    return false;
-
-                XPCReadableJSStringWrapper *wrapper =
-                    ccx.NewStringWrapper(strChars, strLength);
-                if (!wrapper)
-                    return false;
-
-                *((const nsAString**)d) = wrapper;
-            } else if (JSVAL_IS_NULL(s)) {
-                XPCReadableJSStringWrapper *wrapper =
-                    new XPCReadableJSStringWrapper();
-                if (!wrapper)
-                    return false;
-
-                *((const nsAString**)d) = wrapper;
-            } else {
-                // use nsString to encourage sharing
-                const nsAString *rs = new nsString(chars, length);
-                if (!rs)
-                    return false;
-                *((const nsAString**)d) = rs;
-            }
-        } else {
+        if (!useAllocator) {
             nsAString* ws = *((nsAString**)d);
 
-            if (JSVAL_IS_NULL(s) || (!isDOMString && JSVAL_IS_VOID(s))) {
-                ws->Truncate();
+            if (JSVAL_IS_NULL(s) || (!isDOMString && JSVAL_IS_VOID(s)))
                 ws->SetIsVoid(true);
-            } else
+            else
                 ws->Assign(chars, length);
+
+            return true;
         }
+
+
+        // XXX extra string copy when isNewString
+        if (str && !isNewString) {
+            size_t strLength;
+            const jschar *strChars = JS_GetStringCharsZAndLength(cx, str, &strLength);
+            if (!strChars)
+                return false;
+
+            XPCReadableJSStringWrapper *wrapper =
+                ccx.NewStringWrapper(strChars, strLength);
+            if (!wrapper)
+                return false;
+
+            *((const nsAString**)d) = wrapper;
+            return true;
+        }
+
+        if (s.isNull()) {
+            XPCReadableJSStringWrapper *wrapper =
+                new XPCReadableJSStringWrapper();
+            if (!wrapper)
+                return false;
+
+            *((const nsAString**)d) = wrapper;
+            return true;
+        }
+
+        // use nsString to encourage sharing
+        const nsAString *rs = new nsString(chars, length);
+        if (!rs)
+            return false;
+        *((const nsAString**)d) = rs;
         return true;
     }
 
     case nsXPTType::T_CHAR_STR:
     {
-        if (JSVAL_IS_VOID(s) || JSVAL_IS_NULL(s)) {
+        if (s.isNullOrUndefined()) {
             *((char**)d) = nullptr;
             return true;
         }
 
         JSString* str = JS_ValueToString(cx, s);
         if (!str) {
             return false;
         }
 #ifdef DEBUG
-        const jschar* chars=nullptr;
-        if (nullptr != (chars = JS_GetStringCharsZ(cx, str))) {
-            bool legalRange = true;
-            int len = JS_GetStringLength(str);
-            const jschar* t;
-            int32_t i=0;
-            for (t=chars; (i< len) && legalRange ; i++,t++) {
+        if (const jschar *t = JS_GetStringCharsZ(cx, str)) {
+            size_t len = JS_GetStringLength(str);
+            for (size_t i = 0; i < len; i++, t++) {
                 if (!CheckJSCharInCharRange(*t))
                     break;
             }
         }
 #endif // DEBUG
         size_t length = JS_GetStringEncodingLength(cx, str);
         if (length == size_t(-1)) {
             return false;
@@ -580,114 +591,108 @@ XPCConvert::JSData2Native(XPCCallContext
         JS_EncodeStringToBuffer(str, buffer, length);
         buffer[length] = '\0';
         *((void**)d) = buffer;
         return true;
     }
 
     case nsXPTType::T_WCHAR_STR:
     {
-        const jschar* chars=nullptr;
-        JSString* str;
-
-        if (JSVAL_IS_VOID(s) || JSVAL_IS_NULL(s)) {
+        if (s.isNullOrUndefined()) {
             *((jschar**)d) = nullptr;
             return true;
         }
 
-        if (!(str = JS_ValueToString(cx, s))) {
+        JSString *str = JS_ValueToString(cx, s);
+        if (!str)
             return false;
-        }
-        if (!(chars = JS_GetStringCharsZ(cx, str))) {
+
+        const jschar *chars = JS_GetStringCharsZ(cx, str);
+        if (!chars)
             return false;
-        }
-        int len = JS_GetStringLength(str);
-        int byte_len = (len+1)*sizeof(jschar);
-        if (!(*((void**)d) = nsMemory::Alloc(byte_len))) {
+
+        size_t len = JS_GetStringLength(str);
+        size_t byte_len = (len + 1) * sizeof(jschar);
+        jschar *destchars = static_cast<jschar*>(nsMemory::Alloc(byte_len));
+        *((void**)d) = destchars;
+        if (!destchars) {
             // XXX should report error
             return false;
         }
-        jschar* destchars = *((jschar**)d);
         memcpy(destchars, chars, byte_len);
         destchars[len] = 0;
-
         return true;
     }
 
     case nsXPTType::T_UTF8STRING:
     {
-        const jschar* chars;
-        uint32_t length;
-        JSString* str;
-
-        if (JSVAL_IS_NULL(s) || JSVAL_IS_VOID(s)) {
+        if (s.isNullOrUndefined()) {
             if (useAllocator) {
                 nsACString *rs = new nsCString();
                 if (!rs)
                     return false;
 
                 rs->SetIsVoid(true);
                 *((nsACString**)d) = rs;
             } else {
                 nsCString* rs = *((nsCString**)d);
-                rs->Truncate();
                 rs->SetIsVoid(true);
             }
             return true;
         }
 
         // The JS val is neither null nor void...
+        JSString *str = JS_ValueToString(cx, s);
+        if (!str)
+            return false;
 
-        if (!(str = JS_ValueToString(cx, s))||
-            !(chars = JS_GetStringCharsZ(cx, str))) {
+        const jschar *chars = JS_GetStringCharsZ(cx, str);
+        if (!chars)
             return false;
-        }
 
-        length = JS_GetStringLength(str);
+        uint32_t length = JS_GetStringLength(str);
 
         nsCString *rs;
         if (useAllocator) {
             // Use nsCString to enable sharing
             rs = new nsCString();
             if (!rs)
                 return false;
 
             *((const nsCString**)d) = rs;
         } else {
             rs = *((nsCString**)d);
         }
-        const PRUnichar* start = (const PRUnichar*)chars;
+        const PRUnichar* start = static_cast<const PRUnichar*>(chars);
         const PRUnichar* end = start + length;
         CopyUTF16toUTF8(nsDependentSubstring(start, end), *rs);
         return true;
     }
 
     case nsXPTType::T_CSTRING:
     {
-        if (JSVAL_IS_NULL(s) || JSVAL_IS_VOID(s)) {
+        if (s.isNullOrUndefined()) {
             if (useAllocator) {
                 nsACString *rs = new nsCString();
                 if (!rs)
                     return false;
 
                 rs->SetIsVoid(true);
                 *((nsACString**)d) = rs;
             } else {
                 nsACString* rs = *((nsACString**)d);
-                rs->Truncate();
                 rs->SetIsVoid(true);
             }
             return true;
         }
 
         // The JS val is neither null nor void...
-        JSString* str = JS_ValueToString(cx, s);
-        if (!str) {
+        JSString *str = JS_ValueToString(cx, s);
+        if (!str)
             return false;
-        }
 
         size_t length = JS_GetStringEncodingLength(cx, str);
         if (length == size_t(-1)) {
             return false;
         }
 
         nsACString *rs;
         if (useAllocator) {
@@ -698,51 +703,51 @@ XPCConvert::JSData2Native(XPCCallContext
         } else {
             rs = *((nsACString**)d);
         }
 
         rs->SetLength(uint32_t(length));
         if (rs->Length() != uint32_t(length)) {
             return false;
         }
+
         JS_EncodeStringToBuffer(str, rs->BeginWriting(), length);
-
         return true;
     }
 
     case nsXPTType::T_INTERFACE:
     case nsXPTType::T_INTERFACE_IS:
     {
-        NS_ASSERTION(iid,"can't do interface conversions without iid");
+        MOZ_ASSERT(iid, "can't do interface conversions without iid");
 
         if (iid->Equals(NS_GET_IID(nsIVariant))) {
             XPCVariant* variant = XPCVariant::newVariant(ccx, s);
             if (!variant)
                 return false;
             *((nsISupports**)d) = static_cast<nsIVariant*>(variant);
             return true;
-        } else if (iid->Equals(NS_GET_IID(nsIAtom)) &&
-                   JSVAL_IS_STRING(s)) {
+        }
+
+        if (iid->Equals(NS_GET_IID(nsIAtom)) && s.isString()) {
             // We're trying to pass a string as an nsIAtom.  Let's atomize!
             JSString* str = JSVAL_TO_STRING(s);
             const PRUnichar* chars = JS_GetStringCharsZ(cx, str);
             if (!chars) {
                 if (pErr)
                     *pErr = NS_ERROR_XPC_BAD_CONVERT_JS_NULL_REF;
                 return false;
             }
             uint32_t length = JS_GetStringLength(str);
             nsIAtom* atom = NS_NewAtom(nsDependentSubstring(chars,
                                                             chars + length));
             if (!atom && pErr)
                 *pErr = NS_ERROR_OUT_OF_MEMORY;
             *((nsISupports**)d) = atom;
             return atom != nullptr;
         }
-        //else ...
 
         if (s.isNullOrUndefined()) {
             *((nsISupports**)d) = nullptr;
             return true;
         }
 
         // only wrap JSObjects
         if (!s.isObject()) {
@@ -753,16 +758,17 @@ XPCConvert::JSData2Native(XPCCallContext
 
         return JSObject2NativeInterface(ccx, (void**)d, &s.toObject(), iid,
                                         nullptr, pErr);
     }
     default:
         NS_ERROR("bad type");
         return false;
     }
+    MOZ_NOT_REACHED("Should always return from the switch.");
     return true;
 }
 
 inline JSBool
 CreateHolderIfNeeded(XPCCallContext& ccx, JSObject* obj, jsval* d,
                      nsIXPConnectJSObjectHolder** dest)
 {
     if (dest) {
