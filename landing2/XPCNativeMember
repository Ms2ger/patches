From: Ms2ger <ms2ger@gmail.com>

diff --git a/js/xpconnect/src/XPCNativeMember.h b/js/xpconnect/src/XPCNativeMember.h
new file mode 100644
--- /dev/null
+++ b/js/xpconnect/src/XPCNativeMember.h
@@ -0,0 +1,92 @@
+#ifndef XPCNativeMember_h
+#define XPCNativeMember_h
+
+#include "prtypes.h"
+
+#include "nsDebug.h"
+#include "nsTraceRefcnt.h"
+
+#include "jspubtd.h"
+
+class XPCCallContext;
+class XPCNativeInterface;
+
+// XPCNativeMember represents a single idl declared method, attribute or
+// constant.
+
+// Tight. No virtual methods. Can be bitwise copied (until any resolution done).
+
+class XPCNativeMember
+{
+public:
+    static JSBool GetCallInfo(XPCCallContext& ccx,
+                              JSObject* funobj,
+                              XPCNativeInterface** pInterface,
+                              XPCNativeMember**    pMember);
+
+    jsid   GetName() const {return mName;}
+
+    uint16_t GetIndex() const {return mIndex;}
+
+    JSBool GetConstantValue(XPCCallContext& ccx, XPCNativeInterface* iface,
+                            JS::Value* pval)
+        {NS_ASSERTION(IsConstant(),
+                      "Only call this if you're sure this is a constant!");
+         return Resolve(ccx, iface, nsnull, pval);}
+
+    JSBool NewFunctionObject(XPCCallContext& ccx, XPCNativeInterface* iface,
+                             JSObject *parent, JS::Value* pval);
+
+    JSBool IsMethod() const
+        {return 0 != (mFlags & METHOD);}
+
+    JSBool IsConstant() const
+        {return 0 != (mFlags & CONSTANT);}
+
+    JSBool IsAttribute() const
+        {return 0 != (mFlags & GETTER);}
+
+    JSBool IsWritableAttribute() const
+        {return 0 != (mFlags & SETTER_TOO);}
+
+    JSBool IsReadOnlyAttribute() const
+        {return IsAttribute() && !IsWritableAttribute();}
+
+
+    void SetName(jsid a) {mName = a;}
+
+    void SetMethod(uint16_t index)
+        {mFlags = METHOD; mIndex = index;}
+
+    void SetConstant(uint16_t index)
+        {mFlags = CONSTANT; mIndex = index;}
+
+    void SetReadOnlyAttribute(uint16_t index)
+        {mFlags = GETTER; mIndex = index;}
+
+    void SetWritableAttribute()
+        {NS_ASSERTION(mFlags == GETTER,"bad"); mFlags = GETTER | SETTER_TOO;}
+
+    /* default ctor - leave random contents */
+    XPCNativeMember()  {MOZ_COUNT_CTOR(XPCNativeMember);}
+    ~XPCNativeMember() {MOZ_COUNT_DTOR(XPCNativeMember);}
+
+private:
+    JSBool Resolve(XPCCallContext& ccx, XPCNativeInterface* iface,
+                   JSObject *parent, JS::Value *vp);
+
+    enum {
+        METHOD      = 0x01,
+        CONSTANT    = 0x02,
+        GETTER      = 0x04,
+        SETTER_TOO  = 0x08
+    };
+
+private:
+    // our only data...
+    jsid     mName;
+    uint16_t mIndex;
+    uint16_t mFlags;
+};
+
+#endif // XPCNativeMember_h
diff --git a/js/xpconnect/src/XPCWrappedNativeInfo.cpp b/js/xpconnect/src/XPCWrappedNativeInfo.cpp
--- a/js/xpconnect/src/XPCWrappedNativeInfo.cpp
+++ b/js/xpconnect/src/XPCWrappedNativeInfo.cpp
@@ -37,16 +37,17 @@
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 /* Manage the shared info about interfaces for use by wrappedNatives. */
 
 #include "XPCNativeSet.h"
+#include "XPCNativeMember.h"
 
 #include "xpcprivate.h"
 
 /***************************************************************************/
 
 // XPCNativeMember
 
 // static
diff --git a/js/xpconnect/src/xpcprivate.h b/js/xpconnect/src/xpcprivate.h
--- a/js/xpconnect/src/xpcprivate.h
+++ b/js/xpconnect/src/xpcprivate.h
@@ -149,16 +149,17 @@
 #include "XPCLock.h"
 #include "nsXPConnect.h"
 #include "XPCJSRuntime.h"
 #include "XPCContext.h"
 #include "XPCReadableJSStringWrapper.h"
 #include "XPCCallContext.h"
 #include "XPCLazyCallContext.h"
 #include "XPCWrappedNativeScope.h"
+#include "XPCNativeMember.h"
 
 class XPCRootSetElem;
 
 /***************************************************************************/
 // Compile time switches for instrumentation and stuff....
 
 // Note that one would not normally turn *any* of these on in a non-DEBUG build.
 
@@ -446,94 +447,16 @@ enum WrapperType {
     XOW             = 1 << 3,
     COW             = 1 << 4,
     SOW             = 1 << 5
 };
 
 }
 
 /***************************************************************************/
-// XPCNativeMember represents a single idl declared method, attribute or
-// constant.
-
-// Tight. No virtual methods. Can be bitwise copied (until any resolution done).
-
-class XPCNativeMember
-{
-public:
-    static JSBool GetCallInfo(XPCCallContext& ccx,
-                              JSObject* funobj,
-                              XPCNativeInterface** pInterface,
-                              XPCNativeMember**    pMember);
-
-    jsid   GetName() const {return mName;}
-
-    uint16_t GetIndex() const {return mIndex;}
-
-    JSBool GetConstantValue(XPCCallContext& ccx, XPCNativeInterface* iface,
-                            jsval* pval)
-        {NS_ASSERTION(IsConstant(),
-                      "Only call this if you're sure this is a constant!");
-         return Resolve(ccx, iface, nsnull, pval);}
-
-    JSBool NewFunctionObject(XPCCallContext& ccx, XPCNativeInterface* iface,
-                             JSObject *parent, jsval* pval);
-
-    JSBool IsMethod() const
-        {return 0 != (mFlags & METHOD);}
-
-    JSBool IsConstant() const
-        {return 0 != (mFlags & CONSTANT);}
-
-    JSBool IsAttribute() const
-        {return 0 != (mFlags & GETTER);}
-
-    JSBool IsWritableAttribute() const
-        {return 0 != (mFlags & SETTER_TOO);}
-
-    JSBool IsReadOnlyAttribute() const
-        {return IsAttribute() && !IsWritableAttribute();}
-
-
-    void SetName(jsid a) {mName = a;}
-
-    void SetMethod(uint16_t index)
-        {mFlags = METHOD; mIndex = index;}
-
-    void SetConstant(uint16_t index)
-        {mFlags = CONSTANT; mIndex = index;}
-
-    void SetReadOnlyAttribute(uint16_t index)
-        {mFlags = GETTER; mIndex = index;}
-
-    void SetWritableAttribute()
-        {NS_ASSERTION(mFlags == GETTER,"bad"); mFlags = GETTER | SETTER_TOO;}
-
-    /* default ctor - leave random contents */
-    XPCNativeMember()  {MOZ_COUNT_CTOR(XPCNativeMember);}
-    ~XPCNativeMember() {MOZ_COUNT_DTOR(XPCNativeMember);}
-
-private:
-    JSBool Resolve(XPCCallContext& ccx, XPCNativeInterface* iface,
-                   JSObject *parent, jsval *vp);
-
-    enum {
-        METHOD      = 0x01,
-        CONSTANT    = 0x02,
-        GETTER      = 0x04,
-        SETTER_TOO  = 0x08
-    };
-
-private:
-    // our only data...
-    jsid     mName;
-    uint16_t mIndex;
-    uint16_t mFlags;
-};
-
 /***************************************************************************/
 // XPCNativeInterface represents a single idl declared interface. This is
 // primarily the set of XPCNativeMembers.
 
 // Tight. No virtual methods.
 
 class XPCNativeInterface
 {
