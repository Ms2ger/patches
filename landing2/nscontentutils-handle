From: Ms2ger <ms2ger@gmail.com>

diff --git a/content/base/public/nsContentUtils.h b/content/base/public/nsContentUtils.h
--- a/content/base/public/nsContentUtils.h
+++ b/content/base/public/nsContentUtils.h
@@ -13,32 +13,33 @@
 #if defined(XP_WIN) || defined(XP_OS2)
 #include <float.h>
 #endif
 
 #if defined(SOLARIS)
 #include <ieeefp.h>
 #endif
 
-#include "js/RootingAPI.h"
+#include "jspubtd.h"
 #include "mozilla/Assertions.h"
 #include "mozilla/GuardObjects.h"
 #include "mozilla/TimeStamp.h"
 #include "nsAString.h"
 #include "nsCharSeparatedTokenizer.h"
 #include "nsContentListDeclarations.h"
 #include "nsMathUtils.h"
 #include "nsReadableUtils.h"
 
 class imgICache;
 class imgIContainer;
 class imgINotificationObserver;
 class imgIRequest;
 class imgLoader;
 class imgRequestProxy;
+class JSObject;
 class nsAutoScriptBlockerSuppressNodeRemoved;
 class nsDragEvent;
 class nsEvent;
 class nsEventListenerManager;
 class nsHtml5StringParser;
 class nsIChannel;
 class nsIConsoleService;
 class nsIContent;
@@ -103,16 +104,18 @@ struct nsIntMargin;
 struct nsNativeKeyEvent; // Don't include nsINativeKeyBindings.h here: it will force strange compilation error!
 
 template<class E> class nsCOMArray;
 template<class E> class nsTArray;
 template<class K, class V> class nsDataHashtable;
 template<class K, class V> class nsRefPtrHashtable;
 
 namespace JS {
+template<typename> class Handle;
+template<typename> class MutableHandle;
 class Value;
 } // namespace JS
 
 namespace mozilla {
 class ErrorResult;
 class Selection;
 
 namespace dom {
@@ -188,17 +191,17 @@ public:
   static JSContext* GetContextFromDocument(nsIDocument *aDocument);
 
   static bool     IsCallerChrome();
   static bool     IsCallerXBL();
 
   static bool     IsImageSrcSetDisabled();
 
   static bool LookupBindingMember(JSContext* aCx, nsIContent *aContent,
-                                  JS::HandleId aId, JS::MutableHandle<JSPropertyDescriptor> aDesc);
+                                  JS::Handle<jsid> aId, JS::MutableHandle<JSPropertyDescriptor> aDesc);
 
   /**
    * Returns the parent node of aChild crossing document boundaries.
    */
   static nsINode* GetCrossDocParentNode(nsINode* aChild);
 
   /**
    * Do not ever pass null pointers to this method.  If one of your
@@ -1677,44 +1680,32 @@ public:
   static bool CanAccessNativeAnon();
 
   static nsresult WrapNative(JSContext *cx, JS::Handle<JSObject*> scope,
                              nsISupports *native, const nsIID* aIID,
                              JS::Value *vp,
                              // If non-null aHolder will keep the Value alive
                              // while there's a ref to it
                              nsIXPConnectJSObjectHolder** aHolder = nullptr,
-                             bool aAllowWrapping = false)
-  {
-    return WrapNative(cx, scope, native, nullptr, aIID, vp, aHolder,
-                      aAllowWrapping);
-  }
+                             bool aAllowWrapping = false);
 
   // Same as the WrapNative above, but use this one if aIID is nsISupports' IID.
   static nsresult WrapNative(JSContext *cx, JS::Handle<JSObject*> scope,
                              nsISupports *native, JS::Value *vp,
                              // If non-null aHolder will keep the Value alive
                              // while there's a ref to it
                              nsIXPConnectJSObjectHolder** aHolder = nullptr,
-                             bool aAllowWrapping = false)
-  {
-    return WrapNative(cx, scope, native, nullptr, nullptr, vp, aHolder,
-                      aAllowWrapping);
-  }
+                             bool aAllowWrapping = false);
   static nsresult WrapNative(JSContext *cx, JS::Handle<JSObject*> scope,
                              nsISupports *native, nsWrapperCache *cache,
                              JS::Value *vp,
                              // If non-null aHolder will keep the Value alive
                              // while there's a ref to it
                              nsIXPConnectJSObjectHolder** aHolder = nullptr,
-                             bool aAllowWrapping = false)
-  {
-    return WrapNative(cx, scope, native, cache, nullptr, vp, aHolder,
-                      aAllowWrapping);
-  }
+                             bool aAllowWrapping = false);
 
   /**
    * Creates an arraybuffer from a binary string.
    */
   static nsresult CreateArrayBuffer(JSContext *aCx, const nsACString& aData,
                                     JSObject** aResult);
 
   static nsresult CreateBlobBuffer(JSContext* aCx,
diff --git a/content/base/src/nsContentUtils.cpp b/content/base/src/nsContentUtils.cpp
--- a/content/base/src/nsContentUtils.cpp
+++ b/content/base/src/nsContentUtils.cpp
@@ -5581,16 +5581,57 @@ nsContentUtils::DispatchXULCommand(nsICo
   nsCOMPtr<EventTarget> target = do_QueryInterface(aTarget);
   NS_ENSURE_STATE(target);
   bool dummy;
   return target->DispatchEvent(event, &dummy);
 }
 
 // static
 nsresult
+nsContentUtils::WrapNative(JSContext* aCx, JS::Handle<JSObject*> aScope,
+                           nsISupports* aNative, const nsIID* aIID,
+                           JS::Value* aVp,
+                           // If non-null aHolder will keep the Value alive
+                           // while there's a ref to it
+                           nsIXPConnectJSObjectHolder** aHolder /* = nullptr */,
+                           bool aAllowWrapping /* = false */)
+{
+  return WrapNative(aCx, aScope, aNative, nullptr, aIID, aVp, aHolder,
+                    aAllowWrapping);
+}
+
+// static
+nsresult
+nsContentUtils::WrapNative(JSContext* aCx, JS::Handle<JSObject*> aScope,
+                           nsISupports* aNative, JS::Value* aVp,
+                           // If non-null aHolder will keep the Value alive
+                           // while there's a ref to it
+                           nsIXPConnectJSObjectHolder** aHolder /* = nullptr */,
+                           bool aAllowWrapping /* = false */)
+{
+  return WrapNative(aCx, aScope, aNative, nullptr, nullptr, aVp, aHolder,
+                    aAllowWrapping);
+}
+
+// static
+nsresult
+nsContentUtils::WrapNative(JSContext* aCx, JS::Handle<JSObject*> aScope,
+                           nsISupports* aNative, nsWrapperCache* aCache,
+                           JS::Value* aVp,
+                           // If non-null aHolder will keep the Value alive
+                           // while there's a ref to it
+                           nsIXPConnectJSObjectHolder** aHolder /* = nullptr */,
+                           bool aAllowWrapping /* = false */)
+{
+  return WrapNative(aCx, aScope, aNative, aCache, nullptr, aVp, aHolder,
+                    aAllowWrapping);
+}
+
+// static
+nsresult
 nsContentUtils::WrapNative(JSContext *cx, JS::Handle<JSObject*> scope,
                            nsISupports *native, nsWrapperCache *cache,
                            const nsIID* aIID, JS::Value *vp,
                            nsIXPConnectJSObjectHolder **aHolder,
                            bool aAllowWrapping)
 {
   if (!native) {
     NS_ASSERTION(!aHolder || !*aHolder, "*aHolder should be null!");
