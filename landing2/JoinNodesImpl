From: Ms2ger <ms2ger@gmail.com>

diff --git a/editor/libeditor/base/nsEditor.cpp b/editor/libeditor/base/nsEditor.cpp
--- a/editor/libeditor/base/nsEditor.cpp
+++ b/editor/libeditor/base/nsEditor.cpp
@@ -2884,214 +2884,193 @@ nsEditor::SplitNodeImpl(nsIDOMNode * aEx
 
 nsresult
 nsEditor::JoinNodesImpl(nsIDOMNode * aNodeToKeep,
                         nsIDOMNode * aNodeToJoin,
                         nsIDOMNode * aParent,
                         bool         aNodeToKeepIsFirst)
 {
   NS_ASSERTION(aNodeToKeep && aNodeToJoin && aParent, "null arg");
-  nsresult result = NS_OK;
-  if (aNodeToKeep && aNodeToJoin && aParent)
-  {
-    // get selection
-    nsCOMPtr<nsISelection> selection;
-    GetSelection(getter_AddRefs(selection));
-    NS_ENSURE_TRUE(selection, NS_ERROR_NULL_POINTER);
-
-    // remember some selection points
-    nsCOMPtr<nsIDOMNode> selStartNode, selEndNode;
-    int32_t selStartOffset, selEndOffset, joinOffset, keepOffset;
-    result = GetStartNodeAndOffset(selection, getter_AddRefs(selStartNode), &selStartOffset);
-    if (NS_FAILED(result)) selStartNode = nsnull;
-    result = GetEndNodeAndOffset(selection, getter_AddRefs(selEndNode), &selEndOffset);
-    // Joe or Kin should comment here on why the following line is not a copy/paste error
-    if (NS_FAILED(result)) selStartNode = nsnull;
-
-    nsCOMPtr<nsIDOMNode> leftNode;
-    if (aNodeToKeepIsFirst)
-      leftNode = aNodeToKeep;
-    else
-      leftNode = aNodeToJoin;
-
-    uint32_t firstNodeLength;
-    result = GetLengthOfDOMNode(leftNode, firstNodeLength);
-    NS_ENSURE_SUCCESS(result, result);
-    nsCOMPtr<nsIDOMNode> parent;
-    result = GetNodeLocation(aNodeToJoin, address_of(parent), &joinOffset);
-    NS_ENSURE_SUCCESS(result, result);
-    result = GetNodeLocation(aNodeToKeep, address_of(parent), &keepOffset);
-    NS_ENSURE_SUCCESS(result, result);
-    
-    // if selection endpoint is between the nodes, remember it as being
-    // in the one that is going away instead.  This simplifies later selection
-    // adjustment logic at end of this method.
-    if (selStartNode)
-    {
-      if (selStartNode == parent)
-      {
-        if (aNodeToKeepIsFirst)
-        {
-          if ((selStartOffset > keepOffset) && (selStartOffset <= joinOffset))
-          {
-            selStartNode = aNodeToJoin; 
-            selStartOffset = 0;
-          }
+  NS_ENSURE_TRUE(aNodeToKeep && aNodeToJoin && aParent, NS_ERROR_INVALID_ARG);
+
+  // get selection
+  nsCOMPtr<nsISelection> selection;
+  GetSelection(getter_AddRefs(selection));
+  NS_ENSURE_TRUE(selection, NS_ERROR_NULL_POINTER);
+
+  // remember some selection points
+  nsCOMPtr<nsIDOMNode> selStartNode;
+  int32_t selStartOffset;
+  nsresult result = GetStartNodeAndOffset(selection, getter_AddRefs(selStartNode), &selStartOffset);
+  if (NS_FAILED(result)) {
+    selStartNode = nsnull;
+  }
+
+  nsCOMPtr<nsIDOMNode> selEndNode;
+  int32_t selEndOffset;
+  result = GetEndNodeAndOffset(selection, getter_AddRefs(selEndNode), &selEndOffset);
+  // Joe or Kin should comment here on why the following line is not a copy/paste error
+  if (NS_FAILED(result)) {
+    selStartNode = nsnull;
+  }
+
+  nsCOMPtr<nsIDOMNode> leftNode = aNodeToKeepIsFirst ? aNodeToKeep : aNodeToJoin;
+
+  uint32_t firstNodeLength;
+  result = GetLengthOfDOMNode(leftNode, firstNodeLength);
+  NS_ENSURE_SUCCESS(result, result);
+
+  nsCOMPtr<nsIDOMNode> parent;
+  int32_t joinOffset;
+  result = GetNodeLocation(aNodeToJoin, address_of(parent), &joinOffset);
+  NS_ENSURE_SUCCESS(result, result);
+
+  int32_t keepOffset;
+  result = GetNodeLocation(aNodeToKeep, address_of(parent), &keepOffset);
+  NS_ENSURE_SUCCESS(result, result);
+  
+  // if selection endpoint is between the nodes, remember it as being
+  // in the one that is going away instead.  This simplifies later selection
+  // adjustment logic at end of this method.
+  if (selStartNode) {
+    if (selStartNode == parent) {
+      if (aNodeToKeepIsFirst) {
+        if (keepOffset < selStartOffset && selStartOffset <= joinOffset) {
+          selStartNode = aNodeToJoin; 
+          selStartOffset = 0;
         }
-        else
-        {
-          if ((selStartOffset > joinOffset) && (selStartOffset <= keepOffset))
-          {
-            selStartNode = aNodeToJoin; 
-            selStartOffset = firstNodeLength;
-          }
-        }
-      }
-      if (selEndNode == parent)
-      {
-        if (aNodeToKeepIsFirst)
-        {
-          if ((selEndOffset > keepOffset) && (selEndOffset <= joinOffset))
-          {
-            selEndNode = aNodeToJoin; 
-            selEndOffset = 0;
-          }
-        }
-        else
-        {
-          if ((selEndOffset > joinOffset) && (selEndOffset <= keepOffset))
-          {
-            selEndNode = aNodeToJoin; 
-            selEndOffset = firstNodeLength;
-          }
+      } else {
+        if (joinOffset < selStartOffset  && selStartOffset <= keepOffset) {
+          selStartNode = aNodeToJoin; 
+          selStartOffset = firstNodeLength;
         }
       }
     }
-    // ok, ready to do join now.
-    // if it's a text node, just shuffle around some text
-    nsCOMPtr<nsIDOMCharacterData> keepNodeAsText( do_QueryInterface(aNodeToKeep) );
-    nsCOMPtr<nsIDOMCharacterData> joinNodeAsText( do_QueryInterface(aNodeToJoin) );
-    if (keepNodeAsText && joinNodeAsText)
-    {
-      nsAutoString rightText;
-      nsAutoString leftText;
-      if (aNodeToKeepIsFirst)
-      {
-        keepNodeAsText->GetData(leftText);
-        joinNodeAsText->GetData(rightText);
-      }
-      else
-      {
-        keepNodeAsText->GetData(rightText);
-        joinNodeAsText->GetData(leftText);
-      }
-      leftText += rightText;
-      keepNodeAsText->SetData(leftText);          
-    }
-    else
-    {  // otherwise it's an interior node, so shuffle around the children
-      nsCOMPtr<nsIDOMNodeList> childNodes;
-      result = aNodeToJoin->GetChildNodes(getter_AddRefs(childNodes));
-      if ((NS_SUCCEEDED(result)) && (childNodes))
-      {
-        int32_t i;  // must be signed int!
-        uint32_t childCount=0;
-        nsCOMPtr<nsIDOMNode> firstNode; //only used if aNodeToKeepIsFirst is false
-        childNodes->GetLength(&childCount);
-        if (!aNodeToKeepIsFirst)
-        { // remember the first child in aNodeToKeep, we'll insert all the children of aNodeToJoin in front of it
-          result = aNodeToKeep->GetFirstChild(getter_AddRefs(firstNode));  
-          // GetFirstChild returns nsnull firstNode if aNodeToKeep has no children, that's ok.
+
+    if (selEndNode == parent) {
+      if (aNodeToKeepIsFirst) {
+        if (keepOffset < selEndOffset && selEndOffset <= joinOffset) {
+          selEndNode = aNodeToJoin; 
+          selEndOffset = 0;
         }
-        nsCOMPtr<nsIDOMNode> resultNode;
-        // have to go through the list backwards to keep deletes from interfering with iteration
-        nsCOMPtr<nsIDOMNode> previousChild;
-        for (i=childCount-1; ((NS_SUCCEEDED(result)) && (0<=i)); i--)
-        {
-          nsCOMPtr<nsIDOMNode> childNode;
-          result = childNodes->Item(i, getter_AddRefs(childNode));
-          if ((NS_SUCCEEDED(result)) && (childNode))
-          {
-            if (aNodeToKeepIsFirst)
-            { // append children of aNodeToJoin
-              //was result = aNodeToKeep->AppendChild(childNode, getter_AddRefs(resultNode));
-              result = aNodeToKeep->InsertBefore(childNode, previousChild, getter_AddRefs(resultNode));
-              previousChild = do_QueryInterface(childNode);
-            }
-            else
-            { // prepend children of aNodeToJoin
-              result = aNodeToKeep->InsertBefore(childNode, firstNode, getter_AddRefs(resultNode));
-              firstNode = do_QueryInterface(childNode);
-            }
-          }
-        }
-      }
-      else if (!childNodes) {
-        result = NS_ERROR_NULL_POINTER;
-      }
-    }
-    if (NS_SUCCEEDED(result))
-    { // delete the extra node
-      nsCOMPtr<nsIDOMNode> resultNode;
-      result = aParent->RemoveChild(aNodeToJoin, getter_AddRefs(resultNode));
-      
-      if (GetShouldTxnSetSelection())
-      {
-        // editor wants us to set selection at join point
-        selection->Collapse(aNodeToKeep, firstNodeLength);
-      }
-      else if (selStartNode)
-      {
-        // and adjust the selection if needed
-        // HACK: this is overly simplified - multi-range selections need more work than this
-        bool bNeedToAdjust = false;
-        
-        // check to see if we joined nodes where selection starts
-        if (selStartNode.get() == aNodeToJoin)
-        {
-          bNeedToAdjust = true;
-          selStartNode = aNodeToKeep;
-          if (aNodeToKeepIsFirst)
-          {
-            selStartOffset += firstNodeLength;
-          }
-        }
-        else if ((selStartNode.get() == aNodeToKeep) && !aNodeToKeepIsFirst)
-        {
-          bNeedToAdjust = true;
-          selStartOffset += firstNodeLength;
-        }
-                
-        // check to see if we joined nodes where selection ends
-        if (selEndNode.get() == aNodeToJoin)
-        {
-          bNeedToAdjust = true;
-          selEndNode = aNodeToKeep;
-          if (aNodeToKeepIsFirst)
-          {
-            selEndOffset += firstNodeLength;
-          }
-        }
-        else if ((selEndNode.get() == aNodeToKeep) && !aNodeToKeepIsFirst)
-        {
-          bNeedToAdjust = true;
-          selEndOffset += firstNodeLength;
-        }
-        
-        // adjust selection if needed
-        if (bNeedToAdjust)
-        {
-          selection->Collapse(selStartNode,selStartOffset);
-          selection->Extend(selEndNode,selEndOffset);          
+      } else {
+        if (joinOffset < selEndOffset && selEndOffset <= keepOffset) {
+          selEndNode = aNodeToJoin; 
+          selEndOffset = firstNodeLength;
         }
       }
     }
   }
-  else
-    result = NS_ERROR_INVALID_ARG;
+
+  // ok, ready to do join now.
+  // if it's a text node, just shuffle around some text
+  nsCOMPtr<nsIDOMCharacterData> keepNodeAsText( do_QueryInterface(aNodeToKeep) );
+  nsCOMPtr<nsIDOMCharacterData> joinNodeAsText( do_QueryInterface(aNodeToJoin) );
+  if (keepNodeAsText && joinNodeAsText) {
+    nsAutoString rightText;
+    nsAutoString leftText;
+    if (aNodeToKeepIsFirst) {
+      keepNodeAsText->GetData(leftText);
+      joinNodeAsText->GetData(rightText);
+    } else {
+      keepNodeAsText->GetData(rightText);
+      joinNodeAsText->GetData(leftText);
+    }
+    leftText += rightText;
+    keepNodeAsText->SetData(leftText);          
+  } else {
+    // otherwise it's an interior node, so shuffle around the children
+
+    nsCOMPtr<nsIDOMNode> firstNode; //only used if aNodeToKeepIsFirst is false
+    if (!aNodeToKeepIsFirst) {
+      // remember the first child in aNodeToKeep, we'll insert all the children of aNodeToJoin in front of it
+      result = aNodeToKeep->GetFirstChild(getter_AddRefs(firstNode));
+      // GetFirstChild returns nsnull firstNode if aNodeToKeep has no children, that's ok.
+    }
+
+    nsCOMPtr<nsIDOMNode> resultNode;
+    // have to go through the list backwards to keep deletes from interfering with iteration
+    nsCOMPtr<nsIDOMNode> previousChild;
+
+    nsCOMPtr<nsINode> nodeToJoin = do_QueryInterface(aNodeToJoin);
+    NS_ENSURE_STATE(nodeToJoin);
+    nsCOMPtr<nsIContent> child = nodeToJoin->GetLastChild();
+    while (child) {
+      nsIContent* next
+      nsCOMPtr<nsIDOMNode> childNode = childNodes->GetNodeAt(i)->AsDOMNode();
+      if (aNodeToKeepIsFirst) {
+        // append children of aNodeToJoin
+        //was result = aNodeToKeep->AppendChild(childNode, getter_AddRefs(resultNode));
+        result = aNodeToKeep->InsertBefore(childNode, previousChild, getter_AddRefs(resultNode));
+        NS_ENSURE_SUCCESS(result, result);
+        previousChild = childNode;
+      } else {
+        // prepend children of aNodeToJoin
+        result = aNodeToKeep->InsertBefore(childNode, firstNode, getter_AddRefs(resultNode));
+        NS_ENSURE_SUCCESS(result, result);
+        firstNode = childNode;
+      }
+    }
+  }
+  if (NS_SUCCEEDED(result))
+  { // delete the extra node
+    nsCOMPtr<nsIDOMNode> resultNode;
+    result = aParent->RemoveChild(aNodeToJoin, getter_AddRefs(resultNode));
+    
+    if (GetShouldTxnSetSelection())
+    {
+      // editor wants us to set selection at join point
+      selection->Collapse(aNodeToKeep, firstNodeLength);
+    }
+    else if (selStartNode)
+    {
+      // and adjust the selection if needed
+      // HACK: this is overly simplified - multi-range selections need more work than this
+      bool bNeedToAdjust = false;
+      
+      // check to see if we joined nodes where selection starts
+      if (selStartNode.get() == aNodeToJoin)
+      {
+        bNeedToAdjust = true;
+        selStartNode = aNodeToKeep;
+        if (aNodeToKeepIsFirst)
+        {
+          selStartOffset += firstNodeLength;
+        }
+      }
+      else if ((selStartNode.get() == aNodeToKeep) && !aNodeToKeepIsFirst)
+      {
+        bNeedToAdjust = true;
+        selStartOffset += firstNodeLength;
+      }
+              
+      // check to see if we joined nodes where selection ends
+      if (selEndNode.get() == aNodeToJoin)
+      {
+        bNeedToAdjust = true;
+        selEndNode = aNodeToKeep;
+        if (aNodeToKeepIsFirst)
+        {
+          selEndOffset += firstNodeLength;
+        }
+      }
+      else if ((selEndNode.get() == aNodeToKeep) && !aNodeToKeepIsFirst)
+      {
+        bNeedToAdjust = true;
+        selEndOffset += firstNodeLength;
+      }
+      
+      // adjust selection if needed
+      if (bNeedToAdjust)
+      {
+        selection->Collapse(selStartNode,selStartOffset);
+        selection->Extend(selEndNode,selEndOffset);          
+      }
+    }
+  }
 
   return result;
 }
 
 
 nsresult 
 nsEditor::GetChildOffset(nsIDOMNode *aChild, nsIDOMNode *aParent, int32_t &aOffset)
 {
