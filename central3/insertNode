From: Ms2ger <ms2ger@gmail.com>

diff --git a/dom/base/nsRange.cpp b/dom/base/nsRange.cpp
--- a/dom/base/nsRange.cpp
+++ b/dom/base/nsRange.cpp
@@ -2408,62 +2408,45 @@ nsRange::InsertNode(nsINode& aNode, Erro
   if (aRv.Failed()) {
     return;
   }
 
   // This is the node we'll be inserting before, and its parent
   nsCOMPtr<nsINode> referenceNode;
   nsCOMPtr<nsINode> referenceParentNode = tStartContainer;
 
-  nsCOMPtr<nsIDOMText> startTextNode(do_QueryInterface(tStartContainer));
-  nsCOMPtr<nsIDOMNodeList> tChildList;
-  if (startTextNode) {
+  if (nsCOMPtr<nsIDOMText> startTextNode = do_QueryInterface(tStartContainer)) {
     referenceParentNode = tStartContainer->GetParentNode();
     if (!referenceParentNode) {
       aRv.Throw(NS_ERROR_DOM_HIERARCHY_REQUEST_ERR);
       return;
     }
 
     nsCOMPtr<nsIDOMText> secondPart;
     aRv = startTextNode->SplitText(tStartOffset, getter_AddRefs(secondPart));
     if (aRv.Failed()) {
       return;
     }
 
     referenceNode = do_QueryInterface(secondPart);
   } else {
-    aRv = tStartContainer->AsDOMNode()->GetChildNodes(getter_AddRefs(tChildList));
-    if (aRv.Failed()) {
-      return;
-    }
-
     // find the insertion point in the DOM and insert the Node
-    nsCOMPtr<nsIDOMNode> q;
-    aRv = tChildList->Item(tStartOffset, getter_AddRefs(q));
-    referenceNode = do_QueryInterface(q);
-    if (aRv.Failed()) {
-      return;
-    }
+    referenceNode = tStartContainer->GetChildAt(
+      AssertedCast<uint32_t>(tStartOffset));
   }
 
   // We might need to update the end to include the new node (bug 433662).
   // Ideally we'd only do this if needed, but it's tricky to know when it's
   // needed in advance (bug 765799).
   int32_t newOffset;
 
   if (referenceNode) {
     newOffset = IndexOf(referenceNode);
   } else {
-    uint32_t length;
-    aRv = tChildList->GetLength(&length);
-    if (aRv.Failed()) {
-      return;
-    }
-
-    newOffset = length;
+    newOffset = AssertedCast<int32_t>(tStartContainer->GetChildCount());
   }
 
   if (aNode.NodeType() == nsIDOMNode::DOCUMENT_FRAGMENT_NODE) {
     newOffset += aNode.GetChildCount();
   } else {
     newOffset++;
   }
 
diff --git a/testing/web-platform/tests/dom/common.js b/testing/web-platform/tests/dom/common.js
--- a/testing/web-platform/tests/dom/common.js
+++ b/testing/web-platform/tests/dom/common.js
@@ -158,16 +158,17 @@ function setupRangeTests() {
         "[xmlDoc, 1, xmlComment, 0]",
         "[detachedTextNode, 0, detachedTextNode, 8]",
         "[detachedForeignTextNode, 0, detachedForeignTextNode, 8]",
         "[detachedXmlTextNode, 0, detachedXmlTextNode, 8]",
         "[detachedComment, 3, detachedComment, 4]",
         "[detachedForeignComment, 0, detachedForeignComment, 1]",
         "[detachedXmlComment, 2, detachedXmlComment, 6]",
         "[docfrag, 0, docfrag, 0]",
+        "[processingInstruction, 2, processingInstruction, 12]",
     ];
 
     testRanges = testRangesShort.concat([
         "[paras[1].firstChild, 0, paras[1].firstChild, 1]",
         "[paras[1].firstChild, 2, paras[1].firstChild, 8]",
         "[detachedPara1.firstChild, 0, detachedPara1.firstChild, 1]",
         "[foreignPara1.firstChild, 0, foreignPara1.firstChild, 1]",
         "[foreignDoc.head, 1, foreignDoc.head, 1]",
@@ -827,52 +828,41 @@ function myExtractContents(range) {
 /**
  * insertNode() implementation, following the spec.  If an exception is
  * supposed to be thrown, will return a string with the name (e.g.,
  * "HIERARCHY_REQUEST_ERR") instead of a document fragment.  It might also
  * return an arbitrary human-readable string if a condition is hit that implies
  * a spec bug.
  */
 function myInsertNode(range, node) {
-    // "If the detached flag is set, throw an "InvalidStateError" exception and
-    // terminate these steps."
-    //
-    // Assume that if accessing collapsed throws, it's detached.
-    try {
-        range.collapsed;
-    } catch (e) {
-        return "INVALID_STATE_ERR";
-    }
-
     // "If start node is a Comment node, or a Text node whose parent is null,
     // throw an "HierarchyRequestError" exception and terminate these steps."
-    if (range.startContainer.nodeType == Node.COMMENT_NODE
-    || (range.startContainer.nodeType == Node.TEXT_NODE
-    && !range.startContainer.parentNode)) {
+    var startNode = range.startContainer;
+    if (startNode.nodeType == Node.COMMENT_NODE ||
+        startNode.nodeType == Node.PROCESSING_INSTRUCTION_NODE ||
+        (startNode.nodeType == Node.TEXT_NODE && !startNode.parentNode)) {
         return "HIERARCHY_REQUEST_ERR";
     }
 
     // "If start node is a Text node, split it with offset context object's
     // start offset, and let reference node be the result."
     var referenceNode;
     if (range.startContainer.nodeType == Node.TEXT_NODE) {
         // We aren't testing how ranges vary under mutations, and browsers vary
         // in how they mutate for splitText, so let's just force the correct
         // way.
         var start = [range.startContainer, range.startOffset];
         var end = [range.endContainer, range.endOffset];
 
         referenceNode = range.startContainer.splitText(range.startOffset);
 
-        if (start[0] == end[0]
-        && end[1] > start[1]) {
+        if (start[0] == end[0] && end[1] > start[1]) {
             end[0] = referenceNode;
             end[1] -= start[1];
-        } else if (end[0] == start[0].parentNode
-        && end[1] > indexOf(referenceNode)) {
+        } else if (end[0] == start[0].parentNode && end[1] > indexOf(referenceNode)) {
             end[1]++;
         }
         range.setStart(start[0], start[1]);
         range.setEnd(end[0], end[1]);
 
     // "Otherwise, let reference node be the child of start node whose index is
     // start offset, or null if there is no such child."
     } else {
