From: Ms2ger <ms2ger@gmail.com>
Remove HTMLContentSink's mHeadContext member field.

It is never set to a non-null value.

diff --git a/dom/html/nsHTMLContentSink.cpp b/dom/html/nsHTMLContentSink.cpp
--- a/dom/html/nsHTMLContentSink.cpp
+++ b/dom/html/nsHTMLContentSink.cpp
@@ -154,26 +154,24 @@ protected:
   nsCOMPtr<nsIHTMLDocument> mHTMLDocument;
 
   nsRefPtr<nsGenericHTMLElement> mRoot;
   nsRefPtr<nsGenericHTMLElement> mBody;
   nsRefPtr<nsGenericHTMLElement> mHead;
 
   nsAutoTArray<SinkContext*, 8> mContextStack;
   SinkContext* mCurrentContext;
-  SinkContext* mHeadContext;
 
   // Boolean indicating whether we've notified insertion of our root content
   // yet.  We want to make sure to only do this once.
   bool mNotifiedRootInsertion;
 
   nsresult FlushTags() override;
 
   // Routines for tags that require special handling
-  nsresult CloseHTML();
   nsresult OpenBody();
   nsresult CloseBody();
 
   void CloseHeadContext();
 
   // nsContentSink overrides
   void UpdateChildCounts() override;
 
@@ -634,17 +632,17 @@ HTMLContentSink::HTMLContentSink()
 HTMLContentSink::~HTMLContentSink()
 {
   if (mNotificationTimer) {
     mNotificationTimer->Cancel();
   }
 
   int32_t numContexts = mContextStack.Length();
 
-  if (mCurrentContext == mHeadContext && numContexts > 0) {
+  if (!mCurrentContext && numContexts > 0) {
     // Pop off the second html context if it's not done earlier
     mContextStack.RemoveElementAt(--numContexts);
   }
 
   int32_t i;
   for (i = 0; i < numContexts; i++) {
     SinkContext* sc = mContextStack.ElementAt(i);
     if (sc) {
@@ -652,23 +650,17 @@ HTMLContentSink::~HTMLContentSink()
       if (sc == mCurrentContext) {
         mCurrentContext = nullptr;
       }
 
       delete sc;
     }
   }
 
-  if (mCurrentContext == mHeadContext) {
-    mCurrentContext = nullptr;
-  }
-
   delete mCurrentContext;
-
-  delete mHeadContext;
 }
 
 NS_IMPL_CYCLE_COLLECTION_CLASS(HTMLContentSink)
 
 NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED(HTMLContentSink, nsContentSink)
   NS_IMPL_CYCLE_COLLECTION_UNLINK(mHTMLDocument)
   NS_IMPL_CYCLE_COLLECTION_UNLINK(mRoot)
   NS_IMPL_CYCLE_COLLECTION_UNLINK(mBody)
@@ -825,37 +817,16 @@ NS_IMETHODIMP
 HTMLContentSink::SetParser(nsParserBase* aParser)
 {
   NS_PRECONDITION(aParser, "Should have a parser here!");
   mParser = aParser;
   return NS_OK;
 }
 
 nsresult
-HTMLContentSink::CloseHTML()
-{
-  if (mHeadContext) {
-    if (mCurrentContext == mHeadContext) {
-      uint32_t numContexts = mContextStack.Length();
-
-      // Pop off the second html context if it's not done earlier
-      mCurrentContext = mContextStack.ElementAt(--numContexts);
-      mContextStack.RemoveElementAt(numContexts);
-    }
-
-    mHeadContext->End();
-
-    delete mHeadContext;
-    mHeadContext = nullptr;
-  }
-
-  return NS_OK;
-}
-
-nsresult
 HTMLContentSink::OpenBody()
 {
   CloseHeadContext();  // do this just in case if the HEAD was left open!
 
   // if we already have a body we're done
   if (mBody) {
     return NS_OK;
   }
@@ -939,17 +910,16 @@ HTMLContentSink::CloseContainer(const El
 {
   nsresult rv = NS_OK;
 
   switch (aTag) {
     case eBody:
       rv = CloseBody();
       break;
     case eHTML:
-      rv = CloseHTML();
       break;
   }
 
   return rv;
 }
 
 NS_IMETHODIMP
 HTMLContentSink::WillInterrupt()
