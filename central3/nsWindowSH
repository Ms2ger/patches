From: Ms2ger <ms2ger@gmail.com>

diff --git a/dom/base/nsDOMClassInfo.cpp b/dom/base/nsDOMClassInfo.cpp
--- a/dom/base/nsDOMClassInfo.cpp
+++ b/dom/base/nsDOMClassInfo.cpp
@@ -116,18 +116,16 @@
 
 #ifdef MOZ_TIME_MANAGER
 #include "TimeManager.h"
 #endif
 
 using namespace mozilla;
 using namespace mozilla::dom;
 
-static NS_DEFINE_CID(kDOMSOF_CID, NS_DOM_SCRIPT_OBJECT_FACTORY_CID);
-
 // NOTE: DEFAULT_SCRIPTABLE_FLAGS and DOM_DEFAULT_SCRIPTABLE_FLAGS
 //       are defined in nsIDOMClassInfo.h.
 
 #define ARRAY_SCRIPTABLE_FLAGS                                                \
   (DOM_DEFAULT_SCRIPTABLE_FLAGS       |                                       \
    nsIXPCScriptable::WANT_GETPROPERTY |                                       \
    nsIXPCScriptable::WANT_ENUMERATE)
 
@@ -1092,51 +1090,16 @@ nsDOMClassInfo::HasInstance(nsIXPConnect
                             bool *_retval)
 {
   NS_WARNING("nsDOMClassInfo::HasInstance Don't call me!");
 
   return NS_ERROR_UNEXPECTED;
 }
 
 static nsresult
-GetExternalClassInfo(nsScriptNameSpaceManager *aNameSpaceManager,
-                     const nsAString &aName,
-                     const nsGlobalNameStruct *aStruct,
-                     const nsGlobalNameStruct **aResult)
-{
-  NS_ASSERTION(aStruct->mType ==
-                 nsGlobalNameStruct::eTypeExternalClassInfoCreator,
-               "Wrong type!");
-
-  nsresult rv;
-  nsCOMPtr<nsIDOMCIExtension> creator(do_CreateInstance(aStruct->mCID, &rv));
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  nsCOMPtr<nsIDOMScriptObjectFactory> sof(do_GetService(kDOMSOF_CID));
-  NS_ENSURE_TRUE(sof, NS_ERROR_FAILURE);
-
-  rv = creator->RegisterDOMCI(NS_ConvertUTF16toUTF8(aName).get(), sof);
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  const nsGlobalNameStruct *name_struct = aNameSpaceManager->LookupName(aName);
-  if (name_struct &&
-      name_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfo) {
-    *aResult = name_struct;
-  }
-  else {
-    NS_ERROR("Couldn't get the DOM ClassInfo data.");
-
-    *aResult = nullptr;
-  }
-
-  return NS_OK;
-}
-
-
-static nsresult
 ResolvePrototype(nsIXPConnect *aXPConnect, nsGlobalWindow *aWin, JSContext *cx,
                  JS::Handle<JSObject*> obj, const char16_t *name,
                  const nsDOMClassInfoData *ci_data,
                  const nsGlobalNameStruct *name_struct,
                  nsScriptNameSpaceManager *nameSpaceManager,
                  JSObject *dot_prototype,
                  JS::MutableHandle<JSPropertyDescriptor> ctorDesc);
 
@@ -1490,16 +1453,30 @@ private:
       aNameStruct->mType == nsGlobalNameStruct::eTypeExternalConstructorAlias;
   }
 
   const char16_t*   mClassName;
   const bool mConstructable;
   nsWeakPtr          mWeakOwner;
 };
 
+/* static */ nsresult
+nsDOMClassInfo::CreateConstructor(const char16_t* aName,
+                                  const nsDOMClassInfoData* aData,
+                                  const nsGlobalNameStruct* aNameStruct,
+                                  nsPIDOMWindow* aOwner,
+                                  nsIDOMDOMConstructor** aResult)
+{
+  nsRefPtr<nsDOMConstructor> constructor;
+  nsresult rv = nsDOMConstructor::Create(aName, aData, aNameStruct, aOwner,
+                                         getter_AddRefs(constructor));
+  constructor.forget(aResult);
+  return rv;
+}
+
 //static
 nsresult
 nsDOMConstructor::Create(const char16_t* aName,
                          const nsDOMClassInfoData* aData,
                          const nsGlobalNameStruct* aNameStruct,
                          nsPIDOMWindow* aOwner,
                          nsDOMConstructor** aResult)
 {
@@ -1784,54 +1761,16 @@ nsDOMConstructor::ToString(nsAString &aR
   aResult.AssignLiteral("[object ");
   aResult.Append(mClassName);
   aResult.Append(char16_t(']'));
 
   return NS_OK;
 }
 
 
-static nsresult
-GetXPCProto(nsIXPConnect *aXPConnect, JSContext *cx, nsGlobalWindow *aWin,
-            const nsGlobalNameStruct *aNameStruct,
-            nsIXPConnectJSObjectHolder **aProto)
-{
-  NS_ASSERTION(aNameStruct->mType ==
-                 nsGlobalNameStruct::eTypeClassConstructor ||
-               aNameStruct->mType == nsGlobalNameStruct::eTypeExternalClassInfo,
-               "Wrong type!");
-
-  nsCOMPtr<nsIClassInfo> ci;
-  if (aNameStruct->mType == nsGlobalNameStruct::eTypeClassConstructor) {
-    int32_t id = aNameStruct->mDOMClassInfoID;
-    NS_ABORT_IF_FALSE(id >= 0, "Negative DOM classinfo?!?");
-
-    nsDOMClassInfoID ci_id = (nsDOMClassInfoID)id;
-
-    ci = NS_GetDOMClassInfoInstance(ci_id);
-  }
-  else {
-    ci = nsDOMClassInfo::GetClassInfoInstance(aNameStruct->mData);
-  }
-  NS_ENSURE_TRUE(ci, NS_ERROR_UNEXPECTED);
-
-  nsresult rv =
-    aXPConnect->GetWrappedNativePrototype(cx, aWin->GetGlobalJSObject(), ci,
-                                          aProto);
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  JS::Rooted<JSObject*> proto_obj(cx, (*aProto)->GetJSObject());
-  if (!JS_WrapObject(cx, &proto_obj)) {
-    return NS_ERROR_FAILURE;
-  }
-
-  NS_IF_RELEASE(*aProto);
-  return aXPConnect->HoldObject(cx, proto_obj, aProto);
-}
-
 // Either ci_data must be non-null or name_struct must be non-null and of type
 // eTypeClassProto.
 static nsresult
 ResolvePrototype(nsIXPConnect *aXPConnect, nsGlobalWindow *aWin, JSContext *cx,
                  JS::Handle<JSObject*> obj, const char16_t *name,
                  const nsDOMClassInfoData *ci_data,
                  const nsGlobalNameStruct *name_struct,
                  nsScriptNameSpaceManager *nameSpaceManager,
@@ -1988,498 +1927,32 @@ ResolvePrototype(nsIXPConnect *aXPConnec
                          JSPROP_PERMANENT | JSPROP_READONLY,
                          JS_STUBGETTER, JS_STUBSETTER)) {
     return NS_ERROR_UNEXPECTED;
   }
 
   return NS_OK;
 }
 
-static bool
-OldBindingConstructorEnabled(const nsGlobalNameStruct *aStruct,
-                             nsGlobalWindow *aWin, JSContext *cx)
+
+/* static */ nsresult
+nsDOMClassInfo::ResolvePrototype(nsGlobalWindow* aWin, JSContext* aCx,
+                                 JS::Handle<JSObject*> aObject,
+                                 const char16_t* aName,
+                                 const nsDOMClassInfoData* aCIData,
+                                 const nsGlobalNameStruct* aNameStruct,
+                                 nsScriptNameSpaceManager* aNameSpaceManager,
+                                 JSObject* aDotPrototype,
+                                 JS::MutableHandle<JSPropertyDescriptor> aCtorDesc)
 {
-  MOZ_ASSERT(aStruct->mType == nsGlobalNameStruct::eTypeProperty ||
-             aStruct->mType == nsGlobalNameStruct::eTypeClassConstructor ||
-             aStruct->mType == nsGlobalNameStruct::eTypeExternalClassInfo);
-
-  // Don't expose chrome only constructors to content windows.
-  if (aStruct->mChromeOnly) {
-    bool expose;
-    if (aStruct->mAllowXBL) {
-      expose = IsChromeOrXBL(cx, nullptr);
-    } else {
-      expose = nsContentUtils::IsSystemPrincipal(aWin->GetPrincipal());
-    }
-
-    if (!expose) {
-      return false;
-    }
-  }
-
-  return true;
+  return ::ResolvePrototype(sXPConnect, aWin, aCx, aObject, aName, aCIData,
+                            aNameStruct, aNameSpaceManager, aDotPrototype,
+                            aCtorDesc);
 }
 
-static nsresult
-LookupComponentsShim(JSContext *cx, JS::Handle<JSObject*> global,
-                     nsPIDOMWindow *win,
-                     JS::MutableHandle<JSPropertyDescriptor> desc);
-
-// static
-bool
-nsWindowSH::NameStructEnabled(JSContext* aCx, nsGlobalWindow *aWin,
-                              const nsAString& aName,
-                              const nsGlobalNameStruct& aNameStruct)
-{
-  const nsGlobalNameStruct* nameStruct = &aNameStruct;
-  if (nameStruct->mType == nsGlobalNameStruct::eTypeExternalClassInfoCreator) {
-    nsresult rv = GetExternalClassInfo(GetNameSpaceManager(), aName, nameStruct,
-                                       &nameStruct);
-    if (NS_FAILED(rv) || !nameStruct) {
-      return false;
-    }
-  }
-
-  return (nameStruct->mType != nsGlobalNameStruct::eTypeProperty &&
-          nameStruct->mType != nsGlobalNameStruct::eTypeClassConstructor &&
-          nameStruct->mType != nsGlobalNameStruct::eTypeExternalClassInfo) ||
-         OldBindingConstructorEnabled(nameStruct, aWin, aCx);
-}
-
-#ifdef RELEASE_BUILD
-#define USE_CONTROLLERS_SHIM
-#endif
-
-#ifdef USE_CONTROLLERS_SHIM
-static const JSClass ControllersShimClass = {
-    "XULControllers", 0
-};
-#endif
-
-// static
-nsresult
-nsWindowSH::GlobalResolve(nsGlobalWindow *aWin, JSContext *cx,
-                          JS::Handle<JSObject*> obj, JS::Handle<jsid> id,
-                          JS::MutableHandle<JSPropertyDescriptor> desc)
-{
-  if (id == XPCJSRuntime::Get()->GetStringID(XPCJSRuntime::IDX_COMPONENTS)) {
-    return LookupComponentsShim(cx, obj, aWin, desc);
-  }
-
-#ifdef USE_CONTROLLERS_SHIM
-  // Note: We use |obj| rather than |aWin| to get the principal here, because
-  // this is called during Window setup when the Document isn't necessarily
-  // hooked up yet.
-  if (id == XPCJSRuntime::Get()->GetStringID(XPCJSRuntime::IDX_CONTROLLERS) &&
-      !xpc::IsXrayWrapper(obj) &&
-      !nsContentUtils::IsSystemPrincipal(nsContentUtils::ObjectPrincipal(obj)))
-  {
-    if (aWin->GetDoc()) {
-      aWin->GetDoc()->WarnOnceAbout(nsIDocument::eWindow_Controllers);
-    }
-    JS::Rooted<JSObject*> shim(cx, JS_NewObject(cx, &ControllersShimClass, JS::NullPtr(), obj));
-    if (NS_WARN_IF(!shim)) {
-      return NS_ERROR_OUT_OF_MEMORY;
-    }
-    FillPropertyDescriptor(desc, obj, JS::ObjectValue(*shim), /* readOnly = */ false);
-    return NS_OK;
-  }
-#endif
-
-  nsScriptNameSpaceManager *nameSpaceManager = GetNameSpaceManager();
-  NS_ENSURE_TRUE(nameSpaceManager, NS_ERROR_NOT_INITIALIZED);
-
-  // Note - Our only caller is nsGlobalWindow::DoResolve, which checks that
-  // JSID_IS_STRING(id) is true.
-  nsAutoJSString name;
-  if (!name.init(cx, JSID_TO_STRING(id))) {
-    return NS_ERROR_OUT_OF_MEMORY;
-  }
-
-  const char16_t *class_name = nullptr;
-  const nsGlobalNameStruct *name_struct =
-    nameSpaceManager->LookupName(name, &class_name);
-
-  if (!name_struct) {
-    return NS_OK;
-  }
-
-  // The class_name had better match our name
-  MOZ_ASSERT(name.Equals(class_name));
-
-  NS_ENSURE_TRUE(class_name, NS_ERROR_UNEXPECTED);
-
-  nsresult rv = NS_OK;
-
-  if (name_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfoCreator) {
-    rv = GetExternalClassInfo(nameSpaceManager, name, name_struct,
-                              &name_struct);
-    if (NS_FAILED(rv) || !name_struct) {
-      return rv;
-    }
-  }
-
-  if (name_struct->mType == nsGlobalNameStruct::eTypeNewDOMBinding ||
-      name_struct->mType == nsGlobalNameStruct::eTypeInterface ||
-      name_struct->mType == nsGlobalNameStruct::eTypeClassProto ||
-      name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor) {
-    // Lookup new DOM bindings.
-    DefineInterface getOrCreateInterfaceObject =
-      name_struct->mDefineDOMInterface;
-    if (getOrCreateInterfaceObject) {
-      if (name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor &&
-          !OldBindingConstructorEnabled(name_struct, aWin, cx)) {
-        return NS_OK;
-      }
-
-      ConstructorEnabled* checkEnabledForScope = name_struct->mConstructorEnabled;
-      // We do the enabled check on the current compartment of cx, but for the
-      // actual object we pass in the underlying object in the Xray case.  That
-      // way the callee can decide whether to allow access based on the caller
-      // or the window being touched.
-      JS::Rooted<JSObject*> global(cx,
-        js::CheckedUnwrap(obj, /* stopAtOuter = */ false));
-      if (!global) {
-        return NS_ERROR_DOM_SECURITY_ERR;
-      }
-      if (checkEnabledForScope && !checkEnabledForScope(cx, global)) {
-        return NS_OK;
-      }
-
-      // The DOM constructor resolve machinery interacts with Xrays in tricky
-      // ways, and there are some asymmetries that are important to understand.
-      //
-      // In the regular (non-Xray) case, we only want to resolve constructors
-      // once (so that if they're deleted, they don't reappear). We do this by
-      // stashing the constructor in a slot on the global, such that we can see
-      // during resolve whether we've created it already. This is rather
-      // memory-intensive, so we don't try to maintain these semantics when
-      // manipulating a global over Xray (so the properties just re-resolve if
-      // they've been deleted).
-      //
-      // Unfortunately, there's a bit of an impedance-mismatch between the Xray
-      // and non-Xray machinery. The Xray machinery wants an API that returns a
-      // JSPropertyDescriptor, so that the resolve hook doesn't have to get
-      // snared up with trying to define a property on the Xray holder. At the
-      // same time, the DefineInterface callbacks are set up to define things
-      // directly on the global.  And re-jiggering them to return property
-      // descriptors is tricky, because some DefineInterface callbacks define
-      // multiple things (like the Image() alias for HTMLImageElement).
-      //
-      // So the setup is as-follows:
-      //
-      // * The resolve function takes a JSPropertyDescriptor, but in the
-      //   non-Xray case, callees may define things directly on the global, and
-      //   set the value on the property descriptor to |undefined| to indicate
-      //   that there's nothing more for the caller to do. We assert against
-      //   this behavior in the Xray case.
-      //
-      // * We make sure that we do a non-Xray resolve first, so that all the
-      //   slots are set up. In the Xray case, this means unwrapping and doing
-      //   a non-Xray resolve before doing the Xray resolve.
-      //
-      // This all could use some grand refactoring, but for now we just limp
-      // along.
-      if (xpc::WrapperFactory::IsXrayWrapper(obj)) {
-        JS::Rooted<JSObject*> interfaceObject(cx);
-        {
-          JSAutoCompartment ac(cx, global);
-          interfaceObject = getOrCreateInterfaceObject(cx, global, id, false);
-        }
-        if (NS_WARN_IF(!interfaceObject)) {
-          return NS_ERROR_FAILURE;
-        }
-        if (!JS_WrapObject(cx, &interfaceObject)) {
-          return NS_ERROR_FAILURE;
-        }
-
-        FillPropertyDescriptor(desc, obj, 0, JS::ObjectValue(*interfaceObject));
-      } else {
-        JS::Rooted<JSObject*> interfaceObject(cx,
-          getOrCreateInterfaceObject(cx, obj, id, true));
-        if (NS_WARN_IF(!interfaceObject)) {
-          return NS_ERROR_FAILURE;
-        }
-        // We've already defined the property.  We indicate this to the caller
-        // by filling a property descriptor with JS::UndefinedValue() as the
-        // value.  We still have to fill in a property descriptor, though, so
-        // that the caller knows the property is in fact on this object.  It
-        // doesn't matter what we pass for the "readonly" argument here.
-        FillPropertyDescriptor(desc, obj, JS::UndefinedValue(), false);
-      }
-
-      return NS_OK;
-    }
-  }
-
-  if (name_struct->mType == nsGlobalNameStruct::eTypeInterface) {
-    // We're resolving a name of a DOM interface for which there is no
-    // direct DOM class, create a constructor object...
-    nsRefPtr<nsDOMConstructor> constructor;
-    rv = nsDOMConstructor::Create(class_name,
-                                  nullptr,
-                                  name_struct,
-                                  static_cast<nsPIDOMWindow*>(aWin),
-                                  getter_AddRefs(constructor));
-    NS_ENSURE_SUCCESS(rv, rv);
-
-    JS::Rooted<JS::Value> v(cx);
-    js::AssertSameCompartment(cx, obj);
-    rv = WrapNative(cx, constructor, &NS_GET_IID(nsIDOMDOMConstructor),
-                    false, &v);
-    NS_ENSURE_SUCCESS(rv, rv);
-
-    JS::Rooted<JSObject*> class_obj(cx, &v.toObject());
-
-    // ... and define the constants from the DOM interface on that
-    // constructor object.
-
-    {
-      JSAutoCompartment ac(cx, class_obj);
-      rv = DefineInterfaceConstants(cx, class_obj, &name_struct->mIID);
-      NS_ENSURE_SUCCESS(rv, rv);
-    }
-
-    if (!JS_WrapValue(cx, &v)) {
-      return NS_ERROR_UNEXPECTED;
-    }
-
-    FillPropertyDescriptor(desc, obj, 0, v);
-    return NS_OK;
-  }
-
-  if (name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor ||
-      name_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfo) {
-    if (!OldBindingConstructorEnabled(name_struct, aWin, cx)) {
-      return NS_OK;
-    }
-
-    // Create the XPConnect prototype for our classinfo, PostCreateProto will
-    // set up the prototype chain.  This will go ahead and define things on the
-    // actual window's global.
-    nsCOMPtr<nsIXPConnectJSObjectHolder> proto_holder;
-    rv = GetXPCProto(nsDOMClassInfo::sXPConnect, cx, aWin, name_struct,
-                     getter_AddRefs(proto_holder));
-    NS_ENSURE_SUCCESS(rv, rv);
-    bool isXray = xpc::WrapperFactory::IsXrayWrapper(obj);
-    MOZ_ASSERT_IF(obj != aWin->GetGlobalJSObject(), isXray);
-    if (!isXray) {
-      // GetXPCProto already defined the property for us
-      FillPropertyDescriptor(desc, obj, JS::UndefinedValue(), false);
-      return NS_OK;
-    }
-
-    // This is the Xray case.  Look up the constructor object for this
-    // prototype.
-    JS::Rooted<JSObject*> dot_prototype(cx, proto_holder->GetJSObject());
-    NS_ENSURE_STATE(dot_prototype);
-
-    const nsDOMClassInfoData *ci_data;
-    if (name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor) {
-      ci_data = &sClassInfoData[name_struct->mDOMClassInfoID];
-    } else {
-      ci_data = name_struct->mData;
-    }
-
-    return ResolvePrototype(nsDOMClassInfo::sXPConnect, aWin, cx, obj,
-                            class_name, ci_data,
-                            name_struct, nameSpaceManager, dot_prototype,
-                            desc);
-  }
-
-  if (name_struct->mType == nsGlobalNameStruct::eTypeClassProto) {
-    // We don't have a XPConnect prototype object, let ResolvePrototype create
-    // one.
-    return ResolvePrototype(nsDOMClassInfo::sXPConnect, aWin, cx, obj,
-                            class_name, nullptr,
-                            name_struct, nameSpaceManager, nullptr, desc);
-  }
-
-  if (name_struct->mType == nsGlobalNameStruct::eTypeExternalConstructorAlias) {
-    const nsGlobalNameStruct *alias_struct =
-      nameSpaceManager->GetConstructorProto(name_struct);
-    NS_ENSURE_TRUE(alias_struct, NS_ERROR_UNEXPECTED);
-
-    // We need to use the XPConnect prototype for the DOM class that this
-    // constructor is an alias for (for example for Image we need the prototype
-    // for HTMLImageElement).
-    nsCOMPtr<nsIXPConnectJSObjectHolder> proto_holder;
-    rv = GetXPCProto(nsDOMClassInfo::sXPConnect, cx, aWin, alias_struct,
-                     getter_AddRefs(proto_holder));
-    NS_ENSURE_SUCCESS(rv, rv);
-
-    JSObject* dot_prototype = proto_holder->GetJSObject();
-    NS_ENSURE_STATE(dot_prototype);
-
-    const nsDOMClassInfoData *ci_data;
-    if (alias_struct->mType == nsGlobalNameStruct::eTypeClassConstructor) {
-      ci_data = &sClassInfoData[alias_struct->mDOMClassInfoID];
-    } else if (alias_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfo) {
-      ci_data = alias_struct->mData;
-    } else {
-      return NS_ERROR_UNEXPECTED;
-    }
-
-    return ResolvePrototype(nsDOMClassInfo::sXPConnect, aWin, cx, obj,
-                            class_name, ci_data,
-                            name_struct, nameSpaceManager, nullptr, desc);
-  }
-
-  if (name_struct->mType == nsGlobalNameStruct::eTypeExternalConstructor) {
-    nsRefPtr<nsDOMConstructor> constructor;
-    rv = nsDOMConstructor::Create(class_name, nullptr, name_struct,
-                                  static_cast<nsPIDOMWindow*>(aWin),
-                                  getter_AddRefs(constructor));
-    NS_ENSURE_SUCCESS(rv, rv);
-
-    JS::Rooted<JS::Value> val(cx);
-    js::AssertSameCompartment(cx, obj);
-    rv = WrapNative(cx, constructor, &NS_GET_IID(nsIDOMDOMConstructor),
-                    true, &val);
-    NS_ENSURE_SUCCESS(rv, rv);
-
-    NS_ASSERTION(val.isObject(), "Why didn't we get a JSObject?");
-
-    FillPropertyDescriptor(desc, obj, 0, val);
-
-    return NS_OK;
-  }
-
-  if (name_struct->mType == nsGlobalNameStruct::eTypeProperty) {
-    if (!OldBindingConstructorEnabled(name_struct, aWin, cx))
-      return NS_OK;
-
-    // Before defining a global property, check for a named subframe of the
-    // same name. If it exists, we don't want to shadow it.
-    nsCOMPtr<nsIDOMWindow> childWin = aWin->GetChildWindow(name);
-    if (childWin)
-      return NS_OK;
-
-    nsCOMPtr<nsISupports> native(do_CreateInstance(name_struct->mCID, &rv));
-    NS_ENSURE_SUCCESS(rv, rv);
-
-    JS::Rooted<JS::Value> prop_val(cx, JS::UndefinedValue()); // Property value.
-
-    nsCOMPtr<nsIDOMGlobalPropertyInitializer> gpi(do_QueryInterface(native));
-    if (gpi) {
-      rv = gpi->Init(aWin, &prop_val);
-      NS_ENSURE_SUCCESS(rv, rv);
-    }
-
-    if (prop_val.isPrimitive() && !prop_val.isNull()) {
-      if (aWin->IsOuterWindow()) {
-        nsGlobalWindow *inner = aWin->GetCurrentInnerWindowInternal();
-        NS_ENSURE_TRUE(inner, NS_ERROR_UNEXPECTED);
-      }
-
-      rv = WrapNative(cx, native, true, &prop_val);
-    }
-
-    NS_ENSURE_SUCCESS(rv, rv);
-
-    if (!JS_WrapValue(cx, &prop_val)) {
-      return NS_ERROR_UNEXPECTED;
-    }
-
-    FillPropertyDescriptor(desc, obj, prop_val, false);
-
-    return NS_OK;
-  }
-
-  return rv;
-}
-
-struct InterfaceShimEntry {
-  const char *geckoName;
-  const char *domName;
-};
-
-// We add shims from Components.interfaces.nsIDOMFoo to window.Foo for each
-// interface that has interface constants that sites might be getting off
-// of Ci.
-const InterfaceShimEntry kInterfaceShimMap[] =
-{ { "nsIDOMFileReader", "FileReader" },
-  { "nsIXMLHttpRequest", "XMLHttpRequest" },
-  { "nsIDOMDOMException", "DOMException" },
-  { "nsIDOMNode", "Node" },
-  { "nsIDOMCSSPrimitiveValue", "CSSPrimitiveValue" },
-  { "nsIDOMCSSRule", "CSSRule" },
-  { "nsIDOMCSSValue", "CSSValue" },
-  { "nsIDOMEvent", "Event" },
-  { "nsIDOMNSEvent", "Event" },
-  { "nsIDOMKeyEvent", "KeyEvent" },
-  { "nsIDOMMouseEvent", "MouseEvent" },
-  { "nsIDOMMouseScrollEvent", "MouseScrollEvent" },
-  { "nsIDOMMutationEvent", "MutationEvent" },
-  { "nsIDOMSimpleGestureEvent", "SimpleGestureEvent" },
-  { "nsIDOMUIEvent", "UIEvent" },
-  { "nsIDOMHTMLMediaElement", "HTMLMediaElement" },
-  { "nsIDOMMediaError", "MediaError" },
-  { "nsIDOMOfflineResourceList", "OfflineResourceList" },
-  { "nsIDOMRange", "Range" },
-  { "nsIDOMSVGLength", "SVGLength" },
-  { "nsIDOMNodeFilter", "NodeFilter" },
-  { "nsIDOMXPathResult", "XPathResult" } };
-
-static nsresult
-LookupComponentsShim(JSContext *cx, JS::Handle<JSObject*> global,
-                     nsPIDOMWindow *win,
-                     JS::MutableHandle<JSPropertyDescriptor> desc)
-{
-  // Keep track of how often this happens.
-  Telemetry::Accumulate(Telemetry::COMPONENTS_SHIM_ACCESSED_BY_CONTENT, true);
-
-  // Warn once.
-  nsCOMPtr<nsIDocument> doc = win->GetExtantDoc();
-  if (doc) {
-    doc->WarnOnceAbout(nsIDocument::eComponents, /* asError = */ true);
-  }
-
-  // Create a fake Components object.
-  AssertSameCompartment(cx, global);
-  JS::Rooted<JSObject*> components(cx, JS_NewPlainObject(cx));
-  NS_ENSURE_TRUE(components, NS_ERROR_OUT_OF_MEMORY);
-
-  // Create a fake interfaces object.
-  JS::Rooted<JSObject*> interfaces(cx, JS_NewPlainObject(cx));
-  NS_ENSURE_TRUE(interfaces, NS_ERROR_OUT_OF_MEMORY);
-  bool ok =
-    JS_DefineProperty(cx, components, "interfaces", interfaces,
-                      JSPROP_ENUMERATE | JSPROP_PERMANENT | JSPROP_READONLY,
-                      JS_STUBGETTER, JS_STUBSETTER);
-  NS_ENSURE_TRUE(ok, NS_ERROR_OUT_OF_MEMORY);
-
-  // Define a bunch of shims from the Ci.nsIDOMFoo to window.Foo for DOM
-  // interfaces with constants.
-  for (uint32_t i = 0; i < ArrayLength(kInterfaceShimMap); ++i) {
-
-    // Grab the names from the table.
-    const char *geckoName = kInterfaceShimMap[i].geckoName;
-    const char *domName = kInterfaceShimMap[i].domName;
-
-    // Look up the appopriate interface object on the global.
-    JS::Rooted<JS::Value> v(cx, JS::UndefinedValue());
-    ok = JS_GetProperty(cx, global, domName, &v);
-    NS_ENSURE_TRUE(ok, NS_ERROR_OUT_OF_MEMORY);
-    if (!v.isObject()) {
-      NS_WARNING("Unable to find interface object on global");
-      continue;
-    }
-
-    // Define the shim on the interfaces object.
-    ok = JS_DefineProperty(cx, interfaces, geckoName, v,
-                           JSPROP_ENUMERATE | JSPROP_PERMANENT | JSPROP_READONLY,
-                           JS_STUBGETTER, JS_STUBSETTER);
-    NS_ENSURE_TRUE(ok, NS_ERROR_OUT_OF_MEMORY);
-  }
-
-  FillPropertyDescriptor(desc, global, JS::ObjectValue(*components), false);
-
-  return NS_OK;
-}
 
 // EventTarget helper
 
 NS_IMETHODIMP
 nsEventTargetSH::PreCreate(nsISupports *nativeObj, JSContext *cx,
                            JSObject *aGlobalObj, JSObject **parentObj)
 {
   JS::Rooted<JSObject*> globalObj(cx, aGlobalObj);
@@ -2554,17 +2027,17 @@ nsDOMConstructorSH::PreCreate(nsISupport
 NS_IMETHODIMP
 nsDOMConstructorSH::Resolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
                             JSObject *aObj, jsid aId, bool *resolvedp,
                             bool *_retval)
 {
   JS::Rooted<JSObject*> obj(cx, aObj);
   JS::Rooted<jsid> id(cx, aId);
   // For regular DOM constructors, we have our interface constants defined on
-  // us by nsWindowSH::GlobalResolve. However, XrayWrappers can't see these
+  // us by nsGlobalWindow::DoResolve. However, XrayWrappers can't see these
   // interface constants (as they look like expando properties) so we have to
   // specially resolve those constants here, but only for Xray wrappers.
   if (!ObjectIsNativeWrapper(cx, obj)) {
     return NS_OK;
   }
 
   JS::Rooted<JSObject*> nativePropsObj(cx, xpc::XrayUtils::GetNativePropertiesObject(cx, obj));
   nsDOMConstructor *wrapped =
diff --git a/dom/base/nsDOMClassInfo.h b/dom/base/nsDOMClassInfo.h
--- a/dom/base/nsDOMClassInfo.h
+++ b/dom/base/nsDOMClassInfo.h
@@ -18,16 +18,17 @@
 #undef GetClassName
 #endif
 
 class nsContentList;
 class nsDocument;
 struct nsGlobalNameStruct;
 class nsGlobalWindow;
 class nsIScriptSecurityManager;
+class nsIDOMDOMConstructor;
 
 struct nsDOMClassInfoData;
 
 typedef nsIClassInfo* (*nsDOMClassInfoConstructorFnc)
   (nsDOMClassInfoData* aData);
 
 typedef nsresult (*nsDOMConstructorFunc)(nsISupports** aNewObject);
 
@@ -62,22 +63,18 @@ struct nsExternalDOMClassInfoData : publ
 
 // To be used with the nsDOMClassInfoData::mCachedClassInfo pointer.
 // The low bit is set when we created a generic helper for an external
 // (which holds on to the nsDOMClassInfoData).
 #define GET_CLEAN_CI_PTR(_ptr) (nsIClassInfo*)(uintptr_t(_ptr) & ~0x1)
 #define MARK_EXTERNAL(_ptr) (nsIClassInfo*)(uintptr_t(_ptr) | 0x1)
 #define IS_EXTERNAL(_ptr) (uintptr_t(_ptr) & 0x1)
 
-class nsWindowSH;
-
 class nsDOMClassInfo : public nsXPCClassInfo
 {
-  friend class nsWindowSH;
-
 protected:
   virtual ~nsDOMClassInfo();
 
 public:
   explicit nsDOMClassInfo(nsDOMClassInfoData* aData);
 
   NS_DECL_NSIXPCSCRIPTABLE
 
@@ -121,16 +118,30 @@ public:
   static bool ObjectIsNativeWrapper(JSContext* cx, JSObject* obj);
 
   static nsISupports *GetNative(nsIXPConnectWrappedNative *wrapper, JSObject *obj);
 
   static nsIXPConnect *XPConnect()
   {
     return sXPConnect;
   }
+  static nsresult ResolvePrototype(nsGlobalWindow* aWin, JSContext* aCx,
+                                   JS::Handle<JSObject*> aObject,
+                                   const char16_t* aName,
+                                   const nsDOMClassInfoData* aCIData,
+                                   const nsGlobalNameStruct* aNameStruct,
+                                   nsScriptNameSpaceManager* aNameSpaceManager,
+                                   JSObject* aDotPrototype,
+                                   JS::MutableHandle<JSPropertyDescriptor> aCtorDesc);
+
+  static nsresult CreateConstructor(const char16_t* aName,
+                                    const nsDOMClassInfoData* aData,
+                                    const nsGlobalNameStruct* aNameStruct,
+                                    nsPIDOMWindow* aOwner,
+                                    nsIDOMDOMConstructor** aResult);
 
 protected:
   friend nsIClassInfo* NS_GetDOMClassInfoInstance(nsDOMClassInfoID aID);
 
   const nsDOMClassInfoData* mData;
 
   virtual void PreserveWrapper(nsISupports *aNative) MOZ_OVERRIDE
   {
@@ -213,32 +224,16 @@ public:
   virtual void PreserveWrapper(nsISupports *aNative) MOZ_OVERRIDE;
 
   static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
   {
     return new nsEventTargetSH(aData);
   }
 };
 
-// A place to hang some static methods that we should really consider
-// moving to be nsGlobalWindow member methods.  See bug 1062418.
-class nsWindowSH
-{
-protected:
-  static nsresult GlobalResolve(nsGlobalWindow *aWin, JSContext *cx,
-                                JS::Handle<JSObject*> obj, JS::Handle<jsid> id,
-                                JS::MutableHandle<JSPropertyDescriptor> desc);
-
-  friend class nsGlobalWindow;
-public:
-  static bool NameStructEnabled(JSContext* aCx, nsGlobalWindow *aWin,
-                                const nsAString& aName,
-                                const nsGlobalNameStruct& aNameStruct);
-};
-
 
 // Event handler 'this' translator class, this is called by XPConnect
 // when a "function interface" (nsIDOMEventListener) is called, this
 // class extracts 'this' fomr the first argument to the called
 // function (nsIDOMEventListener::HandleEvent(in nsIDOMEvent)), this
 // class will pass back nsIDOMEvent::currentTarget to be used as
 // 'this'.
 
diff --git a/dom/base/nsGlobalWindow.cpp b/dom/base/nsGlobalWindow.cpp
--- a/dom/base/nsGlobalWindow.cpp
+++ b/dom/base/nsGlobalWindow.cpp
@@ -214,16 +214,18 @@
 #include "mozilla/dom/MozSelfSupportBinding.h"
 #include "mozilla/dom/PopStateEvent.h"
 #include "mozilla/dom/PopupBlockedEvent.h"
 #include "mozilla/dom/WindowBinding.h"
 #include "nsITabChild.h"
 #include "mozilla/dom/MediaQueryList.h"
 #include "mozilla/dom/ScriptSettings.h"
 #include "mozilla/dom/NavigatorBinding.h"
+#include "nsIDOMConstructor.h"
+
 #ifdef HAVE_SIDEBAR
 #include "mozilla/dom/ExternalBinding.h"
 #endif
 
 #ifdef MOZ_WEBSPEECH
 #include "mozilla/dom/SpeechSynthesis.h"
 #endif
 
@@ -232,16 +234,17 @@
 #endif
 
 // Apple system headers seem to have a check() macro.  <sigh>
 #ifdef check
 class nsIScriptTimeoutHandler;
 #undef check
 #endif // check
 #include "AccessCheck.h"
+#include "WrapperFactory.h"
 
 #ifdef ANDROID
 #include <android/log.h>
 #endif
 
 #ifdef PR_LOGGING
 static PRLogModuleInfo* gDOMLeakPRLog;
 #endif
@@ -250,16 +253,18 @@ static PRLogModuleInfo* gDOMLeakPRLog;
 #include <process.h>
 #define getpid _getpid
 #else
 #include <unistd.h> // for getpid()
 #endif
 
 static const char kStorageEnabled[] = "dom.storage.enabled";
 
+static NS_DEFINE_CID(kDOMSOF_CID, NS_DOM_SCRIPT_OBJECT_FACTORY_CID);
+
 using namespace mozilla;
 using namespace mozilla::dom;
 using namespace mozilla::dom::ipc;
 using mozilla::TimeStamp;
 using mozilla::TimeDuration;
 using mozilla::dom::indexedDB::IDBFactory;
 
 nsGlobalWindow::WindowByIdTable *nsGlobalWindow::sWindowsById = nullptr;
@@ -4268,29 +4273,575 @@ nsGlobalWindow::GetSupportedNames(nsTArr
     for (uint32_t i = 0; i < length; ++i, ++name) {
       nsCOMPtr<nsIDocShellTreeItem> item =
         windows->GetDocShellTreeItemAt(i);
       item->GetName(*name);
     }
   }
 }
 
+
+bool
+nsGlobalWindow::OldBindingConstructorEnabled(const nsGlobalNameStruct* aStruct,
+                                             JSContext* aCx)
+{
+  MOZ_ASSERT(aStruct->mType == nsGlobalNameStruct::eTypeProperty ||
+             aStruct->mType == nsGlobalNameStruct::eTypeClassConstructor ||
+             aStruct->mType == nsGlobalNameStruct::eTypeExternalClassInfo);
+
+  // Don't expose chrome only constructors to content windows.
+  if (aStruct->mChromeOnly) {
+    bool expose;
+    if (aStruct->mAllowXBL) {
+      expose = IsChromeOrXBL(aCx, nullptr);
+    } else {
+      expose = nsContentUtils::IsSystemPrincipal(GetPrincipal());
+    }
+
+    if (!expose) {
+      return false;
+    }
+  }
+
+  return true;
+}
+
+static nsresult
+GetExternalClassInfo(nsScriptNameSpaceManager *aNameSpaceManager,
+                     const nsAString &aName,
+                     const nsGlobalNameStruct *aStruct,
+                     const nsGlobalNameStruct **aResult)
+{
+  NS_ASSERTION(aStruct->mType ==
+                 nsGlobalNameStruct::eTypeExternalClassInfoCreator,
+               "Wrong type!");
+
+  nsresult rv;
+  nsCOMPtr<nsIDOMCIExtension> creator(do_CreateInstance(aStruct->mCID, &rv));
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  nsCOMPtr<nsIDOMScriptObjectFactory> sof(do_GetService(kDOMSOF_CID));
+  NS_ENSURE_TRUE(sof, NS_ERROR_FAILURE);
+
+  rv = creator->RegisterDOMCI(NS_ConvertUTF16toUTF8(aName).get(), sof);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  const nsGlobalNameStruct *name_struct = aNameSpaceManager->LookupName(aName);
+  if (name_struct &&
+      name_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfo) {
+    *aResult = name_struct;
+  }
+  else {
+    NS_ERROR("Couldn't get the DOM ClassInfo data.");
+
+    *aResult = nullptr;
+  }
+
+  return NS_OK;
+}
+
+bool
+nsGlobalWindow::NameStructEnabled(JSContext* aCx, const nsAString& aName,
+                                  const nsGlobalNameStruct& aNameStruct)
+{
+  const nsGlobalNameStruct* nameStruct = &aNameStruct;
+  if (nameStruct->mType == nsGlobalNameStruct::eTypeExternalClassInfoCreator) {
+    nsresult rv = GetExternalClassInfo(GetNameSpaceManager(), aName, nameStruct,
+                                       &nameStruct);
+    if (NS_FAILED(rv) || !nameStruct) {
+      return false;
+    }
+  }
+
+  return (nameStruct->mType != nsGlobalNameStruct::eTypeProperty &&
+          nameStruct->mType != nsGlobalNameStruct::eTypeClassConstructor &&
+          nameStruct->mType != nsGlobalNameStruct::eTypeExternalClassInfo) ||
+         OldBindingConstructorEnabled(nameStruct, aCx);
+}
+
+
+struct InterfaceShimEntry {
+  const char* geckoName;
+  const char* domName;
+};
+
+// We add shims from Components.interfaces.nsIDOMFoo to window.Foo for each
+// interface that has interface constants that sites might be getting off
+// of Ci.
+const InterfaceShimEntry kInterfaceShimMap[] =
+{ { "nsIDOMFileReader", "FileReader" },
+  { "nsIXMLHttpRequest", "XMLHttpRequest" },
+  { "nsIDOMDOMException", "DOMException" },
+  { "nsIDOMNode", "Node" },
+  { "nsIDOMCSSPrimitiveValue", "CSSPrimitiveValue" },
+  { "nsIDOMCSSRule", "CSSRule" },
+  { "nsIDOMCSSValue", "CSSValue" },
+  { "nsIDOMEvent", "Event" },
+  { "nsIDOMNSEvent", "Event" },
+  { "nsIDOMKeyEvent", "KeyEvent" },
+  { "nsIDOMMouseEvent", "MouseEvent" },
+  { "nsIDOMMouseScrollEvent", "MouseScrollEvent" },
+  { "nsIDOMMutationEvent", "MutationEvent" },
+  { "nsIDOMSimpleGestureEvent", "SimpleGestureEvent" },
+  { "nsIDOMUIEvent", "UIEvent" },
+  { "nsIDOMHTMLMediaElement", "HTMLMediaElement" },
+  { "nsIDOMMediaError", "MediaError" },
+  { "nsIDOMOfflineResourceList", "OfflineResourceList" },
+  { "nsIDOMRange", "Range" },
+  { "nsIDOMSVGLength", "SVGLength" },
+  { "nsIDOMNodeFilter", "NodeFilter" },
+  { "nsIDOMXPathResult", "XPathResult" } };
+
+nsresult
+nsGlobalWindow::LookupComponentsShim(JSContext* cx,
+                                     JS::Handle<JSObject*> global,
+                                     JS::MutableHandle<JSPropertyDescriptor> desc)
+{
+  // Keep track of how often this happens.
+  Telemetry::Accumulate(Telemetry::COMPONENTS_SHIM_ACCESSED_BY_CONTENT, true);
+
+  // Warn once.
+  nsCOMPtr<nsIDocument> doc = GetExtantDoc();
+  if (doc) {
+    doc->WarnOnceAbout(nsIDocument::eComponents, /* asError = */ true);
+  }
+
+  // Create a fake Components object.
+  AssertSameCompartment(cx, global);
+  JS::Rooted<JSObject*> components(cx, JS_NewPlainObject(cx));
+  NS_ENSURE_TRUE(components, NS_ERROR_OUT_OF_MEMORY);
+
+  // Create a fake interfaces object.
+  JS::Rooted<JSObject*> interfaces(cx, JS_NewPlainObject(cx));
+  NS_ENSURE_TRUE(interfaces, NS_ERROR_OUT_OF_MEMORY);
+  bool ok =
+    JS_DefineProperty(cx, components, "interfaces", interfaces,
+                      JSPROP_ENUMERATE | JSPROP_PERMANENT | JSPROP_READONLY,
+                      JS_STUBGETTER, JS_STUBSETTER);
+  NS_ENSURE_TRUE(ok, NS_ERROR_OUT_OF_MEMORY);
+
+  // Define a bunch of shims from the Ci.nsIDOMFoo to window.Foo for DOM
+  // interfaces with constants.
+  for (uint32_t i = 0; i < ArrayLength(kInterfaceShimMap); ++i) {
+
+    // Grab the names from the table.
+    const char *geckoName = kInterfaceShimMap[i].geckoName;
+    const char *domName = kInterfaceShimMap[i].domName;
+
+    // Look up the appopriate interface object on the global.
+    JS::Rooted<JS::Value> v(cx, JS::UndefinedValue());
+    ok = JS_GetProperty(cx, global, domName, &v);
+    NS_ENSURE_TRUE(ok, NS_ERROR_OUT_OF_MEMORY);
+    if (!v.isObject()) {
+      NS_WARNING("Unable to find interface object on global");
+      continue;
+    }
+
+    // Define the shim on the interfaces object.
+    ok = JS_DefineProperty(cx, interfaces, geckoName, v,
+                           JSPROP_ENUMERATE | JSPROP_PERMANENT | JSPROP_READONLY,
+                           JS_STUBGETTER, JS_STUBSETTER);
+    NS_ENSURE_TRUE(ok, NS_ERROR_OUT_OF_MEMORY);
+  }
+
+  FillPropertyDescriptor(desc, global, JS::ObjectValue(*components), false);
+
+  return NS_OK;
+}
+
+nsresult
+nsGlobalWindow::GetXPCProto(nsIXPConnect* aXPConnect, JSContext* cx,
+                            const nsGlobalNameStruct* aNameStruct,
+                            nsIXPConnectJSObjectHolder** aProto)
+{
+  NS_ASSERTION(aNameStruct->mType ==
+                 nsGlobalNameStruct::eTypeClassConstructor ||
+               aNameStruct->mType == nsGlobalNameStruct::eTypeExternalClassInfo,
+               "Wrong type!");
+
+  nsCOMPtr<nsIClassInfo> ci;
+  if (aNameStruct->mType == nsGlobalNameStruct::eTypeClassConstructor) {
+    int32_t id = aNameStruct->mDOMClassInfoID;
+    NS_ABORT_IF_FALSE(id >= 0, "Negative DOM classinfo?!?");
+
+    nsDOMClassInfoID ci_id = (nsDOMClassInfoID)id;
+
+    ci = NS_GetDOMClassInfoInstance(ci_id);
+  }
+  else {
+    ci = nsDOMClassInfo::GetClassInfoInstance(aNameStruct->mData);
+  }
+  NS_ENSURE_TRUE(ci, NS_ERROR_UNEXPECTED);
+
+  nsresult rv =
+    aXPConnect->GetWrappedNativePrototype(cx, GetGlobalJSObject(), ci,
+                                          aProto);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  JS::Rooted<JSObject*> proto_obj(cx, (*aProto)->GetJSObject());
+  if (!JS_WrapObject(cx, &proto_obj)) {
+    return NS_ERROR_FAILURE;
+  }
+
+  NS_IF_RELEASE(*aProto);
+  return aXPConnect->HoldObject(cx, proto_obj, aProto);
+}
+
+#ifdef RELEASE_BUILD
+#define USE_CONTROLLERS_SHIM
+#endif
+
+#ifdef USE_CONTROLLERS_SHIM
+static const JSClass ControllersShimClass = {
+    "XULControllers", 0
+};
+#endif
+
+nsresult
+nsGlobalWindow::GlobalResolve(JSContext* cx, JS::Handle<JSObject*> obj,
+                              JS::Handle<jsid> id,
+                              JS::MutableHandle<JSPropertyDescriptor> desc)
+{
+  if (id == XPCJSRuntime::Get()->GetStringID(XPCJSRuntime::IDX_COMPONENTS)) {
+    return LookupComponentsShim(cx, obj, desc);
+  }
+
+#ifdef USE_CONTROLLERS_SHIM
+  // Note: We use |obj| rather than |this| to get the principal here, because
+  // this is called during Window setup when the Document isn't necessarily
+  // hooked up yet.
+  if (id == XPCJSRuntime::Get()->GetStringID(XPCJSRuntime::IDX_CONTROLLERS) &&
+      !xpc::IsXrayWrapper(obj) &&
+      !nsContentUtils::IsSystemPrincipal(nsContentUtils::ObjectPrincipal(obj)))
+  {
+    if (GetDoc()) {
+      GetDoc()->WarnOnceAbout(nsIDocument::eWindow_Controllers);
+    }
+    JS::Rooted<JSObject*> shim(cx, JS_NewObject(cx, &ControllersShimClass, JS::NullPtr(), obj));
+    if (NS_WARN_IF(!shim)) {
+      return NS_ERROR_OUT_OF_MEMORY;
+    }
+    FillPropertyDescriptor(desc, obj, JS::ObjectValue(*shim), /* readOnly = */ false);
+    return NS_OK;
+  }
+#endif
+
+  nsScriptNameSpaceManager *nameSpaceManager = GetNameSpaceManager();
+  NS_ENSURE_TRUE(nameSpaceManager, NS_ERROR_NOT_INITIALIZED);
+
+  // Note - Our only caller is nsGlobalWindow::DoResolve, which checks that
+  // JSID_IS_STRING(id) is true.
+  nsAutoJSString name;
+  if (!name.init(cx, JSID_TO_STRING(id))) {
+    return NS_ERROR_OUT_OF_MEMORY;
+  }
+
+  const char16_t *class_name = nullptr;
+  const nsGlobalNameStruct *name_struct =
+    nameSpaceManager->LookupName(name, &class_name);
+
+  if (!name_struct) {
+    return NS_OK;
+  }
+
+  // The class_name had better match our name
+  MOZ_ASSERT(name.Equals(class_name));
+
+  NS_ENSURE_TRUE(class_name, NS_ERROR_UNEXPECTED);
+
+  nsresult rv = NS_OK;
+
+  if (name_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfoCreator) {
+    rv = GetExternalClassInfo(nameSpaceManager, name, name_struct,
+                              &name_struct);
+    if (NS_FAILED(rv) || !name_struct) {
+      return rv;
+    }
+  }
+
+  if (name_struct->mType == nsGlobalNameStruct::eTypeNewDOMBinding ||
+      name_struct->mType == nsGlobalNameStruct::eTypeInterface ||
+      name_struct->mType == nsGlobalNameStruct::eTypeClassProto ||
+      name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor) {
+    // Lookup new DOM bindings.
+    DefineInterface getOrCreateInterfaceObject =
+      name_struct->mDefineDOMInterface;
+    if (getOrCreateInterfaceObject) {
+      if (name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor &&
+          !OldBindingConstructorEnabled(name_struct, cx)) {
+        return NS_OK;
+      }
+
+      ConstructorEnabled* checkEnabledForScope = name_struct->mConstructorEnabled;
+      // We do the enabled check on the current compartment of cx, but for the
+      // actual object we pass in the underlying object in the Xray case.  That
+      // way the callee can decide whether to allow access based on the caller
+      // or the window being touched.
+      JS::Rooted<JSObject*> global(cx,
+        js::CheckedUnwrap(obj, /* stopAtOuter = */ false));
+      if (!global) {
+        return NS_ERROR_DOM_SECURITY_ERR;
+      }
+      if (checkEnabledForScope && !checkEnabledForScope(cx, global)) {
+        return NS_OK;
+      }
+
+      // The DOM constructor resolve machinery interacts with Xrays in tricky
+      // ways, and there are some asymmetries that are important to understand.
+      //
+      // In the regular (non-Xray) case, we only want to resolve constructors
+      // once (so that if they're deleted, they don't reappear). We do this by
+      // stashing the constructor in a slot on the global, such that we can see
+      // during resolve whether we've created it already. This is rather
+      // memory-intensive, so we don't try to maintain these semantics when
+      // manipulating a global over Xray (so the properties just re-resolve if
+      // they've been deleted).
+      //
+      // Unfortunately, there's a bit of an impedance-mismatch between the Xray
+      // and non-Xray machinery. The Xray machinery wants an API that returns a
+      // JSPropertyDescriptor, so that the resolve hook doesn't have to get
+      // snared up with trying to define a property on the Xray holder. At the
+      // same time, the DefineInterface callbacks are set up to define things
+      // directly on the global.  And re-jiggering them to return property
+      // descriptors is tricky, because some DefineInterface callbacks define
+      // multiple things (like the Image() alias for HTMLImageElement).
+      //
+      // So the setup is as-follows:
+      //
+      // * The resolve function takes a JSPropertyDescriptor, but in the
+      //   non-Xray case, callees may define things directly on the global, and
+      //   set the value on the property descriptor to |undefined| to indicate
+      //   that there's nothing more for the caller to do. We assert against
+      //   this behavior in the Xray case.
+      //
+      // * We make sure that we do a non-Xray resolve first, so that all the
+      //   slots are set up. In the Xray case, this means unwrapping and doing
+      //   a non-Xray resolve before doing the Xray resolve.
+      //
+      // This all could use some grand refactoring, but for now we just limp
+      // along.
+      if (xpc::WrapperFactory::IsXrayWrapper(obj)) {
+        JS::Rooted<JSObject*> interfaceObject(cx);
+        {
+          JSAutoCompartment ac(cx, global);
+          interfaceObject = getOrCreateInterfaceObject(cx, global, id, false);
+        }
+        if (NS_WARN_IF(!interfaceObject)) {
+          return NS_ERROR_FAILURE;
+        }
+        if (!JS_WrapObject(cx, &interfaceObject)) {
+          return NS_ERROR_FAILURE;
+        }
+
+        FillPropertyDescriptor(desc, obj, 0, JS::ObjectValue(*interfaceObject));
+      } else {
+        JS::Rooted<JSObject*> interfaceObject(cx,
+          getOrCreateInterfaceObject(cx, obj, id, true));
+        if (NS_WARN_IF(!interfaceObject)) {
+          return NS_ERROR_FAILURE;
+        }
+        // We've already defined the property.  We indicate this to the caller
+        // by filling a property descriptor with JS::UndefinedValue() as the
+        // value.  We still have to fill in a property descriptor, though, so
+        // that the caller knows the property is in fact on this object.  It
+        // doesn't matter what we pass for the "readonly" argument here.
+        FillPropertyDescriptor(desc, obj, JS::UndefinedValue(), false);
+      }
+
+      return NS_OK;
+    }
+  }
+
+  if (name_struct->mType == nsGlobalNameStruct::eTypeInterface) {
+    // We're resolving a name of a DOM interface for which there is no
+    // direct DOM class, create a constructor object...
+    nsCOMPtr<nsIDOMDOMConstructor> constructor;
+    rv = nsDOMClassInfo::CreateConstructor(class_name, nullptr, name_struct,
+                                           static_cast<nsPIDOMWindow*>(this),
+                                           getter_AddRefs(constructor));
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    JS::Rooted<JS::Value> v(cx);
+    js::AssertSameCompartment(cx, obj);
+    rv = WrapNative(cx, constructor, &NS_GET_IID(nsIDOMDOMConstructor),
+                    false, &v);
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    JS::Rooted<JSObject*> class_obj(cx, &v.toObject());
+
+    // ... and define the constants from the DOM interface on that
+    // constructor object.
+
+    {
+      JSAutoCompartment ac(cx, class_obj);
+      rv = DefineInterfaceConstants(cx, class_obj, &name_struct->mIID);
+      NS_ENSURE_SUCCESS(rv, rv);
+    }
+
+    if (!JS_WrapValue(cx, &v)) {
+      return NS_ERROR_UNEXPECTED;
+    }
+
+    FillPropertyDescriptor(desc, obj, 0, v);
+    return NS_OK;
+  }
+
+  if (name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor ||
+      name_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfo) {
+    if (!OldBindingConstructorEnabled(name_struct, cx)) {
+      return NS_OK;
+    }
+
+    // Create the XPConnect prototype for our classinfo, PostCreateProto will
+    // set up the prototype chain.  This will go ahead and define things on the
+    // actual window's global.
+    nsCOMPtr<nsIXPConnectJSObjectHolder> proto_holder;
+    rv = GetXPCProto(nsDOMClassInfo::sXPConnect, cx, this, name_struct,
+                     getter_AddRefs(proto_holder));
+    NS_ENSURE_SUCCESS(rv, rv);
+    bool isXray = xpc::WrapperFactory::IsXrayWrapper(obj);
+    MOZ_ASSERT_IF(obj != GetGlobalJSObject(), isXray);
+    if (!isXray) {
+      // GetXPCProto already defined the property for us
+      FillPropertyDescriptor(desc, obj, JS::UndefinedValue(), false);
+      return NS_OK;
+    }
+
+    // This is the Xray case.  Look up the constructor object for this
+    // prototype.
+    JS::Rooted<JSObject*> dot_prototype(cx, proto_holder->GetJSObject());
+    NS_ENSURE_STATE(dot_prototype);
+
+    const nsDOMClassInfoData *ci_data;
+    if (name_struct->mType == nsGlobalNameStruct::eTypeClassConstructor) {
+      ci_data = &sClassInfoData[name_struct->mDOMClassInfoID];
+    } else {
+      ci_data = name_struct->mData;
+    }
+
+    return nsDOMClassInfo::ResolvePrototype(this, cx, obj, class_name, ci_data,
+                                            name_struct, nameSpaceManager,
+                                            dot_prototype, desc);
+  }
+
+  if (name_struct->mType == nsGlobalNameStruct::eTypeClassProto) {
+    // We don't have a XPConnect prototype object, let ResolvePrototype create
+    // one.
+    return nsDOMClassInfo::ResolvePrototype(this, cx, obj, class_name, nullptr,
+                                            name_struct, nameSpaceManager,
+                                            nullptr, desc);
+  }
+
+  if (name_struct->mType == nsGlobalNameStruct::eTypeExternalConstructorAlias) {
+    const nsGlobalNameStruct *alias_struct =
+      nameSpaceManager->GetConstructorProto(name_struct);
+    NS_ENSURE_TRUE(alias_struct, NS_ERROR_UNEXPECTED);
+
+    // We need to use the XPConnect prototype for the DOM class that this
+    // constructor is an alias for (for example for Image we need the prototype
+    // for HTMLImageElement).
+    nsCOMPtr<nsIXPConnectJSObjectHolder> proto_holder;
+    rv = GetXPCProto(nsDOMClassInfo::sXPConnect, cx, this, alias_struct,
+                     getter_AddRefs(proto_holder));
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    JSObject* dot_prototype = proto_holder->GetJSObject();
+    NS_ENSURE_STATE(dot_prototype);
+
+    const nsDOMClassInfoData *ci_data;
+    if (alias_struct->mType == nsGlobalNameStruct::eTypeClassConstructor) {
+      ci_data = &sClassInfoData[alias_struct->mDOMClassInfoID];
+    } else if (alias_struct->mType == nsGlobalNameStruct::eTypeExternalClassInfo) {
+      ci_data = alias_struct->mData;
+    } else {
+      return NS_ERROR_UNEXPECTED;
+    }
+
+    return nsDOMClassInfo::ResolvePrototype(this, cx, obj, class_name, ci_data,
+                                            name_struct, nameSpaceManager,
+                                            nullptr, desc);
+  }
+
+  if (name_struct->mType == nsGlobalNameStruct::eTypeExternalConstructor) {
+    nsCOMPtr<nsIDOMDOMConstructor> constructor;
+    rv = nsDOMClassInfo::CreateConstructor(class_name, nullptr, name_struct,
+                                           static_cast<nsPIDOMWindow*>(this),
+                                           getter_AddRefs(constructor));
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    JS::Rooted<JS::Value> val(cx);
+    js::AssertSameCompartment(cx, obj);
+    rv = WrapNative(cx, constructor, &NS_GET_IID(nsIDOMDOMConstructor),
+                    true, &val);
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    NS_ASSERTION(val.isObject(), "Why didn't we get a JSObject?");
+
+    FillPropertyDescriptor(desc, obj, 0, val);
+
+    return NS_OK;
+  }
+
+  if (name_struct->mType == nsGlobalNameStruct::eTypeProperty) {
+    if (!OldBindingConstructorEnabled(name_struct, cx))
+      return NS_OK;
+
+    // Before defining a global property, check for a named subframe of the
+    // same name. If it exists, we don't want to shadow it.
+    nsCOMPtr<nsIDOMWindow> childWin = GetChildWindow(name);
+    if (childWin)
+      return NS_OK;
+
+    nsCOMPtr<nsISupports> native(do_CreateInstance(name_struct->mCID, &rv));
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    JS::Rooted<JS::Value> prop_val(cx, JS::UndefinedValue()); // Property value.
+
+    nsCOMPtr<nsIDOMGlobalPropertyInitializer> gpi(do_QueryInterface(native));
+    if (gpi) {
+      rv = gpi->Init(this, &prop_val);
+      NS_ENSURE_SUCCESS(rv, rv);
+    }
+
+    if (prop_val.isPrimitive() && !prop_val.isNull()) {
+      if (IsOuterWindow()) {
+        nsGlobalWindow *inner = GetCurrentInnerWindowInternal();
+        NS_ENSURE_TRUE(inner, NS_ERROR_UNEXPECTED);
+      }
+
+      rv = WrapNative(cx, native, true, &prop_val);
+    }
+
+    NS_ENSURE_SUCCESS(rv, rv);
+
+    if (!JS_WrapValue(cx, &prop_val)) {
+      return NS_ERROR_UNEXPECTED;
+    }
+
+    FillPropertyDescriptor(desc, obj, prop_val, false);
+
+    return NS_OK;
+  }
+
+  return rv;
+}
+
 bool
 nsGlobalWindow::DoResolve(JSContext* aCx, JS::Handle<JSObject*> aObj,
                           JS::Handle<jsid> aId,
                           JS::MutableHandle<JSPropertyDescriptor> aDesc)
 {
   MOZ_ASSERT(IsInnerWindow());
 
   // Note: The infallibleInit call in GlobalResolve depends on this check.
   if (!JSID_IS_STRING(aId)) {
     return true;
   }
 
-  nsresult rv = nsWindowSH::GlobalResolve(this, aCx, aObj, aId, aDesc);
+  nsresult rv = GlobalResolve(aCx, aObj, aId, aDesc);
   if (NS_FAILED(rv)) {
     return Throw(aCx, rv);
   }
 
   return true;
 }
 
 struct GlobalNameEnumeratorClosure
@@ -4313,18 +4864,17 @@ struct GlobalNameEnumeratorClosure
 static PLDHashOperator
 EnumerateGlobalName(const nsAString& aName,
                     const nsGlobalNameStruct& aNameStruct,
                     void* aClosure)
 {
   GlobalNameEnumeratorClosure* closure =
     static_cast<GlobalNameEnumeratorClosure*>(aClosure);
 
-  if (nsWindowSH::NameStructEnabled(closure->mCx, closure->mWindow, aName,
-                                    aNameStruct) &&
+  if (closure->mWindow->NameStructEnabled(closure->mCx, aName, aNameStruct) &&
       (!aNameStruct.mConstructorEnabled ||
        aNameStruct.mConstructorEnabled(closure->mCx, closure->mWrapper))) {
     closure->mNames.AppendElement(aName);
   }
   return PL_DHASH_NEXT;
 }
 
 void
diff --git a/dom/base/nsGlobalWindow.h b/dom/base/nsGlobalWindow.h
--- a/dom/base/nsGlobalWindow.h
+++ b/dom/base/nsGlobalWindow.h
@@ -86,16 +86,17 @@ class nsIWebBrowserChrome;
 class nsDOMWindowList;
 class nsLocation;
 class nsScreen;
 class nsHistory;
 class nsGlobalWindowObserver;
 class nsGlobalWindow;
 class nsDOMWindowUtils;
 class nsIIdleService;
+struct nsGlobalNameStruct;
 struct nsIntSize;
 struct nsRect;
 
 class nsWindowSizes;
 
 namespace mozilla {
 class DOMEventTargetHelper;
 namespace dom {
@@ -495,16 +496,31 @@ public:
 
   static bool IsShowModalDialogEnabled(JSContext* /* unused */ = nullptr,
                                        JSObject* /* unused */ = nullptr);
 
   bool DoResolve(JSContext* aCx, JS::Handle<JSObject*> aObj,
                  JS::Handle<jsid> aId,
                  JS::MutableHandle<JSPropertyDescriptor> aDesc);
 
+private:
+  nsresult LookupComponentsShim(JSContext* aCx, JS::Handle<JSObject*> aGlobal,
+                                JS::MutableHandle<JSPropertyDescriptor> aDesc);
+  nsresult GetXPCProto(nsIXPConnect* aXPConnect, JSContext* cx,
+                       const nsGlobalNameStruct* aNameStruct,
+                       nsIXPConnectJSObjectHolder** aProto);
+  nsresult GlobalResolve(JSContext* aCx, JS::Handle<JSObject*> aObj,
+                         JS::Handle<jsid> aId,
+                         JS::MutableHandle<JSPropertyDescriptor> aDesc);
+  bool NameStructEnabled(JSContext* aCx, const nsAString& aName,
+                         const nsGlobalNameStruct& aNameStruct);
+  bool OldBindingConstructorEnabled(const nsGlobalNameStruct* aStruct,
+                                    JSContext* aCx);
+
+public:
   void GetOwnPropertyNames(JSContext* aCx, nsTArray<nsString>& aNames,
                            mozilla::ErrorResult& aRv);
 
   // Object Management
   static already_AddRefed<nsGlobalWindow> Create(nsGlobalWindow *aOuterWindow);
 
   static nsGlobalWindow *FromSupports(nsISupports *supports)
   {
