# HG changeset patch
# Parent 7d2cf91f30f6073aefc308e3b180b605a3bb9f32
# User Gregory Szorc <gps@mozilla.com>

diff --git a/testing/xpcshell/runxpcshelltests.py b/testing/xpcshell/runxpcshelltests.py
--- a/testing/xpcshell/runxpcshelltests.py
+++ b/testing/xpcshell/runxpcshelltests.py
@@ -3,43 +3,189 @@
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 import re, sys, os, os.path, logging, shutil, signal, math, time, traceback
 import xml.dom.minidom
 from glob import glob
 from optparse import OptionParser
-from subprocess import Popen, PIPE, STDOUT
 from tempfile import mkdtemp, gettempdir
 import manifestparser
 import mozinfo
 import random
 import socket
+import subprocess
 import time
 
 from automationutils import *
 
+from mozprocess.processhandler import ProcessHandlerMixin
+
 #TODO: replace this with json.loads when Python 2.6 is required.
 def parse_json(j):
     """
     Awful hack to parse a restricted subset of JSON strings into Python dicts.
     """
     return eval(j, {'true':True,'false':False,'null':None})
 
 """ Control-C handling """
 gotSIGINT = False
 def markGotSIGINT(signum, stackFrame):
     global gotSIGINT
     gotSIGINT = True
 
+
+class ProcessWrapper(object):
+    """Wrapper for interacting with processes.
+
+    The default implementation provides a facility for local processes. Derived
+    classes may support remote processes, etc.
+    """
+
+    def __init__(self, command, env=None, cwd=None, pass_thru=False,
+            timeout=120, on_output=None):
+        """Start a new process.
+
+        command is the command to invoke (typically a list with the program
+        name and its arguments.
+
+        env is a dict of environment variables to set on the runned process.
+
+        cwd is the directory in which to run the process.
+
+        pass_thru indicates whether process output should be sent directly to
+        the current process's stdout. This is used primarily for interactive
+        mode.
+
+        timeout is the maximum number of seconds this process can run for. It
+        is not enforced when pass_thru is True.
+
+        on_output defines a function to be called when output is received from
+        the process. It is only called when pass_thru is False.
+        """
+        command = wrapCommand(command)
+
+        self.pass_thru = pass_thru
+        self.finished = False
+        self.timed_out = False
+        self.return_code = None
+
+        # Environment variables used everywhere.
+        self._core_environment = {
+            
+        }
+
+        self._run(command, env, cwd)
+
+    def __del__(self):
+        """Ensure child processes are killed on destruction."""
+        self.kill()
+
+    def _run(self, command, env=None, cwd=None):
+        if self.pass_thru:
+            self.proc = subprocess.Popen(command, env=env, cwd=cwd)
+            self.pid = self.proc.pid
+        else:
+            def line_handler(line):
+                if on_output:
+                    on_output(line)
+
+            def on_timeout():
+                self.finished = True
+                self.timed_out = True
+
+            def on_finish():
+                self.finished = True
+
+            self.proc = ProcessHandlerMixin(command, env=env, cwd=cwd,
+                universal_newlines=True, processOutputLine=[line_handler],
+                onTimeout=[on_timeout], onFinish=[on_finish])
+            self.proc.run(timeout=timeout)
+            self.pid = self.proc.pid
+
+    def is_running(self):
+        if self.finished:
+            return False
+
+        if self.pass_thru:
+            return self.proc.poll() is not None
+
+        return self.proc.proc.poll() is not None
+
+    def kill(self):
+        if self.is_running():
+            return self.proc.kill()
+
+    def wait(self):
+        """Wait for the process to finish executing.
+
+        Returns the return code from the process.
+        """
+        if self.pass_thru:
+            stdout, stderr = self.proc.communicate()
+            self.output = stdout.splitlines()
+            self.return_code = self.proc.wait()
+            self.finished = True
+            return self.return_code
+
+        self.return_code = self.proc.wait()
+        self.finished = True
+        return self.return_code
+
+
+class XPCShellTestResult(object):
+    """Holds data about the result of an xpcshell test."""
+
+    RE_TEST_UNEXPECTED = re.compile('^((parent||child): )?TEST-UNEXPECTED-')
+    RE_SYNTAX_ERROR = re.compile(': SyntaxError:')
+    RE_CHILD_TEST_STARTED = re.compile('^child: CHILD-TEST-STARTED')
+    RE_CHILD_TEST_COMPLETED = re.compile('^child: CHILD-TEST-COMPLETED')
+
+    def __init__(self):
+        """Initialize a result from a WrappedProcess instance."""
+
+        self.return_code = None
+        self.raw_output = []
+
+        self.unexpected_count = 0
+        self.syntax_error_count = 0
+        self._child_test_count = 0
+
+    def add_output(self, line):
+        """Record a line of test output.
+
+        The line is parsed for errors and state and the result is updated
+        accordingly.
+        """
+        self.raw_output.append(line)
+
+        # Unexpected test pass or failures.
+        if self.RE_TEST_UNEXPECTED.match(line):
+            self.unexpected_count += 1
+
+        if self.RE_SYNTAX_ERROR.search(line):
+            self.syntax_error_count += 1
+
+        if self.RE_CHILD_TEST_STARTED.match(line):
+            self._child_test_count += 1
+
+        if self.RE_CHILD_TEST_COMPLETED.match(line):
+            self._child_test_count -= 1
+
+    def is_success(self):
+        return self.return_code == 0 and self.unexpected_count == 0 and \
+            self.syntax_error_count == 0 and self._child_test_count == 0
+
+
 class XPCShellTests(object):
 
     log = logging.getLogger()
     oldcwd = os.getcwd()
+    process_wrapper_class = ProcessWrapper
 
     def __init__(self, log=sys.stdout):
         """ Init logging and node status """
         handler = logging.StreamHandler(log)
         self.log.setLevel(logging.INFO)
         self.log.addHandler(handler)
         self.nodeProc = None
 
@@ -161,35 +307,16 @@
         """
         if self.interactive:
             self.xpcsRunArgs = [
             '-e', 'print("To start the test, type |_execute_test();|.");',
             '-i']
         else:
             self.xpcsRunArgs = ['-e', '_execute_test(); quit(0);']
 
-    def getPipes(self):
-        """
-          Determine the value of the stdout and stderr for the test.
-          Return value is a list (pStdout, pStderr).
-        """
-        if self.interactive:
-            pStdout = None
-            pStderr = None
-        else:
-            if (self.debuggerInfo and self.debuggerInfo["interactive"]):
-                pStdout = None
-                pStderr = None
-            else:
-                if sys.platform == 'os2emx':
-                    pStdout = None
-                else:
-                    pStdout = PIPE
-                pStderr = STDOUT
-        return pStdout, pStderr
 
     def buildXpcsCmd(self, testdir):
         """
           Load the root head.js file as the first file in our test path, before other head, test, and tail files.
           On a remote system, we overload this to add additional command line arguments, so this gets overloaded.
         """
         # - NOTE: if you rename/add any of the constants set here, update
         #   do_load_child_test_harness() in head.js
@@ -303,68 +430,30 @@
           On a remote system, this may be overloaded to use a remote filename and path structure
         """
         filename = "runxpcshelltests_leaks.log"
 
         leakLogFile = os.path.join(self.profileDir,  filename)
         self.env["XPCOM_MEM_LEAK_LOG"] = leakLogFile
         return leakLogFile
 
-    def launchProcess(self, cmd, stdout, stderr, env, cwd):
-        """
-          Simple wrapper to launch a process.
-          On a remote system, this is more complex and we need to overload this function.
-        """
-        cmd = wrapCommand(cmd)
-        proc = Popen(cmd, stdout=stdout, stderr=stderr,
-                    env=env, cwd=cwd)
-        return proc
-
-    def communicate(self, proc):
-        """
-          Simple wrapper to communicate with a process.
-          On a remote system, this is overloaded to handle remote process communication.
-        """
-        return proc.communicate()
-
-    def poll(self, proc):
-        """
-          Simple wrapper to check if a process has terminated.
-          On a remote system, this is overloaded to handle remote process communication.
-        """
-        return proc.poll()
-
-    def kill(self, proc):
-        """
-          Simple wrapper to kill a process.
-          On a remote system, this is overloaded to handle remote process communication.
-        """
-        return proc.kill()
-
     def removeDir(self, dirname):
         """
           Simple wrapper to remove (recursively) a given directory.
           On a remote system, we need to overload this to work on the remote filesystem.
         """
         shutil.rmtree(dirname)
 
     def verifyDirPath(self, dirname):
         """
           Simple wrapper to get the absolute path for a given directory name.
           On a remote system, we need to overload this to work on the remote filesystem.
         """
         return os.path.abspath(dirname)
 
-    def getReturnCode(self, proc):
-        """
-          Simple wrapper to get the return code for a given process.
-          On a remote system we overload this to work with the remote process management.
-        """
-        return proc.returncode
-
     def createLogFile(self, test, stdout, leakLogs):
         """
           For a given test and stdout buffer, create a log file.  also log any found leaks.
           On a remote system we have to fix the test name since it can contain directories.
         """
         try:
             f = open(test + ".log", "w")
             f.write(stdout)
@@ -418,22 +507,22 @@
         if nodeBin:
             self.log.info('Found node at %s' % (nodeBin,))
             myDir = os.path.split(os.path.abspath(__file__))[0]
             mozSpdyJs = os.path.join(myDir, 'moz-spdy', 'moz-spdy.js')
 
             if os.path.exists(mozSpdyJs):
                 # OK, we found our SPDY server, let's try to get it running
                 self.log.info('Found moz-spdy at %s' % (mozSpdyJs,))
-                stdout, stderr = self.getPipes()
                 try:
                     # We pipe stdin to node because the spdy server will exit when its
                     # stdin reaches EOF
-                    self.nodeProc = Popen([nodeBin, mozSpdyJs], stdin=PIPE, stdout=PIPE,
-                            stderr=STDOUT, env=self.env, cwd=os.getcwd())
+                    self.nodeProc = subprocess.Popen([nodeBin, mozSpdyJs],
+                        stdin=subprocess.PIPE, stdout=subprocess.PIPE,
+                        stderr=subprocess.STDOUT, env=self.env, cwd=os.getcwd())
 
                     # Check to make sure the server starts properly by waiting for it to
                     # tell us it's started
                     msg = self.nodeProc.stdout.readline()
                     if msg.startswith('SPDY server listening'):
                         nodeMozInfo['hasNode'] = True
                 except OSError, e:
                     # This occurs if the subprocess couldn't be started
@@ -743,19 +832,16 @@
         # test harness.
         appDirKey = None
         if "appname" in self.mozInfo:
             appDirKey = self.mozInfo["appname"] + "-appdir"
 
         # We have to do this before we build the test list so we know whether or
         # not to run tests that depend on having the node spdy server
         self.trySetupNode()
-
-        pStdout, pStderr = self.getPipes()
-
         self.buildTestList()
 
         if shuffle:
             random.shuffle(self.alltests)
 
         xunitResults = []
 
         for test in self.alltests:
@@ -765,18 +851,17 @@
 
             if self.testPath and name.find(self.testPath) == -1:
                 continue
 
             self.testCount += 1
 
             keep_going, xunitResult = self.run_test(test,
                 tests_root_dir=testsRootDir, app_dir_key=appDirKey,
-                interactive=interactive, verbose=verbose, pStdout=pStdout,
-                pStderr=pStderr, keep_going=keepGoing)
+                interactive=interactive, verbose=verbose, keep_going=keepGoing)
 
             xunitResults.append(xunitResult)
 
             if not keep_going:
                 break
 
         self.shutdownNode()
 
@@ -800,18 +885,17 @@
             self.log.error("TEST-UNEXPECTED-FAIL | Received SIGINT (control-C), so stopped run. " \
                            "(Use --keep-going to keep running tests after killing one with SIGINT)")
             return False
 
         return self.failCount == 0
 
 
     def run_test(self, test, tests_root_dir=None, app_dir_key=None,
-            interactive=False, verbose=False, pStdout=None, pStderr=None,
-            keep_going=False):
+            interactive=False, verbose=False, keep_going=False, timeout=120):
         """Run an individual xpcshell test."""
         global gotSIGINT
 
         name = test['path']
 
         xunit_result = {'name': test['name'], 'classname': 'xpcshell'}
 
         # The xUnit package is defined as the path component between the root
@@ -860,83 +944,79 @@
 
         args = self.xpcsRunArgs[:]
         if 'debug' in test:
             args.insert(0, '-d')
 
         completeCmd = cmdH + cmdT + args
 
         proc = None
+        result = XPCShellTestResult()
+
+        def print_output():
+            self.log.info('>>>>>>>')
+            for line in result.raw_output:
+                self.log.info(line)
+            self.log.info('<<<<<<<')
 
         try:
             self.log.info("TEST-INFO | %s | running test ..." % name)
             if verbose:
                 self.logCommand(name, completeCmd, test_dir)
 
+            def on_output(line):
+                result.add_output(line)
+
+                if verbose:
+                    self.log.info(line)
+
             startTime = time.time()
-            proc = self.launchProcess(completeCmd,
-                stdout=pStdout, stderr=pStderr, env=self.env, cwd=test_dir)
+            args = {
+                'env': self.env,
+                'cwd': test_dir,
+                'pass_thru': interactive or (self.debuggerInfo and \
+                    self.debuggerInfo['interactive']),
+                'on_output': on_output,
+                'timeout': timeout,
+            }
+
+            proc = self.process_wrapper_class(completeCmd, **args)
 
             if interactive:
                 self.log.info("TEST-INFO | %s | Process ID: %d" % (name, proc.pid))
 
             # Allow user to kill hung subprocess with SIGINT w/o killing this script
             # - don't move this line above launchProcess, or child will inherit the SIG_IGN
             signal.signal(signal.SIGINT, markGotSIGINT)
-            # |stderr == None| as |pStderr| was either |None| or redirected to |stdout|.
-            stdout, stderr = self.communicate(proc)
+            result.return_code = proc.wait()
             signal.signal(signal.SIGINT, signal.SIG_DFL)
 
             if interactive:
                 # Not sure what else to do here...
                 return True
 
-            def print_stdout(stdout):
-                """Print stdout line-by-line to avoid overflowing buffers."""
-                self.log.info(">>>>>>>")
-                if (stdout):
-                    for line in stdout.splitlines():
-                        self.log.info(line)
-                self.log.info("<<<<<<<")
-
-            result = not ((self.getReturnCode(proc) != 0) or
-                          # if do_throw or do_check failed
-                          (stdout and re.search("^((parent|child): )?TEST-UNEXPECTED-",
-                                                stdout, re.MULTILINE)) or
-                          # if syntax error in xpcshell file
-                          (stdout and re.search(": SyntaxError:", stdout,
-                                                re.MULTILINE)) or
-                          # if e10s test started but never finished (child process crash)
-                          (stdout and re.search("^child: CHILD-TEST-STARTED",
-                                                stdout, re.MULTILINE)
-                                  and not re.search("^child: CHILD-TEST-COMPLETED",
-                                                    stdout, re.MULTILINE)))
-
-            if result != expected:
-                failureType = "TEST-UNEXPECTED-%s" % ("FAIL" if expected else "PASS")
+            if result.is_success() != expected:
+                failure_type = "TEST-UNEXPECTED-%s" % ("FAIL" if expected else "PASS")
                 message = "%s | %s | test failed (with xpcshell return code: %d), see following log:" % (
-                              failureType, name, self.getReturnCode(proc))
+                              failure_type, name, result.return_code)
                 self.log.error(message)
-                print_stdout(stdout)
+                print_output()
                 self.failCount += 1
                 xunit_result["passed"] = False
 
                 xunit_result["failure"] = {
-                  "type": failureType,
+                  "type": failure_type,
                   "message": message,
-                  "text": stdout
+                  "text": '\n'.join(result.raw_output)
                 }
             else:
                 now = time.time()
                 timeTaken = (now - startTime) * 1000
                 xunit_result["time"] = now - startTime
                 self.log.info("TEST-%s | %s | test passed (time: %.3fms)" % ("PASS" if expected else "KNOWN-FAIL", name, timeTaken))
-                if verbose:
-                    print_stdout(stdout)
-
                 xunit_result["passed"] = True
 
                 if expected:
                     self.passCount += 1
                 else:
                     self.todoCount += 1
                     xunit_result["todo"] = True
 
@@ -960,28 +1040,28 @@
                 dumpLeakLog(log, True)
 
             if self.logfiles and stdout:
                 self.createLogFile(name, stdout, leakLogs)
 
         finally:
             # We can sometimes get here before the process has terminated, which would
             # cause removeDir() to fail - so check for the process & kill it it needed.
-            if proc and self.poll(proc) is None:
+            if proc and proc.is_running():
+                proc.kill()
                 message = "TEST-UNEXPECTED-FAIL | %s | Process still running after test!" % name
                 self.log.error(message)
-                print_stdout(stdout)
+                print_output()
                 self.failCount += 1
                 xunit_result["passed"] = False
                 xunit_result["failure"] = {
                   "type": "TEST-UNEXPECTED-FAIL",
                   "message": message,
                   "text": stdout
                 }
-                self.kill(proc)
 
 
             # We don't want to delete the profile when running check-interactive
             # or check-one.
             if self.profileDir and not self.interactive and not self.singleFile:
                 try:
                     self.removeDir(self.profileDir)
                 except Exception:
@@ -1012,16 +1092,17 @@
             xunit_result["time"] = "0.0"
             xunit_result["failure"] = {
                 "type": "SIGINT",
                 "message": "Received SIGINT",
                 "text": "Received SIGINT (control-C) during test execution."
             }
 
             self.log.error("TEST-UNEXPECTED-FAIL | Received SIGINT (control-C) during test execution")
+            print_output()
             if (keep_going):
                 gotSIGINT = False
             else:
                 return False, xunit_result
 
         return True, xunit_result
 
 
