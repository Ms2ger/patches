# HG changeset patch
# Parent db7c15d334b9460ed696d6722409066dba5dd8c4
# User Gregory Szorc <gps@mozilla.com>
Bug XXXXXX - Fix mach unit tests

diff --git a/python/mach/mach/test/common.py b/python/mach/mach/test/common.py
--- a/python/mach/mach/test/common.py
+++ b/python/mach/mach/test/common.py
@@ -1,17 +1,17 @@
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 from __future__ import unicode_literals
 
 import time
 
-from mach.base import (
+from mach.decorators import (
     CommandArgument,
     CommandProvider,
     Command,
 )
 
 import mach.test.common2 as common2
 
 
diff --git a/python/mach/mach/test/test_logger.py b/python/mach/mach/test/test_logger.py
--- a/python/mach/mach/test/test_logger.py
+++ b/python/mach/mach/test/test_logger.py
@@ -3,17 +3,17 @@
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 from __future__ import absolute_import, unicode_literals
 
 import logging
 import time
 import unittest
 
-from mach.logger import StructuredHumanFormatter
+from mach.logging import StructuredHumanFormatter
 
 
 class DummyLogger(logging.Logger):
     def __init__(self, cb):
         logging.Logger.__init__(self, 'test')
 
         self._cb = cb
 
@@ -24,17 +24,17 @@
 class TestStructuredHumanFormatter(unittest.TestCase):
     def test_non_ascii_logging(self):
         # Ensures the formatter doesn't choke when non-ASCII characters are
         # present in printed parameters.
         formatter = StructuredHumanFormatter(time.time())
 
         def on_record(record):
             result = formatter.format(record)
-            relevant = result[5:]
+            relevant = result[9:]
 
             self.assertEqual(relevant, 'Test: s\xe9curit\xe9')
 
         logger = DummyLogger(on_record)
 
         value = 's\xe9curit\xe9'
 
         logger.log(logging.INFO, 'Test: {utf}',
