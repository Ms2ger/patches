# HG changeset patch
# Parent bae692730546c4c808b2da63f82dfadce058d192
# User Gregory Szorc <gps@mozilla.com>
Bug 751795 - Part 4: Support for building the tree

This adds modules for building, running configure, and viewing compiler
warnings.

diff --git a/python/mach/mach/build.py b/python/mach/mach/build.py
new file mode 100644
--- /dev/null
+++ b/python/mach/mach/build.py
@@ -0,0 +1,53 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this file,
+# You can obtain one at http://mozilla.org/MPL/2.0/.
+
+from __future__ import unicode_literals
+
+from mach.base import ArgumentProvider
+from mozbuild.base import MozbuildObject
+from mozbuild.building.tiers import Tiers
+
+
+class Build(MozbuildObject, ArgumentProvider):
+    """Provides commands for interacting with the build system."""
+    def build(self):
+        """Builds the tree."""
+
+        from mozbuild.building.treebuilder import TreeBuilder
+        from mach.terminal import BuildTerminal
+
+        builder = self._spawn(TreeBuilder)
+        terminal = BuildTerminal(self.log_manager)
+
+        builder.build(on_update=terminal.update_progress)
+
+    def tier(self, tier=None, subtier=None):
+        """Perform an action on a specific tier."""
+
+        from mozbuild.building.treebuilder import TreeBuilder
+
+        builder = self._spawn(TreeBuilder)
+        builder.build_tier(tier, subtier)
+
+    @staticmethod
+    def populate_argparse(parser):
+        group = parser.add_parser('build',
+            help='Build the tree.')
+
+        group.set_defaults(cls=Build, method='build')
+
+        tiers = Tiers()
+
+        tier = parser.add_parser(
+            'tier',
+            help='Interacting with individual build tiers (ADVANCED).')
+
+        tier.add_argument('tier', choices=tiers.get_tiers(),
+            help='The tier to interact with.')
+
+        tier.add_argument('subtier', choices=tiers.get_actions(),
+            default='default', nargs='?',
+            help='Action to perform on tier.')
+
+        tier.set_defaults(cls=Build, method='tier')
diff --git a/python/mach/mach/configure.py b/python/mach/mach/configure.py
new file mode 100644
--- /dev/null
+++ b/python/mach/mach/configure.py
@@ -0,0 +1,31 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this file,
+# You can obtain one at http://mozilla.org/MPL/2.0/.
+
+# This module provides interfaces for interacting with configure.
+
+from __future__ import unicode_literals
+
+from mozbuild.base import MozbuildObject
+from mach.base import ArgumentProvider
+
+
+class Configure(MozbuildObject, ArgumentProvider):
+    """Provides commands for interacting with configure."""
+    def __init__(self, *args, **kwargs):
+        MozbuildObject.__init__(self, *args, **kwargs)
+
+    def configure(self):
+        from mozbuild.configuration.configure import Configure
+
+        c = self._spawn(Configure)
+
+        if not c.ensure_configure():
+            c.run_configure()
+
+    @staticmethod
+    def populate_argparse(parser):
+        group = parser.add_parser('configure',
+                                  help="Interact with autoconf.")
+
+        group.set_defaults(cls=Configure, method="configure")
diff --git a/python/mach/mach/main.py b/python/mach/mach/main.py
--- a/python/mach/mach/main.py
+++ b/python/mach/mach/main.py
@@ -14,23 +14,29 @@
 
 from mozbuild.base import BuildConfig
 from mozbuild.config import ConfigSettings
 from mozbuild.logger import LoggingManager
 
 # Import sub-command modules
 # TODO Bug 794509 do this via auto-discovery. Update README once this is
 # done.
+from mach.build import Build
+from mach.configure import Configure
 from mach.settings import Settings
 from mach.testing import Testing
+from mach.warnings import Warnings
 
 # Classes inheriting from ArgumentProvider that provide commands.
 HANDLERS = [
+    Build,
+    Configure,
     Settings,
     Testing,
+    Warnings,
 ]
 
 # Classes inheriting from ConfigProvider that provide settings.
 # TODO this should come from auto-discovery somehow.
 SETTINGS_PROVIDERS = [
     BuildConfig,
 ]
 
diff --git a/python/mach/mach/terminal.py b/python/mach/mach/terminal.py
--- a/python/mach/mach/terminal.py
+++ b/python/mach/mach/terminal.py
@@ -68,8 +68,166 @@
         self.fh.write(self.t.move_x(0))
 
     def clear(self):
         raise Exception('clear() must be implemented.')
 
     def draw(self):
         raise Exception('draw() must be implemented.')
 
+
+class BuildTierFooter(TerminalFooter):
+    # TODO grab these from build system properly.
+    TIERS = ['base', 'nspr', 'js', 'platform', 'app']
+    ACTIONS = ['default', 'export', 'libs', 'tools']
+
+    def __init__(self, terminal):
+        TerminalFooter.__init__(self, terminal)
+
+        self.tier = None
+        self.action = None
+        self.directories = {}
+
+    def clear(self):
+        self._clear_lines(1)
+
+    def draw(self):
+        # This seems to make the printed text from jumping between column 0 and
+        # 1. Not sure what the underlying cause of that is.
+        self.fh.write(self.t.move_x(0))
+
+        parts = [self.t.bold('TIER'), ':', ' ']
+
+        for tier in self.TIERS:
+            if tier == self.tier:
+                parts.extend([self.t.yellow(tier), ' '])
+            else:
+                parts.extend([tier, ' '])
+
+        parts.extend([self.t.bold('ACTION'), ':', ' '])
+        for action in self.ACTIONS:
+            if action == self.action:
+                parts.extend([self.t.yellow(action), ' '])
+            else:
+                parts.extend([action, ' '])
+
+        in_progress = 0
+        finished = 0
+        total = 0
+        names = set()
+
+        for name, state in self.directories.iteritems():
+            total += 1
+
+            if state['start_time'] is None:
+                pass
+            elif state['start_time'] and state['finish_time'] is None:
+                in_progress += 1
+                names.add(name)
+            elif state['finish_time']:
+                finished += 1
+            else:
+                raise Exception('Unknown directory state: %s' % state)
+
+        if total > 0:
+            parts.extend([self.t.bold('DIRECTORIES'), ': '])
+            parts.append('%02d/%02d' % (finished, total))
+            parts.append(' ')
+
+            if in_progress > 0:
+                parts.extend(['(', self.t.magenta(' '.join(names)), ')'])
+
+        line = ''.join(parts)
+        self.fh.write(line)
+
+
+class BuildTerminal(object):
+    """The terminal displayed during builds."""
+    def __init__(self, log_manager):
+        self.footer = None
+
+        terminal = log_manager.terminal
+
+        if not terminal:
+            return
+
+        self.t = terminal
+        self.footer = BuildTierFooter(terminal)
+
+        handler = LoggingHandler()
+        handler.setFormatter(log_manager.terminal_formatter)
+        handler.footer = self.footer
+
+        log_manager.replace_terminal_handler(handler)
+
+    def __del__(self):
+        if self.footer:
+            self.footer.clear()
+
+    def write_line(self, line):
+        if self.footer:
+            self.footer.clear()
+
+        print(line)
+
+        if self.footer:
+            self.footer.draw()
+
+    def refresh(self):
+        if not self.footer:
+            return
+
+        self.footer.clear()
+        self.footer.draw()
+
+    def draw_directory_update(self, action, directory, state):
+        if action == 'directory_start':
+            parts = ['-' * 6, '     ', self.footer.tier, self.footer.action,
+                directory, 'started', '-' * 80]
+            line = ' '.join(parts)
+
+            self.write_line(self.t.green(line[0:min(80, self.t.width)]))
+            return
+
+        if action != 'directory_finish':
+            self.refresh()
+            return
+
+        elapsed = state['finish_time'] - state['start_time']
+
+        parts = [
+            '-' * 6,
+            '%.2fs' % elapsed,
+            '%s %s %s finished' % (self.footer.tier, self.footer.action,
+                directory),
+            '',
+        ]
+
+        width = self.t.width
+        if width > 80:
+            width = 80
+
+        msg = ' '.join(parts)
+        msg += '-' * (width - len(msg))
+
+        self.write_line(self.t.magenta(msg))
+
+    def update_progress(self, build=None, action=None, directory=None):
+        if not self.footer or build.tier is None:
+            return
+
+        self.footer.tier = build.tier
+
+        subtier = build.action
+
+        if not subtier:
+            subtier = 'default'
+
+        self.footer.action = subtier
+        self.footer.directories = build.directories
+
+        if action in ('directory_start', 'directory_finish'):
+            self.draw_directory_update(action, directory,
+                    build.directories[directory])
+            return
+
+        # Force a redraw.
+        self.refresh()
diff --git a/python/mach/mach/warnings.py b/python/mach/mach/warnings.py
new file mode 100644
--- /dev/null
+++ b/python/mach/mach/warnings.py
@@ -0,0 +1,85 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this file,
+# You can obtain one at http://mozilla.org/MPL/2.0/.
+
+from __future__ import unicode_literals
+
+import operator
+import os
+
+from mach.base import ArgumentProvider
+from mozbuild.base import MozbuildObject
+
+
+class Warnings(MozbuildObject, ArgumentProvider):
+    """Provide commands for inspecting warnings."""
+    def __init__(self, *args, **kwargs):
+        MozbuildObject.__init__(self, *args, **kwargs)
+
+    @property
+    def database_path(self):
+        return self._get_state_filename('warnings.json')
+
+    @property
+    def database(self):
+        from mozbuild.compilation.warnings import WarningsDatabase
+
+        path = self.database_path
+
+        database = WarningsDatabase()
+
+        if os.path.exists(path):
+            database.load_from_file(path)
+
+        return database
+
+    def summary(self, report=None):
+        database = self.database
+
+        type_counts = database.type_counts
+        sorted_counts = sorted(type_counts.iteritems(),
+            key=operator.itemgetter(1))
+
+        total = 0
+        for k, v in sorted_counts:
+            print '%d\t%s' % (v, k)
+            total += v
+
+        print '%d\tTotal' % total
+
+    def list(self, report=None):
+        database = self.database
+
+        by_name = sorted(database.warnings)
+
+        for warning in by_name:
+            filename = warning['filename']
+
+            if filename.startswith(self.topsrcdir):
+                filename = filename[len(self.topsrcdir) + 1:]
+
+            if warning['column'] is not None:
+                print '%s:%d:%d [%s] %s' % (filename, warning['line'],
+                    warning['column'], warning['flag'], warning['message'])
+            else:
+                print '%s:%d [%s] %s' % (filename, warning['line'],
+                    warning['flag'], warning['message'])
+
+    @staticmethod
+    def populate_argparse(parser):
+        summary = parser.add_parser('warnings-summary',
+            help='Show a summary of compiler warnings.')
+
+        summary.add_argument('report', default=None, nargs='?',
+            help='Warnings report to display. If not defined, show '
+                 'the most recent report')
+
+        summary.set_defaults(cls=Warnings, method='summary', report=None)
+
+        lst = parser.add_parser('warnings-list',
+            help='Show a list of compiler warnings')
+        lst.add_argument('report', default=None, nargs='?',
+            help='Warnings report to display. If not defined, show '
+                 'the most recent report.')
+
+        lst.set_defaults(cls=Warnings, method='list', report=None)
