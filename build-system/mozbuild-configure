# HG changeset patch
# Parent 69e2050596981adc77b7d8e920599a4afed78dd1
# User Gregory Szorc <gps@mozilla.com>
Bug 780329 - Part 7: Add configure module to mozbuild

diff --git a/python/mozbuild/mozbuild/configuration.py b/python/mozbuild/mozbuild/configuration.py
new file mode 100644
--- /dev/null
+++ b/python/mozbuild/mozbuild/configuration.py
@@ -0,0 +1,155 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+from __future__ import unicode_literals
+
+import os
+
+from glob import glob
+
+from mach.mixin.process import ProcessExecutionMixin
+
+from which import (
+    WhichError,
+    which,
+)
+
+
+class ConfigureException(Exception):
+    """Represents an error that occurred during configuration."""
+
+
+class ConfigurationManager(ProcessExecutionMixin):
+    """Manages the configuration phase of building the tree.
+
+    Configuration mainly revolves around running autoconf and configure. It
+    also involves some basic sanity testing.
+
+    A lot of the logic in this file was ported from client.mk.
+    """
+
+    CONFIGURE_DIRS = ['.', 'js/src']
+
+    AUTOCONF_DEPENDS_PATHS = ['aclocal.m4', 'js/src/aclocal.m4']
+    AUTOCONF_DEPENDS_GLOBS = ['build/autoconf/*.m4']
+
+    CONFIGURE_DEPENDS_PATHS = [
+        'allmakefiles.sh',
+        'nsprpub/configure',
+        'config/milestone.txt',
+        'js/src/config/milestone.txt',
+        'browser/config/version.txt',
+        'build/virtualenv/packages.txt',
+        'build/virtualenv/populate_virtualenv.py',
+    ]
+
+    CONFIGURE_DEPENDS_GLOBS = ['*/confvars.sh']
+
+    def __init__(self, topsrcdir, topobjdir):
+        assert os.path.isabs(topsrcdir)
+        assert os.path.isabs(topobjdir)
+
+        self.topsrcdir = topsrcdir
+
+    @property
+    def autoconf213(self):
+        """The path to the autoconf 2.13 binary."""
+
+        for b in ('autoconf-2.13', 'autoconf2.13', 'autoconf213'):
+            try:
+                return which(b)
+            except WhichError:
+                continue
+
+        # Try Frink, which may not be in the $PATH. (bug 793953)
+        try:
+            fink = which('fink')
+
+            path = os.path.normpath(os.path.join(fink, '..', '..', 'lib',
+                'autoconf2.13', 'bin', 'autoconf'))
+
+            if os.path.exists(path):
+                return path
+
+        except WhichError:
+            pass
+
+        raise ConfigureException('Unable to find autoconf2.13.')
+
+    @property
+    def configure_paths(self):
+        """An iterable of configure scripts generated by autoconf."""
+        return [os.path.join(self.topsrcdir, p, 'configure') for p in
+            self.CONFIGURE_DIRS]
+
+    @property
+    def configure_in_paths(self):
+        """An iterable of configure.in scripts."""
+        return [p + '.in' for p in self.configure_paths]
+
+    @property
+    def autoconf_dependencies(self):
+        """The set of files that trigger a new autoconf run."""
+        for p in self.configure_in_paths:
+            yield p
+
+        for p in self.AUTOCONF_DEPENDS_PATHS:
+            yield os.path.join(self.topsrcdir, p)
+
+        for g in self.AUTOCONF_DEPENDS_GLOBS:
+            for p in glob(os.path.join(self.topsrcdir, g)):
+                yield p
+
+    @property
+    def configure_dependencies(self):
+        """The set of files that trigger a new configure run."""
+        for p in self.CONFIGURE_DEPENDS_PATHS:
+            yield os.path.join(self.topsrcdir, p)
+
+        for g in self.CONFIGURE_DEPENDS_GLOBS:
+            for p in glob(os.path.join(self.topsrcdir, g)):
+                yield p
+
+    def ensure_configured(self):
+        """Ensure configure has executed and the tree is in good state.
+
+        If everything is up to date, this is a no-op. If anything needs to
+        happen, this performs it. This is the primary API exposed by this
+        class.
+        """
+        pass
+
+    def ensure_autoconf(self):
+        """Ensure autoconf's output is up-to-date.
+
+        This is called by ensure_configure(). You likely should be calling
+        ensure_configured() instead.
+        """
+        for p in self.configure_paths:
+            if os.path.exists(p):
+                continue
+
+            self._run_autoconf_in_directory(os.path.dirname(p))
+
+        # TODO finish implementing
+
+
+    def run_autoconf(self):
+        for p in self.CONFIGURE_DIRS:
+            self._run_autoconf_in_directory(p)
+
+    def _run_autoconf_in_directory(self, relpath):
+        path = os.path.join(self.topsrcdir, relpath)
+
+        output = []
+        def line_handler(line):
+            output.append(line)
+
+        status = self.run_process([self.autoconf213], cwd=path,
+            require_unix_environment=True, ensure_exit_code=False,
+            line_handler=line_handler)
+
+        if status != 0:
+            raise ConfigureException('Error running autoconf: %s' %
+                '\n'.join(output))
diff --git a/python/mozbuild/mozbuild/configuration/__init__.py b/python/mozbuild/mozbuild/configuration/__init__.py
new file mode 100644
diff --git a/python/mozbuild/mozbuild/configuration/configure.py b/python/mozbuild/mozbuild/configuration/configure.py
new file mode 100644
--- /dev/null
+++ b/python/mozbuild/mozbuild/configuration/configure.py
@@ -0,0 +1,122 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this file,
+# You can obtain one at http://mozilla.org/MPL/2.0/.
+
+# This file defines routines that interact with autoconf and configure.
+
+from __future__ import unicode_literals
+
+import glob
+import logging
+import os
+import sys
+import which
+
+from mozbuild.base import MozbuildObject
+
+
+class Configure(MozbuildObject):
+    @property
+    def configure_mtime(self):
+        """Returns the modified time of the generated configure script.
+
+        There are actually multiple configure scripts. We stat them both and
+        choose the oldest time.
+        """
+        return min(os.path.getmtime(p) for p in self.configure_scripts)
+
+    def run_configure(self):
+        """Runs configure."""
+
+        self._ensure_objdir_exists()
+
+        args = [os.path.join(self.topsrcdir, 'configure')]
+
+        env = {}
+
+        # configure calls out to things that expect MAKE to be defined.
+        # We must use the same heuristic as Base._run_make to determine which
+        # path to specify.
+        if self._is_windows():
+            pymake = os.path.join(self.topsrcdir, 'build', 'pymake', 'make.py')
+
+            # We need the Python path in the environment variable and to use
+            # UNIX-style paths, even on Windows, otherwise things break.
+            env['MAKE'] = ' '.join([sys.executable, pymake]).replace('\\', '/')
+        else:
+            for binary in ['gmake', 'make']:
+                try:
+                    env['MAKE'] = which.which(binary)
+                    break
+                except which.WhichError:
+                    continue
+
+            assert 'MAKE' in env
+
+        self._run_command_in_objdir(args=args, explicit_env=env,
+                require_unix_environment=True,
+                log_name='configure_output')
+
+        # Not sure why this is here. But, it's in client.mk.
+        os.utime(self._get_objdir_path('Makefile'), None)
+
+    def ensure_configure(self):
+        """Ensures configure is in a good state and run if out of date.
+
+        This should be called in the course of normal build activities to
+        ensure the build environment is up to date.
+
+        This emulates logic from client.mk.
+
+        Returns boolean indicating whether configure was actually executed.
+        """
+        self.ensure_autoconf()
+
+        makefile_path = self._get_objdir_path('Makefile')
+
+        if not os.path.exists(makefile_path):
+            self.run_configure()
+            return True
+
+        output_mtime = os.path.getmtime(makefile_path)
+
+        for dependency in self.configure_dependencies:
+            dependency_mtime = os.path.getmtime(dependency)
+
+            if output_mtime < dependency_mtime:
+                self.run_configure()
+                return True
+
+        return False
+
+    def ensure_autoconf(self):
+        """Ensures autoconf's output is up-to-date.
+
+        This is called by ensure_configure() and probably has little relevance
+        outside of this module.
+        """
+        did_autoconf = False
+        for configure in self.configure_scripts:
+            if not os.path.exists(configure):
+                self.log(logging.DEBUG, 'trigger_autoconf_no_configure',
+                    {'configure_path': configure},
+                    'Running autoconf because configure missing: '
+                        '{configure_path}')
+                self.run_autoconf(os.path.dirname(configure))
+                did_autoconf = True
+
+        if did_autoconf:
+            return
+
+        configure_mtime = self.configure_mtime
+
+        for dependency in self.autoconf_dependencies:
+            dependency_mtime = os.path.getmtime(dependency)
+
+            if dependency_mtime > configure_mtime:
+                self.log(logging.DEBUG, 'trigger_autoconfs_mtime',
+                    {'dependency': dependency},
+                    'Running autoconf because dependency is newer than '
+                        'configure: {dependency}')
+                self.run_autoconfs()
+                return
