# HG changeset patch
# Parent 20bbf73921f4a9092189efb8ecde905939551786
# User Gregory Szorc <gps@mozilla.com>
Bug XXXXXX - Part 0: Clean up code style in xpcshell's head.js

Removing trailing whitespace. let not var. Braces around loops and
conditionals.

diff --git a/testing/xpcshell/head.js b/testing/xpcshell/head.js
--- a/testing/xpcshell/head.js
+++ b/testing/xpcshell/head.js
@@ -5,24 +5,24 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 /*
  * This file contains common code that is loaded before each test file(s).
  * See http://developer.mozilla.org/en/docs/Writing_xpcshell-based_unit_tests
  * for more information.
  */
 
-var _quit = false;
-var _passed = true;
-var _tests_pending = 0;
-var _passedChecks = 0, _falsePassedChecks = 0;
-var _todoChecks = 0;
-var _cleanupFunctions = [];
-var _pendingTimers = [];
-var _profileInitialized = false;
+let _quit = false;
+let _passed = true;
+let _tests_pending = 0;
+let _passedChecks = 0, _falsePassedChecks = 0;
+let _todoChecks = 0;
+let _cleanupFunctions = [];
+let _pendingTimers = [];
+let _profileInitialized = false;
 
 function _dump(str) {
   let start = /^TEST-/.test(str) ? "\n" : "";
   if (typeof _XPCSHELL_PROCESS == "undefined") {
     dump(start + str);
   } else {
     dump(start + _XPCSHELL_PROCESS + ": " + str);
   }
@@ -37,17 +37,17 @@
 }
 
 // Determine if we're running on parent or child
 let runningInParent = true;
 try {
   runningInParent = Components.classes["@mozilla.org/xre/runtime;1"].
                     getService(Components.interfaces.nsIXULRuntime).processType
                     == Components.interfaces.nsIXULRuntime.PROCESS_TYPE_DEFAULT;
-} 
+}
 catch (e) { }
 
 try {
   if (runningInParent) {
     let prefs = Components.classes["@mozilla.org/preferences-service;1"]
                 .getService(Components.interfaces.nsIPrefBranch);
 
     // disable necko IPC security checks for xpcshell, as they lack the
@@ -97,17 +97,17 @@
 
   if (typeof func !== "function")
     do_throw("string callbacks no longer accepted; use a function!");
 
   this._func = func;
   this._start = Date.now();
   this._delay = delay;
 
-  var timer = Components.classes["@mozilla.org/timer;1"]
+  let timer = Components.classes["@mozilla.org/timer;1"]
                         .createInstance(Components.interfaces.nsITimer);
   timer.initWithCallback(this, delay + _timerFuzz, timer.TYPE_ONE_SHOT);
 
   // Keep timer alive until it fires
   _pendingTimers.push(timer);
 }
 _Timer.prototype = {
   QueryInterface: function(iid) {
@@ -119,41 +119,41 @@
   },
 
   notify: function(timer) {
     _pendingTimers.splice(_pendingTimers.indexOf(timer), 1);
 
     // The current nsITimer implementation can undershoot, but even if it
     // couldn't, paranoia is probably a virtue here given the potential for
     // random orange on tinderboxen.
-    var end = Date.now();
-    var elapsed = end - this._start;
+    let end = Date.now();
+    let elapsed = end - this._start;
     if (elapsed >= this._delay) {
       try {
         this._func.call(null);
       } catch (e) {
         do_throw("exception thrown from do_timeout callback: " + e);
       }
       return;
     }
 
     // Timer undershot, retry with a little overshoot to try to avoid more
     // undershoots.
-    var newDelay = this._delay - elapsed;
+    let newDelay = this._delay - elapsed;
     do_timeout(newDelay, this._func);
   }
 };
 
 function _do_main() {
   if (_quit)
     return;
 
   _dump("TEST-INFO | (xpcshell/head.js) | running event loop\n");
 
-  var thr = Components.classes["@mozilla.org/thread-manager;1"]
+  let thr = Components.classes["@mozilla.org/thread-manager;1"]
                       .getService().currentThread;
 
   while (!_quit)
     thr.processNextEvent(true);
 
   while (thr.hasPendingEvents())
     thr.processNextEvent(true);
 }
@@ -352,27 +352,28 @@
       }
     }
   }
 
   // _TAIL_FILES is dynamically defined by <runxpcshelltests.py>.
   _load_files(_TAIL_FILES);
 
   // Execute all of our cleanup functions.
-  var func;
-  while ((func = _cleanupFunctions.pop()))
+  let func;
+  while ((func = _cleanupFunctions.pop())) {
     func();
+  }
 
   // Restore idle service to avoid leaks.
   _fakeIdleService.deactivate();
 
   if (!_passed)
     return;
 
-  var truePassedChecks = _passedChecks - _falsePassedChecks;
+  let truePassedChecks = _passedChecks - _falsePassedChecks;
   if (truePassedChecks > 0) {
     _dump("TEST-PASS | (xpcshell/head.js) | " + truePassedChecks + " (+ " +
             _falsePassedChecks + ") check(s) passed\n");
     _dump("TEST-INFO | (xpcshell/head.js) | " + _todoChecks +
             " check(s) todo\n");
   } else {
     // ToDo: switch to TEST-UNEXPECTED-FAIL when all tests have been updated. (Bug 496443)
     _dump("TEST-INFO | (xpcshell/head.js) | No (+ " + _falsePassedChecks + ") checks actually run\n");
@@ -394,18 +395,18 @@
 
 
 /************** Functions to be used from the tests **************/
 
 /**
  * Prints a message to the output log.
  */
 function do_print(msg) {
-  var caller_stack = Components.stack.caller;
-  _dump("TEST-INFO | " + caller_stack.filename + " | " + msg + "\n");
+  let stack = Components.stack.caller;
+  _dump("TEST-INFO | " + stack.filename + " | " + msg + "\n");
 }
 
 /**
  * Calls the given function at least the specified number of milliseconds later.
  * The callback will not undershoot the given time, but it might overshoot --
  * don't expect precision!
  *
  * @param delay : uint
@@ -414,17 +415,17 @@
  *   the function to call
  */
 function do_timeout(delay, func) {
   new _Timer(func, Number(delay));
 }
 
 function do_execute_soon(callback) {
   do_test_pending();
-  var tm = Components.classes["@mozilla.org/thread-manager;1"]
+  let tm = Components.classes["@mozilla.org/thread-manager;1"]
                      .getService(Components.interfaces.nsIThreadManager);
 
   tm.mainThread.dispatch({
     run: function() {
       try {
         callback();
       } catch (e) {
         // do_check failures are already logged and set _quit to true and throw
@@ -447,76 +448,79 @@
       finally {
         do_test_finished();
       }
     }
   }, Components.interfaces.nsIThread.DISPATCH_NORMAL);
 }
 
 function do_throw(text, stack) {
-  if (!stack)
+  if (!stack) {
     stack = Components.stack.caller;
+  }
 
   _passed = false;
   _dump("TEST-UNEXPECTED-FAIL | " + stack.filename + " | " + text +
         " - See following stack:\n");
-  var frame = Components.stack;
+  let frame = Components.stack;
   while (frame != null) {
     _dump(frame + "\n");
     frame = frame.caller;
   }
 
   _do_quit();
   throw Components.results.NS_ERROR_ABORT;
 }
 
 function do_throw_todo(text, stack) {
-  if (!stack)
+  if (!stack) {
     stack = Components.stack.caller;
+  }
 
   _passed = false;
   _dump("TEST-UNEXPECTED-PASS | " + stack.filename + " | " + text +
         " - See following stack:\n");
-  var frame = Components.stack;
+  let frame = Components.stack;
   while (frame != null) {
     _dump(frame + "\n");
     frame = frame.caller;
   }
 
   _do_quit();
   throw Components.results.NS_ERROR_ABORT;
 }
 
 function do_report_unexpected_exception(ex, text) {
-  var caller_stack = Components.stack.caller;
+  let stack = Components.stack.caller;
   text = text ? text + " - " : "";
 
   _passed = false;
-  _dump("TEST-UNEXPECTED-FAIL | " + caller_stack.filename + " | " + text +
+  _dump("TEST-UNEXPECTED-FAIL | " + stack.filename + " | " + text +
         "Unexpected exception " + ex + ", see following stack:\n" + ex.stack +
         "\n");
 
   _do_quit();
   throw Components.results.NS_ERROR_ABORT;
 }
 
 function do_note_exception(ex, text) {
-  var caller_stack = Components.stack.caller;
+  let stack = Components.stack.caller;
   text = text ? text + " - " : "";
 
-  _dump("TEST-INFO | " + caller_stack.filename + " | " + text +
+  _dump("TEST-INFO | " + stack.filename + " | " + text +
         "Swallowed exception " + ex + ", see following stack:\n" + ex.stack +
         "\n");
 }
 
 function _do_check_neq(left, right, stack, todo) {
-  if (!stack)
+  if (!stack) {
     stack = Components.stack.caller;
+  }
 
-  var text = left + " != " + right;
+  let text = left + " != " + right;
   if (left == right) {
     if (!todo) {
       do_throw(text, stack);
     } else {
       ++_todoChecks;
       _dump("TEST-KNOWN-FAIL | " + stack.filename + " | [" + stack.name +
             " : " + stack.lineNumber + "] " + text +"\n");
     }
@@ -527,25 +531,27 @@
             stack.lineNumber + "] " + text + "\n");
     } else {
       do_throw_todo(text, stack);
     }
   }
 }
 
 function do_check_neq(left, right, stack) {
-  if (!stack)
+  if (!stack) {
     stack = Components.stack.caller;
+  }
 
   _do_check_neq(left, right, stack, false);
 }
 
 function todo_check_neq(left, right, stack) {
-  if (!stack)
-      stack = Components.stack.caller;
+  if (!stack) {
+    stack = Components.stack.caller;
+  }
 
   _do_check_neq(left, right, stack, true);
 }
 
 function do_report_result(passed, text, stack, todo) {
   if (passed) {
     if (todo) {
       do_throw_todo(text, stack);
@@ -561,61 +567,68 @@
             " : " + stack.lineNumber + "] " + text +"\n");
     } else {
       do_throw(text, stack);
     }
   }
 }
 
 function _do_check_eq(left, right, stack, todo) {
-  if (!stack)
+  if (!stack) {
     stack = Components.stack.caller;
+  }
 
-  var text = left + " == " + right;
+  let text = left + " == " + right;
   do_report_result(left == right, text, stack, todo);
 }
 
 function do_check_eq(left, right, stack) {
-  if (!stack)
+  if (!stack) {
     stack = Components.stack.caller;
+  }
 
   _do_check_eq(left, right, stack, false);
 }
 
 function todo_check_eq(left, right, stack) {
-  if (!stack)
-      stack = Components.stack.caller;
+  if (!stack) {
+    stack = Components.stack.caller;
+  }
 
   _do_check_eq(left, right, stack, true);
 }
 
 function do_check_true(condition, stack) {
-  if (!stack)
+  if (!stack) {
     stack = Components.stack.caller;
+  }
 
   do_check_eq(condition, true, stack);
 }
 
 function todo_check_true(condition, stack) {
-  if (!stack)
+  if (!stack) {
     stack = Components.stack.caller;
+  }
 
   todo_check_eq(condition, true, stack);
 }
 
 function do_check_false(condition, stack) {
-  if (!stack)
+  if (!stack) {
     stack = Components.stack.caller;
+  }
 
   do_check_eq(condition, false, stack);
 }
 
 function todo_check_false(condition, stack) {
-  if (!stack)
+  if (!stack) {
     stack = Components.stack.caller;
+  }
 
   todo_check_eq(condition, false, stack);
 }
 
 function do_check_null(condition, stack=Components.stack.caller) {
   do_check_eq(condition, null, stack);
 }
 
@@ -686,19 +699,19 @@
  * - We don't check the prototype chain.
  * However, if you know the values are, say, JSON, which is pretty
  * well-behaved, and if you want to tolerate additional properties
  * appearing on the JSON for backward-compatibility, then do_check_matches
  * is ideal. If you do want to be more careful, you can use function
  * patterns to implement more stringent checks.
  */
 function do_check_matches(pattern, value, stack=Components.stack.caller, todo=false) {
-  var matcher = pattern_matcher(pattern);
-  var text = "VALUE: " + uneval(value) + "\nPATTERN: " + uneval(pattern) + "\n";
-  var diagnosis = []
+  let matcher = pattern_matcher(pattern);
+  let text = "VALUE: " + uneval(value) + "\nPATTERN: " + uneval(pattern) + "\n";
+  let diagnosis = []
   if (matcher(value, diagnosis)) {
     do_report_result(true, "value matches pattern:\n" + text, stack, todo);
   } else {
     text = ("value doesn't match pattern:\n" +
             text +
             "DIAGNOSIS: " +
             format_pattern_match_failure(diagnosis[0]) + "\n");
     do_report_result(false, text, stack, todo);
@@ -722,32 +735,32 @@
     if (diagnosis) {
       diagnosis[0] = reason;
     }
     return false;
   }
   if (typeof pattern == "function") {
     return pattern;
   } else if (typeof pattern == "object" && pattern) {
-    var matchers = [[p, pattern_matcher(pattern[p])] for (p in pattern)];
+    let matchers = [[p, pattern_matcher(pattern[p])] for (p in pattern)];
     // Kludge: include 'length', if not enumerable. (If it is enumerable,
     // we picked it up in the array comprehension, above.
     ld = Object.getOwnPropertyDescriptor(pattern, 'length');
     if (ld && !ld.enumerable) {
       matchers.push(['length', pattern_matcher(pattern.length)])
     }
     return function (value, diagnosis) {
       if (!(value && typeof value == "object")) {
         return explain(diagnosis, "value not object");
       }
       for (let [p, m] of matchers) {
-        var element_diagnosis = [];
-        if (!(p in value && m(value[p], element_diagnosis))) {
+        let elementDiagnosis = [];
+        if (!(p in value && m(value[p], elementDiagnosis))) {
           return explain(diagnosis, { property:p,
-                                      diagnosis:element_diagnosis[0] });
+                                      diagnosis:elementDiagnosis[0] });
         }
       }
       return true;
     };
   } else if (pattern === undefined) {
     return function(value) { return true; };
   } else {
     return function (value, diagnosis) {
@@ -757,17 +770,17 @@
       return true;
     };
   }
 }
 
 // Format an explanation for a pattern match failure, as stored in the
 // second argument to a matching function.
 function format_pattern_match_failure(diagnosis, indent="") {
-  var a;
+  let a;
   if (!diagnosis) {
     a = "Matcher did not explain reason for mismatch.";
   } else if (typeof diagnosis == "string") {
     a = diagnosis;
   } else if (diagnosis.property) {
     a = "Property " + uneval(diagnosis.property) + " of object didn't match:\n";
     a += format_pattern_match_failure(diagnosis.diagnosis, indent + "  ");
   }
@@ -803,17 +816,17 @@
         else
           lf.append(bits[i]);
       }
     }
 
     if (!allowNonexistent && !lf.exists()) {
       // Not using do_throw(): caller will continue.
       _passed = false;
-      var stack = Components.stack.caller;
+      let stack = Components.stack.caller;
       _dump("TEST-UNEXPECTED-FAIL | " + stack.filename + " | [" +
             stack.name + " : " + stack.lineNumber + "] " + lf.path +
             " does not exist\n");
     }
 
     return lf;
   }
   catch (ex) {
@@ -824,17 +837,17 @@
 }
 
 // do_get_cwd() isn't exactly self-explanatory, so provide a helper
 function do_get_cwd() {
   return do_get_file("");
 }
 
 function do_load_manifest(path) {
-  var lf = do_get_file(path);
+  let lf = do_get_file(path);
   const nsIComponentRegistrar = Components.interfaces.nsIComponentRegistrar;
   do_check_true(Components.manager instanceof nsIComponentRegistrar);
   // Previous do_check_true() is not a test check.
   ++_falsePassedChecks;
   Components.manager.autoRegister(lf);
 }
 
 /**
@@ -853,26 +866,26 @@
       break;
 
     default:
       do_throw("type: expected application/xhtml+xml, application/xml or text/xml," +
                  " got '" + aType + "'",
                Components.stack.caller);
   }
 
-  var lf = do_get_file(aPath);
+  let lf = do_get_file(aPath);
   const C_i = Components.interfaces;
   const parserClass = "@mozilla.org/xmlextras/domparser;1";
   const streamClass = "@mozilla.org/network/file-input-stream;1";
-  var stream = Components.classes[streamClass]
+  let stream = Components.classes[streamClass]
                          .createInstance(C_i.nsIFileInputStream);
   stream.init(lf, -1, -1, C_i.nsIFileInputStream.CLOSE_ON_EOF);
-  var parser = Components.classes[parserClass]
+  let parser = Components.classes[parserClass]
                          .createInstance(C_i.nsIDOMParser);
-  var doc = parser.parseFromStream(stream, null, lf.fileSize, aType);
+  let doc = parser.parseFromStream(stream, null, lf.fileSize, aType);
   parser = null;
   stream = null;
   lf = null;
   return doc;
 }
 
 /**
  * Registers a function that will run when the test harness is done running all
@@ -972,66 +985,66 @@
   if (!runningInParent) {
     do_throw("run_test_in_child cannot be called from child!");
   }
 
   // Allow to be called multiple times, but only run once
   if (typeof do_load_child_test_harness.alreadyRun != "undefined")
     return;
   do_load_child_test_harness.alreadyRun = 1;
-  
-  function addQuotes (str)  { 
-    return '"' + str + '"'; 
+
+  function addQuotes (str)  {
+    return '"' + str + '"';
   }
-  var quoted_head_files = _HEAD_FILES.map(addQuotes);
-  var quoted_tail_files = _TAIL_FILES.map(addQuotes);
+  let quotedHeadFiles = _HEAD_FILES.map(addQuotes);
+  let quotedTailFiles = _TAIL_FILES.map(addQuotes);
 
   _XPCSHELL_PROCESS = "parent";
 
   let command =
         "const _HEAD_JS_PATH='" + _HEAD_JS_PATH + "'; "
       + "const _HTTPD_JS_PATH='" + _HTTPD_JS_PATH + "'; "
-      + "const _HEAD_FILES=[" + quoted_head_files.join() + "];"
-      + "const _TAIL_FILES=[" + quoted_tail_files.join() + "];"
+      + "const _HEAD_FILES=[" + quotedHeadFiles.join() + "];"
+      + "const _TAIL_FILES=[" + quotedTailfiles.join() + "];"
       + "const _XPCSHELL_PROCESS='child';";
 
   if (this._TESTING_MODULES_DIR) {
     normalized = this._TESTING_MODULES_DIR.replace('\\', '\\\\', 'g');
     command += "const _TESTING_MODULES_DIR='" + normalized + "'; ";
   }
 
   command += "load(_HEAD_JS_PATH);";
 
   sendCommand(command);
 }
 
 /**
  * Runs an entire xpcshell unit test in a child process (rather than in chrome,
  * which is the default).
  *
- * This function returns immediately, before the test has completed.  
+ * This function returns immediately, before the test has completed.
  *
  * @param testFile
  *        The name of the script to run.  Path format same as load().
  * @param optionalCallback.
  *        Optional function to be called (in parent) when test on child is
  *        complete.  If provided, the function must call do_test_finished();
  */
-function run_test_in_child(testFile, optionalCallback) 
+function run_test_in_child(testFile, optionalCallback)
 {
-  var callback = (typeof optionalCallback == 'undefined') ? 
+  let callback = (typeof optionalCallback == 'undefined') ?
                     do_test_finished : optionalCallback;
 
   do_load_child_test_harness();
 
-  var testPath = do_get_file(testFile).path.replace(/\\/g, "/");
+  let testPath = do_get_file(testFile).path.replace(/\\/g, "/");
   do_test_pending();
   sendCommand("_dump('CHILD-TEST-STARTED'); "
               + "const _TEST_FILE=['" + testPath + "']; _execute_test(); "
-              + "_dump('CHILD-TEST-COMPLETED');", 
+              + "_dump('CHILD-TEST-COMPLETED');",
               callback);
 }
 
 
 /**
  * Add a test function to the list of tests that are to be run asynchronously.
  *
  * Each test function must call run_next_test() when it's done. Test files
