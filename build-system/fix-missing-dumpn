# HG changeset patch
# Parent 64c7f02be16cc59fea75bde81b82f5de37918025
# User Gregory Szorc <gps@mozilla.com>

diff --git a/netwerk/test/httpserver/httpd.js b/netwerk/test/httpserver/httpd.js
--- a/netwerk/test/httpserver/httpd.js
+++ b/netwerk/test/httpserver/httpd.js
@@ -43,16 +43,24 @@
 /*
  * An implementation of an HTTP server both as a loadable script and as an XPCOM
  * component.  See the accompanying README file for user documentation on
  * httpd.js.
  */
 
 Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
 
+var EXPORTED_SYMBOLS = ['getServer'];
+
+/**
+ * Overwrite both dump functions because we do not wanna have this output for Mozmill
+ */
+function dump() {}
+function dumpn() {}
+
 const Cc = Components.classes;
 const Ci = Components.interfaces;
 const Cr = Components.results;
 const Cu = Components.utils;
 const CC = Components.Constructor;
 
 const PR_UINT32_MAX = Math.pow(2, 32) - 1;
 
@@ -399,16 +407,18 @@
    * creation.
    */
   this._connections = {};
 }
 nsHttpServer.prototype =
 {
   classID: Components.ID("{54ef6f81-30af-4b1d-ac55-8ba811293e41}"),
 
+  dumpn: dumpn,
+
   // NSISERVERSOCKETLISTENER
 
   /**
    * Processes an incoming request coming in on the given socket and contained
    * in the given transport.
    *
    * @param socket : nsIServerSocket
    *   the socket through which the request was served
@@ -473,30 +483,31 @@
    *   the socket being closed
    * @param status : nsresult
    *   the reason the socket stopped listening (NS_BINDING_ABORTED if the server
    *   was stopped using nsIHttpServer.stop)
    * @see nsIServerSocketListener.onStopListening
    */
   onStopListening: function(socket, status)
   {
-    dumpn(">>> shutting down server on port " + socket.port);
+    this.dumpn(">>> shutting down server on port " + socket.port);
     this._socketClosed = true;
     if (!this._hasOpenConnections())
     {
-      dumpn("*** no open connections, notifying async from onStopListening");
+      this.dumpn(
+        "*** no open connections, notifying async from onStopListening");
 
       // Notify asynchronously so that any pending teardown in stop() has a
       // chance to run first.
       var self = this;
       var stopEvent =
         {
           run: function()
           {
-            dumpn("*** _notifyStopped async callback");
+            this.dumpn("*** _notifyStopped async callback");
             self._notifyStopped();
           }
         };
       gThreadManager.currentThread
                     .dispatch(stopEvent, Ci.nsIThread.DISPATCH_NORMAL);
     }
   },
 
@@ -560,17 +571,17 @@
       throw Cr.NS_ERROR_NULL_POINTER;
     if (!this._socket)
       throw Cr.NS_ERROR_UNEXPECTED;
 
     this._stopCallback = typeof callback === "function"
                        ? callback
                        : function() { callback.onStopped(); };
 
-    dumpn(">>> stopping listening on port " + this._socket.port);
+    this.dumpn(">>> stopping listening on port " + this._socket.port);
     this._socket.close();
     this._socket = null;
 
     // We can't have this identity any more, and the port on which we're running
     // this server now could be meaningless the next time around.
     this._identity._teardown();
 
     this._doQuit = false;
@@ -782,34 +793,29 @@
     NS_ASSERT(this._connections[connection.number] === connection,
               "connection number mismatch?  " +
               this._connections[connection.number]);
     delete this._connections[connection.number];
 
     // Fire a pending server-stopped notification if it's our responsibility.
     if (!this._hasOpenConnections() && this._socketClosed)
       this._notifyStopped();
-    // Bug 508125: Add a GC here else we'll use gigabytes of memory running
-    // mochitests. We can't rely on xpcshell doing an automated GC, as that
-    // would interfere with testing GC stuff...
-    gc();
   },
 
   /**
    * Requests that the server be shut down when possible.
    */
   _requestQuit: function()
   {
     dumpn(">>> requesting a quit");
     dumpStack();
     this._doQuit = true;
   }
 };
 
-
 //
 // RFC 2396 section 3.2.2:
 //
 // host        = hostname | IPv4address
 // hostname    = *( domainlabel "." ) toplabel [ "." ]
 // domainlabel = alphanum | alphanum *( alphanum | "-" ) alphanum
 // toplabel    = alpha | alpha *( alphanum | "-" ) alphanum
 // IPv4address = 1*digit "." 1*digit "." 1*digit "." 1*digit
@@ -1838,68 +1844,48 @@
  * Calculates the number of characters before the first CRLF pair in array, or
  * -1 if the array contains no CRLF pair.
  *
  * @param array : Array
  *   an array of numbers in the range [0, 256), each representing a single
  *   character; the first CRLF is the lowest index i where
  *   |array[i] == "\r".charCodeAt(0)| and |array[i+1] == "\n".charCodeAt(0)|,
  *   if such an |i| exists, and -1 otherwise
- * @param start : uint
- *   start index from which to begin searching in array
  * @returns int
  *   the index of the first CRLF if any were present, -1 otherwise
  */
-function findCRLF(array, start)
+function findCRLF(array)
 {
-  for (var i = array.indexOf(CR, start); i >= 0; i = array.indexOf(CR, i + 1))
+  for (var i = array.indexOf(CR); i >= 0; i = array.indexOf(CR, i + 1))
   {
     if (array[i + 1] == LF)
       return i;
   }
   return -1;
 }
 
 
 /**
  * A container which provides line-by-line access to the arrays of bytes with
  * which it is seeded.
  */
 function LineData()
 {
   /** An array of queued bytes from which to get line-based characters. */
   this._data = [];
-
-  /** Start index from which to search for CRLF. */
-  this._start = 0;
 }
 LineData.prototype =
 {
   /**
    * Appends the bytes in the given array to the internal data cache maintained
    * by this.
    */
   appendBytes: function(bytes)
   {
-    var count = bytes.length;
-    var quantum = 262144; // just above half SpiderMonkey's argument-count limit
-    if (count < quantum)
-    {
-      Array.prototype.push.apply(this._data, bytes);
-      return;
-    }
-
-    // Large numbers of bytes may cause Array.prototype.push to be called with
-    // more arguments than the JavaScript engine supports.  In that case append
-    // bytes in fixed-size amounts until all bytes are appended.
-    for (var start = 0; start < count; start += quantum)
-    {
-      var slice = bytes.slice(start, Math.min(start + quantum, count));
-      Array.prototype.push.apply(this._data, slice);
-    }
+    Array.prototype.push.apply(this._data, bytes);
   },
 
   /**
    * Removes and returns a line of data, delimited by CRLF, from this.
    *
    * @param out
    *   an object whose "value" property will be set to the first line of text
    *   present in this, sans CRLF, if this contains a full CRLF-delimited line
@@ -1907,41 +1893,33 @@
    *   is undefined
    * @returns boolean
    *   true if a full line of data could be read from the data in this, false
    *   otherwise
    */
   readLine: function(out)
   {
     var data = this._data;
-    var length = findCRLF(data, this._start);
+    var length = findCRLF(data);
     if (length < 0)
-    {
-      this._start = data.length;
       return false;
-    }
-
-    // Reset for future lines.
-    this._start = 0;
 
     //
     // We have the index of the CR, so remove all the characters, including
-    // CRLF, from the array with splice, and convert the removed array
-    // (excluding the trailing CRLF characters) into the corresponding string.
+    // CRLF, from the array with splice, and convert the removed array into the
+    // corresponding string, from which we then strip the trailing CRLF.
     //
-    var leading = data.splice(0, length + 2);
-    var quantum = 262144;
-    var line = "";
-    for (var start = 0; start < length; start += quantum)
-    {
-      var slice = leading.slice(start, Math.min(start + quantum, length));
-      line += String.fromCharCode.apply(null, slice);
-    }
-
-    out.value = line;
+    // Getting the line in this matter acknowledges that substring is an O(1)
+    // operation in SpiderMonkey because strings are immutable, whereas two
+    // splices, both from the beginning of the data, are less likely to be as
+    // cheap as a single splice plus two extra character conversions.
+    //
+    var line = String.fromCharCode.apply(null, data.splice(0, length + 2));
+    out.value = line.substring(0, length);
+
     return true;
   },
 
   /**
    * Removes the bytes currently within this and returns them in an array.
    *
    * @returns Array
    *   the bytes within this when this method is called
@@ -2629,20 +2607,16 @@
         s.importFunction(function getObjectState(k, callback)
         {
           callback(self._getObjectState(k));
         });
         s.importFunction(function setObjectState(k, v)
         {
           self._setObjectState(k, v);
         });
-        s.importFunction(function registerPathHandler(p, h)
-        {
-          self.registerPathHandler(p, h);
-        });
 
         // Make it possible for sjs files to access their location
         this._setState(path, "__LOCATION__", file.path);
 
         try
         {
           // Alas, the line number in errors dumped to console when calling the
           // request handler is simply an offset from where we load the SJS file.
@@ -5145,18 +5119,20 @@
   {
     if (!this._bag)
       this._bag = new WritablePropertyBag();
   }
 };
 
 
 // XPCOM trappings
-
-var NSGetFactory = XPCOMUtils.generateNSGetFactory([nsHttpServer]);
+if (XPCOMUtils.generateNSGetFactory)
+  var NSGetFactory = XPCOMUtils.generateNSGetFactory([nsHttpServer]);
+else
+  var NSGetModule = XPCOMUtils.generateNSGetModule([nsHttpServer]);
 
 /**
  * Creates a new HTTP server listening for loopback traffic on the given port,
  * starts it, and runs the server until the server processes a shutdown request,
  * spinning an event loop so that events posted by the server's socket are
  * processed.
  *
  * This method is primarily intended for use in running this script from within
@@ -5204,8 +5180,25 @@
     thread.processNextEvent(true);
 
   // get rid of any pending requests
   while (thread.hasPendingEvents())
     thread.processNextEvent(true);
 
   DEBUG = false;
 }
+
+function getServer (port, basePath) {
+  if (basePath) {
+    var lp = Cc["@mozilla.org/file/local;1"]
+               .createInstance(Ci.nsILocalFile);
+    lp.initWithPath(basePath);
+   }
+
+   var srv = new nsHttpServer();
+   if (lp)
+     srv.registerDirectory("/", lp);
+   srv.registerContentType("sjs", SJS_TYPE);
+   srv.identity.setPrimary("http", "localhost", port);
+   srv._port = port;
+
+   return srv;
+}
diff --git a/services/sync/tps/extensions/mozmill/resource/stdlib/httpd.js b/services/sync/tps/extensions/mozmill/resource/stdlib/httpd.js
--- a/services/sync/tps/extensions/mozmill/resource/stdlib/httpd.js
+++ b/services/sync/tps/extensions/mozmill/resource/stdlib/httpd.js
@@ -407,16 +407,18 @@
    * creation.
    */
   this._connections = {};
 }
 nsHttpServer.prototype =
 {
   classID: Components.ID("{54ef6f81-30af-4b1d-ac55-8ba811293e41}"),
 
+  dumpn: dumpn,
+
   // NSISERVERSOCKETLISTENER
 
   /**
    * Processes an incoming request coming in on the given socket and contained
    * in the given transport.
    *
    * @param socket : nsIServerSocket
    *   the socket through which the request was served
@@ -481,30 +483,31 @@
    *   the socket being closed
    * @param status : nsresult
    *   the reason the socket stopped listening (NS_BINDING_ABORTED if the server
    *   was stopped using nsIHttpServer.stop)
    * @see nsIServerSocketListener.onStopListening
    */
   onStopListening: function(socket, status)
   {
-    dumpn(">>> shutting down server on port " + socket.port);
+    this.dumpn(">>> shutting down server on port " + socket.port);
     this._socketClosed = true;
     if (!this._hasOpenConnections())
     {
-      dumpn("*** no open connections, notifying async from onStopListening");
+      this.dumpn(
+        "*** no open connections, notifying async from onStopListening");
 
       // Notify asynchronously so that any pending teardown in stop() has a
       // chance to run first.
       var self = this;
       var stopEvent =
         {
           run: function()
           {
-            dumpn("*** _notifyStopped async callback");
+            this.dumpn("*** _notifyStopped async callback");
             self._notifyStopped();
           }
         };
       gThreadManager.currentThread
                     .dispatch(stopEvent, Ci.nsIThread.DISPATCH_NORMAL);
     }
   },
 
@@ -568,17 +571,17 @@
       throw Cr.NS_ERROR_NULL_POINTER;
     if (!this._socket)
       throw Cr.NS_ERROR_UNEXPECTED;
 
     this._stopCallback = typeof callback === "function"
                        ? callback
                        : function() { callback.onStopped(); };
 
-    dumpn(">>> stopping listening on port " + this._socket.port);
+    this.dumpn(">>> stopping listening on port " + this._socket.port);
     this._socket.close();
     this._socket = null;
 
     // We can't have this identity any more, and the port on which we're running
     // this server now could be meaningless the next time around.
     this._identity._teardown();
 
     this._doQuit = false;
@@ -803,17 +806,16 @@
   _requestQuit: function()
   {
     dumpn(">>> requesting a quit");
     dumpStack();
     this._doQuit = true;
   }
 };
 
-
 //
 // RFC 2396 section 3.2.2:
 //
 // host        = hostname | IPv4address
 // hostname    = *( domainlabel "." ) toplabel [ "." ]
 // domainlabel = alphanum | alphanum *( alphanum | "-" ) alphanum
 // toplabel    = alpha | alpha *( alphanum | "-" ) alphanum
 // IPv4address = 1*digit "." 1*digit "." 1*digit "." 1*digit
diff --git a/testing/mozmill/mozmill/mozmill/extension/resource/stdlib/httpd.js b/testing/mozmill/mozmill/mozmill/extension/resource/stdlib/httpd.js
--- a/testing/mozmill/mozmill/mozmill/extension/resource/stdlib/httpd.js
+++ b/testing/mozmill/mozmill/mozmill/extension/resource/stdlib/httpd.js
@@ -407,16 +407,18 @@
    * creation.
    */
   this._connections = {};
 }
 nsHttpServer.prototype =
 {
   classID: Components.ID("{54ef6f81-30af-4b1d-ac55-8ba811293e41}"),
 
+  dumpn: dumpn,
+
   // NSISERVERSOCKETLISTENER
 
   /**
    * Processes an incoming request coming in on the given socket and contained
    * in the given transport.
    *
    * @param socket : nsIServerSocket
    *   the socket through which the request was served
@@ -481,30 +483,31 @@
    *   the socket being closed
    * @param status : nsresult
    *   the reason the socket stopped listening (NS_BINDING_ABORTED if the server
    *   was stopped using nsIHttpServer.stop)
    * @see nsIServerSocketListener.onStopListening
    */
   onStopListening: function(socket, status)
   {
-    dumpn(">>> shutting down server on port " + socket.port);
+    this.dumpn(">>> shutting down server on port " + socket.port);
     this._socketClosed = true;
     if (!this._hasOpenConnections())
     {
-      dumpn("*** no open connections, notifying async from onStopListening");
+      this.dumpn(
+        "*** no open connections, notifying async from onStopListening");
 
       // Notify asynchronously so that any pending teardown in stop() has a
       // chance to run first.
       var self = this;
       var stopEvent =
         {
           run: function()
           {
-            dumpn("*** _notifyStopped async callback");
+            this.dumpn("*** _notifyStopped async callback");
             self._notifyStopped();
           }
         };
       gThreadManager.currentThread
                     .dispatch(stopEvent, Ci.nsIThread.DISPATCH_NORMAL);
     }
   },
 
@@ -568,17 +571,17 @@
       throw Cr.NS_ERROR_NULL_POINTER;
     if (!this._socket)
       throw Cr.NS_ERROR_UNEXPECTED;
 
     this._stopCallback = typeof callback === "function"
                        ? callback
                        : function() { callback.onStopped(); };
 
-    dumpn(">>> stopping listening on port " + this._socket.port);
+    this.dumpn(">>> stopping listening on port " + this._socket.port);
     this._socket.close();
     this._socket = null;
 
     // We can't have this identity any more, and the port on which we're running
     // this server now could be meaningless the next time around.
     this._identity._teardown();
 
     this._doQuit = false;
@@ -803,17 +806,16 @@
   _requestQuit: function()
   {
     dumpn(">>> requesting a quit");
     dumpStack();
     this._doQuit = true;
   }
 };
 
-
 //
 // RFC 2396 section 3.2.2:
 //
 // host        = hostname | IPv4address
 // hostname    = *( domainlabel "." ) toplabel [ "." ]
 // domainlabel = alphanum | alphanum *( alphanum | "-" ) alphanum
 // toplabel    = alpha | alpha *( alphanum | "-" ) alphanum
 // IPv4address = 1*digit "." 1*digit "." 1*digit "." 1*digit
