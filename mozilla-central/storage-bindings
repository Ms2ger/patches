From: Ms2ger <ms2ger@gmail.com>

diff --git a/dom/base/nsDOMClassInfo.cpp b/dom/base/nsDOMClassInfo.cpp
--- a/dom/base/nsDOMClassInfo.cpp
+++ b/dom/base/nsDOMClassInfo.cpp
@@ -181,19 +181,16 @@
 #include "nsIDOMNSXPathExpression.h"
 #include "nsIDOMXPathNSResolver.h"
 #include "nsIDOMXPathResult.h"
 #include "nsIDOMMozBrowserFrame.h"
 
 #include "nsIDOMSVGLength.h"
 #include "nsIDOMSVGNumber.h"
 
-// Storage includes
-#include "DOMStorage.h"
-
 // Drag and drop
 #include "nsIDOMDataTransfer.h"
 
 // Geolocation
 #include "nsIDOMGeoPositionCoords.h"
 
 // User media
 #ifdef MOZ_MEDIA_NAVIGATOR
@@ -584,31 +581,16 @@ static nsDOMClassInfoData sClassInfoData
 
   NS_DEFINE_CLASSINFO_DATA(XPathExpression, nsDOMGenericSH,
                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
   NS_DEFINE_CLASSINFO_DATA(XPathNSResolver, nsDOMGenericSH,
                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
   NS_DEFINE_CLASSINFO_DATA(XPathResult, nsDOMGenericSH,
                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 
-  // WhatWG Storage
-
-  // mrbkap says we don't need WANT_ADDPROPERTY on Storage objects
-  // since a call to addProperty() is always followed by a call to
-  // setProperty(), except in the case when a getter or setter is set
-  // for a property. But we don't care about getters or setters here.
-  NS_DEFINE_CLASSINFO_DATA(Storage, nsStorage2SH,
-                           DOM_DEFAULT_SCRIPTABLE_FLAGS |
-                           nsIXPCScriptable::WANT_NEWRESOLVE |
-                           nsIXPCScriptable::WANT_GETPROPERTY |
-                           nsIXPCScriptable::WANT_SETPROPERTY |
-                           nsIXPCScriptable::WANT_DELPROPERTY |
-                           nsIXPCScriptable::DONT_ENUM_STATIC_PROPS |
-                           nsIXPCScriptable::WANT_NEWENUMERATE)
-
   NS_DEFINE_CLASSINFO_DATA(Blob, nsDOMGenericSH,
                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
   NS_DEFINE_CLASSINFO_DATA(File, nsDOMGenericSH,
                            DOM_DEFAULT_SCRIPTABLE_FLAGS)
 
   NS_DEFINE_CLASSINFO_DATA(ModalContentWindow, nsWindowSH,
                            DEFAULT_SCRIPTABLE_FLAGS |
                            WINDOW_SCRIPTABLE_FLAGS)
@@ -1524,20 +1506,16 @@ nsDOMClassInfo::Init()
   DOM_CLASSINFO_MAP_BEGIN(XPathNSResolver, nsIDOMXPathNSResolver)
     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXPathNSResolver)
   DOM_CLASSINFO_MAP_END
 
   DOM_CLASSINFO_MAP_BEGIN(XPathResult, nsIDOMXPathResult)
     DOM_CLASSINFO_MAP_ENTRY(nsIDOMXPathResult)
   DOM_CLASSINFO_MAP_END
 
-  DOM_CLASSINFO_MAP_BEGIN(Storage, nsIDOMStorage)
-    DOM_CLASSINFO_MAP_ENTRY(nsIDOMStorage)
-  DOM_CLASSINFO_MAP_END
-
   DOM_CLASSINFO_MAP_BEGIN(Blob, nsIDOMBlob)
     DOM_CLASSINFO_MAP_ENTRY(nsIDOMBlob)
   DOM_CLASSINFO_MAP_END
 
   DOM_CLASSINFO_MAP_BEGIN(File, nsIDOMFile)
     DOM_CLASSINFO_MAP_ENTRY(nsIDOMBlob)
     DOM_CLASSINFO_MAP_ENTRY(nsIDOMFile)
   DOM_CLASSINFO_MAP_END
@@ -5558,228 +5536,16 @@ nsCSSRuleListSH::GetItemAt(nsISupports *
     NS_ABORT_IF_FALSE(list_qi == list, "Uh, fix QI!");
   }
 #endif
 
   return list->GetItemAt(aIndex, aResult);
 }
 
 
-// Storage2SH
-
-// One reason we need a newResolve hook is that in order for
-// enumeration of storage object keys to work the keys we're
-// enumerating need to exist on the storage object for the JS engine
-// to find them.
-
-NS_IMETHODIMP
-nsStorage2SH::NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
-                         JSObject *obj, jsid aId, uint32_t flags,
-                         JSObject **objp, bool *_retval)
-{
-  JS::Rooted<jsid> id(cx, aId);
-  if (ObjectIsNativeWrapper(cx, obj)) {
-    return NS_OK;
-  }
-
-  JS::Rooted<JSObject*> realObj(cx, wrapper->GetJSObject());
-
-  JSAutoCompartment ac(cx, realObj);
-
-  // First check to see if the property is defined on our prototype,
-  // after converting id to a string if it's an integer.
-
-  JS::Rooted<JSString*> jsstr(cx, IdToString(cx, id));
-  if (!jsstr) {
-    return NS_OK;
-  }
-
-  JS::Rooted<JSObject*> proto(cx);
-  if (!::JS_GetPrototype(cx, realObj, proto.address())) {
-    return NS_ERROR_FAILURE;
-  }
-  JSBool hasProp;
-
-  if (proto &&
-      (::JS_HasPropertyById(cx, proto, id, &hasProp) &&
-       hasProp)) {
-    // We found the property we're resolving on the prototype,
-    // nothing left to do here then.
-
-    return NS_OK;
-  }
-
-  // We're resolving property that doesn't exist on the prototype,
-  // check if the key exists in the storage object.
-
-  nsCOMPtr<nsIDOMStorage> storage(do_QueryWrappedNative(wrapper));
-
-  nsDependentJSString depStr;
-  NS_ENSURE_TRUE(depStr.init(cx, jsstr), NS_ERROR_UNEXPECTED);
-
-  // GetItem() will return null if the caller can't access the session
-  // storage item.
-  nsAutoString data;
-  nsresult rv = storage->GetItem(depStr, data);
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  if (!DOMStringIsNull(data)) {
-    if (!::JS_DefinePropertyById(cx, realObj, id, JSVAL_VOID, nullptr,
-                                 nullptr, JSPROP_ENUMERATE)) {
-      return NS_ERROR_FAILURE;
-    }
-
-    *objp = realObj;
-  }
-
-  return NS_OK;
-}
-
-NS_IMETHODIMP
-nsStorage2SH::GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
-                          JSObject *aObj, jsid aId, jsval *vp, bool *_retval)
-{
-  JS::Rooted<JSObject*> obj(cx, aObj);
-  JS::Rooted<jsid> id(cx, aId);
-  nsCOMPtr<nsIDOMStorage> storage(do_QueryWrappedNative(wrapper));
-  NS_ENSURE_TRUE(storage, NS_ERROR_UNEXPECTED);
-
-  JSString* key = IdToString(cx, id);
-  NS_ENSURE_TRUE(key, NS_ERROR_UNEXPECTED);
-
-  nsDependentJSString keyStr;
-  NS_ENSURE_TRUE(keyStr.init(cx, key), NS_ERROR_UNEXPECTED);
-
-  // For native wrappers, do not get random names on storage objects.
-  if (ObjectIsNativeWrapper(cx, obj)) {
-    return NS_ERROR_NOT_AVAILABLE;
-  }
-
-  nsAutoString val;
-  nsresult rv = storage->GetItem(keyStr, val);
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  if (DOMStringIsNull(val)) {
-    // No such key.
-    *vp = JSVAL_VOID;
-  } else {
-    JSString* str =
-      JS_NewUCStringCopyN(cx, static_cast<const jschar *>(val.get()),
-                          val.Length());
-    NS_ENSURE_TRUE(str, NS_ERROR_OUT_OF_MEMORY);
-
-    *vp = STRING_TO_JSVAL(str);
-  }
-
-  return NS_SUCCESS_I_DID_SOMETHING;
-}
-
-NS_IMETHODIMP
-nsStorage2SH::SetProperty(nsIXPConnectWrappedNative *wrapper,
-                          JSContext *cx, JSObject *obj, jsid aId,
-                          jsval *vp, bool *_retval)
-{
-  JS::Rooted<jsid> id(cx, aId);
-  nsCOMPtr<nsIDOMStorage> storage(do_QueryWrappedNative(wrapper));
-  NS_ENSURE_TRUE(storage, NS_ERROR_UNEXPECTED);
-
-  JSString *key = IdToString(cx, id);
-  NS_ENSURE_TRUE(key, NS_ERROR_UNEXPECTED);
-
-  nsDependentJSString keyStr;
-  NS_ENSURE_TRUE(keyStr.init(cx, key), NS_ERROR_UNEXPECTED);
-
-  JSString *value = ::JS_ValueToString(cx, *vp);
-  NS_ENSURE_TRUE(value, NS_ERROR_UNEXPECTED);
-
-  nsDependentJSString valueStr;
-  NS_ENSURE_TRUE(valueStr.init(cx, value), NS_ERROR_UNEXPECTED);
-
-  nsresult rv = storage->SetItem(keyStr, valueStr);
-  if (NS_SUCCEEDED(rv)) {
-    rv = NS_SUCCESS_I_DID_SOMETHING;
-  }
-
-  return rv;
-}
-
-NS_IMETHODIMP
-nsStorage2SH::DelProperty(nsIXPConnectWrappedNative *wrapper,
-                          JSContext *cx, JSObject *obj, jsid aId,
-                          bool *_retval)
-{
-  JS::Rooted<jsid> id(cx, aId);
-  nsCOMPtr<nsIDOMStorage> storage(do_QueryWrappedNative(wrapper));
-  NS_ENSURE_TRUE(storage, NS_ERROR_UNEXPECTED);
-
-  JSString *key = IdToString(cx, id);
-  NS_ENSURE_TRUE(key, NS_ERROR_UNEXPECTED);
-
-  nsDependentJSString keyStr;
-  NS_ENSURE_TRUE(keyStr.init(cx, key), NS_ERROR_UNEXPECTED);
-
-  nsresult rv = storage->RemoveItem(keyStr);
-  if (NS_FAILED(rv)) {
-    return rv;
-  }
-
-  *_retval = true;
-  return NS_SUCCESS_I_DID_SOMETHING;
-}
-
-
-NS_IMETHODIMP
-nsStorage2SH::NewEnumerate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
-                           JSObject *obj, uint32_t enum_op, jsval *statep,
-                           jsid *idp, bool *_retval)
-{
-  if (enum_op == JSENUMERATE_INIT || enum_op == JSENUMERATE_INIT_ALL) {
-    nsCOMPtr<nsPIDOMStorage> storage(do_QueryWrappedNative(wrapper));
-
-    // XXXndeakin need to free the keys afterwards
-    nsTArray<nsString> *keys = storage->GetKeys();
-    NS_ENSURE_TRUE(keys, NS_ERROR_OUT_OF_MEMORY);
-
-    *statep = PRIVATE_TO_JSVAL(keys);
-
-    if (idp) {
-      *idp = INT_TO_JSID(keys->Length());
-    }
-    return NS_OK;
-  }
-
-  nsTArray<nsString> *keys =
-    (nsTArray<nsString> *)JSVAL_TO_PRIVATE(*statep);
-
-  if (enum_op == JSENUMERATE_NEXT && keys->Length() != 0) {
-    nsString& key = keys->ElementAt(0);
-    JSString *str =
-      JS_NewUCStringCopyN(cx, reinterpret_cast<const jschar *>
-                                              (key.get()),
-                          key.Length());
-    NS_ENSURE_TRUE(str, NS_ERROR_OUT_OF_MEMORY);
-
-    JS_ValueToId(cx, STRING_TO_JSVAL(str), idp);
-
-    keys->RemoveElementAt(0);
-
-    return NS_OK;
-  }
-
-  // destroy the keys array if we have no keys or if we're done
-  NS_ABORT_IF_FALSE(enum_op == JSENUMERATE_DESTROY ||
-                    (enum_op == JSENUMERATE_NEXT && keys->Length() == 0),
-                    "Bad call from the JS engine");
-  delete keys;
-
-  *statep = JSVAL_NULL;
-
-  return NS_OK;
-}
-
 // nsIDOMEventListener::HandleEvent() 'this' converter helper
 
 NS_INTERFACE_MAP_BEGIN(nsEventListenerThisTranslator)
   NS_INTERFACE_MAP_ENTRY(nsIXPCFunctionThisTranslator)
   NS_INTERFACE_MAP_ENTRY(nsISupports)
 NS_INTERFACE_MAP_END
 
 
diff --git a/dom/base/nsDOMClassInfo.h b/dom/base/nsDOMClassInfo.h
--- a/dom/base/nsDOMClassInfo.h
+++ b/dom/base/nsDOMClassInfo.h
@@ -777,49 +777,16 @@ class nsDOMTouchListSH : public nsArrayS
 
   public:
   static nsIClassInfo* doCreate(nsDOMClassInfoData* aData)
   {
     return new nsDOMTouchListSH(aData);
   }
 };
 
-// WebApps Storage helpers
-
-class nsStorage2SH : public nsDOMGenericSH
-{
-protected:
-  nsStorage2SH(nsDOMClassInfoData* aData) : nsDOMGenericSH(aData)
-  {
-  }
-
-  virtual ~nsStorage2SH()
-  {
-  }
-
-  NS_IMETHOD NewResolve(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
-                        JSObject *obj, jsid id, uint32_t flags,
-                        JSObject **objp, bool *_retval) MOZ_OVERRIDE;
-  NS_IMETHOD SetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
-                         JSObject *obj, jsid id, jsval *vp, bool *_retval) MOZ_OVERRIDE;
-  NS_IMETHOD GetProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
-                         JSObject *obj, jsid id, jsval *vp, bool *_retval) MOZ_OVERRIDE;
-  NS_IMETHOD DelProperty(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
-                         JSObject *obj, jsid id, bool *_retval) MOZ_OVERRIDE;
-  NS_IMETHOD NewEnumerate(nsIXPConnectWrappedNative *wrapper, JSContext *cx,
-                          JSObject *obj, uint32_t enum_op, jsval *statep,
-                          jsid *idp, bool *_retval) MOZ_OVERRIDE;
-
-public:
-  static nsIClassInfo *doCreate(nsDOMClassInfoData* aData)
-  {
-    return new nsStorage2SH(aData);
-  }
-};
-
 // Event handler 'this' translator class, this is called by XPConnect
 // when a "function interface" (nsIDOMEventListener) is called, this
 // class extracts 'this' fomr the first argument to the called
 // function (nsIDOMEventListener::HandleEvent(in nsIDOMEvent)), this
 // class will pass back nsIDOMEvent::currentTarget to be used as
 // 'this'.
 
 class nsEventListenerThisTranslator : public nsIXPCFunctionThisTranslator
diff --git a/dom/base/nsDOMClassInfoClasses.h b/dom/base/nsDOMClassInfoClasses.h
--- a/dom/base/nsDOMClassInfoClasses.h
+++ b/dom/base/nsDOMClassInfoClasses.h
@@ -86,19 +86,16 @@ DOMCI_CLASS(WindowUtils)
 // XSLTProcessor
 DOMCI_CLASS(XSLTProcessor)
 
 // DOM Level 3 XPath objects
 DOMCI_CLASS(XPathExpression)
 DOMCI_CLASS(XPathNSResolver)
 DOMCI_CLASS(XPathResult)
 
-// WhatWG WebApps Objects
-DOMCI_CLASS(Storage)
-
 DOMCI_CLASS(Blob)
 DOMCI_CLASS(File)
 
 // DOM modal content window class, almost identical to Window
 DOMCI_CLASS(ModalContentWindow)
 
 DOMCI_CLASS(MozPowerManager)
 DOMCI_CLASS(MozWakeLock)
diff --git a/dom/bindings/Bindings.conf b/dom/bindings/Bindings.conf
--- a/dom/bindings/Bindings.conf
+++ b/dom/bindings/Bindings.conf
@@ -802,16 +802,20 @@ DOMInterfaces = {
 'ScrollAreaEvent': {
     'nativeType': 'nsDOMScrollAreaEvent',
 },
 
 'SimpleGestureEvent': {
     'nativeType': 'nsDOMSimpleGestureEvent',
 },
 
+'Storage': {
+    'nativeType': 'mozilla::dom::DOMStorage',
+},
+
 'StyleSheet': {
     'nativeType': 'nsCSSStyleSheet',
 },
 
 'SVGAnimatedLengthList': {
     'nativeType': 'mozilla::DOMSVGAnimatedLengthList',
     'headerFile': 'DOMSVGAnimatedLengthList.h'
 },
diff --git a/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/Makefile.in b/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/Makefile.in
deleted file mode 100644
--- a/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/Makefile.in
+++ /dev/null
@@ -1,22 +0,0 @@
-# THIS FILE IS AUTOGENERATED BY parseFailures.py - DO NOT EDIT
-
-DEPTH := @DEPTH@
-
-topsrcdir := @top_srcdir@
-srcdir := @srcdir@
-VPATH := @srcdir@
-relativesrcdir := @relativesrcdir@
-
-include $(DEPTH)/config/autoconf.mk
-
-MOCHITEST_FILES := \
-  test_missing_arguments.html.json \
-  test_storage_local_builtins.html.json \
-  test_storage_local_in_js.html.json \
-  test_storage_local_removeitem_js.html.json \
-  test_storage_session_builtins.html.json \
-  test_storage_session_in_js.html.json \
-  test_storage_session_removeitem_js.html.json \
-  $(NULL)
-
-include $(topsrcdir)/config/rules.mk
diff --git a/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/moz.build b/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/moz.build
deleted file mode 100644
--- a/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/moz.build
+++ /dev/null
@@ -1,5 +0,0 @@
-# -*- Mode: python; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 40 -*-
-# THIS FILE IS AUTOGENERATED BY parseFailures.py - DO NOT EDIT
-
-DIRS += [
-]
diff --git a/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/test_missing_arguments.html.json b/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/test_missing_arguments.html.json
deleted file mode 100644
--- a/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/test_missing_arguments.html.json
+++ /dev/null
@@ -1,12 +0,0 @@
-{
-  "Should throw TypeError for function \"function () { localStorage.key(); }\".": true,
-  "Should throw TypeError for function \"function () { localStorage.getItem(); }\".": true,
-  "Should throw TypeError for function \"function () { localStorage.setItem(); }\".": true,
-  "Should throw TypeError for function \"function () { localStorage.setItem(\"a\"); }\".": true,
-  "Should throw TypeError for function \"function () { localStorage.removeItem(); }\".": true,
-  "Should throw TypeError for function \"function () { sessionStorage.key(); }\".": true,
-  "Should throw TypeError for function \"function () { sessionStorage.getItem(); }\".": true,
-  "Should throw TypeError for function \"function () { sessionStorage.setItem(); }\".": true,
-  "Should throw TypeError for function \"function () { sessionStorage.setItem(\"a\"); }\".": true,
-  "Should throw TypeError for function \"function () { sessionStorage.removeItem(); }\".": true
-}
diff --git a/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/test_storage_local_builtins.html.json b/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/test_storage_local_builtins.html.json
deleted file mode 100644
--- a/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/test_storage_local_builtins.html.json
+++ /dev/null
@@ -1,3 +0,0 @@
-{
-  "Web Storage": true
-}
diff --git a/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/test_storage_local_in_js.html.json b/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/test_storage_local_in_js.html.json
deleted file mode 100644
--- a/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/test_storage_local_in_js.html.json
+++ /dev/null
@@ -1,3 +0,0 @@
-{
-  "Web Storage 1": true
-}
diff --git a/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/test_storage_local_removeitem_js.html.json b/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/test_storage_local_removeitem_js.html.json
deleted file mode 100644
--- a/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/test_storage_local_removeitem_js.html.json
+++ /dev/null
@@ -1,4 +0,0 @@
-{
-  "Web Storage 2": true,
-  "Web Storage 3": true
-}
diff --git a/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/test_storage_session_builtins.html.json b/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/test_storage_session_builtins.html.json
deleted file mode 100644
--- a/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/test_storage_session_builtins.html.json
+++ /dev/null
@@ -1,3 +0,0 @@
-{
-  "Web Storage": true
-}
diff --git a/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/test_storage_session_in_js.html.json b/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/test_storage_session_in_js.html.json
deleted file mode 100644
--- a/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/test_storage_session_in_js.html.json
+++ /dev/null
@@ -1,3 +0,0 @@
-{
-  "Web Storage 1": true
-}
diff --git a/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/test_storage_session_removeitem_js.html.json b/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/test_storage_session_removeitem_js.html.json
deleted file mode 100644
--- a/dom/imptests/failures/webapps/WebStorage/tests/submissions/Ms2ger/test_storage_session_removeitem_js.html.json
+++ /dev/null
@@ -1,4 +0,0 @@
-{
-  "Web Storage 2": true,
-  "Web Storage 3": true
-}
diff --git a/dom/imptests/moz.build b/dom/imptests/moz.build
--- a/dom/imptests/moz.build
+++ b/dom/imptests/moz.build
@@ -21,15 +21,14 @@ DIRS += [
     'failures/html/html/webappapis/atob',
     'failures/html/js/builtins',
     'failures/html/old-tests/submission/Opera/microdata',
     'failures/html/typedarrays',
     'failures/webapps/DOMCore/tests/approved',
     'failures/webapps/DOMCore/tests/submissions/Ms2ger',
     'failures/webapps/DOMCore/tests/submissions/Opera',
     'failures/webapps/WebStorage/tests/submissions/Infraware',
-    'failures/webapps/WebStorage/tests/submissions/Ms2ger',
     'failures/webapps/XMLHttpRequest/tests/submissions/Ms2ger'
 ]
 
 include('editing.mozbuild')
 include('html.mozbuild')
 include('webapps.mozbuild')
diff --git a/dom/interfaces/storage/nsPIDOMStorage.h b/dom/interfaces/storage/nsPIDOMStorage.h
--- a/dom/interfaces/storage/nsPIDOMStorage.h
+++ b/dom/interfaces/storage/nsPIDOMStorage.h
@@ -36,17 +36,17 @@ public:
     LocalStorage = 1,
     SessionStorage = 2
   };
 
   virtual StorageType GetType() const = 0;
   virtual mozilla::dom::DOMStorageManager* GetManager() const = 0;
   virtual const mozilla::dom::DOMStorageCache* GetCache() const = 0;
 
-  virtual nsTArray<nsString>* GetKeys() = 0;
+  virtual void GetSupportedNames(nsTArray<nsString>& aKeys) = 0;
 
   virtual nsIPrincipal* GetPrincipal() = 0;
   virtual bool PrincipalEquals(nsIPrincipal* principal) = 0;
   virtual bool CanAccess(nsIPrincipal *aPrincipal) = 0;
   virtual bool IsPrivate() = 0;
 };
 
 NS_DEFINE_STATIC_IID_ACCESSOR(nsPIDOMStorage, NS_PIDOMSTORAGE_IID)
diff --git a/dom/src/storage/DOMStorage.cpp b/dom/src/storage/DOMStorage.cpp
--- a/dom/src/storage/DOMStorage.cpp
+++ b/dom/src/storage/DOMStorage.cpp
@@ -9,60 +9,65 @@
 
 #include "nsIDOMStorageEvent.h"
 #include "nsIObserverService.h"
 #include "nsIScriptSecurityManager.h"
 #include "nsIPermissionManager.h"
 #include "nsIPrincipal.h"
 #include "nsICookiePermission.h"
 
-#include "nsDOMClassInfoID.h"
+#include "mozilla/dom/StorageBinding.h"
 #include "mozilla/Services.h"
 #include "mozilla/Preferences.h"
 #include "GeneratedEvents.h"
 #include "nsThreadUtils.h"
 #include "nsContentUtils.h"
 #include "nsServiceManagerUtils.h"
 
-DOMCI_DATA(Storage, mozilla::dom::DOMStorage)
-
 namespace mozilla {
 namespace dom {
 
 NS_IMPL_ADDREF(DOMStorage)
 NS_IMPL_RELEASE(DOMStorage)
 
 NS_INTERFACE_MAP_BEGIN(DOMStorage)
+  NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
   NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIDOMStorage)
   NS_INTERFACE_MAP_ENTRY(nsIDOMStorage)
   NS_INTERFACE_MAP_ENTRY(nsPIDOMStorage)
   NS_INTERFACE_MAP_ENTRY(nsISupportsWeakReference)
-  NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(Storage)
 NS_INTERFACE_MAP_END
 
 DOMStorage::DOMStorage(DOMStorageManager* aManager,
                        DOMStorageCache* aCache,
                        const nsAString& aDocumentURI,
                        nsIPrincipal* aPrincipal,
                        bool aIsPrivate)
 : mManager(aManager)
 , mCache(aCache)
 , mDocumentURI(aDocumentURI)
 , mPrincipal(aPrincipal)
 , mIsPrivate(aIsPrivate)
 , mIsSessionOnly(false)
 {
   mCache->Preload();
+  SetIsDOMBinding();
 }
 
 DOMStorage::~DOMStorage()
 {
   mCache->KeepAlive();
 }
 
+/* virtual */ JSObject*
+DOMStorage::WrapObject(JSContext* aCx, JS::Handle<JSObject*> aScope)
+{
+  return StorageBinding::Wrap(aCx, aScope, this);
+}
+
 // nsIDOMStorage (web content public API implementation)
 
 NS_IMETHODIMP
 DOMStorage::GetLength(uint32_t* aLength)
 {
   if (!CanUseStorage(this)) {
     return NS_ERROR_DOM_SECURITY_ERR;
   }
@@ -334,20 +339,21 @@ DOMStorage::CanAccess(nsIPrincipal* aPri
     if (NS_FAILED(rv)) {
       return false;
     }
   }
 
   return subsumes;
 }
 
-nsTArray<nsString>*
-DOMStorage::GetKeys()
+void
+DOMStorage::GetSupportedNames(nsTArray<nsString>& aKeys)
 {
   if (!CanUseStorage(this)) {
-    return new nsTArray<nsString>(); // return just an empty array
+    // return just an empty array
+    return;
   }
 
-  return mCache->GetKeys(this);
+  return mCache->GetKeys(this, aKeys);
 }
 
 } // ::dom
 } // ::mozilla
diff --git a/dom/src/storage/DOMStorage.h b/dom/src/storage/DOMStorage.h
--- a/dom/src/storage/DOMStorage.h
+++ b/dom/src/storage/DOMStorage.h
@@ -6,41 +6,98 @@
 #ifndef nsDOMStorage_h___
 #define nsDOMStorage_h___
 
 #include "mozilla/Attributes.h"
 #include "nsIDOMStorage.h"
 #include "nsPIDOMStorage.h"
 #include "nsWeakReference.h"
 #include "nsAutoPtr.h"
+#include "nsWrapperCache.h"
+#include "mozilla/ErrorResult.h"
 
 namespace mozilla {
 namespace dom {
 
 class DOMStorageManager;
 class DOMStorageCache;
 
 class DOMStorage MOZ_FINAL : public nsIDOMStorage
                            , public nsPIDOMStorage
                            , public nsSupportsWeakReference
+                           , public nsWrapperCache
 {
   NS_DECL_ISUPPORTS
   NS_DECL_NSIDOMSTORAGE
 
   // nsPIDOMStorage
   virtual StorageType GetType() const MOZ_OVERRIDE;
   virtual DOMStorageManager* GetManager() const MOZ_OVERRIDE { return mManager; }
   virtual const DOMStorageCache* GetCache() const MOZ_OVERRIDE { return mCache; }
 
-  virtual nsTArray<nsString>* GetKeys() MOZ_OVERRIDE;
+  virtual void GetSupportedNames(nsTArray<nsString>& aKeys) MOZ_OVERRIDE;
   virtual nsIPrincipal* GetPrincipal() MOZ_OVERRIDE;
   virtual bool PrincipalEquals(nsIPrincipal* aPrincipal) MOZ_OVERRIDE;
   virtual bool CanAccess(nsIPrincipal* aPrincipal) MOZ_OVERRIDE;
   virtual bool IsPrivate() MOZ_OVERRIDE { return mIsPrivate; }
 
+  // WebIDL
+  virtual JSObject* WrapObject(JSContext* aCx,
+                               JS::Handle<JSObject*> aScope) MOZ_OVERRIDE;
+  nsISupports* GetParentObject() const
+  {
+    return nullptr;
+  }
+
+  uint32_t GetLength(ErrorResult& aRv)
+  {
+    uint32_t length = 0;
+    aRv = GetLength(&length);
+    return length;
+  }
+  void Key(uint32_t aIndex, nsString& aResult, ErrorResult& aRv)
+  {
+    aRv = Key(aIndex, aResult);
+  }
+  void GetItem(const nsAString& aKey, nsString& aResult, ErrorResult& aRv)
+  {
+    aRv = GetItem(aKey, aResult);
+  }
+  void NamedGetter(const nsAString& aKey, bool& aFound, nsString& aResult,
+                   ErrorResult& aRv)
+  {
+    GetItem(aKey, aResult, aRv);
+    aFound = !aResult.IsVoid();
+  }
+  void SetItem(const nsAString& aKey, const nsAString& aValue, ErrorResult& aRv)
+  {
+    aRv = SetItem(aKey, aValue);
+  }
+  void NamedSetter(const nsAString& aKey, const nsAString& aValue,
+                   ErrorResult& aRv)
+  {
+    SetItem(aKey, aValue, aRv);
+  }
+  void RemoveItem(const nsAString& aKey, ErrorResult& aRv)
+  {
+    aRv = RemoveItem(aKey);
+  }
+  void NamedDeleter(const nsAString& aKey, bool& aFound, ErrorResult& aRv)
+  {
+    // We can lie and always say we found the key, because there can be no
+    // expando's on this object.
+    aFound = true;
+    RemoveItem(aKey, aRv);
+  }
+  void Clear(ErrorResult& aRv)
+  {
+    aRv = Clear();
+  }
+
+
   DOMStorage(DOMStorageManager* aManager,
              DOMStorageCache* aCache,
              const nsAString& aDocumentURI,
              nsIPrincipal* aPrincipal,
              bool aIsPrivate);
   ~DOMStorage();
 
   // The method checks whether the caller can use a storage.
diff --git a/dom/src/storage/DOMStorageCache.cpp b/dom/src/storage/DOMStorageCache.cpp
--- a/dom/src/storage/DOMStorageCache.cpp
+++ b/dom/src/storage/DOMStorageCache.cpp
@@ -420,31 +420,30 @@ KeysArrayBuilder(const nsAString& aKey, 
   nsTArray<nsString>* keys = static_cast<nsTArray<nsString>* >(aArg);
 
   keys->AppendElement(aKey);
   return PL_DHASH_NEXT;
 }
 
 } // anon
 
-nsTArray<nsString>*
-DOMStorageCache::GetKeys(const DOMStorage* aStorage)
+void
+DOMStorageCache::GetKeys(const DOMStorage* aStorage, nsTArray<nsString>& aKeys)
 {
   Telemetry::AutoTimer<Telemetry::LOCALDOMSTORAGE_GETALLKEYS_MS> autoTimer;
 
   if (Persist(aStorage)) {
     WaitForPreload(Telemetry::LOCALDOMSTORAGE_GETALLKEYS_BLOCKING_MS);
   }
 
-  nsTArray<nsString>* result = new nsTArray<nsString>();
-  if (NS_SUCCEEDED(mLoadResult)) {
-    DataSet(aStorage).mKeys.EnumerateRead(KeysArrayBuilder, result);
+  if (NS_FAILED(mLoadResult)) {
+    return;
   }
 
-  return result;
+  DataSet(aStorage).mKeys.EnumerateRead(KeysArrayBuilder, &aKeys);
 }
 
 nsresult
 DOMStorageCache::GetItem(const DOMStorage* aStorage, const nsAString& aKey,
                          nsAString& aRetval)
 {
   Telemetry::AutoTimer<Telemetry::LOCALDOMSTORAGE_GETVALUE_MS> autoTimer;
 
diff --git a/dom/src/storage/DOMStorageCache.h b/dom/src/storage/DOMStorageCache.h
--- a/dom/src/storage/DOMStorageCache.h
+++ b/dom/src/storage/DOMStorageCache.h
@@ -88,17 +88,17 @@ public:
   // Get* methods return error when load from the database has failed.
   nsresult GetLength(const DOMStorage* aStorage, uint32_t* aRetval);
   nsresult GetKey(const DOMStorage* aStorage, uint32_t index, nsAString& aRetval);
   nsresult GetItem(const DOMStorage* aStorage, const nsAString& aKey, nsAString& aRetval);
   nsresult SetItem(const DOMStorage* aStorage, const nsAString& aKey, const nsString& aValue, nsString& aOld);
   nsresult RemoveItem(const DOMStorage* aStorage, const nsAString& aKey, nsString& aOld);
   nsresult Clear(const DOMStorage* aStorage);
 
-  nsTArray<nsString>* GetKeys(const DOMStorage* aStorage);
+  void GetKeys(const DOMStorage* aStorage, nsTArray<nsString>& aKeys);
 
   // Whether the principal equals principal the cache was created for
   bool CheckPrincipal(nsIPrincipal* aPrincipal) const;
   nsIPrincipal* Principal() const { return mPrincipal; }
 
   // Starts the database engine thread or the IPC bridge
   static DOMStorageDBBridge* StartDatabase();
   static DOMStorageDBBridge* GetDatabase();
diff --git a/dom/src/storage/moz.build b/dom/src/storage/moz.build
--- a/dom/src/storage/moz.build
+++ b/dom/src/storage/moz.build
@@ -2,16 +2,17 @@
 # vim: set filetype=python:
 # This Source Code Form is subject to the terms of the Mozilla Public
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 MODULE = 'dom'
 
 EXPORTS.mozilla.dom += [
+    'DOMStorage.h',
     'DOMStorageIPC.h',
 ]
 
 CPP_SOURCES += [
     'DOMStorage.cpp',
     'DOMStorageCache.cpp',
     'DOMStorageDBThread.cpp',
     'DOMStorageIPC.cpp',
diff --git a/dom/webidl/Storage.webidl b/dom/webidl/Storage.webidl
new file mode 100644
--- /dev/null
+++ b/dom/webidl/Storage.webidl
@@ -0,0 +1,27 @@
+/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * The origin of this IDL file is
+ * http://www.whatwg.org/html/#the-storage-interface
+ *
+ * © Copyright 2004-2011 Apple Computer, Inc., Mozilla Foundation, and
+ * Opera Software ASA. You are granted a license to use, reproduce
+ * and create derivative works of this document.
+ */
+
+interface Storage {
+  [Throws]
+  readonly attribute unsigned long length;
+  [Throws]
+  DOMString? key(unsigned long index);
+  [Throws]
+  getter DOMString? getItem(DOMString key);
+  [Throws]
+  setter creator void setItem(DOMString key, DOMString value);
+  [Throws]
+  deleter void removeItem(DOMString key);
+  [Throws]
+  void clear();
+};
diff --git a/dom/webidl/StorageEvent.webidl b/dom/webidl/StorageEvent.webidl
--- a/dom/webidl/StorageEvent.webidl
+++ b/dom/webidl/StorageEvent.webidl
@@ -4,17 +4,16 @@
  * You can obtain one at http://mozilla.org/MPL/2.0/.
  *
  * Interface for a client side storage. See
  * http://dev.w3.org/html5/webstorage/#the-storage-event
  * for more information.
  *
  * Event sent to a window when a storage area changes.
  */
-interface Storage;
 
 [Constructor(DOMString type, optional StorageEventInit eventInitDict), HeaderFile="GeneratedEventClasses.h"]
 interface StorageEvent : Event
 {
   readonly attribute DOMString? key;
   readonly attribute DOMString? oldValue;
   readonly attribute DOMString? newValue;
   readonly attribute DOMString? url;
diff --git a/dom/webidl/WebIDL.mk b/dom/webidl/WebIDL.mk
--- a/dom/webidl/WebIDL.mk
+++ b/dom/webidl/WebIDL.mk
@@ -217,16 +217,17 @@ webidl_files = \
   RTCIceCandidate.webidl \
   RTCPeerConnection.webidl \
   RTCPeerConnectionIceEvent.webidl \
   RTCSessionDescription.webidl \
   Screen.webidl \
   ScriptProcessorNode.webidl \
   ScrollAreaEvent.webidl \
   SimpleGestureEvent.webidl \
+  Storage.webidl \
   StyleSheet.webidl \
   SVGAElement.webidl \
   SVGAltGlyphElement.webidl \
   SVGAngle.webidl \
   SVGAnimatedAngle.webidl \
   SVGAnimatedBoolean.webidl \
   SVGAnimatedEnumeration.webidl \
   SVGAnimatedInteger.webidl \
diff --git a/js/xpconnect/src/dom_quickstubs.qsconf b/js/xpconnect/src/dom_quickstubs.qsconf
--- a/js/xpconnect/src/dom_quickstubs.qsconf
+++ b/js/xpconnect/src/dom_quickstubs.qsconf
@@ -55,25 +55,16 @@ members = [
 
     'nsIDOMProgressEvent.lengthComputable',
     'nsIDOMProgressEvent.loaded',
     'nsIDOMProgressEvent.total',
     #XXX Can't quickstub initProgressEvent because it has long long parameters.
 
     'nsIDOMTouchList.*',
 
-    # dom/interfaces/storage
-    'nsIDOMToString.toString',
-    'nsIDOMStorage.setItem',
-    'nsIDOMStorage.length',
-    'nsIDOMStorage.getItem',
-    'nsIDOMStorage.key',
-    'nsIDOMStorage.removeItem',
-    'nsIDOMStorage.clear',
-
     # dom/interfaces/xpath
     'nsIDOMXPathExpression.evaluate',
     'nsIDOMXPathNSResolver.lookupNamespaceURI',
     'nsIDOMXPathResult.snapshotItem',
     'nsIDOMXPathResult.iterateNext',
     'nsIDOMXPathResult.snapshotLength',
     'nsIDOMXPathResult.resultType',
     'nsIDOMXPathResult.numberValue',
diff --git a/js/xpconnect/src/event_impl_gen.conf.in b/js/xpconnect/src/event_impl_gen.conf.in
--- a/js/xpconnect/src/event_impl_gen.conf.in
+++ b/js/xpconnect/src/event_impl_gen.conf.in
@@ -75,11 +75,12 @@ exclude_automatic_type_include = [
     'nsIDOMBlob'
   ]
 
 """ Map xpidl interface names to implementation classes. The third column is the canonical interface. """
 xpidl_to_native = [
     ['nsIDOMDocument', 'nsIDocument', 'nsIDocument'],
     ['nsIDOMElement', 'mozilla::dom::Element', 'mozilla::dom::Element'],
     ['nsIDOMCSSStyleSheet', 'nsCSSStyleSheet', 'nsIStyleSheet'],
-    ['nsIDOMGamepad', 'Gamepad', 'nsIDOMGamepad']
+    ['nsIDOMGamepad', 'Gamepad', 'nsIDOMGamepad'],
+    ['nsIDOMStorage', 'mozilla::dom::DOMStorage', 'nsIDOMStorage']
   ]
 
