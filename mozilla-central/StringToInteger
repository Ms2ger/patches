From: Ms2ger <ms2ger@gmail.com>
Bug 623589 - Remove unnecessary argument to StringToInteger

diff --git a/content/base/src/nsAttrValue.cpp b/content/base/src/nsAttrValue.cpp
--- a/content/base/src/nsAttrValue.cpp
+++ b/content/base/src/nsAttrValue.cpp
@@ -1440,17 +1440,17 @@ bool
 nsAttrValue::ParseSpecialIntValue(const nsAString& aString)
 {
   ResetIfSet();
 
   nsresult ec;
   bool strict;
   bool isPercent = false;
   nsAutoString tmp(aString);
-  int32_t originalVal = StringToInteger(aString, &strict, &ec, true, &isPercent);
+  int32_t originalVal = StringToInteger(aString, &strict, &ec, &isPercent);
 
   if (NS_FAILED(ec)) {
     return false;
   }
 
   int32_t val = std::max(originalVal, 0);
 
   // % (percent)
@@ -1874,22 +1874,21 @@ nsAttrValue::GetStringBuffer(const nsASt
   CopyUnicodeTo(aValue, 0, data, len);
   data[len] = PRUnichar(0);
   return buf.forget();
 }
 
 int32_t
 nsAttrValue::StringToInteger(const nsAString& aValue, bool* aStrict,
                              nsresult* aErrorCode,
-                             bool aCanBePercent,
                              bool* aIsPercent) const
 {
   *aStrict = true;
   *aErrorCode = NS_ERROR_ILLEGAL_VALUE;
-  if (aCanBePercent) {
+  if (aIsPercent) {
     *aIsPercent = false;
   }
 
   nsAString::const_iterator iter, end;
   aValue.BeginReading(iter);
   aValue.EndReading(end);
 
   while (iter != end && nsContentUtils::IsHTMLWhitespace(*iter)) {
@@ -1920,17 +1919,17 @@ nsAttrValue::StringToInteger(const nsASt
       if (pValue > value) {
         *aStrict = false;
         *aErrorCode = NS_ERROR_ILLEGAL_VALUE;
         break;
       } else {
         pValue = value;
         *aErrorCode = NS_OK;
       }
-    } else if (aCanBePercent && *iter == PRUnichar('%')) {
+    } else if (aIsPercent && *iter == PRUnichar('%')) {
       ++iter;
       *aIsPercent = true;
       if (iter != end) {
         *aStrict = false;
         break;
       }
     } else {
       *aStrict = false;
diff --git a/content/base/src/nsAttrValue.h b/content/base/src/nsAttrValue.h
--- a/content/base/src/nsAttrValue.h
+++ b/content/base/src/nsAttrValue.h
@@ -413,22 +413,31 @@ private:
   // existing container.
   MiscContainer* ClearMiscContainer();
   // Like ClearMiscContainer, except allocates a new container if one does not
   // exist already.
   MiscContainer* EnsureEmptyMiscContainer();
   bool EnsureEmptyAtomArray();
   already_AddRefed<nsStringBuffer>
     GetStringBuffer(const nsAString& aValue) const;
-  // aStrict is set true if stringifying the return value equals with
-  // aValue.
+  /**
+   * Converts a string to an integer
+   *
+   * @param aValue     input string
+   * @param aStrict    is set to true if stringifying the return value equals
+   *                   aValue.
+   * @param aErrorCode error code
+   * @param aIsPercent optional, only to be supplied if you want to accept
+   *                   percentages; is set to true iff the input is a
+   *                   percentage
+   * @return the integer represented in the input string
+   */
   int32_t StringToInteger(const nsAString& aValue,
                           bool* aStrict,
                           nsresult* aErrorCode,
-                          bool aCanBePercent = false,
                           bool* aIsPercent = nullptr) const;
   // Given an enum table and a particular entry in that table, return
   // the actual integer value we should store.
   int32_t EnumTableEntryToValue(const EnumTable* aEnumTable,
                                 const EnumTable* aTableEntry);  
 
   static nsTArray<const EnumTable*>* sEnumTableArray;
 
