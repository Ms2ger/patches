From: Ms2ger <ms2ger@gmail.com>

diff --git a/content/canvas/test/test_canvas.html b/content/canvas/test/test_canvas.html
--- a/content/canvas/test/test_canvas.html
+++ b/content/canvas/test/test_canvas.html
@@ -2030,16 +2030,17 @@ var img = new Image();
 todo(img.complete === false, "img.complete === false");
 var _thrown = undefined; try {
   ctx.drawImage(img, 0, 0);
 } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "InvalidStateError" && _thrown.code == DOMException.INVALID_STATE_ERR, "should throw InvalidStateError");
 
 
 }
 </script>
+<img class="resource" id="red_10.png" src="image_red.png">
 
 <!-- [[[ test_2d.drawImage.negativedest.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.negativedest</p>
 <!-- Testing: Negative destination width/height represents the correct rectangle -->
 <canvas height="50" id="c85" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
@@ -2165,17 +2166,17 @@ todo(!_thrown_outer, 'should not throw e
 
 function test_2d_drawImage_nonfinite() {
 
 var canvas = document.getElementById('c88');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
-var red = document.getElementById('red_10.png');
+var red = document.getElementById('red_11.png');
 ctx.drawImage(red, Infinity, 0);
 ctx.drawImage(red, -Infinity, 0);
 ctx.drawImage(red, NaN, 0);
 ctx.drawImage(red, 0, Infinity);
 ctx.drawImage(red, 0, -Infinity);
 ctx.drawImage(red, 0, NaN);
 ctx.drawImage(red, Infinity, Infinity);
 ctx.drawImage(red, Infinity, 0, 100, 50);
@@ -2472,17 +2473,17 @@ ctx.drawImage(red, 0, 0, 100, 50, 0, Inf
 ctx.drawImage(red, 0, 0, 100, 50, 0, Infinity, Infinity, Infinity);
 ctx.drawImage(red, 0, 0, 100, 50, 0, Infinity, 100, Infinity);
 ctx.drawImage(red, 0, 0, 100, 50, 0, 0, Infinity, Infinity);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
-<img class="resource" id="red_10.png" src="image_red.png">
+<img class="resource" id="red_11.png" src="image_red.png">
 
 <!-- [[[ test_2d.drawImage.nowrap.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.nowrap</p>
 <!-- Testing: Stretched images do not get pixels wrapping around the edges -->
 <canvas height="50" id="c89" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
@@ -2530,24 +2531,24 @@ var _thrown = undefined; try {
 
 function test_2d_drawImage_path() {
 
 var canvas = document.getElementById('c91');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.rect(0, 0, 100, 50);
-ctx.drawImage(document.getElementById('red_11.png'), 0, 0);
+ctx.drawImage(document.getElementById('red_12.png'), 0, 0);
 ctx.fill();
 isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 
 }
 </script>
-<img class="resource" id="red_11.png" src="image_red.png">
+<img class="resource" id="red_12.png" src="image_red.png">
 
 <!-- [[[ test_2d.drawImage.self.1.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.self.1</p>
 <canvas height="50" id="c92" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_self_1() {
@@ -2607,23 +2608,23 @@ isPixel(ctx, 99,49, 0,255,0,255, 2);
 function test_2d_drawImage_transform() {
 
 var canvas = document.getElementById('c94');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.translate(100, 0);
-ctx.drawImage(document.getElementById('red_12.png'), 0, 0);
+ctx.drawImage(document.getElementById('red_13.png'), 0, 0);
 isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 
 }
 </script>
-<img class="resource" id="red_12.png" src="image_red.png">
+<img class="resource" id="red_13.png" src="image_red.png">
 
 <!-- [[[ test_2d.drawImage.wrongtype.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.wrongtype</p>
 <!-- Testing: Incorrect image types in drawImage do not match any defined overloads, so WebIDL throws a TypeError -->
 <canvas height="50" id="c95" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
@@ -2659,30 +2660,30 @@ var _thrown = undefined; try {
 function test_2d_drawImage_zerosource() {
 
 var canvas = document.getElementById('c96');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 var _thrown = undefined; try {
-  ctx.drawImage(document.getElementById('red_13.png'), 10, 10, 0, 1, 0, 0, 100, 50);
+  ctx.drawImage(document.getElementById('red_14.png'), 10, 10, 0, 1, 0, 0, 100, 50);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 var _thrown = undefined; try {
-  ctx.drawImage(document.getElementById('red_13.png'), 10, 10, 1, 0, 0, 0, 100, 50);
+  ctx.drawImage(document.getElementById('red_14.png'), 10, 10, 1, 0, 0, 0, 100, 50);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 var _thrown = undefined; try {
-  ctx.drawImage(document.getElementById('red_13.png'), 10, 10, 0, 0, 0, 0, 100, 50);
+  ctx.drawImage(document.getElementById('red_14.png'), 10, 10, 0, 0, 0, 0, 100, 50);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 
 }
 </script>
-<img class="resource" id="red_13.png" src="image_red.png">
+<img class="resource" id="red_14.png" src="image_red.png">
 
 <!-- [[[ test_2d.fillRect.basic.html ]]] -->
 
 <p>Canvas test: 2d.fillRect.basic</p>
 <!-- Testing: fillRect works -->
 <canvas height="50" id="c97" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
@@ -12607,16 +12608,17 @@ var img = new Image();
 todo(img.complete === false, "img.complete === false");
 var _thrown = undefined; try {
   ctx.createPattern(img, 'repeat');
 } catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "InvalidStateError" && _thrown.code == DOMException.INVALID_STATE_ERR, "should throw InvalidStateError");
 
 
 }
 </script>
+<img class="resource" id="red_15.png" src="image_red.png">
 
 <!-- [[[ test_2d.pattern.image.null.html ]]] -->
 
 <p>Canvas test: 2d.pattern.image.null</p>
 <canvas height="50" id="c417" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_image_null() {
@@ -12847,50 +12849,50 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 function test_2d_pattern_paint_norepeat_coord3() {
 
 var canvas = document.getElementById('c425');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
-var img = document.getElementById('red_14.png');
+var img = document.getElementById('red_16.png');
 var pattern = ctx.createPattern(img, 'no-repeat');
 ctx.fillStyle = pattern;
 ctx.translate(50, 25);
 ctx.fillRect(-50, -25, 100, 50);
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 50, 25);
 
 isPixel(ctx, 1,1, 0,255,0,255, 0);
 isPixel(ctx, 98,1, 0,255,0,255, 0);
 isPixel(ctx, 1,48, 0,255,0,255, 0);
 isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 
 }
 </script>
-<img class="resource" id="red_14.png" src="image_red.png">
+<img class="resource" id="red_16.png" src="image_red.png">
 
 <!-- [[[ test_2d.pattern.paint.norepeat.outside.html ]]] -->
 
 <p>Canvas test: 2d.pattern.paint.norepeat.outside</p>
 <canvas height="50" id="c426" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_paint_norepeat_outside() {
 
 var canvas = document.getElementById('c426');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
-var img = document.getElementById('red_15.png');
+var img = document.getElementById('red_17.png');
 var pattern = ctx.createPattern(img, 'no-repeat');
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.fillStyle = pattern;
 ctx.fillRect(0, -50, 100, 50);
 ctx.fillRect(-100, 0, 100, 50);
 ctx.fillRect(0, 50, 100, 50);
@@ -12899,17 +12901,17 @@ ctx.fillRect(100, 0, 100, 50);
 isPixel(ctx, 1,1, 0,255,0,255, 0);
 isPixel(ctx, 98,1, 0,255,0,255, 0);
 isPixel(ctx, 1,48, 0,255,0,255, 0);
 isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 
 }
 </script>
-<img class="resource" id="red_15.png" src="image_red.png">
+<img class="resource" id="red_17.png" src="image_red.png">
 
 <!-- [[[ test_2d.pattern.paint.orientation.canvas.html ]]] -->
 
 <p>Canvas test: 2d.pattern.paint.orientation.canvas</p>
 <!-- Testing: Canvas patterns do not get flipped when painted -->
 <canvas height="50" id="c427" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
@@ -14375,24 +14377,24 @@ function test_2d_shadow_image_basic() {
 
 var canvas = document.getElementById('c479');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.shadowColor = '#0f0';
 ctx.shadowOffsetY = 50;
-ctx.drawImage(document.getElementById('red_16.png'), 0, -50);
-
-isPixel(ctx, 50,25, 0,255,0,255, 0);
-
-
-}
-</script>
-<img class="resource" id="red_16.png" src="image_red.png">
+ctx.drawImage(document.getElementById('red_18.png'), 0, -50);
+
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+
+
+}
+</script>
+<img class="resource" id="red_18.png" src="image_red.png">
 
 <!-- [[[ test_2d.shadow.image.scale.html ]]] -->
 
 <p>Canvas test: 2d.shadow.image.scale</p>
 <!-- Testing: Shadows are drawn correctly for scaled images -->
 <canvas height="50" id="c480" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
@@ -14666,30 +14668,30 @@ isPixel(ctx, 50,25, 127,0,127,255, 2);
 <canvas height="50" id="c490" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_pattern_basic() {
 
 var canvas = document.getElementById('c490');
 var ctx = canvas.getContext('2d');
 
-var pattern = ctx.createPattern(document.getElementById('red_17.png'), 'repeat');
+var pattern = ctx.createPattern(document.getElementById('red_19.png'), 'repeat');
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.shadowColor = '#0f0';
 ctx.shadowOffsetY = 50;
 ctx.fillStyle = pattern;
 ctx.fillRect(0, -50, 100, 50);
 
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
-<img class="resource" id="red_17.png" src="image_red.png">
+<img class="resource" id="red_19.png" src="image_red.png">
 
 <!-- [[[ test_2d.shadow.pattern.transparent.1.html ]]] -->
 
 <p>Canvas test: 2d.shadow.pattern.transparent.1</p>
 <!-- Testing: Shadows are not drawn for transparent fill patterns -->
 <canvas height="50" id="c491" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
