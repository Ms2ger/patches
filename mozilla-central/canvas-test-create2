From: Ms2ger <ms2ger@gmail.com>
Bug 665345 - Rename tests for the two-argument createImageData method

These tests have been renamed upstream, and keeping the old
name would make further patches harder to review.

diff --git a/content/canvas/test/test_canvas.html b/content/canvas/test/test_canvas.html
--- a/content/canvas/test/test_canvas.html
+++ b/content/canvas/test/test_canvas.html
@@ -6825,24 +6825,24 @@ ctx.fillRect(-5, -2.5, 10, 5);
 isPixel(ctx, 25,25, 0,255,0,255, 0);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
-<!-- [[[ test_2d.imageData.create.basic.html ]]] -->
-
-<p>Canvas test: 2d.imageData.create.basic - bug 433004</p>
+<!-- [[[ test_2d.imageData.create2.basic.html ]]] -->
+
+<p>Canvas test: 2d.imageData.create2.basic</p>
 <!-- Testing: createImageData() exists and returns something -->
 <canvas height="50" id="c254" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
-function test_2d_imageData_create_basic() {
+function test_2d_imageData_create2_basic() {
 
 var canvas = document.getElementById('c254');
 var ctx = canvas.getContext('2d');
 
 ok(ctx.createImageData(1, 1) !== null, "ctx.createImageData(1, 1) !== null");
 
 
 }
@@ -6861,24 +6861,24 @@ var canvas = document.getElementById('c2
 var ctx = canvas.getContext('2d');
 
 ok(ctx.createImageData(ctx.createImageData(1, 1)) != null, "ctx.createImageData(ctx.createImageData(1, 1)) != null");
 
 
 }
 </script>
 
-<!-- [[[ test_2d.imageData.create.initial.html ]]] -->
-
-<p>Canvas test: 2d.imageData.create.initial - bug 433004</p>
+<!-- [[[ test_2d.imageData.create2.initial.html ]]] -->
+
+<p>Canvas test: 2d.imageData.create2.initial</p>
 <!-- Testing: createImageData() returns transparent black data of the right size -->
 <canvas height="50" id="c255" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
-function test_2d_imageData_create_initial() {
+function test_2d_imageData_create2_initial() {
 
 var canvas = document.getElementById('c255');
 var ctx = canvas.getContext('2d');
 
 var imgdata = ctx.createImageData(10, 20);
 ok(imgdata.data.length == imgdata.width*imgdata.height*4, "imgdata.data.length == imgdata.width*imgdata.height*4");
 ok(imgdata.width < imgdata.height, "imgdata.width < imgdata.height");
 ok(imgdata.width > 0, "imgdata.width > 0");
@@ -6916,24 +6916,24 @@ for (var i = 0; i < imgdata2.data.length
     if (imgdata2.data[i] !== 0)
         isTransparentBlack = false;
 ok(isTransparentBlack, "isTransparentBlack");
 
 
 }
 </script>
 
-<!-- [[[ test_2d.imageData.create.large.html ]]] -->
-
-<p>Canvas test: 2d.imageData.create.large - bug 433004</p>
+<!-- [[[ test_2d.imageData.create2.large.html ]]] -->
+
+<p>Canvas test: 2d.imageData.create2.large - bug 433004</p>
 <!-- Testing: createImageData() works for sizes much larger than the canvas -->
 <canvas height="50" id="c256" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
-function test_2d_imageData_create_large() {
+function test_2d_imageData_create2_large() {
 
 var canvas = document.getElementById('c256');
 var ctx = canvas.getContext('2d');
 
 var imgdata = ctx.createImageData(1000, 2000);
 ok(imgdata.data.length == imgdata.width*imgdata.height*4, "imgdata.data.length == imgdata.width*imgdata.height*4");
 ok(imgdata.width < imgdata.height, "imgdata.width < imgdata.height");
 ok(imgdata.width > 0, "imgdata.width > 0");
@@ -6942,48 +6942,48 @@ for (var i = 0; i < imgdata.data.length;
     if (imgdata.data[i] !== 0)
         isTransparentBlack = false;
 ok(isTransparentBlack, "isTransparentBlack");
 
 
 }
 </script>
 
-<!-- [[[ test_2d.imageData.create.negative.html ]]] -->
-
-<p>Canvas test: 2d.imageData.create.negative - bug 433004</p>
+<!-- [[[ test_2d.imageData.create2.negative.html ]]] -->
+
+<p>Canvas test: 2d.imageData.create2.negative - bug 433004</p>
 <!-- Testing: createImageData() takes the absolute magnitude of the size arguments -->
 <canvas height="50" id="c257" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
-function test_2d_imageData_create_negative() {
+function test_2d_imageData_create2_negative() {
 
 var canvas = document.getElementById('c257');
 var ctx = canvas.getContext('2d');
 
 var imgdata1 = ctx.createImageData(10, 20);
 var imgdata2 = ctx.createImageData(-10, 20);
 var imgdata3 = ctx.createImageData(10, -20);
 var imgdata4 = ctx.createImageData(-10, -20);
 ok(imgdata1.data.length == imgdata2.data.length, "imgdata1.data.length == imgdata2.data.length");
 ok(imgdata2.data.length == imgdata3.data.length, "imgdata2.data.length == imgdata3.data.length");
 ok(imgdata3.data.length == imgdata4.data.length, "imgdata3.data.length == imgdata4.data.length");
 
 
 }
 </script>
 
-<!-- [[[ test_2d.imageData.create.nonfinite.html ]]] -->
-
-<p>Canvas test: 2d.imageData.create.nonfinite - bug 433004</p>
+<!-- [[[ test_2d.imageData.create2.nonfinite.html ]]] -->
+
+<p>Canvas test: 2d.imageData.create2.nonfinite - bug 433004</p>
 <!-- Testing: createImageData() throws NOT_SUPPORTED_ERR if arguments are not finite -->
 <canvas height="50" id="c258" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
-function test_2d_imageData_create_nonfinite() {
+function test_2d_imageData_create2_nonfinite() {
 
 var canvas = document.getElementById('c258');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   ctx.createImageData(Infinity, 10);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
 var _thrown = undefined; try {
@@ -7025,45 +7025,45 @@ var _thrown = undefined; try {
 var _thrown = undefined; try {
   ctx.createImageData({valueOf:function() Infinity}, {valueOf:function() Infinity});
 } catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
 
 
 }
 </script>
 
-<!-- [[[ test_2d.imageData.create.round.html ]]] -->
-
-<p>Canvas test: 2d.imageData.create.round - bug 433004</p>
+<!-- [[[ test_2d.imageData.create2.round.html ]]] -->
+
+<p>Canvas test: 2d.imageData.create2.round</p>
 <!-- Testing: createImageData(w, h) is rounded the same as getImageData(0, 0, w, h) -->
 <canvas height="50" id="c259" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
-function test_2d_imageData_create_round() {
+function test_2d_imageData_create2_round() {
 
 var canvas = document.getElementById('c259');
 var ctx = canvas.getContext('2d');
 
 var imgdata1 = ctx.createImageData(10.01, 10.99);
 var imgdata2 = ctx.getImageData(0, 0, 10.01, 10.99);
 is(imgdata1.width, imgdata2.width, "imgdata1.width == imgdata2.width");
 is(imgdata1.height, imgdata2.height, "imgdata1.height == imgdata2.height");
 
 
 }
 </script>
 
-<!-- [[[ test_2d.imageData.create.tiny.html ]]] -->
-
-<p>Canvas test: 2d.imageData.create.tiny - bug 433004</p>
+<!-- [[[ test_2d.imageData.create2.tiny.html ]]] -->
+
+<p>Canvas test: 2d.imageData.create2.tiny</p>
 <!-- Testing: createImageData() works for sizes smaller than one pixel -->
 <canvas height="50" id="c260" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
-function test_2d_imageData_create_tiny() {
+function test_2d_imageData_create2_tiny() {
 
 var canvas = document.getElementById('c260');
 var ctx = canvas.getContext('2d');
 
 var imgdata = ctx.createImageData(0.0001, 0.0001);
 ok(imgdata.data.length == imgdata.width*imgdata.height*4, "imgdata.data.length == imgdata.width*imgdata.height*4");
 ok(imgdata.width == 1, "imgdata.width == 1");
 ok(imgdata.height == 1, "imgdata.height == 1");
@@ -7072,24 +7072,24 @@ for (var i = 0; i < imgdata.data.length;
     if (imgdata.data[i] !== 0)
         isTransparentBlack = false;
 ok(isTransparentBlack, "isTransparentBlack");
 
 
 }
 </script>
 
-<!-- [[[ test_2d.imageData.create.type.html ]]] -->
-
-<p>Canvas test: 2d.imageData.create.type - bug 433004</p>
+<!-- [[[ test_2d.imageData.create2.type.html ]]] -->
+
+<p>Canvas test: 2d.imageData.create2.type - bug 433004</p>
 <!-- Testing: createImageData() returns an ImageData object containing a Uint8ClampedArray object -->
 <canvas height="50" id="c261" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
-function test_2d_imageData_create_type() {
+function test_2d_imageData_create2_type() {
 
 var canvas = document.getElementById('c261');
 var ctx = canvas.getContext('2d');
 
 ok(window.ImageData !== undefined, "window.ImageData !== undefined");
 ok(window.Uint8ClampedArray !== undefined, "window.Uint8ClampedArray !== undefined");
 window.ImageData.prototype.thisImplementsImageData = true;
 window.Uint8ClampedArray.prototype.thisImplementsUint8ClampedArray = true;
@@ -7120,24 +7120,24 @@ window.Uint8ClampedArray.prototype.thisI
 var imgdata = ctx.createImageData(ctx.createImageData(1, 1));
 ok(imgdata.thisImplementsImageData, "imgdata.thisImplementsImageData");
 ok(imgdata.data.thisImplementsUint8ClampedArray, "imgdata.data.thisImplementsUint8ClampedArray");
 
 
 }
 </script>
 
-<!-- [[[ test_2d.imageData.create.zero.html ]]] -->
-
-<p>Canvas test: 2d.imageData.create.zero - bug 433004</p>
+<!-- [[[ test_2d.imageData.create2.zero.html ]]] -->
+
+<p>Canvas test: 2d.imageData.create2.zero</p>
 <!-- Testing: createImageData() throws INDEX_SIZE_ERR if size is zero -->
 <canvas height="50" id="c262" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
-function test_2d_imageData_create_zero() {
+function test_2d_imageData_create2_zero() {
 
 var canvas = document.getElementById('c262');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   ctx.createImageData(10, 0);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 var _thrown = undefined; try {
@@ -20908,74 +20908,74 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_gradient_radial_transform_2");
  }
  try {
   test_2d_gradient_radial_transform_3();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_gradient_radial_transform_3");
  }
  try {
-  test_2d_imageData_create_basic();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_2d_imageData_create_basic");
+  test_2d_imageData_create2_basic();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_imageData_create2_basic");
  }
  try {
   test_2d_imageData_create1_basic();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_imageData_create1_basic");
  }
  try {
-  test_2d_imageData_create_initial();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_2d_imageData_create_initial");
+  test_2d_imageData_create2_initial();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_imageData_create2_initial");
  }
  try {
   test_2d_imageData_create1_initial();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_imageData_create1_initial");
  }
  try {
-  test_2d_imageData_create_large();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_2d_imageData_create_large");
- }
- try {
-  test_2d_imageData_create_negative();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_2d_imageData_create_negative");
- }
- try {
-  test_2d_imageData_create_nonfinite();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_2d_imageData_create_nonfinite");
- }
- try {
-  test_2d_imageData_create_round();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_2d_imageData_create_round");
- }
- try {
-  test_2d_imageData_create_tiny();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_2d_imageData_create_tiny");
- }
- try {
-  test_2d_imageData_create_type();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_2d_imageData_create_type");
+  test_2d_imageData_create2_large();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_imageData_create2_large");
+ }
+ try {
+  test_2d_imageData_create2_negative();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_imageData_create2_negative");
+ }
+ try {
+  test_2d_imageData_create2_nonfinite();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_imageData_create2_nonfinite");
+ }
+ try {
+  test_2d_imageData_create2_round();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_imageData_create2_round");
+ }
+ try {
+  test_2d_imageData_create2_tiny();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_imageData_create2_tiny");
+ }
+ try {
+  test_2d_imageData_create2_type();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_imageData_create2_type");
  }
  try {
   test_2d_imageData_create1_type();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_imageData_create1_type");
  }
  try {
-  test_2d_imageData_create_zero();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_2d_imageData_create_zero");
+  test_2d_imageData_create2_zero();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_imageData_create2_zero");
  }
  try {
   test_2d_imageData_create1_zero();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_imageData_create1_zero");
  }
  try {
   test_2d_imageData_get_basic();
