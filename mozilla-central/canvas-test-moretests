From: Ms2ger <ms2ger@gmail.com>

diff --git a/content/canvas/test/standalone.dat b/content/canvas/test/standalone.dat
--- a/content/canvas/test/standalone.dat
+++ b/content/canvas/test/standalone.dat
@@ -119,76 +119,8 @@ test_toDataURL.png.complexcolours.html
 test_toDataURL.png.primarycolours.html
 # Clashes
 test_2d.type.delete.html
 test_2d.type.prototype.html
 test_2d.type.replace.html
 test_type.delete.html
 test_type.prototype.html
 test_type.replace.html
-# New tests
-test_2d.drawImage.incomplete.emptysrc.html
-test_2d.drawImage.incomplete.nosrc.html
-test_2d.drawImage.incomplete.reload.html
-test_2d.drawImage.incomplete.removedsrc.html
-test_2d.fillStyle.parse.invalid.name-5.html
-test_2d.pattern.image.incomplete.emptysrc.html
-test_2d.pattern.image.incomplete.nosrc.html
-test_2d.pattern.image.incomplete.reload.html
-test_2d.pattern.image.incomplete.removedsrc.html
-test_2d.composite.uncovered.nocontext.copy.html
-test_2d.composite.uncovered.nocontext.destination-atop.html
-test_2d.composite.uncovered.nocontext.destination-in.html
-test_2d.composite.uncovered.nocontext.source-in.html
-test_2d.composite.uncovered.nocontext.source-out.html
-test_2d.coordinatespace.html
-test_2d.drawImage.zerocanvas.html
-test_2d.fillStyle.parse.hsl-6.html
-test_2d.fillStyle.parse.invalid.hex1.html
-test_2d.fillStyle.parse.invalid.hex2.html
-test_2d.fillStyle.parse.invalid.hex4.html
-test_2d.fillStyle.parse.invalid.hex5.html
-test_2d.fillStyle.parse.invalid.hex7.html
-test_2d.fillStyle.parse.invalid.hex8.html
-test_2d.fillStyle.parse.invalid.hsl-6.html
-test_2d.fillStyle.parse.invalid.name-4.html
-test_2d.fillStyle.parse.invalid.rgba-6.html
-test_2d.fillStyle.parse.invalid.rgba-7.html
-test_2d.fillStyle.parse.rgb-eof.html
-test_2d.fillStyle.parse.rgba-eof.html
-test_2d.fillStyle.parse.rgba-solid-3.html
-test_2d.fillStyle.parse.rgba-solid-4.html
-test_2d.gradient.object.current.html
-test_2d.imageData.get.length.html
-test_2d.line.cap.valid.html
-test_2d.line.join.valid.html
-test_2d.line.miter.valid.html
-test_2d.line.width.scaledefault.html
-test_2d.line.width.valid.html
-test_2d.path.arc.default.html
-test_2d.shadow.enable.blur.html
-test_2d.shadow.enable.x.html
-test_2d.shadow.enable.y.html
-test_2d.state.saverestore.font.html
-test_2d.state.saverestore.textAlign.html
-test_2d.state.saverestore.textBaseline.html
-test_2d.text.align.valid.html
-test_2d.text.baseline.valid.html
-test_2d.text.draw.fill.basic.html
-test_2d.text.draw.fill.maxWidth.large.html
-test_2d.text.draw.fill.maxWidth.small.html
-test_2d.text.draw.fill.maxWidth.zero.html
-test_2d.text.draw.fill.rtl.html
-test_2d.text.draw.fill.unaffected.html
-test_2d.text.draw.kern.consistent.html
-test_2d.text.draw.stroke.basic.html
-test_2d.text.draw.stroke.unaffected.html
-test_2d.text.font.default.html
-test_2d.text.font.parse.basic.html
-test_2d.text.font.parse.complex.html
-test_2d.text.font.parse.invalid.html
-test_2d.text.font.parse.size.percentage.default.html
-test_2d.text.font.parse.size.percentage.html
-test_2d.text.font.parse.system.html
-test_toDataURL.bogustype.html
-test_toDataURL.jpeg.quality.notnumber.html
-test_toDataURL.jpeg.quality.outsiderange.html
-test_toDataURL.lowercase.unicode.html
diff --git a/content/canvas/test/test_canvas.html b/content/canvas/test/test_canvas.html
--- a/content/canvas/test/test_canvas.html
+++ b/content/canvas/test/test_canvas.html
@@ -1662,50 +1662,197 @@ ctx.drawImage(document.getElementById('y
 isPixel(ctx, 15,15, 0,0,0,0, 5);
 isPixel(ctx, 50,25, 0,0,0,0, 5);
 
 
 }
 </script>
 <img class="resource" id="yellow_1.png" src="image_yellow.png">
 
+<!-- [[[ test_2d.composite.uncovered.nocontext.copy.html ]]] -->
+
+<p>Canvas test: 2d.composite.uncovered.nocontext.copy</p>
+<!-- Testing: drawImage() of a canvas with no context draws pixels as (0,0,0,0), and does not leave the pixels unchanged. -->
+<canvas height="50" id="c69" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_composite_uncovered_nocontext_copy() {
+
+var canvas = document.getElementById('c69');
+var ctx = canvas.getContext('2d');
+
+
+ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
+ctx.fillRect(0, 0, 100, 50);
+ctx.globalCompositeOperation = 'copy';
+var canvas2 = document.createElement('canvas');
+ctx.drawImage(canvas2, 0, 0);
+isPixel(ctx, 50,25, 0,0,0,0, 5);
+
+
+}
+</script>
+
+<!-- [[[ test_2d.composite.uncovered.nocontext.destination-atop.html ]]] -->
+
+<p>Canvas test: 2d.composite.uncovered.nocontext.destination-atop</p>
+<!-- Testing: drawImage() of a canvas with no context draws pixels as (0,0,0,0), and does not leave the pixels unchanged. -->
+<canvas height="50" id="c70" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_composite_uncovered_nocontext_destination_atop() {
+
+var canvas = document.getElementById('c70');
+var ctx = canvas.getContext('2d');
+
+
+ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
+ctx.fillRect(0, 0, 100, 50);
+ctx.globalCompositeOperation = 'destination-atop';
+var canvas2 = document.createElement('canvas');
+ctx.drawImage(canvas2, 0, 0);
+isPixel(ctx, 50,25, 0,0,0,0, 5);
+
+
+}
+</script>
+
+<!-- [[[ test_2d.composite.uncovered.nocontext.destination-in.html ]]] -->
+
+<p>Canvas test: 2d.composite.uncovered.nocontext.destination-in</p>
+<!-- Testing: drawImage() of a canvas with no context draws pixels as (0,0,0,0), and does not leave the pixels unchanged. -->
+<canvas height="50" id="c71" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_composite_uncovered_nocontext_destination_in() {
+
+var canvas = document.getElementById('c71');
+var ctx = canvas.getContext('2d');
+
+
+ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
+ctx.fillRect(0, 0, 100, 50);
+ctx.globalCompositeOperation = 'destination-in';
+var canvas2 = document.createElement('canvas');
+ctx.drawImage(canvas2, 0, 0);
+isPixel(ctx, 50,25, 0,0,0,0, 5);
+
+
+}
+</script>
+
+<!-- [[[ test_2d.composite.uncovered.nocontext.source-in.html ]]] -->
+
+<p>Canvas test: 2d.composite.uncovered.nocontext.source-in</p>
+<!-- Testing: drawImage() of a canvas with no context draws pixels as (0,0,0,0), and does not leave the pixels unchanged. -->
+<canvas height="50" id="c72" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_composite_uncovered_nocontext_source_in() {
+
+var canvas = document.getElementById('c72');
+var ctx = canvas.getContext('2d');
+
+
+ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
+ctx.fillRect(0, 0, 100, 50);
+ctx.globalCompositeOperation = 'source-in';
+var canvas2 = document.createElement('canvas');
+ctx.drawImage(canvas2, 0, 0);
+isPixel(ctx, 50,25, 0,0,0,0, 5);
+
+
+}
+</script>
+
+<!-- [[[ test_2d.composite.uncovered.nocontext.source-out.html ]]] -->
+
+<p>Canvas test: 2d.composite.uncovered.nocontext.source-out</p>
+<!-- Testing: drawImage() of a canvas with no context draws pixels as (0,0,0,0), and does not leave the pixels unchanged. -->
+<canvas height="50" id="c73" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_composite_uncovered_nocontext_source_out() {
+
+var canvas = document.getElementById('c73');
+var ctx = canvas.getContext('2d');
+
+
+ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
+ctx.fillRect(0, 0, 100, 50);
+ctx.globalCompositeOperation = 'source-out';
+var canvas2 = document.createElement('canvas');
+ctx.drawImage(canvas2, 0, 0);
+isPixel(ctx, 50,25, 0,0,0,0, 5);
+
+
+}
+</script>
+
 <!-- [[[ test_2d.composite.uncovered.pattern.copy.html ]]] -->
 
 <p>Canvas test: 2d.composite.uncovered.pattern.copy</p>
 <!-- Testing: Pattern fill() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
-<canvas height="50" id="c69" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c74" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_composite_uncovered_pattern_copy() {
 
-var canvas = document.getElementById('c69');
+var canvas = document.getElementById('c74');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
 ctx.fillRect(0, 0, 100, 50);
 ctx.globalCompositeOperation = 'copy';
 ctx.fillStyle = ctx.createPattern(document.getElementById('yellow_2.png'), 'no-repeat');
 ctx.fillRect(0, 50, 100, 50);
 isPixel(ctx, 50,25, 0,0,0,0, 5);
 
 
 }
 </script>
 <img class="resource" id="yellow_2.png" src="image_yellow.png">
 
+<!-- [[[ test_2d.coordinatespace.html ]]] -->
+
+<p>Canvas test: 2d.coordinatespace</p>
+<!-- Testing: Coordinate space goes from top-left to bottom-right -->
+<canvas height="50" id="c75" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_coordinatespace() {
+
+var canvas = document.getElementById('c75');
+var ctx = canvas.getContext('2d');
+
+ctx.fillStyle = '#00f';
+ctx.fillRect(0, 0, 100, 50);
+ctx.fillStyle = '#0ff';
+ctx.fillRect(0, 0, 50, 25);
+isPixel(ctx, 25,12, 0,255,255,255, 0);
+isPixel(ctx, 75,12, 0,0,255,255, 0);
+isPixel(ctx, 25,37, 0,0,255,255, 0);
+isPixel(ctx, 75,37, 0,0,255,255, 0);
+
+todo(false, "test completed successfully"); // (Bug 483989) // because we can't tell that getPixelData isn't using the wrong coordinate space too
+
+
+}
+</script>
+
 <!-- [[[ test_2d.drawImage.3arg.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.3arg</p>
-<canvas height="50" id="c70" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c76" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_3arg() {
 
-var canvas = document.getElementById('c70');
+var canvas = document.getElementById('c76');
 var ctx = canvas.getContext('2d');
 
 ctx.drawImage(document.getElementById('green_1.png'), 0, 0);
 ctx.drawImage(document.getElementById('red_3.png'), -100, 0);
 ctx.drawImage(document.getElementById('red_3.png'), 100, 0);
 ctx.drawImage(document.getElementById('red_3.png'), 0, -50);
 ctx.drawImage(document.getElementById('red_3.png'), 0, 50);
 
@@ -1718,22 +1865,22 @@ isPixel(ctx, 99,49, 0,255,0,255, 2);
 }
 </script>
 <img class="resource" id="red_3.png" src="image_red.png">
 <img class="resource" id="green_1.png" src="image_green.png">
 
 <!-- [[[ test_2d.drawImage.5arg.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.5arg</p>
-<canvas height="50" id="c71" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c77" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_5arg() {
 
-var canvas = document.getElementById('c71');
+var canvas = document.getElementById('c77');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.drawImage(document.getElementById('green_2.png'), 50, 0, 50, 50);
 ctx.drawImage(document.getElementById('red_4.png'), 0, 0, 50, 50);
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 50, 50);
@@ -1747,22 +1894,22 @@ isPixel(ctx, 99,49, 0,255,0,255, 2);
 }
 </script>
 <img class="resource" id="red_4.png" src="image_red.png">
 <img class="resource" id="green_2.png" src="image_green.png">
 
 <!-- [[[ test_2d.drawImage.9arg.basic.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.9arg.basic</p>
-<canvas height="50" id="c72" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c78" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_9arg_basic() {
 
-var canvas = document.getElementById('c72');
+var canvas = document.getElementById('c78');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.drawImage(document.getElementById('green_3.png'), 0, 0, 100, 50, 0, 0, 100, 50);
 isPixel(ctx, 0,0, 0,255,0,255, 2);
 isPixel(ctx, 99,0, 0,255,0,255, 2);
 isPixel(ctx, 0,49, 0,255,0,255, 2);
@@ -1771,22 +1918,22 @@ isPixel(ctx, 99,49, 0,255,0,255, 2);
 
 }
 </script>
 <img class="resource" id="green_3.png" src="image_green.png">
 
 <!-- [[[ test_2d.drawImage.9arg.destpos.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.9arg.destpos</p>
-<canvas height="50" id="c73" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c79" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_9arg_destpos() {
 
-var canvas = document.getElementById('c73');
+var canvas = document.getElementById('c79');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.drawImage(document.getElementById('green_4.png'), 0, 0, 100, 50, 0, 0, 100, 50);
 ctx.drawImage(document.getElementById('red_5.png'), 0, 0, 100, 50, -100, 0, 100, 50);
 ctx.drawImage(document.getElementById('red_5.png'), 0, 0, 100, 50, 100, 0, 100, 50);
 ctx.drawImage(document.getElementById('red_5.png'), 0, 0, 100, 50, 0, -50, 100, 50);
@@ -1800,22 +1947,22 @@ isPixel(ctx, 99,49, 0,255,0,255, 2);
 }
 </script>
 <img class="resource" id="red_5.png" src="image_red.png">
 <img class="resource" id="green_4.png" src="image_green.png">
 
 <!-- [[[ test_2d.drawImage.9arg.destsize.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.9arg.destsize</p>
-<canvas height="50" id="c74" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c80" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_9arg_destsize() {
 
-var canvas = document.getElementById('c74');
+var canvas = document.getElementById('c80');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.drawImage(document.getElementById('green_5.png'), 1, 1, 1, 1, 0, 0, 100, 50);
 ctx.drawImage(document.getElementById('red_6.png'), 0, 0, 100, 50, -50, 0, 50, 50);
 ctx.drawImage(document.getElementById('red_6.png'), 0, 0, 100, 50, 100, 0, 50, 50);
 ctx.drawImage(document.getElementById('red_6.png'), 0, 0, 100, 50, 0, -25, 100, 25);
@@ -1829,22 +1976,22 @@ isPixel(ctx, 99,49, 0,255,0,255, 2);
 }
 </script>
 <img class="resource" id="red_6.png" src="image_red.png">
 <img class="resource" id="green_5.png" src="image_green.png">
 
 <!-- [[[ test_2d.drawImage.9arg.sourcepos.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.9arg.sourcepos</p>
-<canvas height="50" id="c75" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c81" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_9arg_sourcepos() {
 
-var canvas = document.getElementById('c75');
+var canvas = document.getElementById('c81');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.drawImage(document.getElementById('rgrg-256x256_1.png'), 140, 20, 100, 50, 0, 0, 100, 50);
 isPixel(ctx, 0,0, 0,255,0,255, 2);
 isPixel(ctx, 99,0, 0,255,0,255, 2);
 isPixel(ctx, 0,49, 0,255,0,255, 2);
@@ -1853,22 +2000,22 @@ isPixel(ctx, 99,49, 0,255,0,255, 2);
 
 }
 </script>
 <img class="resource" id="rgrg-256x256_1.png" src="image_rgrg-256x256.png">
 
 <!-- [[[ test_2d.drawImage.9arg.sourcesize.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.9arg.sourcesize</p>
-<canvas height="50" id="c76" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c82" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_9arg_sourcesize() {
 
-var canvas = document.getElementById('c76');
+var canvas = document.getElementById('c82');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.drawImage(document.getElementById('rgrg-256x256_2.png'), 0, 0, 256, 256, 0, 0, 100, 50);
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 51, 26);
 ctx.fillRect(49, 24, 51, 26);
@@ -1884,22 +2031,22 @@ isPixel(ctx, 80,30, 0,255,0,255, 2);
 
 }
 </script>
 <img class="resource" id="rgrg-256x256_2.png" src="image_rgrg-256x256.png">
 
 <!-- [[[ test_2d.drawImage.alpha.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.alpha</p>
-<canvas height="50" id="c77" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c83" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_alpha() {
 
-var canvas = document.getElementById('c77');
+var canvas = document.getElementById('c83');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.globalAlpha = 0;
 ctx.drawImage(document.getElementById('red_7.png'), 0, 0);
 isPixel(ctx, 50,25, 0,255,0,255, 2);
 
@@ -1907,63 +2054,63 @@ isPixel(ctx, 50,25, 0,255,0,255, 2);
 }
 </script>
 <img class="resource" id="red_7.png" src="image_red.png">
 
 <!-- [[[ test_2d.drawImage.animated.poster.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.animated.poster</p>
 <!-- Testing: drawImage() of an APNG draws the poster frame -->
-<canvas height="50" id="c78" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c84" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_animated_poster() {
 
-var canvas = document.getElementById('c78');
+var canvas = document.getElementById('c84');
 var ctx = canvas.getContext('2d');
 
 ctx.drawImage(document.getElementById('anim-poster-gr_1.png'), 0, 0);
 todo_isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 
 }
 </script>
 <img class="resource" id="anim-poster-gr_1.png" src="image_anim-poster-gr.png">
 
 <!-- [[[ test_2d.drawImage.broken.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.broken</p>
-<canvas height="50" id="c79" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c85" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_broken() {
 
-var canvas = document.getElementById('c79');
+var canvas = document.getElementById('c85');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 var img = document.getElementById('broken_1.png');
 ctx.drawImage(img, 0, 0);
 todo_isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 
 }
 </script>
 <img class="resource" id="broken_1.png" src="image_broken.png">
 
 <!-- [[[ test_2d.drawImage.canvas.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.canvas</p>
-<canvas height="50" id="c80" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c86" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_canvas() {
 
-var canvas = document.getElementById('c80');
+var canvas = document.getElementById('c86');
 var ctx = canvas.getContext('2d');
 
 var canvas2 = document.createElement('canvas');
 canvas2.width = 100;
 canvas2.height = 50;
 var ctx2 = canvas2.getContext('2d');
 ctx2.fillStyle = '#0f0';
 ctx2.fillRect(0, 0, 100, 50);
@@ -1978,22 +2125,22 @@ isPixel(ctx, 99,49, 0,255,0,255, 2);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.drawImage.clip.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.clip</p>
-<canvas height="50" id="c81" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c87" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_clip() {
 
-var canvas = document.getElementById('c81');
+var canvas = document.getElementById('c87');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.rect(-10, -10, 1, 1);
 ctx.clip();
 ctx.drawImage(document.getElementById('red_8.png'), 0, 0);
 isPixel(ctx, 50,25, 0,255,0,255, 2);
@@ -2001,91 +2148,211 @@ isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 }
 </script>
 <img class="resource" id="red_8.png" src="image_red.png">
 
 <!-- [[[ test_2d.drawImage.composite.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.composite</p>
-<canvas height="50" id="c82" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c88" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_composite() {
 
-var canvas = document.getElementById('c82');
+var canvas = document.getElementById('c88');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.globalCompositeOperation = 'destination-over';
 ctx.drawImage(document.getElementById('red_9.png'), 0, 0);
 isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 
 }
 </script>
 <img class="resource" id="red_9.png" src="image_red.png">
 
 <!-- [[[ test_2d.drawImage.floatsource.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.floatsource</p>
-<canvas height="50" id="c83" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c89" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_floatsource() {
 
-var canvas = document.getElementById('c83');
+var canvas = document.getElementById('c89');
 var ctx = canvas.getContext('2d');
 
 ctx.drawImage(document.getElementById('green_6.png'), 10.1, 10.1, 0.1, 0.1, 0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 
 }
 </script>
 <img class="resource" id="green_6.png" src="image_green.png">
 
+<!-- [[[ test_2d.drawImage.incomplete.emptysrc.html ]]] -->
+
+<p>Canvas test: 2d.drawImage.incomplete.emptysrc</p>
+<canvas height="50" id="c90" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_drawImage_incomplete_emptysrc() {
+
+var canvas = document.getElementById('c90');
+var ctx = canvas.getContext('2d');
+
+var _thrown_outer = false;
+try {
+
+ctx.fillStyle = '#0f0';
+ctx.fillRect(0, 0, 100, 50);
+var img = document.getElementById('red_10.png');
+img.src = "";
+ctx.drawImage(img, 0, 0);
+isPixel(ctx, 50,25, 0,255,0,255, 2);
+
+} catch (e) {
+    _thrown_outer = true;
+}
+todo(!_thrown_outer, 'should not throw exception');
+
+
+}
+</script>
+<img class="resource" id="red_10.png" src="image_red.png">
+
 <!-- [[[ test_2d.drawImage.incomplete.immediate.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.incomplete.immediate</p>
-<canvas height="50" id="c84" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c91" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_incomplete_immediate() {
 
-var canvas = document.getElementById('c84');
+var canvas = document.getElementById('c91');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 var img = new Image();
 img.src = 'image_red.png';
 // This triggers the "update the image data" algorithm.
 // The image will not go to the "completely available" state
 // until a fetch task in the networking task source is processed,
 // so the image must not be fully decodable yet:
 ctx.drawImage(img, 0, 0);
 todo_isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 
 }
 </script>
-<img class="resource" id="red_10.png" src="image_red.png">
+<img class="resource" id="red_11.png" src="image_red.png">
+
+<!-- [[[ test_2d.drawImage.incomplete.nosrc.html ]]] -->
+
+<p>Canvas test: 2d.drawImage.incomplete.nosrc</p>
+<canvas height="50" id="c92" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_drawImage_incomplete_nosrc() {
+
+var canvas = document.getElementById('c92');
+var ctx = canvas.getContext('2d');
+
+var _thrown_outer = false;
+try {
+
+ctx.fillStyle = '#0f0';
+ctx.fillRect(0, 0, 100, 50);
+var img = new Image();
+ctx.drawImage(img, 0, 0);
+isPixel(ctx, 50,25, 0,255,0,255, 2);
+
+} catch (e) {
+    _thrown_outer = true;
+}
+todo(!_thrown_outer, 'should not throw exception');
+
+
+}
+</script>
+
+<!-- [[[ test_2d.drawImage.incomplete.reload.html ]]] -->
+
+<p>Canvas test: 2d.drawImage.incomplete.reload</p>
+<canvas height="50" id="c93" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_drawImage_incomplete_reload() {
+
+var canvas = document.getElementById('c93');
+var ctx = canvas.getContext('2d');
+
+ctx.fillStyle = '#0f0';
+ctx.fillRect(0, 0, 100, 50);
+var img = document.getElementById('yellow_3.png');
+img.src = 'image_red.png';
+// This triggers the "update the image data" algorithm,
+// and resets the image to the "unavailable" state.
+// The image will not go to the "completely available" state
+// until a fetch task in the networking task source is processed,
+// so the image must not be fully decodable yet:
+ctx.drawImage(img, 0, 0);
+todo_isPixel(ctx, 50,25, 0,255,0,255, 2);
+
+
+}
+</script>
+<img class="resource" id="yellow_3.png" src="image_yellow.png">
+<img class="resource" id="red_12.png" src="image_red.png">
+
+<!-- [[[ test_2d.drawImage.incomplete.removedsrc.html ]]] -->
+
+<p>Canvas test: 2d.drawImage.incomplete.removedsrc</p>
+<canvas height="50" id="c94" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_drawImage_incomplete_removedsrc() {
+
+var canvas = document.getElementById('c94');
+var ctx = canvas.getContext('2d');
+
+var _thrown_outer = false;
+try {
+
+ctx.fillStyle = '#0f0';
+ctx.fillRect(0, 0, 100, 50);
+var img = document.getElementById('red_13.png');
+img.removeAttribute('src');
+ctx.drawImage(img, 0, 0);
+isPixel(ctx, 50,25, 0,255,0,255, 2);
+
+} catch (e) {
+    _thrown_outer = true;
+}
+todo(!_thrown_outer, 'should not throw exception');
+
+
+}
+</script>
+<img class="resource" id="red_13.png" src="image_red.png">
 
 <!-- [[[ test_2d.drawImage.negativedest.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.negativedest</p>
 <!-- Testing: Negative destination width/height represents the correct rectangle -->
-<canvas height="50" id="c85" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c95" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_negativedest() {
 
-var canvas = document.getElementById('c85');
+var canvas = document.getElementById('c95');
 var ctx = canvas.getContext('2d');
 
 var _thrown_outer = false;
 try {
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.drawImage(document.getElementById('ggrr-256x256_1.png'), 100, 78, 50, 50, 0, 50, 50, -50);
@@ -2110,22 +2377,22 @@ todo(!_thrown_outer, 'should not throw e
 }
 </script>
 <img class="resource" id="ggrr-256x256_1.png" src="image_ggrr-256x256.png">
 
 <!-- [[[ test_2d.drawImage.negativedir.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.negativedir</p>
 <!-- Testing: Negative dimensions do not affect the direction of the image -->
-<canvas height="50" id="c86" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c96" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_negativedir() {
 
-var canvas = document.getElementById('c86');
+var canvas = document.getElementById('c96');
 var ctx = canvas.getContext('2d');
 
 var _thrown_outer = false;
 try {
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.drawImage(document.getElementById('ggrr-256x256_2.png'), 0, 178, 50, -100, 0, 0, 50, 100);
@@ -2150,22 +2417,22 @@ todo(!_thrown_outer, 'should not throw e
 }
 </script>
 <img class="resource" id="ggrr-256x256_2.png" src="image_ggrr-256x256.png">
 
 <!-- [[[ test_2d.drawImage.negativesource.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.negativesource</p>
 <!-- Testing: Negative source width/height represents the correct rectangle -->
-<canvas height="50" id="c87" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c97" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_negativesource() {
 
-var canvas = document.getElementById('c87');
+var canvas = document.getElementById('c97');
 var ctx = canvas.getContext('2d');
 
 var _thrown_outer = false;
 try {
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.drawImage(document.getElementById('ggrr-256x256_3.png'), 100, 78, -100, 50, 0, 0, 50, 50);
@@ -2190,27 +2457,27 @@ todo(!_thrown_outer, 'should not throw e
 }
 </script>
 <img class="resource" id="ggrr-256x256_3.png" src="image_ggrr-256x256.png">
 
 <!-- [[[ test_2d.drawImage.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.nonfinite</p>
 <!-- Testing: drawImage() with Infinity/NaN is ignored -->
-<canvas height="50" id="c88" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c98" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_nonfinite() {
 
-var canvas = document.getElementById('c88');
-var ctx = canvas.getContext('2d');
-
-ctx.fillStyle = '#0f0';
-ctx.fillRect(0, 0, 100, 50);
-var red = document.getElementById('red_11.png');
+var canvas = document.getElementById('c98');
+var ctx = canvas.getContext('2d');
+
+ctx.fillStyle = '#0f0';
+ctx.fillRect(0, 0, 100, 50);
+var red = document.getElementById('red_14.png');
 ctx.drawImage(red, Infinity, 0);
 ctx.drawImage(red, -Infinity, 0);
 ctx.drawImage(red, NaN, 0);
 ctx.drawImage(red, 0, Infinity);
 ctx.drawImage(red, 0, -Infinity);
 ctx.drawImage(red, 0, NaN);
 ctx.drawImage(red, Infinity, Infinity);
 ctx.drawImage(red, Infinity, 0, 100, 50);
@@ -2507,28 +2774,28 @@ ctx.drawImage(red, 0, 0, 100, 50, 0, Inf
 ctx.drawImage(red, 0, 0, 100, 50, 0, Infinity, Infinity, Infinity);
 ctx.drawImage(red, 0, 0, 100, 50, 0, Infinity, 100, Infinity);
 ctx.drawImage(red, 0, 0, 100, 50, 0, 0, Infinity, Infinity);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
-<img class="resource" id="red_11.png" src="image_red.png">
+<img class="resource" id="red_14.png" src="image_red.png">
 
 <!-- [[[ test_2d.drawImage.nowrap.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.nowrap</p>
 <!-- Testing: Stretched images do not get pixels wrapping around the edges -->
-<canvas height="50" id="c89" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c99" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_nowrap() {
 
-var canvas = document.getElementById('c89');
+var canvas = document.getElementById('c99');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.drawImage(document.getElementById('redtransparent_1.png'), -1950, 0, 2000, 50);
 isPixel(ctx, 45,25, 0,255,0,255, 2);
 isPixel(ctx, 50,25, 0,255,0,255, 2);
 isPixel(ctx, 55,25, 0,255,0,255, 2);
@@ -2536,63 +2803,63 @@ isPixel(ctx, 55,25, 0,255,0,255, 2);
 
 }
 </script>
 <img class="resource" id="redtransparent_1.png" src="image_redtransparent.png">
 
 <!-- [[[ test_2d.drawImage.null.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.null</p>
-<canvas height="50" id="c90" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c100" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_null() {
 
-var canvas = document.getElementById('c90');
+var canvas = document.getElementById('c100');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   ctx.drawImage(null, 0, 0);
 } catch (e) { _thrown = e }; todo(_thrown && (_thrown instanceof TypeError), "should throw TypeError");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.drawImage.path.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.path</p>
-<canvas height="50" id="c91" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c101" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_path() {
 
-var canvas = document.getElementById('c91');
+var canvas = document.getElementById('c101');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.rect(0, 0, 100, 50);
-ctx.drawImage(document.getElementById('red_12.png'), 0, 0);
+ctx.drawImage(document.getElementById('red_15.png'), 0, 0);
 ctx.fill();
 isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 
 }
 </script>
-<img class="resource" id="red_12.png" src="image_red.png">
+<img class="resource" id="red_15.png" src="image_red.png">
 
 <!-- [[[ test_2d.drawImage.self.1.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.self.1</p>
-<canvas height="50" id="c92" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c102" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_self_1() {
 
-var canvas = document.getElementById('c92');
+var canvas = document.getElementById('c102');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 50, 50);
 ctx.fillStyle = '#f00';
 ctx.fillRect(50, 0, 50, 50);
 ctx.drawImage(canvas, 50, 0);
 
@@ -2603,22 +2870,22 @@ isPixel(ctx, 99,49, 0,255,0,255, 2);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.drawImage.self.2.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.self.2</p>
-<canvas height="50" id="c93" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c103" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_self_2() {
 
-var canvas = document.getElementById('c93');
+var canvas = document.getElementById('c103');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 1, 100, 49);
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 1);
 ctx.drawImage(canvas, 0, 1);
 ctx.fillStyle = '#0f0';
@@ -2631,45 +2898,45 @@ isPixel(ctx, 99,49, 0,255,0,255, 2);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.drawImage.transform.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.transform</p>
-<canvas height="50" id="c94" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c104" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_transform() {
 
-var canvas = document.getElementById('c94');
+var canvas = document.getElementById('c104');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.translate(100, 0);
-ctx.drawImage(document.getElementById('red_13.png'), 0, 0);
+ctx.drawImage(document.getElementById('red_16.png'), 0, 0);
 isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 
 }
 </script>
-<img class="resource" id="red_13.png" src="image_red.png">
+<img class="resource" id="red_16.png" src="image_red.png">
 
 <!-- [[[ test_2d.drawImage.wrongtype.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.wrongtype</p>
 <!-- Testing: Incorrect image types in drawImage do not match any defined overloads, so WebIDL throws a TypeError -->
-<canvas height="50" id="c95" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c105" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_wrongtype() {
 
-var canvas = document.getElementById('c95');
+var canvas = document.getElementById('c105');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   ctx.drawImage(undefined, 0, 0);
 } catch (e) { _thrown = e }; todo(_thrown && (_thrown instanceof TypeError), "should throw TypeError");
 var _thrown = undefined; try {
   ctx.drawImage(0, 0, 0);
 } catch (e) { _thrown = e }; todo(_thrown && (_thrown instanceof TypeError), "should throw TypeError");
@@ -2679,76 +2946,115 @@ var _thrown = undefined; try {
 var _thrown = undefined; try {
   ctx.drawImage(document.createElement('p'), 0, 0);
 } catch (e) { _thrown = e }; todo(_thrown && (_thrown instanceof TypeError), "should throw TypeError");
 
 
 }
 </script>
 
+<!-- [[[ test_2d.drawImage.zerocanvas.html ]]] -->
+
+<p>Canvas test: 2d.drawImage.zerocanvas</p>
+<canvas height="50" id="c106" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_drawImage_zerocanvas() {
+
+var canvas = document.getElementById('c106');
+var ctx = canvas.getContext('2d');
+
+ctx.fillStyle = '#0f0';
+ctx.fillRect(0, 0, 100, 50);
+
+var canvas2 = document.createElement('canvas');
+canvas2.width = 0;
+canvas2.height = 10;
+var _thrown = undefined; try {
+  ctx.drawImage(canvas2, 0, 0);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.INVALID_STATE_ERR, "should throw INVALID_STATE_ERR");
+
+canvas2.width = 10;
+canvas2.height = 0;
+var _thrown = undefined; try {
+  ctx.drawImage(canvas2, 0, 0);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.INVALID_STATE_ERR, "should throw INVALID_STATE_ERR");
+
+canvas2.width = 0;
+canvas2.height = 0;
+var _thrown = undefined; try {
+  ctx.drawImage(canvas2, 0, 0);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.INVALID_STATE_ERR, "should throw INVALID_STATE_ERR");
+
+isPixel(ctx, 50,25, 0,255,0,255, 2);
+
+
+}
+</script>
+
 <!-- [[[ test_2d.drawImage.zerosource.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.zerosource</p>
 <!-- Testing: drawImage with zero-sized source rectangle throws INDEX_SIZE_ERR -->
-<canvas height="50" id="c96" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c107" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_zerosource() {
 
-var canvas = document.getElementById('c96');
-var ctx = canvas.getContext('2d');
-
-ctx.fillStyle = '#0f0';
-ctx.fillRect(0, 0, 100, 50);
-var _thrown = undefined; try {
-  ctx.drawImage(document.getElementById('red_14.png'), 10, 10, 0, 1, 0, 0, 100, 50);
+var canvas = document.getElementById('c107');
+var ctx = canvas.getContext('2d');
+
+ctx.fillStyle = '#0f0';
+ctx.fillRect(0, 0, 100, 50);
+var _thrown = undefined; try {
+  ctx.drawImage(document.getElementById('red_17.png'), 10, 10, 0, 1, 0, 0, 100, 50);
 } catch (e) { _thrown = e }; todo(_thrown && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw INDEX_SIZE_ERR");
 var _thrown = undefined; try {
-  ctx.drawImage(document.getElementById('red_14.png'), 10, 10, 1, 0, 0, 0, 100, 50);
+  ctx.drawImage(document.getElementById('red_17.png'), 10, 10, 1, 0, 0, 0, 100, 50);
 } catch (e) { _thrown = e }; todo(_thrown && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw INDEX_SIZE_ERR");
 var _thrown = undefined; try {
-  ctx.drawImage(document.getElementById('red_14.png'), 10, 10, 0, 0, 0, 0, 100, 50);
+  ctx.drawImage(document.getElementById('red_17.png'), 10, 10, 0, 0, 0, 0, 100, 50);
 } catch (e) { _thrown = e }; todo(_thrown && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw INDEX_SIZE_ERR");
 isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 
 }
 </script>
-<img class="resource" id="red_14.png" src="image_red.png">
+<img class="resource" id="red_17.png" src="image_red.png">
 
 <!-- [[[ test_2d.fillRect.basic.html ]]] -->
 
 <p>Canvas test: 2d.fillRect.basic</p>
 <!-- Testing: fillRect works -->
-<canvas height="50" id="c97" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c108" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillRect_basic() {
 
-var canvas = document.getElementById('c97');
+var canvas = document.getElementById('c108');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillRect.clip.html ]]] -->
 
 <p>Canvas test: 2d.fillRect.clip</p>
 <!-- Testing: fillRect is affected by clipping regions -->
-<canvas height="50" id="c98" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c109" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillRect_clip() {
 
-var canvas = document.getElementById('c98');
+var canvas = document.getElementById('c109');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.beginPath();
 ctx.rect(0, 0, 16, 16);
 ctx.clip();
@@ -2764,22 +3070,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.fillRect.negative.html ]]] -->
 
 <p>Canvas test: 2d.fillRect.negative</p>
 <!-- Testing: fillRect of negative sizes works -->
-<canvas height="50" id="c99" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c110" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillRect_negative() {
 
-var canvas = document.getElementById('c99');
+var canvas = document.getElementById('c110');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 50, 25);
 ctx.fillRect(100, 0, -50, 25);
 ctx.fillRect(0, 50, 50, -25);
@@ -2792,22 +3098,22 @@ isPixel(ctx, 75,37, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.fillRect.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.fillRect.nonfinite</p>
 <!-- Testing: fillRect() with Infinity/NaN is ignored -->
-<canvas height="50" id="c100" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c111" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillRect_nonfinite() {
 
-var canvas = document.getElementById('c100');
+var canvas = document.getElementById('c111');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(Infinity, 0, 100, 50);
 ctx.fillRect(-Infinity, 0, 100, 50);
@@ -2838,22 +3144,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.fillRect.path.html ]]] -->
 
 <p>Canvas test: 2d.fillRect.path</p>
 <!-- Testing: fillRect does not affect the current path -->
-<canvas height="50" id="c101" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c112" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillRect_path() {
 
-var canvas = document.getElementById('c101');
+var canvas = document.getElementById('c112');
 var ctx = canvas.getContext('2d');
 
 ctx.beginPath();
 ctx.rect(0, 0, 100, 50);
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 16, 16);
 ctx.fillStyle = '#0f0';
 ctx.fill();
@@ -2862,22 +3168,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.fillRect.shadow.html ]]] -->
 
 <p>Canvas test: 2d.fillRect.shadow</p>
 <!-- Testing: fillRect draws shadows -->
-<canvas height="50" id="c102" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c113" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillRect_shadow() {
 
-var canvas = document.getElementById('c102');
+var canvas = document.getElementById('c113');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.shadowColor = '#0f0';
 ctx.shadowBlur = 0;
 ctx.shadowOffsetX = 0;
 ctx.shadowOffsetY = 50;
@@ -2887,44 +3193,44 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.fillRect.transform.html ]]] -->
 
 <p>Canvas test: 2d.fillRect.transform</p>
 <!-- Testing: fillRect is affected by transforms -->
-<canvas height="50" id="c103" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c114" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillRect_transform() {
 
-var canvas = document.getElementById('c103');
+var canvas = document.getElementById('c114');
 var ctx = canvas.getContext('2d');
 
 ctx.scale(10, 10);
 ctx.translate(0, 5);
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, -5, 10, 5);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillRect.zero.html ]]] -->
 
 <p>Canvas test: 2d.fillRect.zero</p>
 <!-- Testing: fillRect of zero pixels has no effect -->
-<canvas height="50" id="c104" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c115" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillRect_zero() {
 
-var canvas = document.getElementById('c104');
+var canvas = document.getElementById('c115');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 0);
 ctx.fillRect(0, 0, 0, 50);
 ctx.fillRect(0, 0, 0, 0);
@@ -2932,115 +3238,115 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.default.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.default</p>
-<canvas height="50" id="c105" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c116" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_default() {
 
-var canvas = document.getElementById('c105');
+var canvas = document.getElementById('c116');
 var ctx = canvas.getContext('2d');
 
 ok(ctx.fillStyle == '#000000', "ctx.fillStyle == '#000000'");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.get.semitransparent.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.get.semitransparent</p>
-<canvas height="50" id="c106" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c117" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_get_semitransparent() {
 
-var canvas = document.getElementById('c106');
+var canvas = document.getElementById('c117');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = 'rgba(255,255,255,0.45)';
 ok(ctx.fillStyle.match(/^rgba\(255, 255, 255, 0\.4\d+\)$/), "ctx.fillStyle.match(/^rgba\\(255, 255, 255, 0\\.4\\d+\\)$/)");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.get.solid.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.get.solid</p>
-<canvas height="50" id="c107" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c118" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_get_solid() {
 
-var canvas = document.getElementById('c107');
+var canvas = document.getElementById('c118');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#fa0';
 ok(ctx.fillStyle === '#ffaa00', "ctx.fillStyle === '#ffaa00'");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.get.transparent.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.get.transparent</p>
-<canvas height="50" id="c108" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c119" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_get_transparent() {
 
-var canvas = document.getElementById('c108');
+var canvas = document.getElementById('c119');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = 'rgba(0,0,0,0)';
 ok(ctx.fillStyle == 'rgba(0, 0, 0, 0)', "ctx.fillStyle == 'rgba(0, 0, 0, 0)'");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.invalidstring.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.invalidstring</p>
-<canvas height="50" id="c109" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c120" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_invalidstring() {
 
-var canvas = document.getElementById('c109');
+var canvas = document.getElementById('c120');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#0f0';
 ctx.fillStyle = 'invalid';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.invalidtype.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.invalidtype</p>
-<canvas height="50" id="c110" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c121" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_invalidtype() {
 
-var canvas = document.getElementById('c110');
+var canvas = document.getElementById('c121');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#0f0';
 ctx.fillStyle = null;
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
@@ -3048,44 +3354,44 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.current.basic.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.current.basic</p>
 <!-- Testing: currentColor is computed from the canvas element -->
-<canvas height="50" id="c111" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c122" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_current_basic() {
 
-var canvas = document.getElementById('c111');
+var canvas = document.getElementById('c122');
 var ctx = canvas.getContext('2d');
 
 canvas.setAttribute('style', 'color: #0f0');
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'currentColor';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.current.changed.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.current.changed</p>
 <!-- Testing: currentColor is computed when the attribute is set, not when it is painted -->
-<canvas height="50" id="c112" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c123" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_current_changed() {
 
-var canvas = document.getElementById('c112');
+var canvas = document.getElementById('c123');
 var ctx = canvas.getContext('2d');
 
 canvas.setAttribute('style', 'color: #0f0');
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'currentColor';
 canvas.setAttribute('style', 'color: #f00');
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
@@ -3093,22 +3399,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.current.removed.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.current.removed</p>
 <!-- Testing: currentColor is solid black when the canvas element is not in a document -->
-<canvas height="50" id="c113" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c124" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_current_removed() {
 
-var canvas = document.getElementById('c113');
+var canvas = document.getElementById('c124');
 var ctx = canvas.getContext('2d');
 
 // Try not to let it undetectably incorrectly pick up opaque-black
 // from other parts of the document:
 document.body.parentNode.setAttribute('style', 'color: #f00');
 document.body.setAttribute('style', 'color: #f00');
 canvas.setAttribute('style', 'color: #f00');
 
@@ -3126,1442 +3432,1778 @@ isPixel(ctx, 50,25, 0,0,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.hex3.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.hex3</p>
-<canvas height="50" id="c114" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c125" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_hex3() {
 
-var canvas = document.getElementById('c114');
+var canvas = document.getElementById('c125');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.hex6.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.hex6</p>
-<canvas height="50" id="c115" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c126" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_hex6() {
 
-var canvas = document.getElementById('c115');
+var canvas = document.getElementById('c126');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = '#00fF00';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.hsl-1.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.hsl-1</p>
-<canvas height="50" id="c116" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c127" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_hsl_1() {
 
-var canvas = document.getElementById('c116');
+var canvas = document.getElementById('c127');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'hsl(120, 100%, 50%)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.hsl-2.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.hsl-2</p>
-<canvas height="50" id="c117" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c128" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_hsl_2() {
 
-var canvas = document.getElementById('c117');
+var canvas = document.getElementById('c128');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'hsl( -240 , 100% , 50% )';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.hsl-3.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.hsl-3</p>
-<canvas height="50" id="c118" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c129" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_hsl_3() {
 
-var canvas = document.getElementById('c118');
+var canvas = document.getElementById('c129');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'hsl(360120, 100%, 50%)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.hsl-4.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.hsl-4</p>
-<canvas height="50" id="c119" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c130" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_hsl_4() {
 
-var canvas = document.getElementById('c119');
+var canvas = document.getElementById('c130');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'hsl(-360240, 100%, 50%)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.hsl-5.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.hsl-5</p>
-<canvas height="50" id="c120" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c131" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_hsl_5() {
 
-var canvas = document.getElementById('c120');
+var canvas = document.getElementById('c131');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'hsl(120.0, 100.0%, 50.0%)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
+<!-- [[[ test_2d.fillStyle.parse.hsl-6.html ]]] -->
+
+<p>Canvas test: 2d.fillStyle.parse.hsl-6</p>
+<canvas height="50" id="c132" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_fillStyle_parse_hsl_6() {
+
+var canvas = document.getElementById('c132');
+var ctx = canvas.getContext('2d');
+
+
+ctx.fillStyle = '#f00';
+ctx.fillStyle = 'hsl(+120, +100%, +50%)';
+ctx.fillRect(0, 0, 100, 50);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+
+
+}
+</script>
+
 <!-- [[[ test_2d.fillStyle.parse.hsl-clamp-1.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.hsl-clamp-1</p>
-<canvas height="50" id="c121" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c133" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_hsl_clamp_1() {
 
-var canvas = document.getElementById('c121');
+var canvas = document.getElementById('c133');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'hsl(120, 200%, 50%)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.hsl-clamp-2.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.hsl-clamp-2</p>
-<canvas height="50" id="c122" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c134" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_hsl_clamp_2() {
 
-var canvas = document.getElementById('c122');
+var canvas = document.getElementById('c134');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'hsl(120, -200%, 49.9%)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 127,127,127,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.hsl-clamp-3.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.hsl-clamp-3</p>
-<canvas height="50" id="c123" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c135" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_hsl_clamp_3() {
 
-var canvas = document.getElementById('c123');
+var canvas = document.getElementById('c135');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'hsl(120, 100%, 200%)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 255,255,255,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.hsl-clamp-4.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.hsl-clamp-4</p>
-<canvas height="50" id="c124" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c136" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_hsl_clamp_4() {
 
-var canvas = document.getElementById('c124');
+var canvas = document.getElementById('c136');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'hsl(120, 100%, -200%)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,0,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.hsla-1.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.hsla-1</p>
-<canvas height="50" id="c125" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c137" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_hsla_1() {
 
-var canvas = document.getElementById('c125');
+var canvas = document.getElementById('c137');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'hsla(120, 100%, 50%, 0.499)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,127, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.hsla-2.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.hsla-2</p>
-<canvas height="50" id="c126" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c138" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_hsla_2() {
 
-var canvas = document.getElementById('c126');
+var canvas = document.getElementById('c138');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'hsla( 120.0 , 100.0% , 50.0% , 1 )';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.hsla-clamp-1.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.hsla-clamp-1</p>
-<canvas height="50" id="c127" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c139" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_hsla_clamp_1() {
 
-var canvas = document.getElementById('c127');
+var canvas = document.getElementById('c139');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'hsla(120, 200%, 50%, 1)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.hsla-clamp-2.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.hsla-clamp-2</p>
-<canvas height="50" id="c128" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c140" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_hsla_clamp_2() {
 
-var canvas = document.getElementById('c128');
+var canvas = document.getElementById('c140');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'hsla(120, -200%, 49.9%, 1)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 127,127,127,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.hsla-clamp-3.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.hsla-clamp-3</p>
-<canvas height="50" id="c129" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c141" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_hsla_clamp_3() {
 
-var canvas = document.getElementById('c129');
+var canvas = document.getElementById('c141');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'hsla(120, 100%, 200%, 1)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 255,255,255,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.hsla-clamp-4.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.hsla-clamp-4</p>
-<canvas height="50" id="c130" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c142" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_hsla_clamp_4() {
 
-var canvas = document.getElementById('c130');
+var canvas = document.getElementById('c142');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'hsla(120, 100%, -200%, 1)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,0,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.hsla-clamp-5.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.hsla-clamp-5</p>
-<canvas height="50" id="c131" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c143" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_hsla_clamp_5() {
 
-var canvas = document.getElementById('c131');
+var canvas = document.getElementById('c143');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'hsla(120, 100%, 50%, 2)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.hsla-clamp-6.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.hsla-clamp-6</p>
-<canvas height="50" id="c132" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c144" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_hsla_clamp_6() {
 
-var canvas = document.getElementById('c132');
+var canvas = document.getElementById('c144');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'hsla(120, 100%, 0%, -2)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,0,0,0, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.html4.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.html4</p>
-<canvas height="50" id="c133" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c145" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_html4() {
 
-var canvas = document.getElementById('c133');
+var canvas = document.getElementById('c145');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'limE';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
+<!-- [[[ test_2d.fillStyle.parse.invalid.hex1.html ]]] -->
+
+<p>Canvas test: 2d.fillStyle.parse.invalid.hex1</p>
+<canvas height="50" id="c146" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_fillStyle_parse_invalid_hex1() {
+
+var canvas = document.getElementById('c146');
+var ctx = canvas.getContext('2d');
+
+
+ctx.fillStyle = '#0f0';
+try { ctx.fillStyle = '#f'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
+ctx.fillRect(0, 0, 100, 50);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+
+
+}
+</script>
+
+<!-- [[[ test_2d.fillStyle.parse.invalid.hex2.html ]]] -->
+
+<p>Canvas test: 2d.fillStyle.parse.invalid.hex2</p>
+<canvas height="50" id="c147" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_fillStyle_parse_invalid_hex2() {
+
+var canvas = document.getElementById('c147');
+var ctx = canvas.getContext('2d');
+
+
+ctx.fillStyle = '#0f0';
+try { ctx.fillStyle = '#f0'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
+ctx.fillRect(0, 0, 100, 50);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+
+
+}
+</script>
+
 <!-- [[[ test_2d.fillStyle.parse.invalid.hex3.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.hex3</p>
-<canvas height="50" id="c134" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c148" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_hex3() {
 
-var canvas = document.getElementById('c134');
+var canvas = document.getElementById('c148');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = '#g00'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
+<!-- [[[ test_2d.fillStyle.parse.invalid.hex4.html ]]] -->
+
+<p>Canvas test: 2d.fillStyle.parse.invalid.hex4</p>
+<canvas height="50" id="c149" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_fillStyle_parse_invalid_hex4() {
+
+var canvas = document.getElementById('c149');
+var ctx = canvas.getContext('2d');
+
+
+ctx.fillStyle = '#0f0';
+try { ctx.fillStyle = '#ff00'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
+ctx.fillRect(0, 0, 100, 50);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+
+
+}
+</script>
+
+<!-- [[[ test_2d.fillStyle.parse.invalid.hex5.html ]]] -->
+
+<p>Canvas test: 2d.fillStyle.parse.invalid.hex5</p>
+<canvas height="50" id="c150" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_fillStyle_parse_invalid_hex5() {
+
+var canvas = document.getElementById('c150');
+var ctx = canvas.getContext('2d');
+
+
+ctx.fillStyle = '#0f0';
+try { ctx.fillStyle = '#ff000'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
+ctx.fillRect(0, 0, 100, 50);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+
+
+}
+</script>
+
 <!-- [[[ test_2d.fillStyle.parse.invalid.hex6.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.hex6</p>
-<canvas height="50" id="c135" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c151" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_hex6() {
 
-var canvas = document.getElementById('c135');
+var canvas = document.getElementById('c151');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = '#fg0000'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
+<!-- [[[ test_2d.fillStyle.parse.invalid.hex7.html ]]] -->
+
+<p>Canvas test: 2d.fillStyle.parse.invalid.hex7</p>
+<canvas height="50" id="c152" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_fillStyle_parse_invalid_hex7() {
+
+var canvas = document.getElementById('c152');
+var ctx = canvas.getContext('2d');
+
+
+ctx.fillStyle = '#0f0';
+try { ctx.fillStyle = '#ff0000f'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
+ctx.fillRect(0, 0, 100, 50);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+
+
+}
+</script>
+
+<!-- [[[ test_2d.fillStyle.parse.invalid.hex8.html ]]] -->
+
+<p>Canvas test: 2d.fillStyle.parse.invalid.hex8</p>
+<canvas height="50" id="c153" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_fillStyle_parse_invalid_hex8() {
+
+var canvas = document.getElementById('c153');
+var ctx = canvas.getContext('2d');
+
+
+ctx.fillStyle = '#0f0';
+try { ctx.fillStyle = '#ff0000ff'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
+ctx.fillRect(0, 0, 100, 50);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+
+
+}
+</script>
+
 <!-- [[[ test_2d.fillStyle.parse.invalid.hsl-1.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.hsl-1</p>
-<canvas height="50" id="c136" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c154" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_hsl_1() {
 
-var canvas = document.getElementById('c136');
+var canvas = document.getElementById('c154');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = 'hsl(0%, 100%, 50%)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.invalid.hsl-2.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.hsl-2</p>
-<canvas height="50" id="c137" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c155" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_hsl_2() {
 
-var canvas = document.getElementById('c137');
+var canvas = document.getElementById('c155');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = 'hsl(z, 100%, 50%)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.invalid.hsl-3.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.hsl-3</p>
-<canvas height="50" id="c138" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c156" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_hsl_3() {
 
-var canvas = document.getElementById('c138');
+var canvas = document.getElementById('c156');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = 'hsl(0, 0, 50%)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.invalid.hsl-4.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.hsl-4</p>
-<canvas height="50" id="c139" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c157" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_hsl_4() {
 
-var canvas = document.getElementById('c139');
+var canvas = document.getElementById('c157');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = 'hsl(0, 100%, 0)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.invalid.hsl-5.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.hsl-5</p>
-<canvas height="50" id="c140" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c158" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_hsl_5() {
 
-var canvas = document.getElementById('c140');
+var canvas = document.getElementById('c158');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = 'hsl(0, 100%, 100%, 1)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
+<!-- [[[ test_2d.fillStyle.parse.invalid.hsl-6.html ]]] -->
+
+<p>Canvas test: 2d.fillStyle.parse.invalid.hsl-6</p>
+<canvas height="50" id="c159" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_fillStyle_parse_invalid_hsl_6() {
+
+var canvas = document.getElementById('c159');
+var ctx = canvas.getContext('2d');
+
+
+ctx.fillStyle = '#0f0';
+try { ctx.fillStyle = 'hsl(0, 100.%, 50%)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
+ctx.fillRect(0, 0, 100, 50);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+
+
+}
+</script>
+
 <!-- [[[ test_2d.fillStyle.parse.invalid.hsla-1.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.hsla-1</p>
-<canvas height="50" id="c141" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c160" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_hsla_1() {
 
-var canvas = document.getElementById('c141');
+var canvas = document.getElementById('c160');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = 'hsla(0%, 100%, 50%, 1)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.invalid.hsla-2.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.hsla-2</p>
-<canvas height="50" id="c142" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c161" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_hsla_2() {
 
-var canvas = document.getElementById('c142');
+var canvas = document.getElementById('c161');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = 'hsla(0, 0, 50%, 1)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.invalid.name-1.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.name-1</p>
-<canvas height="50" id="c143" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c162" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_name_1() {
 
-var canvas = document.getElementById('c143');
+var canvas = document.getElementById('c162');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = 'darkbrown'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.invalid.name-2.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.name-2</p>
-<canvas height="50" id="c144" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c163" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_name_2() {
 
-var canvas = document.getElementById('c144');
+var canvas = document.getElementById('c163');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = 'firebrick1'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.invalid.name-3.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.name-3</p>
-<canvas height="50" id="c145" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c164" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_name_3() {
 
-var canvas = document.getElementById('c145');
+var canvas = document.getElementById('c164');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = 'red blue'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
+<!-- [[[ test_2d.fillStyle.parse.invalid.name-4.html ]]] -->
+
+<p>Canvas test: 2d.fillStyle.parse.invalid.name-4</p>
+<canvas height="50" id="c165" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_fillStyle_parse_invalid_name_4() {
+
+var canvas = document.getElementById('c165');
+var ctx = canvas.getContext('2d');
+
+
+ctx.fillStyle = '#0f0';
+try { ctx.fillStyle = '"red"'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
+ctx.fillRect(0, 0, 100, 50);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+
+
+}
+</script>
+
+<!-- [[[ test_2d.fillStyle.parse.invalid.name-5.html ]]] -->
+
+<p>Canvas test: 2d.fillStyle.parse.invalid.name-5</p>
+<canvas height="50" id="c166" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_fillStyle_parse_invalid_name_5() {
+
+var canvas = document.getElementById('c166');
+var ctx = canvas.getContext('2d');
+
+
+ctx.fillStyle = '#0f0';
+try { ctx.fillStyle = '"red'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
+ctx.fillRect(0, 0, 100, 50);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+
+
+}
+</script>
+
 <!-- [[[ test_2d.fillStyle.parse.invalid.rgb-1.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.rgb-1</p>
-<canvas height="50" id="c146" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c167" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_rgb_1() {
 
-var canvas = document.getElementById('c146');
+var canvas = document.getElementById('c167');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = 'rgb(255.0, 0, 0)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.invalid.rgb-2.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.rgb-2</p>
-<canvas height="50" id="c147" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c168" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_rgb_2() {
 
-var canvas = document.getElementById('c147');
+var canvas = document.getElementById('c168');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = 'rgb(255, 0.0, 0)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.invalid.rgb-3.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.rgb-3</p>
-<canvas height="50" id="c148" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c169" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_rgb_3() {
 
-var canvas = document.getElementById('c148');
+var canvas = document.getElementById('c169');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = 'rgb(255.0, 0, 0,)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.invalid.rgb-4.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.rgb-4</p>
-<canvas height="50" id="c149" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c170" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_rgb_4() {
 
-var canvas = document.getElementById('c149');
+var canvas = document.getElementById('c170');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = 'rgb(100%, 0, 0)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.invalid.rgb-5.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.rgb-5</p>
-<canvas height="50" id="c150" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c171" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_rgb_5() {
 
-var canvas = document.getElementById('c150');
+var canvas = document.getElementById('c171');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = 'rgb(255 0 0)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.invalid.rgb-6.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.rgb-6</p>
-<canvas height="50" id="c151" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c172" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_rgb_6() {
 
-var canvas = document.getElementById('c151');
+var canvas = document.getElementById('c172');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = 'rgb(255, - 1, 0)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.invalid.rgb-7.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.rgb-7</p>
-<canvas height="50" id="c152" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c173" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_rgb_7() {
 
-var canvas = document.getElementById('c152');
+var canvas = document.getElementById('c173');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = 'rgb(255, 0, 0, 1)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.invalid.rgba-1.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.rgba-1</p>
-<canvas height="50" id="c153" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c174" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_rgba_1() {
 
-var canvas = document.getElementById('c153');
+var canvas = document.getElementById('c174');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = 'rgba(255, 0, 0)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.invalid.rgba-2.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.rgba-2</p>
-<canvas height="50" id="c154" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c175" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_rgba_2() {
 
-var canvas = document.getElementById('c154');
+var canvas = document.getElementById('c175');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = 'rgba(255.0, 0, 0, 1)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.invalid.rgba-3.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.rgba-3</p>
-<canvas height="50" id="c155" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c176" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_rgba_3() {
 
-var canvas = document.getElementById('c155');
+var canvas = document.getElementById('c176');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = 'rgba(100%, 0, 0, 1)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.invalid.rgba-4.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.rgba-4</p>
-<canvas height="50" id="c156" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c177" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_rgba_4() {
 
-var canvas = document.getElementById('c156');
+var canvas = document.getElementById('c177');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = 'rgba(255, 0, 0, 100%)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.invalid.rgba-5.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.invalid.rgba-5</p>
-<canvas height="50" id="c157" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c178" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_invalid_rgba_5() {
 
-var canvas = document.getElementById('c157');
+var canvas = document.getElementById('c178');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#0f0';
 try { ctx.fillStyle = 'rgba(255, 0, 0, 1. 0)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
+<!-- [[[ test_2d.fillStyle.parse.invalid.rgba-6.html ]]] -->
+
+<p>Canvas test: 2d.fillStyle.parse.invalid.rgba-6</p>
+<canvas height="50" id="c179" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_fillStyle_parse_invalid_rgba_6() {
+
+var canvas = document.getElementById('c179');
+var ctx = canvas.getContext('2d');
+
+
+ctx.fillStyle = '#0f0';
+try { ctx.fillStyle = 'rgba(255, 0, 0, 1.)'; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
+ctx.fillRect(0, 0, 100, 50);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+
+
+}
+</script>
+
+<!-- [[[ test_2d.fillStyle.parse.invalid.rgba-7.html ]]] -->
+
+<p>Canvas test: 2d.fillStyle.parse.invalid.rgba-7</p>
+<canvas height="50" id="c180" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_fillStyle_parse_invalid_rgba_7() {
+
+var canvas = document.getElementById('c180');
+var ctx = canvas.getContext('2d');
+
+
+ctx.fillStyle = '#0f0';
+try { ctx.fillStyle = 'rgba(255, 0, 0, '; } catch (e) { } // this shouldn't throw, but it shouldn't matter here if it does
+ctx.fillRect(0, 0, 100, 50);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+
+
+}
+</script>
+
 <!-- [[[ test_2d.fillStyle.parse.rgb-clamp-1.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.rgb-clamp-1</p>
-<canvas height="50" id="c158" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c181" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_rgb_clamp_1() {
 
-var canvas = document.getElementById('c158');
+var canvas = document.getElementById('c181');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'rgb(-1000, 1000, -1000)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.rgb-clamp-2.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.rgb-clamp-2</p>
-<canvas height="50" id="c159" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c182" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_rgb_clamp_2() {
 
-var canvas = document.getElementById('c159');
+var canvas = document.getElementById('c182');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'rgb(-200%, 200%, -200%)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.rgb-clamp-3.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.rgb-clamp-3</p>
-<canvas height="50" id="c160" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c183" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_rgb_clamp_3() {
 
-var canvas = document.getElementById('c160');
+var canvas = document.getElementById('c183');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'rgb(-2147483649, 4294967298, -18446744073709551619)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.rgb-clamp-4.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.rgb-clamp-4</p>
-<canvas height="50" id="c161" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c184" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_rgb_clamp_4() {
 
-var canvas = document.getElementById('c161');
+var canvas = document.getElementById('c184');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'rgb(-1000000000000000000000000000000000000000, 1000000000000000000000000000000000000000, -1000000000000000000000000000000000000000)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.rgb-clamp-5.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.rgb-clamp-5</p>
-<canvas height="50" id="c162" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c185" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_rgb_clamp_5() {
 
-var canvas = document.getElementById('c162');
+var canvas = document.getElementById('c185');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'rgb
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
+<!-- [[[ test_2d.fillStyle.parse.rgb-eof.html ]]] -->
+
+<p>Canvas test: 2d.fillStyle.parse.rgb-eof</p>
+<canvas height="50" id="c186" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_fillStyle_parse_rgb_eof() {
+
+var canvas = document.getElementById('c186');
+var ctx = canvas.getContext('2d');
+
+
+ctx.fillStyle = '#f00';
+ctx.fillStyle = 'rgb(0, 255, 0';
+ctx.fillRect(0, 0, 100, 50);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+
+
+}
+</script>
+
 <!-- [[[ test_2d.fillStyle.parse.rgb-num.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.rgb-num</p>
-<canvas height="50" id="c163" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c187" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_rgb_num() {
 
-var canvas = document.getElementById('c163');
+var canvas = document.getElementById('c187');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'rgb(0,255,0)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.rgb-percent.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.rgb-percent</p>
-<canvas height="50" id="c164" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c188" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_rgb_percent() {
 
-var canvas = document.getElementById('c164');
+var canvas = document.getElementById('c188');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'rgb(0% ,100% ,0%)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.rgba-clamp-1.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.rgba-clamp-1</p>
-<canvas height="50" id="c165" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c189" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_rgba_clamp_1() {
 
-var canvas = document.getElementById('c165');
+var canvas = document.getElementById('c189');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'rgba(0, 255, 0, -2)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,0,0,0, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.rgba-clamp-2.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.rgba-clamp-2</p>
-<canvas height="50" id="c166" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c190" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_rgba_clamp_2() {
 
-var canvas = document.getElementById('c166');
+var canvas = document.getElementById('c190');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'rgba(0, 255, 0, 2)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
+<!-- [[[ test_2d.fillStyle.parse.rgba-eof.html ]]] -->
+
+<p>Canvas test: 2d.fillStyle.parse.rgba-eof</p>
+<canvas height="50" id="c191" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_fillStyle_parse_rgba_eof() {
+
+var canvas = document.getElementById('c191');
+var ctx = canvas.getContext('2d');
+
+
+ctx.fillStyle = '#f00';
+ctx.fillStyle = 'rgba(0, 255, 0, 1';
+ctx.fillRect(0, 0, 100, 50);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+
+
+}
+</script>
+
 <!-- [[[ test_2d.fillStyle.parse.rgba-num-1.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.rgba-num-1</p>
-<canvas height="50" id="c167" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c192" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_rgba_num_1() {
 
-var canvas = document.getElementById('c167');
+var canvas = document.getElementById('c192');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'rgba(  0  ,  255  ,  0  ,  .499  )';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,127, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.rgba-num-2.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.rgba-num-2</p>
-<canvas height="50" id="c168" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c193" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_rgba_num_2() {
 
-var canvas = document.getElementById('c168');
+var canvas = document.getElementById('c193');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'rgba(  0  ,  255  ,  0  ,  0.499  )';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,127, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.rgba-percent.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.rgba-percent</p>
-<canvas height="50" id="c169" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c194" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_rgba_percent() {
 
-var canvas = document.getElementById('c169');
+var canvas = document.getElementById('c194');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'rgba(0%,100%,0%,0.499)';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,127, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.rgba-solid-1.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.rgba-solid-1</p>
-<canvas height="50" id="c170" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c195" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_rgba_solid_1() {
 
-var canvas = document.getElementById('c170');
+var canvas = document.getElementById('c195');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'rgba(  0  ,  255  ,  0  ,  1  )';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.rgba-solid-2.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.rgba-solid-2</p>
-<canvas height="50" id="c171" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c196" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_rgba_solid_2() {
 
-var canvas = document.getElementById('c171');
+var canvas = document.getElementById('c196');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'rgba(  0  ,  255  ,  0  ,  1.0  )';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
+<!-- [[[ test_2d.fillStyle.parse.rgba-solid-3.html ]]] -->
+
+<p>Canvas test: 2d.fillStyle.parse.rgba-solid-3</p>
+<canvas height="50" id="c197" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_fillStyle_parse_rgba_solid_3() {
+
+var canvas = document.getElementById('c197');
+var ctx = canvas.getContext('2d');
+
+
+ctx.fillStyle = '#f00';
+ctx.fillStyle = 'rgba(  0  ,  255  ,  0  , +1  )';
+ctx.fillRect(0, 0, 100, 50);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+
+
+}
+</script>
+
+<!-- [[[ test_2d.fillStyle.parse.rgba-solid-4.html ]]] -->
+
+<p>Canvas test: 2d.fillStyle.parse.rgba-solid-4</p>
+<canvas height="50" id="c198" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_fillStyle_parse_rgba_solid_4() {
+
+var canvas = document.getElementById('c198');
+var ctx = canvas.getContext('2d');
+
+
+ctx.fillStyle = '#f00';
+ctx.fillStyle = 'rgba( -0  ,  255  , +0  ,  1  )';
+ctx.fillRect(0, 0, 100, 50);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+
+
+}
+</script>
+
 <!-- [[[ test_2d.fillStyle.parse.svg-1.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.svg-1</p>
-<canvas height="50" id="c172" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c199" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_svg_1() {
 
-var canvas = document.getElementById('c172');
+var canvas = document.getElementById('c199');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'gray';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 128,128,128,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.svg-2.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.svg-2</p>
-<canvas height="50" id="c173" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c200" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_svg_2() {
 
-var canvas = document.getElementById('c173');
+var canvas = document.getElementById('c200');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'grey';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 128,128,128,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.system.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.system</p>
-<canvas height="50" id="c174" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c201" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_system() {
 
-var canvas = document.getElementById('c174');
+var canvas = document.getElementById('c201');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'ThreeDDarkShadow';
 ok(ctx.fillStyle.match(/^#(?!(FF0000|ff0000|f00)$)/), "ctx.fillStyle.match(/^#(?!(FF0000|ff0000|f00)$)/)"); // test that it's not red
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.transparent-1.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.transparent-1</p>
-<canvas height="50" id="c175" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c202" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_transparent_1() {
 
-var canvas = document.getElementById('c175');
+var canvas = document.getElementById('c202');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'transparent';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,0,0,0, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.parse.transparent-2.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.parse.transparent-2</p>
-<canvas height="50" id="c176" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c203" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillStyle_parse_transparent_2() {
 
-var canvas = document.getElementById('c176');
+var canvas = document.getElementById('c203');
 var ctx = canvas.getContext('2d');
 
 
 ctx.fillStyle = '#f00';
 ctx.fillStyle = 'TrAnSpArEnT';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,0,0,0, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.getcontext.exists.html ]]] -->
 
 <p>Canvas test: 2d.getcontext.exists</p>
 <!-- Testing: The 2D context is implemented -->
-<canvas height="50" id="c177" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c204" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_getcontext_exists() {
 
-var canvas = document.getElementById('c177');
+var canvas = document.getElementById('c204');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.getContext('2d') !== null, "canvas.getContext('2d') !== null");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.getcontext.extraargs.html ]]] -->
 
 <p>Canvas test: 2d.getcontext.extraargs</p>
 <!-- Testing: The 2D context ignores extra getContext arguments -->
-<canvas height="50" id="c178" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c205" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_getcontext_extraargs() {
 
-var canvas = document.getElementById('c178');
+var canvas = document.getElementById('c205');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.getContext('2d', false, {}, [], 1, "2") !== null, "canvas.getContext('2d', false, {}, [], 1, \"2\") !== null");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.getcontext.shared.html ]]] -->
 
 <p>Canvas test: 2d.getcontext.shared</p>
 <!-- Testing: getContext('2d') returns objects which share canvas state -->
-<canvas height="50" id="c179" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c206" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_getcontext_shared() {
 
-var canvas = document.getElementById('c179');
+var canvas = document.getElementById('c206');
 var ctx = canvas.getContext('2d');
 
 var ctx2 = canvas.getContext('2d');
 ctx.fillStyle = '#f00';
 ctx2.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.getcontext.unique.html ]]] -->
 
 <p>Canvas test: 2d.getcontext.unique</p>
 <!-- Testing: getContext('2d') returns the same object -->
-<canvas height="50" id="c180" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c207" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_getcontext_unique() {
 
-var canvas = document.getElementById('c180');
+var canvas = document.getElementById('c207');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.getContext('2d') === canvas.getContext('2d'), "canvas.getContext('2d') === canvas.getContext('2d')");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.empty.html ]]] -->
 
 <p>Canvas test: 2d.gradient.empty</p>
-<canvas height="50" id="c181" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c208" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_empty() {
 
-var canvas = document.getElementById('c181');
+var canvas = document.getElementById('c208');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 var g = ctx.createLinearGradient(0, 0, 0, 50);
 ctx.fillStyle = g;
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.interpolate.alpha.html ]]] -->
 
 <p>Canvas test: 2d.gradient.interpolate.alpha</p>
-<canvas height="50" id="c182" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c209" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_interpolate_alpha() {
 
-var canvas = document.getElementById('c182');
+var canvas = document.getElementById('c209');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#ff0';
 ctx.fillRect(0, 0, 100, 50);
 var g = ctx.createLinearGradient(0, 0, 100, 0);
 g.addColorStop(0, 'rgba(0,0,255, 0)');
 g.addColorStop(1, 'rgba(0,0,255, 1)');
 ctx.fillStyle = g;
@@ -4572,22 +5214,22 @@ isPixel(ctx, 75,25, 63,63,191,255, 3);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.interpolate.colour.html ]]] -->
 
 <p>Canvas test: 2d.gradient.interpolate.colour</p>
-<canvas height="50" id="c183" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c210" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_interpolate_colour() {
 
-var canvas = document.getElementById('c183');
+var canvas = document.getElementById('c210');
 var ctx = canvas.getContext('2d');
 
 var g = ctx.createLinearGradient(0, 0, 100, 0);
 g.addColorStop(0, '#ff0');
 g.addColorStop(1, '#00f');
 ctx.fillStyle = g;
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 25,25, 191,191,63,255, 3);
@@ -4596,22 +5238,22 @@ isPixel(ctx, 75,25, 63,63,191,255, 3);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.interpolate.colouralpha.html ]]] -->
 
 <p>Canvas test: 2d.gradient.interpolate.colouralpha</p>
-<canvas height="50" id="c184" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c211" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_interpolate_colouralpha() {
 
-var canvas = document.getElementById('c184');
+var canvas = document.getElementById('c211');
 var ctx = canvas.getContext('2d');
 
 var g = ctx.createLinearGradient(0, 0, 100, 0);
 g.addColorStop(0, 'rgba(255,255,0, 0)');
 g.addColorStop(1, 'rgba(0,0,255, 1)');
 ctx.fillStyle = g;
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 25,25, 191,191,63,63, 3);
@@ -4620,22 +5262,22 @@ isPixel(ctx, 75,25, 63,63,191,191, 3);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.interpolate.multiple.html ]]] -->
 
 <p>Canvas test: 2d.gradient.interpolate.multiple</p>
-<canvas height="50" id="c185" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c212" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_interpolate_multiple() {
 
-var canvas = document.getElementById('c185');
+var canvas = document.getElementById('c212');
 var ctx = canvas.getContext('2d');
 
 canvas.width = 200;
 var g = ctx.createLinearGradient(0, 0, 200, 0);
 g.addColorStop(0, '#ff0');
 g.addColorStop(0.5, '#0ff');
 g.addColorStop(1, '#f0f');
 ctx.fillStyle = g;
@@ -4646,22 +5288,22 @@ isPixel(ctx, 150,25, 127,127,255,255, 3)
 
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.interpolate.outside.html ]]] -->
 
 <p>Canvas test: 2d.gradient.interpolate.outside</p>
-<canvas height="50" id="c186" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c213" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_interpolate_outside() {
 
-var canvas = document.getElementById('c186');
+var canvas = document.getElementById('c213');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 var g = ctx.createLinearGradient(25, 0, 75, 0);
 g.addColorStop(0.4, '#0f0');
 g.addColorStop(0.6, '#0f0');
@@ -4674,22 +5316,22 @@ isPixel(ctx, 80,25, 0,255,0,255, 2);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.interpolate.overlap2.html ]]] -->
 
 <p>Canvas test: 2d.gradient.interpolate.overlap2</p>
-<canvas height="50" id="c187" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c214" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_interpolate_overlap2() {
 
-var canvas = document.getElementById('c187');
+var canvas = document.getElementById('c214');
 var ctx = canvas.getContext('2d');
 
 var g = ctx.createLinearGradient(0, 0, 100, 0);
 var ps = [ 0, 1/10, 1/4, 1/3, 1/2, 3/4, 1 ];
 for (var p = 0; p < ps.length; ++p)
 {
         g.addColorStop(ps[p], '#0f0');
         for (var i = 0; i < 15; ++i)
@@ -4706,44 +5348,44 @@ isPixel(ctx, 80,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.interpolate.solid.html ]]] -->
 
 <p>Canvas test: 2d.gradient.interpolate.solid</p>
-<canvas height="50" id="c188" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c215" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_interpolate_solid() {
 
-var canvas = document.getElementById('c188');
+var canvas = document.getElementById('c215');
 var ctx = canvas.getContext('2d');
 
 var g = ctx.createLinearGradient(0, 0, 100, 0);
 g.addColorStop(0, '#0f0');
 g.addColorStop(1, '#0f0');
 ctx.fillStyle = g;
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.interpolate.vertical.html ]]] -->
 
 <p>Canvas test: 2d.gradient.interpolate.vertical</p>
-<canvas height="50" id="c189" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c216" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_interpolate_vertical() {
 
-var canvas = document.getElementById('c189');
+var canvas = document.getElementById('c216');
 var ctx = canvas.getContext('2d');
 
 var g = ctx.createLinearGradient(0, 0, 0, 50);
 g.addColorStop(0, '#ff0');
 g.addColorStop(1, '#00f');
 ctx.fillStyle = g;
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,12, 191,191,63,255, 10);
@@ -4752,22 +5394,22 @@ isPixel(ctx, 50,37, 63,63,191,255, 10);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.interpolate.zerosize.html ]]] -->
 
 <p>Canvas test: 2d.gradient.interpolate.zerosize</p>
-<canvas height="50" id="c190" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c217" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_interpolate_zerosize() {
 
-var canvas = document.getElementById('c190');
+var canvas = document.getElementById('c217');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 var g = ctx.createLinearGradient(50, 25, 50, 25); // zero-length line (undefined direction)
 g.addColorStop(0, '#f00');
 g.addColorStop(1, '#f00');
@@ -4778,22 +5420,22 @@ isPixel(ctx, 40,20, 0,255,0,255, 2);
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.linear.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.gradient.linear.nonfinite</p>
 <!-- Testing: createLinearGradient() throws NOT_SUPPORTED_ERR if arguments are not finite -->
-<canvas height="50" id="c191" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c218" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_linear_nonfinite() {
 
-var canvas = document.getElementById('c191');
+var canvas = document.getElementById('c218');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   ctx.createLinearGradient(Infinity, 0, 1, 0);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NOT_SUPPORTED_ERR");
 var _thrown = undefined; try {
   ctx.createLinearGradient(-Infinity, 0, 1, 0);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NOT_SUPPORTED_ERR");
@@ -4864,22 +5506,22 @@ var _thrown = undefined; try {
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.linear.transform.1.html ]]] -->
 
 <p>Canvas test: 2d.gradient.linear.transform.1</p>
 <!-- Testing: Linear gradient coordinates are relative to the coordinate space at the time of filling -->
-<canvas height="50" id="c192" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c219" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_linear_transform_1() {
 
-var canvas = document.getElementById('c192');
+var canvas = document.getElementById('c219');
 var ctx = canvas.getContext('2d');
 
 var g = ctx.createLinearGradient(0, 0, 200, 0);
 g.addColorStop(0, '#f00');
 g.addColorStop(0.25, '#0f0');
 g.addColorStop(0.75, '#0f0');
 g.addColorStop(1, '#f00');
 ctx.fillStyle = g;
@@ -4892,22 +5534,22 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.linear.transform.2.html ]]] -->
 
 <p>Canvas test: 2d.gradient.linear.transform.2</p>
 <!-- Testing: Linear gradient coordinates are relative to the coordinate space at the time of filling -->
-<canvas height="50" id="c193" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c220" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_linear_transform_2() {
 
-var canvas = document.getElementById('c193');
+var canvas = document.getElementById('c220');
 var ctx = canvas.getContext('2d');
 
 ctx.translate(100, 0);
 var g = ctx.createLinearGradient(0, 0, 200, 0);
 g.addColorStop(0, '#f00');
 g.addColorStop(0.25, '#0f0');
 g.addColorStop(0.75, '#0f0');
 g.addColorStop(1, '#f00');
@@ -4920,67 +5562,94 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.object.compare.html ]]] -->
 
 <p>Canvas test: 2d.gradient.object.compare</p>
-<canvas height="50" id="c194" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c221" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_object_compare() {
 
-var canvas = document.getElementById('c194');
+var canvas = document.getElementById('c221');
 var ctx = canvas.getContext('2d');
 
 var g1 = ctx.createLinearGradient(0, 0, 100, 0);
 var g2 = ctx.createLinearGradient(0, 0, 100, 0);
 ok(g1 !== g2, "g1 !== g2");
 ctx.fillStyle = g1;
 ok(ctx.fillStyle === g1, "ctx.fillStyle === g1");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.object.crosscanvas.html ]]] -->
 
 <p>Canvas test: 2d.gradient.object.crosscanvas</p>
-<canvas height="50" id="c195" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c222" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_object_crosscanvas() {
 
-var canvas = document.getElementById('c195');
+var canvas = document.getElementById('c222');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 var g = document.createElement('canvas').getContext('2d').createLinearGradient(0, 0, 100, 0);
 g.addColorStop(0, '#0f0');
 g.addColorStop(1, '#0f0');
 ctx.fillStyle = g;
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 
 }
 </script>
 
+<!-- [[[ test_2d.gradient.object.current.html ]]] -->
+
+<p>Canvas test: 2d.gradient.object.current</p>
+<canvas height="50" id="c223" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_gradient_object_current() {
+
+var canvas = document.getElementById('c223');
+var ctx = canvas.getContext('2d');
+
+canvas.setAttribute('style', 'color: #f00');
+
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
+
+var g = ctx.createLinearGradient(0, 0, 100, 0);
+g.addColorStop(0, 'currentColor');
+g.addColorStop(1, 'currentColor');
+ctx.fillStyle = g;
+ctx.fillRect(0, 0, 100, 50);
+isPixel(ctx, 50,25, 0,0,0,255, 2);
+
+
+}
+</script>
+
 <!-- [[[ test_2d.gradient.object.invalidcolour.html ]]] -->
 
 <p>Canvas test: 2d.gradient.object.invalidcolour</p>
-<canvas height="50" id="c196" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c224" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_object_invalidcolour() {
 
-var canvas = document.getElementById('c196');
+var canvas = document.getElementById('c224');
 var ctx = canvas.getContext('2d');
 
 var g = ctx.createLinearGradient(0, 0, 100, 0);
 var _thrown = undefined; try {
   g.addColorStop(0, "");
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.SYNTAX_ERR, "should throw SYNTAX_ERR");
 var _thrown = undefined; try {
   g.addColorStop(0, 'undefined');
@@ -4988,22 +5657,22 @@ var _thrown = undefined; try {
 
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.object.invalidoffset.html ]]] -->
 
 <p>Canvas test: 2d.gradient.object.invalidoffset</p>
-<canvas height="50" id="c197" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c225" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_object_invalidoffset() {
 
-var canvas = document.getElementById('c197');
+var canvas = document.getElementById('c225');
 var ctx = canvas.getContext('2d');
 
 var g = ctx.createLinearGradient(0, 0, 100, 0);
 var _thrown = undefined; try {
   g.addColorStop(-1, '#000');
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw INDEX_SIZE_ERR");
 var _thrown = undefined; try {
   g.addColorStop(2, '#000');
@@ -5021,22 +5690,22 @@ var _thrown = undefined; try {
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.object.return.html ]]] -->
 
 <p>Canvas test: 2d.gradient.object.return</p>
 <!-- Testing: createLinearGradient() and createRadialGradient() returns objects implementing CanvasGradient -->
-<canvas height="50" id="c198" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c226" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_object_return() {
 
-var canvas = document.getElementById('c198');
+var canvas = document.getElementById('c226');
 var ctx = canvas.getContext('2d');
 
 window.CanvasGradient.prototype.thisImplementsCanvasGradient = true;
 
 var g1 = ctx.createLinearGradient(0, 0, 100, 0);
 ok(g1.addColorStop !== undefined, "g1.addColorStop !== undefined");
 ok(g1.thisImplementsCanvasGradient === true, "g1.thisImplementsCanvasGradient === true");
 
@@ -5047,40 +5716,40 @@ ok(g2.thisImplementsCanvasGradient === t
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.object.type.html ]]] -->
 
 <p>Canvas test: 2d.gradient.object.type</p>
 <!-- Testing: window.CanvasGradient exists and has the right properties -->
-<canvas height="50" id="c199" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c227" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_object_type() {
 
-var canvas = document.getElementById('c199');
+var canvas = document.getElementById('c227');
 var ctx = canvas.getContext('2d');
 
 ok(window.CanvasGradient !== undefined, "window.CanvasGradient !== undefined");
 ok(window.CanvasGradient.prototype.addColorStop !== undefined, "window.CanvasGradient.prototype.addColorStop !== undefined");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.object.update.html ]]] -->
 
 <p>Canvas test: 2d.gradient.object.update</p>
-<canvas height="50" id="c200" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c228" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_object_update() {
 
-var canvas = document.getElementById('c200');
+var canvas = document.getElementById('c228');
 var ctx = canvas.getContext('2d');
 
 var g = ctx.createLinearGradient(-100, 0, 200, 0);
 g.addColorStop(0, '#f00');
 g.addColorStop(1, '#f00');
 ctx.fillStyle = g;
 g.addColorStop(0.1, '#0f0');
 g.addColorStop(0.9, '#0f0');
@@ -5089,22 +5758,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.radial.cone.bottom.html ]]] -->
 
 <p>Canvas test: 2d.gradient.radial.cone.bottom</p>
-<canvas height="50" id="c201" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c229" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_radial_cone_bottom() {
 
-var canvas = document.getElementById('c201');
+var canvas = document.getElementById('c229');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 var g = ctx.createRadialGradient(210, 25, 100, 230, 25, 101);
 g.addColorStop(0, '#0f0');
 g.addColorStop(1, '#f00');
@@ -5123,22 +5792,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.radial.cone.cylinder.html ]]] -->
 
 <p>Canvas test: 2d.gradient.radial.cone.cylinder</p>
-<canvas height="50" id="c202" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c230" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_radial_cone_cylinder() {
 
-var canvas = document.getElementById('c202');
+var canvas = document.getElementById('c230');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 var g = ctx.createRadialGradient(210, 25, 100, 230, 25, 100);
 g.addColorStop(0, '#0f0');
 g.addColorStop(1, '#f00');
@@ -5157,22 +5826,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.radial.cone.shape1.html ]]] -->
 
 <p>Canvas test: 2d.gradient.radial.cone.shape1</p>
-<canvas height="50" id="c203" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c231" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_radial_cone_shape1() {
 
-var canvas = document.getElementById('c203');
+var canvas = document.getElementById('c231');
 var ctx = canvas.getContext('2d');
 
 var tol = 1; // tolerance to avoid antialiasing artifacts
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.fillStyle = '#f00';
@@ -5200,22 +5869,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.radial.inside1.html ]]] -->
 
 <p>Canvas test: 2d.gradient.radial.inside1</p>
-<canvas height="50" id="c204" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c232" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_radial_inside1() {
 
-var canvas = document.getElementById('c204');
+var canvas = document.getElementById('c232');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 var g = ctx.createRadialGradient(50, 25, 100, 50, 25, 200);
 g.addColorStop(0, '#0f0');
 g.addColorStop(1, '#f00');
@@ -5235,22 +5904,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.radial.negative.html ]]] -->
 
 <p>Canvas test: 2d.gradient.radial.negative</p>
 <!-- Testing: createRadialGradient() throws INDEX_SIZE_ERR if either radius is negative -->
-<canvas height="50" id="c205" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c233" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_radial_negative() {
 
-var canvas = document.getElementById('c205');
+var canvas = document.getElementById('c233');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   ctx.createRadialGradient(0, 0, -0.1, 0, 0, 1);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw INDEX_SIZE_ERR");
 var _thrown = undefined; try {
   ctx.createRadialGradient(0, 0, 1, 0, 0, -0.1);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw INDEX_SIZE_ERR");
@@ -5261,22 +5930,22 @@ var _thrown = undefined; try {
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.radial.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.gradient.radial.nonfinite</p>
 <!-- Testing: createRadialGradient() throws NOT_SUPPORTED_ERR if arguments are not finite -->
-<canvas height="50" id="c206" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c234" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_radial_nonfinite() {
 
-var canvas = document.getElementById('c206');
+var canvas = document.getElementById('c234');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   ctx.createRadialGradient(Infinity, 0, 1, 0, 0, 1);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NOT_SUPPORTED_ERR");
 var _thrown = undefined; try {
   ctx.createRadialGradient(-Infinity, 0, 1, 0, 0, 1);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NOT_SUPPORTED_ERR");
@@ -5503,22 +6172,22 @@ var _thrown = undefined; try {
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.radial.transform.1.html ]]] -->
 
 <p>Canvas test: 2d.gradient.radial.transform.1</p>
 <!-- Testing: Radial gradient coordinates are relative to the coordinate space at the time of filling -->
-<canvas height="50" id="c207" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c235" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_radial_transform_1() {
 
-var canvas = document.getElementById('c207');
+var canvas = document.getElementById('c235');
 var ctx = canvas.getContext('2d');
 
 var g = ctx.createRadialGradient(0, 0, 0, 0, 0, 11.2);
 g.addColorStop(0, '#0f0');
 g.addColorStop(0.5, '#0f0');
 g.addColorStop(0.51, '#f00');
 g.addColorStop(1, '#f00');
 ctx.fillStyle = g;
@@ -5532,22 +6201,22 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.radial.transform.2.html ]]] -->
 
 <p>Canvas test: 2d.gradient.radial.transform.2</p>
 <!-- Testing: Radial gradient coordinates are relative to the coordinate space at the time of filling -->
-<canvas height="50" id="c208" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c236" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_radial_transform_2() {
 
-var canvas = document.getElementById('c208');
+var canvas = document.getElementById('c236');
 var ctx = canvas.getContext('2d');
 
 ctx.translate(100, 0);
 var g = ctx.createRadialGradient(0, 0, 0, 0, 0, 11.2);
 g.addColorStop(0, '#0f0');
 g.addColorStop(0.5, '#0f0');
 g.addColorStop(0.51, '#f00');
 g.addColorStop(1, '#f00');
@@ -5562,40 +6231,40 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create1.basic.html ]]] -->
 
 <p>Canvas test: 2d.imageData.create1.basic</p>
 <!-- Testing: createImageData(imgdata) exists and returns something -->
-<canvas height="50" id="c209" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c237" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create1_basic() {
 
-var canvas = document.getElementById('c209');
+var canvas = document.getElementById('c237');
 var ctx = canvas.getContext('2d');
 
 ok(ctx.createImageData(ctx.createImageData(1, 1)) !== null, "ctx.createImageData(ctx.createImageData(1, 1)) !== null");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create1.initial.html ]]] -->
 
 <p>Canvas test: 2d.imageData.create1.initial</p>
 <!-- Testing: createImageData(imgdata) returns transparent black data of the right size -->
-<canvas height="50" id="c210" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c238" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create1_initial() {
 
-var canvas = document.getElementById('c210');
+var canvas = document.getElementById('c238');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 var imgdata1 = ctx.getImageData(0, 0, 10, 20);
 var imgdata2 = ctx.createImageData(imgdata1);
 ok(imgdata2.data.length == imgdata1.data.length, "imgdata2.data.length == imgdata1.data.length");
 ok(imgdata2.width == imgdata1.width, "imgdata2.width == imgdata1.width");
@@ -5609,22 +6278,22 @@ ok(isTransparentBlack, "isTransparentBla
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create1.type.html ]]] -->
 
 <p>Canvas test: 2d.imageData.create1.type</p>
 <!-- Testing: createImageData(imgdata) returns an ImageData object containing a CanvasPixelArray object -->
-<canvas height="50" id="c211" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c239" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create1_type() {
 
-var canvas = document.getElementById('c211');
+var canvas = document.getElementById('c239');
 var ctx = canvas.getContext('2d');
 
 var _thrown_outer = false;
 try {
 
 todo(window.ImageData !== undefined, "window.ImageData !== undefined");
 todo(window.CanvasPixelArray !== undefined, "window.CanvasPixelArray !== undefined");
 window.ImageData.prototype.thisImplementsImageData = true;
@@ -5641,60 +6310,60 @@ todo(!_thrown_outer, 'should not throw e
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create1.zero.html ]]] -->
 
 <p>Canvas test: 2d.imageData.create1.zero</p>
 <!-- Testing: createImageData(null) throws TypeError -->
-<canvas height="50" id="c212" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c240" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create1_zero() {
 
-var canvas = document.getElementById('c212');
+var canvas = document.getElementById('c240');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   ctx.createImageData(null);
 } catch (e) { _thrown = e }; todo(_thrown && (_thrown instanceof TypeError), "should throw TypeError");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create2.basic.html ]]] -->
 
 <p>Canvas test: 2d.imageData.create2.basic</p>
 <!-- Testing: createImageData(sw, sh) exists and returns something -->
-<canvas height="50" id="c213" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c241" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create2_basic() {
 
-var canvas = document.getElementById('c213');
+var canvas = document.getElementById('c241');
 var ctx = canvas.getContext('2d');
 
 ok(ctx.createImageData(1, 1) !== null, "ctx.createImageData(1, 1) !== null");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create2.initial.html ]]] -->
 
 <p>Canvas test: 2d.imageData.create2.initial</p>
 <!-- Testing: createImageData(sw, sh) returns transparent black data of the right size -->
-<canvas height="50" id="c214" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c242" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create2_initial() {
 
-var canvas = document.getElementById('c214');
+var canvas = document.getElementById('c242');
 var ctx = canvas.getContext('2d');
 
 var imgdata = ctx.createImageData(10, 20);
 ok(imgdata.data.length == imgdata.width*imgdata.height*4, "imgdata.data.length == imgdata.width*imgdata.height*4");
 ok(imgdata.width < imgdata.height, "imgdata.width < imgdata.height");
 ok(imgdata.width > 0, "imgdata.width > 0");
 var isTransparentBlack = true;
 for (var i = 0; i < imgdata.data.length; ++i)
@@ -5705,22 +6374,22 @@ ok(isTransparentBlack, "isTransparentBla
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create2.large.html ]]] -->
 
 <p>Canvas test: 2d.imageData.create2.large</p>
 <!-- Testing: createImageData(sw, sh) works for sizes much larger than the canvas -->
-<canvas height="50" id="c215" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c243" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create2_large() {
 
-var canvas = document.getElementById('c215');
+var canvas = document.getElementById('c243');
 var ctx = canvas.getContext('2d');
 
 var imgdata = ctx.createImageData(1000, 2000);
 ok(imgdata.data.length == imgdata.width*imgdata.height*4, "imgdata.data.length == imgdata.width*imgdata.height*4");
 ok(imgdata.width < imgdata.height, "imgdata.width < imgdata.height");
 ok(imgdata.width > 0, "imgdata.width > 0");
 var isTransparentBlack = true;
 for (var i = 0; i < imgdata.data.length; i += 7813) // check ~1024 points (assuming normal scaling)
@@ -5731,22 +6400,22 @@ ok(isTransparentBlack, "isTransparentBla
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create2.negative.html ]]] -->
 
 <p>Canvas test: 2d.imageData.create2.negative</p>
 <!-- Testing: createImageData(sw, sh) takes the absolute magnitude of the size arguments -->
-<canvas height="50" id="c216" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c244" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create2_negative() {
 
-var canvas = document.getElementById('c216');
+var canvas = document.getElementById('c244');
 var ctx = canvas.getContext('2d');
 
 var imgdata1 = ctx.createImageData(10, 20);
 var imgdata2 = ctx.createImageData(-10, 20);
 var imgdata3 = ctx.createImageData(10, -20);
 var imgdata4 = ctx.createImageData(-10, -20);
 ok(imgdata1.data.length == imgdata2.data.length, "imgdata1.data.length == imgdata2.data.length");
 ok(imgdata2.data.length == imgdata3.data.length, "imgdata2.data.length == imgdata3.data.length");
@@ -5755,22 +6424,22 @@ ok(imgdata3.data.length == imgdata4.data
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create2.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.imageData.create2.nonfinite</p>
 <!-- Testing: createImageData() throws NOT_SUPPORTED_ERR if arguments are not finite -->
-<canvas height="50" id="c217" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c245" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create2_nonfinite() {
 
-var canvas = document.getElementById('c217');
+var canvas = document.getElementById('c245');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   ctx.createImageData(Infinity, 10);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NOT_SUPPORTED_ERR");
 var _thrown = undefined; try {
   ctx.createImageData(-Infinity, 10);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NOT_SUPPORTED_ERR");
@@ -5817,43 +6486,43 @@ var _thrown = undefined; try {
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create2.round.html ]]] -->
 
 <p>Canvas test: 2d.imageData.create2.round</p>
 <!-- Testing: createImageData(w, h) is rounded the same as getImageData(0, 0, w, h) -->
-<canvas height="50" id="c218" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c246" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create2_round() {
 
-var canvas = document.getElementById('c218');
+var canvas = document.getElementById('c246');
 var ctx = canvas.getContext('2d');
 
 var imgdata1 = ctx.createImageData(10.01, 10.99);
 var imgdata2 = ctx.getImageData(0, 0, 10.01, 10.99);
 ok(imgdata1.width == imgdata2.width, "imgdata1.width == imgdata2.width");
 ok(imgdata1.height == imgdata2.height, "imgdata1.height == imgdata2.height");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create2.tiny.html ]]] -->
 
 <p>Canvas test: 2d.imageData.create2.tiny</p>
 <!-- Testing: createImageData(sw, sh) works for sizes smaller than one pixel -->
-<canvas height="50" id="c219" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c247" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create2_tiny() {
 
-var canvas = document.getElementById('c219');
+var canvas = document.getElementById('c247');
 var ctx = canvas.getContext('2d');
 
 var imgdata = ctx.createImageData(0.0001, 0.0001);
 ok(imgdata.data.length == imgdata.width*imgdata.height*4, "imgdata.data.length == imgdata.width*imgdata.height*4");
 ok(imgdata.width == 1, "imgdata.width == 1");
 ok(imgdata.height == 1, "imgdata.height == 1");
 var isTransparentBlack = true;
 for (var i = 0; i < imgdata.data.length; ++i)
@@ -5864,22 +6533,22 @@ ok(isTransparentBlack, "isTransparentBla
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create2.type.html ]]] -->
 
 <p>Canvas test: 2d.imageData.create2.type</p>
 <!-- Testing: createImageData(sw, sh) returns an ImageData object containing a CanvasPixelArray object -->
-<canvas height="50" id="c220" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c248" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create2_type() {
 
-var canvas = document.getElementById('c220');
+var canvas = document.getElementById('c248');
 var ctx = canvas.getContext('2d');
 
 var _thrown_outer = false;
 try {
 
 todo(window.ImageData !== undefined, "window.ImageData !== undefined");
 todo(window.CanvasPixelArray !== undefined, "window.CanvasPixelArray !== undefined");
 window.ImageData.prototype.thisImplementsImageData = true;
@@ -5896,22 +6565,22 @@ todo(!_thrown_outer, 'should not throw e
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create2.zero.html ]]] -->
 
 <p>Canvas test: 2d.imageData.create2.zero</p>
 <!-- Testing: createImageData(sw, sh) throws INDEX_SIZE_ERR if size is zero -->
-<canvas height="50" id="c221" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c249" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create2_zero() {
 
-var canvas = document.getElementById('c221');
+var canvas = document.getElementById('c249');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   ctx.createImageData(10, 0);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw INDEX_SIZE_ERR");
 var _thrown = undefined; try {
   ctx.createImageData(0, 10);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw INDEX_SIZE_ERR");
@@ -5922,40 +6591,40 @@ var _thrown = undefined; try {
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.get.basic.html ]]] -->
 
 <p>Canvas test: 2d.imageData.get.basic</p>
 <!-- Testing: getImageData() exists and returns something -->
-<canvas height="50" id="c222" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c250" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_get_basic() {
 
-var canvas = document.getElementById('c222');
+var canvas = document.getElementById('c250');
 var ctx = canvas.getContext('2d');
 
 ok(ctx.getImageData(0, 0, 100, 50) !== null, "ctx.getImageData(0, 0, 100, 50) !== null");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.get.clamp.html ]]] -->
 
 <p>Canvas test: 2d.imageData.get.clamp</p>
 <!-- Testing: getImageData() clamps colours to the range [0, 255] -->
-<canvas height="50" id="c223" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c251" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_get_clamp() {
 
-var canvas = document.getElementById('c223');
+var canvas = document.getElementById('c251');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = 'rgb(-100, -200, -300)';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = 'rgb(256, 300, 400)';
 ctx.fillRect(20, 10, 60, 10);
 var imgdata1 = ctx.getImageData(10, 5, 1, 1);
 ok(imgdata1.data[0] === 0, "imgdata1.data[\""+(0)+"\"] === 0");
@@ -5965,26 +6634,45 @@ var imgdata2 = ctx.getImageData(30, 15, 
 ok(imgdata2.data[0] === 255, "imgdata2.data[\""+(0)+"\"] === 255");
 ok(imgdata2.data[1] === 255, "imgdata2.data[\""+(1)+"\"] === 255");
 ok(imgdata2.data[2] === 255, "imgdata2.data[\""+(2)+"\"] === 255");
 
 
 }
 </script>
 
+<!-- [[[ test_2d.imageData.get.length.html ]]] -->
+
+<p>Canvas test: 2d.imageData.get.length</p>
+<!-- Testing: getImageData() returns a correctly-sized CanvasPixelArray -->
+<canvas height="50" id="c252" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_imageData_get_length() {
+
+var canvas = document.getElementById('c252');
+var ctx = canvas.getContext('2d');
+
+var imgdata = ctx.getImageData(0, 0, 10, 10);
+ok(imgdata.data.length == imgdata.width*imgdata.height*4, "imgdata.data.length == imgdata.width*imgdata.height*4");
+
+
+}
+</script>
+
 <!-- [[[ test_2d.imageData.get.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.imageData.get.nonfinite</p>
 <!-- Testing: getImageData() throws NOT_SUPPORTED_ERR if arguments are not finite -->
-<canvas height="50" id="c224" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c253" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_get_nonfinite() {
 
-var canvas = document.getElementById('c224');
+var canvas = document.getElementById('c253');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   ctx.getImageData(Infinity, 10, 10, 10);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NOT_SUPPORTED_ERR");
 var _thrown = undefined; try {
   ctx.getImageData(-Infinity, 10, 10, 10);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NOT_SUPPORTED_ERR");
@@ -6127,22 +6815,22 @@ var _thrown = undefined; try {
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.get.nonpremul.html ]]] -->
 
 <p>Canvas test: 2d.imageData.get.nonpremul</p>
 <!-- Testing: getImageData() returns non-premultiplied colours -->
-<canvas height="50" id="c225" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c254" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_get_nonpremul() {
 
-var canvas = document.getElementById('c225');
+var canvas = document.getElementById('c254');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';
 ctx.fillRect(0, 0, 100, 50);
 var imgdata = ctx.getImageData(10, 10, 10, 10);
 ok(imgdata.data[0] > 200, "imgdata.data[\""+(0)+"\"] > 200");
 ok(imgdata.data[1] > 200, "imgdata.data[\""+(1)+"\"] > 200");
 ok(imgdata.data[2] > 200, "imgdata.data[\""+(2)+"\"] > 200");
@@ -6152,44 +6840,44 @@ ok(imgdata.data[3] < 200, "imgdata.data[
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.get.order.alpha.html ]]] -->
 
 <p>Canvas test: 2d.imageData.get.order.alpha</p>
 <!-- Testing: getImageData() returns A in the fourth component -->
-<canvas height="50" id="c226" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c255" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_get_order_alpha() {
 
-var canvas = document.getElementById('c226');
+var canvas = document.getElementById('c255');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';
 ctx.fillRect(0, 0, 100, 50);
 var imgdata = ctx.getImageData(0, 0, 10, 10);
 ok(imgdata.data[3] < 200, "imgdata.data[\""+(3)+"\"] < 200");
 ok(imgdata.data[3] > 100, "imgdata.data[\""+(3)+"\"] > 100");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.get.order.cols.html ]]] -->
 
 <p>Canvas test: 2d.imageData.get.order.cols</p>
 <!-- Testing: getImageData() returns leftmost columns first -->
-<canvas height="50" id="c227" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c256" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_get_order_cols() {
 
-var canvas = document.getElementById('c227');
+var canvas = document.getElementById('c256');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#fff';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#000';
 ctx.fillRect(0, 0, 2, 50);
 var imgdata = ctx.getImageData(0, 0, 10, 10);
 ok(imgdata.data[0] === 0, "imgdata.data[\""+(0)+"\"] === 0");
@@ -6199,22 +6887,22 @@ ok(imgdata.data[Math.round((imgdata.heig
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.get.order.rgb.html ]]] -->
 
 <p>Canvas test: 2d.imageData.get.order.rgb</p>
 <!-- Testing: getImageData() returns R then G then B -->
-<canvas height="50" id="c228" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c257" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_get_order_rgb() {
 
-var canvas = document.getElementById('c228');
+var canvas = document.getElementById('c257');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#48c';
 ctx.fillRect(0, 0, 100, 50);
 var imgdata = ctx.getImageData(0, 0, 10, 10);
 ok(imgdata.data[0] === 0x44, "imgdata.data[\""+(0)+"\"] === 0x44");
 ok(imgdata.data[1] === 0x88, "imgdata.data[\""+(1)+"\"] === 0x88");
 ok(imgdata.data[2] === 0xCC, "imgdata.data[\""+(2)+"\"] === 0xCC");
@@ -6227,22 +6915,22 @@ ok(imgdata.data[7] === 255, "imgdata.dat
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.get.order.rows.html ]]] -->
 
 <p>Canvas test: 2d.imageData.get.order.rows</p>
 <!-- Testing: getImageData() returns topmost rows first -->
-<canvas height="50" id="c229" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c258" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_get_order_rows() {
 
-var canvas = document.getElementById('c229');
+var canvas = document.getElementById('c258');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#fff';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#000';
 ctx.fillRect(0, 0, 100, 2);
 var imgdata = ctx.getImageData(0, 0, 10, 10);
 ok(imgdata.data[0] === 0, "imgdata.data[\""+(0)+"\"] === 0");
@@ -6252,22 +6940,22 @@ ok(imgdata.data[(imgdata.height/2)*imgda
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.get.range.html ]]] -->
 
 <p>Canvas test: 2d.imageData.get.range</p>
 <!-- Testing: getImageData() returns values in the range [0, 255] -->
-<canvas height="50" id="c230" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c259" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_get_range() {
 
-var canvas = document.getElementById('c230');
+var canvas = document.getElementById('c259');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#000';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#fff';
 ctx.fillRect(20, 10, 60, 10);
 var imgdata1 = ctx.getImageData(10, 5, 1, 1);
 ok(imgdata1.data[0] === 0, "imgdata1.data[\""+(0)+"\"] === 0");
@@ -6277,22 +6965,22 @@ ok(imgdata2.data[0] === 255, "imgdata2.d
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.get.source.negative.html ]]] -->
 
 <p>Canvas test: 2d.imageData.get.source.negative</p>
 <!-- Testing: getImageData() works with negative width and height, and returns top-to-bottom left-to-right -->
-<canvas height="50" id="c231" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c260" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_get_source_negative() {
 
-var canvas = document.getElementById('c231');
+var canvas = document.getElementById('c260');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#000';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#fff';
 ctx.fillRect(20, 10, 60, 10);
 
 var imgdata1 = ctx.getImageData(85, 25, -10, -10);
@@ -6314,22 +7002,22 @@ ok(imgdata2.data[3] === 0, "imgdata2.dat
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.get.source.outside.html ]]] -->
 
 <p>Canvas test: 2d.imageData.get.source.outside</p>
 <!-- Testing: getImageData() returns transparent black outside the canvas -->
-<canvas height="50" id="c232" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c261" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_get_source_outside() {
 
-var canvas = document.getElementById('c232');
+var canvas = document.getElementById('c261');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#08f';
 ctx.fillRect(0, 0, 100, 50);
 
 var imgdata1 = ctx.getImageData(-10, 5, 1, 1);
 ok(imgdata1.data[0] === 0, "imgdata1.data[\""+(0)+"\"] === 0");
 ok(imgdata1.data[1] === 0, "imgdata1.data[\""+(1)+"\"] === 0");
@@ -6391,64 +7079,64 @@ ok(imgdata7.data[20*4+3] === 0, "imgdata
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.get.source.size.html ]]] -->
 
 <p>Canvas test: 2d.imageData.get.source.size</p>
 <!-- Testing: getImageData() returns bigger ImageData for bigger source rectangle -->
-<canvas height="50" id="c233" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c262" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_get_source_size() {
 
-var canvas = document.getElementById('c233');
+var canvas = document.getElementById('c262');
 var ctx = canvas.getContext('2d');
 
 var imgdata1 = ctx.getImageData(0, 0, 10, 10);
 var imgdata2 = ctx.getImageData(0, 0, 20, 20);
 ok(imgdata2.width > imgdata1.width, "imgdata2.width > imgdata1.width");
 ok(imgdata2.height > imgdata1.height, "imgdata2.height > imgdata1.height");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.get.tiny.html ]]] -->
 
 <p>Canvas test: 2d.imageData.get.tiny</p>
 <!-- Testing: getImageData() works for sizes smaller than one pixel -->
-<canvas height="50" id="c234" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c263" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_get_tiny() {
 
-var canvas = document.getElementById('c234');
+var canvas = document.getElementById('c263');
 var ctx = canvas.getContext('2d');
 
 var imgdata = ctx.getImageData(0, 0, 0.0001, 0.0001);
 ok(imgdata.data.length == imgdata.width*imgdata.height*4, "imgdata.data.length == imgdata.width*imgdata.height*4");
 ok(imgdata.width == 1, "imgdata.width == 1");
 ok(imgdata.height == 1, "imgdata.height == 1");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.get.type.html ]]] -->
 
 <p>Canvas test: 2d.imageData.get.type</p>
 <!-- Testing: getImageData() returns an ImageData object containing a CanvasPixelArray object -->
-<canvas height="50" id="c235" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c264" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_get_type() {
 
-var canvas = document.getElementById('c235');
+var canvas = document.getElementById('c264');
 var ctx = canvas.getContext('2d');
 
 var _thrown_outer = false;
 try {
 
 todo(window.ImageData !== undefined, "window.ImageData !== undefined");
 todo(window.CanvasPixelArray !== undefined, "window.CanvasPixelArray !== undefined");
 window.ImageData.prototype.thisImplementsImageData = true;
@@ -6465,22 +7153,22 @@ todo(!_thrown_outer, 'should not throw e
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.get.unaffected.html ]]] -->
 
 <p>Canvas test: 2d.imageData.get.unaffected</p>
 <!-- Testing: getImageData() is not affected by context state -->
-<canvas height="50" id="c236" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c265" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_get_unaffected() {
 
-var canvas = document.getElementById('c236');
+var canvas = document.getElementById('c265');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 50, 50)
 ctx.fillStyle = '#f00';
 ctx.fillRect(50, 0, 50, 50)
 ctx.save();
 ctx.translate(50, 0);
@@ -6498,22 +7186,22 @@ isPixel(ctx, 75,25, 0,255,0,255, 2);
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.get.zero.html ]]] -->
 
 <p>Canvas test: 2d.imageData.get.zero</p>
 <!-- Testing: getImageData() throws INDEX_SIZE_ERR if size is zero -->
-<canvas height="50" id="c237" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c266" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_get_zero() {
 
-var canvas = document.getElementById('c237');
+var canvas = document.getElementById('c266');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   ctx.getImageData(1, 1, 10, 0);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw INDEX_SIZE_ERR");
 var _thrown = undefined; try {
   ctx.getImageData(1, 1, 0, 10);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw INDEX_SIZE_ERR");
@@ -6524,22 +7212,22 @@ var _thrown = undefined; try {
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.object.clamp.html ]]] -->
 
 <p>Canvas test: 2d.imageData.object.clamp</p>
 <!-- Testing: ImageData.data clamps numbers to [0, 255] -->
-<canvas height="50" id="c238" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c267" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_object_clamp() {
 
-var canvas = document.getElementById('c238');
+var canvas = document.getElementById('c267');
 var ctx = canvas.getContext('2d');
 
 var imgdata = ctx.getImageData(0, 0, 10, 10);
 
 imgdata.data[0] = 100;
 imgdata.data[0] = 300;
 ok(imgdata.data[0] === 255, "imgdata.data[\""+(0)+"\"] === 255");
 imgdata.data[0] = 100;
@@ -6570,43 +7258,43 @@ ok(imgdata.data[0] === 255, "imgdata.dat
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.object.ctor.html ]]] -->
 
 <p>Canvas test: 2d.imageData.object.ctor</p>
 <!-- Testing: ImageData does not have a usable constructor -->
-<canvas height="50" id="c239" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c268" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_object_ctor() {
 
-var canvas = document.getElementById('c239');
+var canvas = document.getElementById('c268');
 var ctx = canvas.getContext('2d');
 
 todo(window.ImageData !== undefined, "window.ImageData !== undefined");
 try { var _thrown = false;
   new window.ImageData(1,1);
 } catch (e) { _thrown = true; } finally { ok(_thrown, "should throw exception"); }
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.object.nan.html ]]] -->
 
 <p>Canvas test: 2d.imageData.object.nan</p>
 <!-- Testing: ImageData.data converts NaN to 0 -->
-<canvas height="50" id="c240" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c269" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_object_nan() {
 
-var canvas = document.getElementById('c240');
+var canvas = document.getElementById('c269');
 var ctx = canvas.getContext('2d');
 
 var imgdata = ctx.getImageData(0, 0, 10, 10);
 imgdata.data[0] = 100;
 imgdata.data[0] = NaN;
 ok(imgdata.data[0] === 0, "imgdata.data[\""+(0)+"\"] === 0");
 imgdata.data[0] = 100;
 imgdata.data[0] = "cheese";
@@ -6615,43 +7303,43 @@ ok(imgdata.data[0] === 0, "imgdata.data[
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.object.properties.html ]]] -->
 
 <p>Canvas test: 2d.imageData.object.properties</p>
 <!-- Testing: ImageData objects have the right properties -->
-<canvas height="50" id="c241" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c270" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_object_properties() {
 
-var canvas = document.getElementById('c241');
+var canvas = document.getElementById('c270');
 var ctx = canvas.getContext('2d');
 
 var imgdata = ctx.getImageData(0, 0, 10, 10);
 ok(typeof(imgdata.width) == 'number', "typeof(imgdata.width) == 'number'");
 ok(typeof(imgdata.height) == 'number', "typeof(imgdata.height) == 'number'");
 ok(typeof(imgdata.data) == 'object', "typeof(imgdata.data) == 'object'");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.object.readonly.html ]]] -->
 
 <p>Canvas test: 2d.imageData.object.readonly</p>
 <!-- Testing: ImageData objects properties are read-only -->
-<canvas height="50" id="c242" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c271" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_object_readonly() {
 
-var canvas = document.getElementById('c242');
+var canvas = document.getElementById('c271');
 var ctx = canvas.getContext('2d');
 
 var imgdata = ctx.getImageData(0, 0, 10, 10);
 var w = imgdata.width;
 var h = imgdata.height;
 var d = imgdata.data;
 imgdata.width = 123;
 imgdata.height = 123;
@@ -6667,22 +7355,22 @@ ok(imgdata.data[3] === 0, "imgdata.data[
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.object.round.html ]]] -->
 
 <p>Canvas test: 2d.imageData.object.round</p>
 <!-- Testing: ImageData.data rounds numbers with round-to-zero -->
-<canvas height="50" id="c243" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c272" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_object_round() {
 
-var canvas = document.getElementById('c243');
+var canvas = document.getElementById('c272');
 var ctx = canvas.getContext('2d');
 
 var imgdata = ctx.getImageData(0, 0, 10, 10);
 imgdata.data[0] = 0.499;
 ok(imgdata.data[0] === 0, "imgdata.data[\""+(0)+"\"] === 0");
 imgdata.data[0] = 0.5;
 ok(imgdata.data[0] === 0, "imgdata.data[\""+(0)+"\"] === 0");
 imgdata.data[0] = 0.501;
@@ -6713,44 +7401,44 @@ ok(imgdata.data[0] === 0, "imgdata.data[
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.object.set.html ]]] -->
 
 <p>Canvas test: 2d.imageData.object.set</p>
 <!-- Testing: ImageData.data can be modified -->
-<canvas height="50" id="c244" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c273" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_object_set() {
 
-var canvas = document.getElementById('c244');
+var canvas = document.getElementById('c273');
 var ctx = canvas.getContext('2d');
 
 var imgdata = ctx.getImageData(0, 0, 10, 10);
 imgdata.data[0] = 100;
 ok(imgdata.data[0] === 100, "imgdata.data[\""+(0)+"\"] === 100");
 imgdata.data[0] = 200;
 ok(imgdata.data[0] === 200, "imgdata.data[\""+(0)+"\"] === 200");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.object.string.html ]]] -->
 
 <p>Canvas test: 2d.imageData.object.string</p>
 <!-- Testing: ImageData.data converts strings to numbers with ToNumber -->
-<canvas height="50" id="c245" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c274" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_object_string() {
 
-var canvas = document.getElementById('c245');
+var canvas = document.getElementById('c274');
 var ctx = canvas.getContext('2d');
 
 var imgdata = ctx.getImageData(0, 0, 10, 10);
 imgdata.data[0] = 100;
 imgdata.data[0] = "110";
 ok(imgdata.data[0] === 110, "imgdata.data[\""+(0)+"\"] === 110");
 imgdata.data[0] = 100;
 imgdata.data[0] = "0x78";
@@ -6762,43 +7450,43 @@ ok(imgdata.data[0] === 130, "imgdata.dat
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.object.undefined.html ]]] -->
 
 <p>Canvas test: 2d.imageData.object.undefined</p>
 <!-- Testing: ImageData.data converts undefined to 0 -->
-<canvas height="50" id="c246" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c275" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_object_undefined() {
 
-var canvas = document.getElementById('c246');
+var canvas = document.getElementById('c275');
 var ctx = canvas.getContext('2d');
 
 var imgdata = ctx.getImageData(0, 0, 10, 10);
 imgdata.data[0] = 100;
 imgdata.data[0] = undefined;
 ok(imgdata.data[0] === 0, "imgdata.data[\""+(0)+"\"] === 0");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.put.alpha.html ]]] -->
 
 <p>Canvas test: 2d.imageData.put.alpha</p>
 <!-- Testing: putImageData() puts non-solid image data correctly -->
-<canvas height="50" id="c247" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c276" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_put_alpha() {
 
-var canvas = document.getElementById('c247');
+var canvas = document.getElementById('c276');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = 'rgba(0, 255, 0, 0.25)';
 ctx.fillRect(0, 0, 100, 50)
 var imgdata = ctx.getImageData(0, 0, 100, 50);
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50)
 ctx.putImageData(imgdata, 0, 0);
@@ -6807,22 +7495,22 @@ isPixel(ctx, 50,25, 0,255,0,64, 2);
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.put.basic.html ]]] -->
 
 <p>Canvas test: 2d.imageData.put.basic</p>
 <!-- Testing: putImageData() puts image data from getImageData() onto the canvas -->
-<canvas height="50" id="c248" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c277" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_put_basic() {
 
-var canvas = document.getElementById('c248');
+var canvas = document.getElementById('c277');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50)
 var imgdata = ctx.getImageData(0, 0, 100, 50);
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50)
 ctx.putImageData(imgdata, 0, 0);
@@ -6831,22 +7519,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.put.clip.html ]]] -->
 
 <p>Canvas test: 2d.imageData.put.clip</p>
 <!-- Testing: putImageData() is not affected by clipping regions -->
-<canvas height="50" id="c249" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c278" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_put_clip() {
 
-var canvas = document.getElementById('c249');
+var canvas = document.getElementById('c278');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50)
 var imgdata = ctx.getImageData(0, 0, 100, 50);
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50)
 ctx.beginPath();
@@ -6859,22 +7547,22 @@ isPixel(ctx, 75,25, 0,255,0,255, 2);
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.put.created.html ]]] -->
 
 <p>Canvas test: 2d.imageData.put.created</p>
 <!-- Testing: putImageData() puts image data from createImageData() onto the canvas -->
-<canvas height="50" id="c250" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c279" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_put_created() {
 
-var canvas = document.getElementById('c250');
+var canvas = document.getElementById('c279');
 var ctx = canvas.getContext('2d');
 
 var imgdata = ctx.createImageData(100, 50);
 for (var i = 0; i < imgdata.data.length; i += 4) {
     imgdata.data[i] = 0;
     imgdata.data[i+1] = 255;
     imgdata.data[i+2] = 0;
     imgdata.data[i+3] = 255;
@@ -6887,22 +7575,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.put.cross.html ]]] -->
 
 <p>Canvas test: 2d.imageData.put.cross</p>
 <!-- Testing: putImageData() accepts image data got from a different canvas -->
-<canvas height="50" id="c251" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c280" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_put_cross() {
 
-var canvas = document.getElementById('c251');
+var canvas = document.getElementById('c280');
 var ctx = canvas.getContext('2d');
 
 var canvas2 = document.createElement('canvas');
 var ctx2 = canvas2.getContext('2d');
 ctx2.fillStyle = '#0f0';
 ctx2.fillRect(0, 0, 100, 50)
 var imgdata = ctx2.getImageData(0, 0, 100, 50);
 ctx.fillStyle = '#f00';
@@ -6913,22 +7601,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.put.dirty.negative.html ]]] -->
 
 <p>Canvas test: 2d.imageData.put.dirty.negative</p>
 <!-- Testing: putImageData() handles negative-sized dirty rectangles correctly -->
-<canvas height="50" id="c252" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c281" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_put_dirty_negative() {
 
-var canvas = document.getElementById('c252');
+var canvas = document.getElementById('c281');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50)
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 20, 20)
 
 var imgdata = ctx.getImageData(0, 0, 100, 50);
@@ -6948,22 +7636,22 @@ isPixel(ctx, 50,45, 0,255,0,255, 2);
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.put.dirty.outside.html ]]] -->
 
 <p>Canvas test: 2d.imageData.put.dirty.outside</p>
 <!-- Testing: putImageData() handles dirty rectangles outside the canvas correctly -->
-<canvas height="50" id="c253" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c282" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_put_dirty_outside() {
 
-var canvas = document.getElementById('c253');
+var canvas = document.getElementById('c282');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50)
 
 var imgdata = ctx.getImageData(0, 0, 100, 50);
 
 ctx.fillStyle = '#0f0';
@@ -6985,22 +7673,22 @@ isPixel(ctx, 1,45, 0,255,0,255, 2);
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.put.dirty.rect1.html ]]] -->
 
 <p>Canvas test: 2d.imageData.put.dirty.rect1</p>
 <!-- Testing: putImageData() only modifies areas inside the dirty rectangle, using width and height -->
-<canvas height="50" id="c254" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c283" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_put_dirty_rect1() {
 
-var canvas = document.getElementById('c254');
+var canvas = document.getElementById('c283');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50)
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 20, 20)
 
 var imgdata = ctx.getImageData(0, 0, 100, 50);
@@ -7020,22 +7708,22 @@ isPixel(ctx, 50,45, 0,255,0,255, 2);
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.put.dirty.rect2.html ]]] -->
 
 <p>Canvas test: 2d.imageData.put.dirty.rect2</p>
 <!-- Testing: putImageData() only modifies areas inside the dirty rectangle, using x and y -->
-<canvas height="50" id="c255" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c284" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_put_dirty_rect2() {
 
-var canvas = document.getElementById('c255');
+var canvas = document.getElementById('c284');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50)
 ctx.fillStyle = '#0f0';
 ctx.fillRect(60, 30, 20, 20)
 
 var imgdata = ctx.getImageData(0, 0, 100, 50);
@@ -7055,22 +7743,22 @@ isPixel(ctx, 50,45, 0,255,0,255, 2);
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.put.dirty.zero.html ]]] -->
 
 <p>Canvas test: 2d.imageData.put.dirty.zero</p>
 <!-- Testing: putImageData() with zero-sized dirty rectangle puts nothing -->
-<canvas height="50" id="c256" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c285" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_put_dirty_zero() {
 
-var canvas = document.getElementById('c256');
+var canvas = document.getElementById('c285');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50)
 var imgdata = ctx.getImageData(0, 0, 100, 50);
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50)
 ctx.putImageData(imgdata, 0, 0, 0, 0, 0, 0);
@@ -7079,22 +7767,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.put.modified.html ]]] -->
 
 <p>Canvas test: 2d.imageData.put.modified</p>
 <!-- Testing: putImageData() puts modified image data correctly -->
-<canvas height="50" id="c257" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c286" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_put_modified() {
 
-var canvas = document.getElementById('c257');
+var canvas = document.getElementById('c286');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50)
 ctx.fillStyle = '#f00';
 ctx.fillRect(45, 20, 10, 10)
 var imgdata = ctx.getImageData(45, 20, 10, 10);
 for (var i = 0, len = imgdata.width*imgdata.height*4; i < len; i += 4)
@@ -7108,22 +7796,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.put.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.imageData.put.nonfinite</p>
 <!-- Testing: putImageData() throws NOT_SUPPORTED_ERR if arguments are not finite -->
-<canvas height="50" id="c258" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c287" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_put_nonfinite() {
 
-var canvas = document.getElementById('c258');
+var canvas = document.getElementById('c287');
 var ctx = canvas.getContext('2d');
 
 var imgdata = ctx.getImageData(0, 0, 10, 10);
 var _thrown = undefined; try {
   ctx.putImageData(imgdata, Infinity, 10);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NOT_SUPPORTED_ERR");
 var _thrown = undefined; try {
   ctx.putImageData(imgdata, -Infinity, 10);
@@ -7372,42 +8060,42 @@ var _thrown = undefined; try {
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.put.null.html ]]] -->
 
 <p>Canvas test: 2d.imageData.put.null</p>
 <!-- Testing: putImageData() with null imagedata throws TypeError -->
-<canvas height="50" id="c259" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c288" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_put_null() {
 
-var canvas = document.getElementById('c259');
+var canvas = document.getElementById('c288');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   ctx.putImageData(null, 0, 0);
 } catch (e) { _thrown = e }; todo(_thrown && (_thrown instanceof TypeError), "should throw TypeError");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.put.path.html ]]] -->
 
 <p>Canvas test: 2d.imageData.put.path</p>
 <!-- Testing: putImageData() does not affect the current path -->
-<canvas height="50" id="c260" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c289" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_put_path() {
 
-var canvas = document.getElementById('c260');
+var canvas = document.getElementById('c289');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50)
 ctx.rect(0, 0, 100, 50);
 var imgdata = ctx.getImageData(0, 0, 100, 50);
 ctx.putImageData(imgdata, 0, 0);
 ctx.fillStyle = '#0f0';
@@ -7417,22 +8105,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.put.unaffected.html ]]] -->
 
 <p>Canvas test: 2d.imageData.put.unaffected</p>
 <!-- Testing: putImageData() is not affected by context state -->
-<canvas height="50" id="c261" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c290" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_put_unaffected() {
 
-var canvas = document.getElementById('c261');
+var canvas = document.getElementById('c290');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50)
 var imgdata = ctx.getImageData(0, 0, 100, 50);
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50)
 ctx.globalAlpha = 0.1;
@@ -7447,22 +8135,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.put.unchanged.html ]]] -->
 
 <p>Canvas test: 2d.imageData.put.unchanged</p>
 <!-- Testing: putImageData(getImageData(...), ...) has no effect -->
-<canvas height="50" id="c262" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c291" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_put_unchanged() {
 
-var canvas = document.getElementById('c262');
+var canvas = document.getElementById('c291');
 var ctx = canvas.getContext('2d');
 
 var i = 0;
 for (var y = 0; y < 16; ++y) {
     for (var x = 0; x < 16; ++x, ++i) {
         ctx.fillStyle = 'rgba(' + i + ',' + (Math.floor(i*1.5) % 256) + ',' + (Math.floor(i*23.3) % 256) + ',' + (i/256) + ')';
         ctx.fillRect(x, y, 1, 1);
     }
@@ -7482,22 +8170,22 @@ for (var i = 0; i < imgdata2.data.length
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.put.wrongtype.html ]]] -->
 
 <p>Canvas test: 2d.imageData.put.wrongtype</p>
 <!-- Testing: putImageData() does not accept non-ImageData objects -->
-<canvas height="50" id="c263" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c292" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_put_wrongtype() {
 
-var canvas = document.getElementById('c263');
+var canvas = document.getElementById('c292');
 var ctx = canvas.getContext('2d');
 
 var imgdata = { width: 1, height: 1, data: [255, 0, 0, 255] };
 var _thrown = undefined; try {
   ctx.putImageData(imgdata, 0, 0);
 } catch (e) { _thrown = e }; todo(_thrown && (_thrown instanceof TypeError), "should throw TypeError");
 var _thrown = undefined; try {
   ctx.putImageData("cheese", 0, 0);
@@ -7509,22 +8197,22 @@ var _thrown = undefined; try {
 
 }
 </script>
 
 <!-- [[[ test_2d.line.cap.butt.html ]]] -->
 
 <p>Canvas test: 2d.line.cap.butt</p>
 <!-- Testing: lineCap 'butt' is rendered correctly -->
-<canvas height="50" id="c264" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c293" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_cap_butt() {
 
-var canvas = document.getElementById('c264');
+var canvas = document.getElementById('c293');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.lineCap = 'butt';
 ctx.lineWidth = 20;
 
@@ -7561,22 +8249,22 @@ isPixel(ctx, 75,36, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.line.cap.invalid.html ]]] -->
 
 <p>Canvas test: 2d.line.cap.invalid</p>
 <!-- Testing: Setting lineCap to invalid values is ignored -->
-<canvas height="50" id="c265" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c294" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_cap_invalid() {
 
-var canvas = document.getElementById('c265');
+var canvas = document.getElementById('c294');
 var ctx = canvas.getContext('2d');
 
 ctx.lineCap = 'butt'
 ok(ctx.lineCap === 'butt', "ctx.lineCap === 'butt'");
 
 ctx.lineCap = 'butt';
 ctx.lineCap = 'invalid';
 ok(ctx.lineCap === 'butt', "ctx.lineCap === 'butt'");
@@ -7604,22 +8292,22 @@ ok(ctx.lineCap === 'butt', "ctx.lineCap 
 
 }
 </script>
 
 <!-- [[[ test_2d.line.cap.open.html ]]] -->
 
 <p>Canvas test: 2d.line.cap.open</p>
 <!-- Testing: Line caps are drawn at the corners of an unclosed rectangle -->
-<canvas height="50" id="c266" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c295" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_cap_open() {
 
-var canvas = document.getElementById('c266');
+var canvas = document.getElementById('c295');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.strokeStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.lineJoin = 'bevel';
 ctx.lineCap = 'square';
@@ -7641,22 +8329,22 @@ isPixel(ctx, 1,48, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.line.cap.round.html ]]] -->
 
 <p>Canvas test: 2d.line.cap.round</p>
 <!-- Testing: lineCap 'round' is rendered correctly -->
-<canvas height="50" id="c267" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c296" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_cap_round() {
 
-var canvas = document.getElementById('c267');
+var canvas = document.getElementById('c296');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 var tol = 1; // tolerance to avoid antialiasing artifacts
 
 ctx.lineCap = 'round';
@@ -7709,22 +8397,22 @@ isPixel(ctx, 82,43, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.line.cap.square.html ]]] -->
 
 <p>Canvas test: 2d.line.cap.square</p>
 <!-- Testing: lineCap 'square' is rendered correctly -->
-<canvas height="50" id="c268" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c297" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_cap_square() {
 
-var canvas = document.getElementById('c268');
+var canvas = document.getElementById('c297');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.lineCap = 'square';
 ctx.lineWidth = 20;
 
@@ -7757,25 +8445,50 @@ isPixel(ctx, 75,6, 0,255,0,255, 0);
 isPixel(ctx, 75,44, 0,255,0,255, 0);
 isPixel(ctx, 75,45, 0,255,0,255, 0);
 isPixel(ctx, 75,46, 0,255,0,255, 0);
 
 
 }
 </script>
 
+<!-- [[[ test_2d.line.cap.valid.html ]]] -->
+
+<p>Canvas test: 2d.line.cap.valid</p>
+<!-- Testing: Setting lineCap to valid values works -->
+<canvas height="50" id="c298" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_line_cap_valid() {
+
+var canvas = document.getElementById('c298');
+var ctx = canvas.getContext('2d');
+
+ctx.lineCap = 'butt'
+ok(ctx.lineCap === 'butt', "ctx.lineCap === 'butt'");
+
+ctx.lineCap = 'round';
+ok(ctx.lineCap === 'round', "ctx.lineCap === 'round'");
+
+ctx.lineCap = 'square';
+ok(ctx.lineCap === 'square', "ctx.lineCap === 'square'");
+
+
+}
+</script>
+
 <!-- [[[ test_2d.line.cross.html ]]] -->
 
 <p>Canvas test: 2d.line.cross</p>
-<canvas height="50" id="c269" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c299" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_cross() {
 
-var canvas = document.getElementById('c269');
+var canvas = document.getElementById('c299');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.lineWidth = 200;
 ctx.lineJoin = 'bevel';
 
@@ -7793,43 +8506,43 @@ isPixel(ctx, 1,48, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.line.defaults.html ]]] -->
 
 <p>Canvas test: 2d.line.defaults</p>
-<canvas height="50" id="c270" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c300" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_defaults() {
 
-var canvas = document.getElementById('c270');
+var canvas = document.getElementById('c300');
 var ctx = canvas.getContext('2d');
 
 ok(ctx.lineWidth === 1, "ctx.lineWidth === 1");
 ok(ctx.lineCap === 'butt', "ctx.lineCap === 'butt'");
 ok(ctx.lineJoin === 'miter', "ctx.lineJoin === 'miter'");
 ok(ctx.miterLimit === 10, "ctx.miterLimit === 10");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.line.join.bevel.html ]]] -->
 
 <p>Canvas test: 2d.line.join.bevel</p>
 <!-- Testing: lineJoin 'bevel' is rendered correctly -->
-<canvas height="50" id="c271" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c301" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_join_bevel() {
 
-var canvas = document.getElementById('c271');
+var canvas = document.getElementById('c301');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 var tol = 1; // tolerance to avoid antialiasing artifacts
 
 ctx.lineJoin = 'bevel';
@@ -7885,22 +8598,22 @@ isPixel(ctx, 86,14, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.line.join.closed.html ]]] -->
 
 <p>Canvas test: 2d.line.join.closed</p>
 <!-- Testing: Line joins are drawn at the corner of a closed rectangle -->
-<canvas height="50" id="c272" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c302" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_join_closed() {
 
-var canvas = document.getElementById('c272');
+var canvas = document.getElementById('c302');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.strokeStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.lineJoin = 'miter';
 ctx.lineWidth = 200;
@@ -7921,22 +8634,22 @@ isPixel(ctx, 1,48, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.line.join.invalid.html ]]] -->
 
 <p>Canvas test: 2d.line.join.invalid</p>
 <!-- Testing: Setting lineJoin to invalid values is ignored -->
-<canvas height="50" id="c273" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c303" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_join_invalid() {
 
-var canvas = document.getElementById('c273');
+var canvas = document.getElementById('c303');
 var ctx = canvas.getContext('2d');
 
 ctx.lineJoin = 'bevel'
 ok(ctx.lineJoin === 'bevel', "ctx.lineJoin === 'bevel'");
 
 ctx.lineJoin = 'bevel';
 ctx.lineJoin = 'invalid';
 ok(ctx.lineJoin === 'bevel', "ctx.lineJoin === 'bevel'");
@@ -7964,22 +8677,22 @@ ok(ctx.lineJoin === 'bevel', "ctx.lineJo
 
 }
 </script>
 
 <!-- [[[ test_2d.line.join.miter.html ]]] -->
 
 <p>Canvas test: 2d.line.join.miter</p>
 <!-- Testing: lineJoin 'miter' is rendered correctly -->
-<canvas height="50" id="c274" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c304" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_join_miter() {
 
-var canvas = document.getElementById('c274');
+var canvas = document.getElementById('c304');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.lineJoin = 'miter';
 ctx.lineWidth = 20;
 
@@ -8026,22 +8739,22 @@ isPixel(ctx, 92,8, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.line.join.open.html ]]] -->
 
 <p>Canvas test: 2d.line.join.open</p>
 <!-- Testing: Line joins are not drawn at the corner of an unclosed rectangle -->
-<canvas height="50" id="c275" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c305" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_join_open() {
 
-var canvas = document.getElementById('c275');
+var canvas = document.getElementById('c305');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.strokeStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.lineJoin = 'miter';
 ctx.lineWidth = 200;
@@ -8062,22 +8775,22 @@ isPixel(ctx, 1,48, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.line.join.round.html ]]] -->
 
 <p>Canvas test: 2d.line.join.round</p>
 <!-- Testing: lineJoin 'round' is rendered correctly -->
-<canvas height="50" id="c276" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c306" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_join_round() {
 
-var canvas = document.getElementById('c276');
+var canvas = document.getElementById('c306');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 var tol = 1; // tolerance to avoid antialiasing artifacts
 
 ctx.lineJoin = 'round';
@@ -8127,26 +8840,51 @@ isPixel(ctx, 86,13, 0,255,0,255, 0);
 isPixel(ctx, 87,13, 0,255,0,255, 0);
 isPixel(ctx, 88,13, 0,255,0,255, 0);
 isPixel(ctx, 88,12, 0,255,0,255, 0);
 
 
 }
 </script>
 
+<!-- [[[ test_2d.line.join.valid.html ]]] -->
+
+<p>Canvas test: 2d.line.join.valid</p>
+<!-- Testing: Setting lineJoin to valid values works -->
+<canvas height="50" id="c307" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_line_join_valid() {
+
+var canvas = document.getElementById('c307');
+var ctx = canvas.getContext('2d');
+
+ctx.lineJoin = 'bevel'
+ok(ctx.lineJoin === 'bevel', "ctx.lineJoin === 'bevel'");
+
+ctx.lineJoin = 'round';
+ok(ctx.lineJoin === 'round', "ctx.lineJoin === 'round'");
+
+ctx.lineJoin = 'miter';
+ok(ctx.lineJoin === 'miter', "ctx.lineJoin === 'miter'");
+
+
+}
+</script>
+
 <!-- [[[ test_2d.line.miter.acute.html ]]] -->
 
 <p>Canvas test: 2d.line.miter.acute</p>
 <!-- Testing: Miter joins are drawn correctly with acute angles -->
-<canvas height="50" id="c277" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c308" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_miter_acute() {
 
-var canvas = document.getElementById('c277');
+var canvas = document.getElementById('c308');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.lineWidth = 200;
 ctx.lineJoin = 'miter';
 
@@ -8174,22 +8912,22 @@ isPixel(ctx, 1,48, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.line.miter.exceeded.html ]]] -->
 
 <p>Canvas test: 2d.line.miter.exceeded</p>
 <!-- Testing: Miter joins are not drawn when the miter limit is exceeded -->
-<canvas height="50" id="c278" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c309" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_miter_exceeded() {
 
-var canvas = document.getElementById('c278');
+var canvas = document.getElementById('c309');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.lineWidth = 400;
 ctx.lineJoin = 'miter';
 
@@ -8209,22 +8947,22 @@ isPixel(ctx, 1,48, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.line.miter.invalid.html ]]] -->
 
 <p>Canvas test: 2d.line.miter.invalid</p>
 <!-- Testing: Setting miterLimit to invalid values is ignored -->
-<canvas height="50" id="c279" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c310" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_miter_invalid() {
 
-var canvas = document.getElementById('c279');
+var canvas = document.getElementById('c310');
 var ctx = canvas.getContext('2d');
 
 ctx.miterLimit = 1.5;
 ok(ctx.miterLimit === 1.5, "ctx.miterLimit === 1.5");
 
 ctx.miterLimit = 1.5;
 ctx.miterLimit = 0;
 ok(ctx.miterLimit === 1.5, "ctx.miterLimit === 1.5");
@@ -8248,22 +8986,22 @@ ok(ctx.miterLimit === 1.5, "ctx.miterLim
 
 }
 </script>
 
 <!-- [[[ test_2d.line.miter.lineedge.html ]]] -->
 
 <p>Canvas test: 2d.line.miter.lineedge</p>
 <!-- Testing: Miter joins are not drawn when the miter limit is exceeded at the corners of a zero-height rectangle -->
-<canvas height="50" id="c280" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c311" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_miter_lineedge() {
 
-var canvas = document.getElementById('c280');
+var canvas = document.getElementById('c311');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.lineWidth = 200;
 ctx.lineJoin = 'miter';
 
@@ -8280,22 +9018,22 @@ isPixel(ctx, 1,48, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.line.miter.obtuse.html ]]] -->
 
 <p>Canvas test: 2d.line.miter.obtuse</p>
 <!-- Testing: Miter joins are drawn correctly with obtuse angles -->
-<canvas height="50" id="c281" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c312" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_miter_obtuse() {
 
-var canvas = document.getElementById('c281');
+var canvas = document.getElementById('c312');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.lineWidth = 1600;
 ctx.lineJoin = 'miter';
 
@@ -8323,22 +9061,22 @@ isPixel(ctx, 1,48, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.line.miter.rightangle.html ]]] -->
 
 <p>Canvas test: 2d.line.miter.rightangle</p>
 <!-- Testing: Miter joins are not drawn when the miter limit is exceeded, on exact right angles -->
-<canvas height="50" id="c282" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c313" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_miter_rightangle() {
 
-var canvas = document.getElementById('c282');
+var canvas = document.getElementById('c313');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.lineWidth = 400;
 ctx.lineJoin = 'miter';
 
@@ -8354,26 +9092,54 @@ isPixel(ctx, 1,1, 0,255,0,255, 0);
 isPixel(ctx, 48,1, 0,255,0,255, 0);
 isPixel(ctx, 48,48, 0,255,0,255, 0);
 isPixel(ctx, 1,48, 0,255,0,255, 0);
 
 
 }
 </script>
 
+<!-- [[[ test_2d.line.miter.valid.html ]]] -->
+
+<p>Canvas test: 2d.line.miter.valid</p>
+<!-- Testing: Setting miterLimit to valid values works -->
+<canvas height="50" id="c314" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_line_miter_valid() {
+
+var canvas = document.getElementById('c314');
+var ctx = canvas.getContext('2d');
+
+ctx.miterLimit = 1.5;
+ok(ctx.miterLimit === 1.5, "ctx.miterLimit === 1.5");
+
+ctx.miterLimit = "1e1";
+ok(ctx.miterLimit === 10, "ctx.miterLimit === 10");
+
+ctx.miterLimit = 1/1024;
+ok(ctx.miterLimit === 1/1024, "ctx.miterLimit === 1/1024");
+
+ctx.miterLimit = 1000;
+ok(ctx.miterLimit === 1000, "ctx.miterLimit === 1000");
+
+
+}
+</script>
+
 <!-- [[[ test_2d.line.miter.within.html ]]] -->
 
 <p>Canvas test: 2d.line.miter.within</p>
 <!-- Testing: Miter joins are drawn when the miter limit is not quite exceeded -->
-<canvas height="50" id="c283" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c315" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_miter_within() {
 
-var canvas = document.getElementById('c283');
+var canvas = document.getElementById('c315');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.lineWidth = 400;
 ctx.lineJoin = 'miter';
 
@@ -8392,22 +9158,22 @@ isPixel(ctx, 1,48, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.line.union.html ]]] -->
 
 <p>Canvas test: 2d.line.union</p>
-<canvas height="50" id="c284" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c316" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_union() {
 
-var canvas = document.getElementById('c284');
+var canvas = document.getElementById('c316');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.lineWidth = 100;
 ctx.lineCap = 'round';
 
@@ -8429,22 +9195,22 @@ isPixel(ctx, 48,48, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.line.width.basic.html ]]] -->
 
 <p>Canvas test: 2d.line.width.basic</p>
 <!-- Testing: lineWidth determines the width of line strokes -->
-<canvas height="50" id="c285" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c317" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_width_basic() {
 
-var canvas = document.getElementById('c285');
+var canvas = document.getElementById('c317');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.lineWidth = 20;
 // Draw a green line over a red box, to check the line is not too small
 ctx.fillStyle = '#f00';
@@ -8483,22 +9249,22 @@ isPixel(ctx, 86,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.line.width.invalid.html ]]] -->
 
 <p>Canvas test: 2d.line.width.invalid</p>
 <!-- Testing: Setting lineWidth to invalid values is ignored -->
-<canvas height="50" id="c286" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c318" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_width_invalid() {
 
-var canvas = document.getElementById('c286');
+var canvas = document.getElementById('c318');
 var ctx = canvas.getContext('2d');
 
 ctx.lineWidth = 1.5;
 ok(ctx.lineWidth === 1.5, "ctx.lineWidth === 1.5");
 
 ctx.lineWidth = 1.5;
 ctx.lineWidth = 0;
 ok(ctx.lineWidth === 1.5, "ctx.lineWidth === 1.5");
@@ -8518,26 +9284,57 @@ ok(ctx.lineWidth === 1.5, "ctx.lineWidth
 ctx.lineWidth = 1.5;
 ctx.lineWidth = NaN;
 ok(ctx.lineWidth === 1.5, "ctx.lineWidth === 1.5");
 
 
 }
 </script>
 
+<!-- [[[ test_2d.line.width.scaledefault.html ]]] -->
+
+<p>Canvas test: 2d.line.width.scaledefault</p>
+<!-- Testing: Default lineWidth strokes are affected by scale transformations -->
+<canvas height="50" id="c319" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_line_width_scaledefault() {
+
+var canvas = document.getElementById('c319');
+var ctx = canvas.getContext('2d');
+
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
+
+ctx.scale(50, 50);
+ctx.strokeStyle = '#0f0';
+ctx.moveTo(0, 0.5);
+ctx.lineTo(2, 0.5);
+ctx.stroke();
+
+isPixel(ctx, 25,25, 0,255,0,255, 0);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+isPixel(ctx, 75,25, 0,255,0,255, 0);
+isPixel(ctx, 50,5, 0,255,0,255, 0);
+isPixel(ctx, 50,45, 0,255,0,255, 0);
+
+
+}
+</script>
+
 <!-- [[[ test_2d.line.width.transformed.html ]]] -->
 
 <p>Canvas test: 2d.line.width.transformed</p>
 <!-- Testing: Line stroke widths are affected by scale transformations -->
-<canvas height="50" id="c287" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c320" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_width_transformed() {
 
-var canvas = document.getElementById('c287');
+var canvas = document.getElementById('c320');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.lineWidth = 4;
 // Draw a green line over a red box, to check the line is not too small
 ctx.fillStyle = '#f00';
@@ -8578,26 +9375,54 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 isPixel(ctx, 84,25, 0,255,0,255, 0);
 isPixel(ctx, 85,25, 0,255,0,255, 0);
 isPixel(ctx, 86,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
+<!-- [[[ test_2d.line.width.valid.html ]]] -->
+
+<p>Canvas test: 2d.line.width.valid</p>
+<!-- Testing: Setting lineWidth to valid values works -->
+<canvas height="50" id="c321" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_line_width_valid() {
+
+var canvas = document.getElementById('c321');
+var ctx = canvas.getContext('2d');
+
+ctx.lineWidth = 1.5;
+ok(ctx.lineWidth === 1.5, "ctx.lineWidth === 1.5");
+
+ctx.lineWidth = "1e1";
+ok(ctx.lineWidth === 10, "ctx.lineWidth === 10");
+
+ctx.lineWidth = 1/1024;
+ok(ctx.lineWidth === 1/1024, "ctx.lineWidth === 1/1024");
+
+ctx.lineWidth = 1000;
+ok(ctx.lineWidth === 1000, "ctx.lineWidth === 1000");
+
+
+}
+</script>
+
 <!-- [[[ test_2d.missingargs.html ]]] -->
 
 <p>Canvas test: 2d.missingargs</p>
 <!-- Testing: Missing arguments cause TypeError -->
-<canvas height="50" id="c288" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c322" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_missingargs() {
 
-var canvas = document.getElementById('c288');
+var canvas = document.getElementById('c322');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   ctx.scale();
 } catch (e) { _thrown = e }; todo(_thrown && (_thrown instanceof TypeError), "should throw TypeError");
 var _thrown = undefined; try {
   ctx.scale(1);
 } catch (e) { _thrown = e }; todo(_thrown && (_thrown instanceof TypeError), "should throw TypeError");
@@ -8903,22 +9728,22 @@ var _thrown = undefined; try {
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.angle.1.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.angle.1</p>
 <!-- Testing: arc() draws pi/2 .. -pi anticlockwise correctly -->
-<canvas height="50" id="c289" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c323" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_angle_1() {
 
-var canvas = document.getElementById('c289');
+var canvas = document.getElementById('c323');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#f00';
 ctx.beginPath();
 ctx.moveTo(100, 0);
 ctx.arc(100, 0, 150, Math.PI/2, -Math.PI, true);
@@ -8928,22 +9753,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.angle.2.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.angle.2</p>
 <!-- Testing: arc() draws -3pi/2 .. -pi anticlockwise correctly -->
-<canvas height="50" id="c290" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c324" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_angle_2() {
 
-var canvas = document.getElementById('c290');
+var canvas = document.getElementById('c324');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#f00';
 ctx.beginPath();
 ctx.moveTo(100, 0);
 ctx.arc(100, 0, 150, -3*Math.PI/2, -Math.PI, true);
@@ -8953,22 +9778,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.angle.3.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.angle.3</p>
 <!-- Testing: arc() wraps angles mod 2pi when anticlockwise and end > start+2pi -->
-<canvas height="50" id="c291" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c325" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_angle_3() {
 
-var canvas = document.getElementById('c291');
+var canvas = document.getElementById('c325');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#f00';
 ctx.beginPath();
 ctx.moveTo(100, 0);
 ctx.arc(100, 0, 150, (512+1/2)*Math.PI, (1024-1)*Math.PI, true);
@@ -8978,22 +9803,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.angle.4.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.angle.4</p>
 <!-- Testing: arc() draws a full circle when clockwise and end > start+2pi -->
-<canvas height="50" id="c292" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c326" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_angle_4() {
 
-var canvas = document.getElementById('c292');
+var canvas = document.getElementById('c326');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#0f0';
 ctx.beginPath();
 ctx.moveTo(50, 25);
 ctx.arc(50, 25, 60, (512+1/2)*Math.PI, (1024-1)*Math.PI, false);
@@ -9006,22 +9831,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.angle.5.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.angle.5</p>
 <!-- Testing: arc() wraps angles mod 2pi when clockwise and start > end+2pi -->
-<canvas height="50" id="c293" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c327" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_angle_5() {
 
-var canvas = document.getElementById('c293');
+var canvas = document.getElementById('c327');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#f00';
 ctx.beginPath();
 ctx.moveTo(100, 0);
 ctx.arc(100, 0, 150, (1024-1)*Math.PI, (512+1/2)*Math.PI, false);
@@ -9031,22 +9856,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.angle.6.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.angle.6</p>
 <!-- Testing: arc() draws a full circle when anticlockwise and start > end+2pi -->
-<canvas height="50" id="c294" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c328" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_angle_6() {
 
-var canvas = document.getElementById('c294');
+var canvas = document.getElementById('c328');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#0f0';
 ctx.beginPath();
 ctx.moveTo(50, 25);
 ctx.arc(50, 25, 60, (1024-1)*Math.PI, (512+1/2)*Math.PI, true);
@@ -9055,26 +9880,51 @@ isPixel(ctx, 1,1, 0,255,0,255, 0);
 isPixel(ctx, 98,1, 0,255,0,255, 0);
 isPixel(ctx, 1,48, 0,255,0,255, 0);
 isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 
 }
 </script>
 
+<!-- [[[ test_2d.path.arc.default.html ]]] -->
+
+<p>Canvas test: 2d.path.arc.default</p>
+<!-- Testing: arc() with missing last argument defaults to clockwise -->
+<canvas height="50" id="c329" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_path_arc_default() {
+
+var canvas = document.getElementById('c329');
+var ctx = canvas.getContext('2d');
+
+ctx.fillStyle = '#0f0';
+ctx.fillRect(0, 0, 100, 50);
+ctx.fillStyle = '#f00';
+ctx.beginPath();
+ctx.moveTo(100, 0);
+ctx.arc(100, 0, 150, -Math.PI, Math.PI/2);
+ctx.fill();
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+
+
+}
+</script>
+
 <!-- [[[ test_2d.path.arc.empty.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.empty</p>
 <!-- Testing: arc() with an empty path does not draw a straight line to the start point -->
-<canvas height="50" id="c295" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c330" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_empty() {
 
-var canvas = document.getElementById('c295');
+var canvas = document.getElementById('c330');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.lineWidth = 50;
 ctx.strokeStyle = '#f00';
 ctx.beginPath();
 ctx.arc(200, 25, 5, 0, 2*Math.PI, true);
@@ -9084,22 +9934,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.end.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.end</p>
 <!-- Testing: arc() adds the end point of the arc to the subpath -->
-<canvas height="50" id="c296" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c331" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_end() {
 
-var canvas = document.getElementById('c296');
+var canvas = document.getElementById('c331');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.lineWidth = 50;
 ctx.strokeStyle = '#0f0';
 ctx.beginPath();
 ctx.moveTo(-100, 0);
@@ -9111,42 +9961,42 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.negative.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.negative</p>
 <!-- Testing: arc() with negative radius throws INDEX_SIZE_ERR -->
-<canvas height="50" id="c297" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c332" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_negative() {
 
-var canvas = document.getElementById('c297');
+var canvas = document.getElementById('c332');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   ctx.arc(0, 0, -1, 0, 0, true);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw INDEX_SIZE_ERR");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.nonempty.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.nonempty</p>
 <!-- Testing: arc() with a non-empty path does draw a straight line to the start point -->
-<canvas height="50" id="c298" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c333" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_nonempty() {
 
-var canvas = document.getElementById('c298');
+var canvas = document.getElementById('c333');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.lineWidth = 50;
 ctx.strokeStyle = '#0f0';
 ctx.beginPath();
 ctx.moveTo(0, 25);
@@ -9157,22 +10007,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.nonfinite</p>
 <!-- Testing: arc() with Infinity/NaN is ignored -->
-<canvas height="50" id="c299" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c334" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_nonfinite() {
 
-var canvas = document.getElementById('c299');
+var canvas = document.getElementById('c334');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.moveTo(0, 0);
 ctx.lineTo(100, 0);
 ctx.arc(Infinity, 0, 50, 0, 2*Math.PI, true);
 ctx.arc(-Infinity, 0, 50, 0, 2*Math.PI, true);
@@ -9225,22 +10075,22 @@ isPixel(ctx, 90,45, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.scale.1.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.scale.1</p>
 <!-- Testing: Non-uniformly scaled arcs are the right shape -->
-<canvas height="50" id="c300" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c335" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_scale_1() {
 
-var canvas = document.getElementById('c300');
+var canvas = document.getElementById('c335');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.scale(2, 0.5);
 ctx.fillStyle = '#0f0';
 ctx.beginPath();
 ctx.arc(25, 50, 56, 0, 2*Math.PI, false);
@@ -9270,22 +10120,22 @@ isPixel(ctx, 99,49, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.scale.2.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.scale.2</p>
 <!-- Testing: Highly scaled arcs are the right shape -->
-<canvas height="50" id="c301" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c336" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_scale_2() {
 
-var canvas = document.getElementById('c301');
+var canvas = document.getElementById('c336');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.scale(100, 100);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 1.2;
 ctx.beginPath();
@@ -9305,22 +10155,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.selfintersect.1.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.selfintersect.1</p>
 <!-- Testing: arc() with lineWidth > 2*radius is drawn sensibly -->
-<canvas height="50" id="c302" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c337" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_selfintersect_1() {
 
-var canvas = document.getElementById('c302');
+var canvas = document.getElementById('c337');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.lineWidth = 200;
 ctx.strokeStyle = '#f00';
 ctx.beginPath();
 ctx.arc(100, 50, 25, 0, -Math.PI/2, true);
@@ -9334,22 +10184,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.selfintersect.2.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.selfintersect.2</p>
 <!-- Testing: arc() with lineWidth > 2*radius is drawn sensibly -->
-<canvas height="50" id="c303" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c338" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_selfintersect_2() {
 
-var canvas = document.getElementById('c303');
+var canvas = document.getElementById('c338');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.lineWidth = 180;
 ctx.strokeStyle = '#0f0';
 ctx.beginPath();
 ctx.arc(-50, 50, 25, 0, -Math.PI/2, true);
@@ -9367,22 +10217,22 @@ isPixel(ctx, 2,48, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.shape.1.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.shape.1</p>
 <!-- Testing: arc() from 0 to pi does not draw anything in the wrong half -->
-<canvas height="50" id="c304" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c339" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_shape_1() {
 
-var canvas = document.getElementById('c304');
+var canvas = document.getElementById('c339');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.lineWidth = 50;
 ctx.strokeStyle = '#f00';
 ctx.beginPath();
 ctx.arc(50, 50, 50, 0, Math.PI, false);
@@ -9397,22 +10247,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.shape.2.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.shape.2</p>
 <!-- Testing: arc() from 0 to pi draws stuff in the right half -->
-<canvas height="50" id="c305" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c340" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_shape_2() {
 
-var canvas = document.getElementById('c305');
+var canvas = document.getElementById('c340');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.lineWidth = 100;
 ctx.strokeStyle = '#0f0';
 ctx.beginPath();
 ctx.arc(50, 50, 50, 0, Math.PI, true);
@@ -9427,22 +10277,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.shape.4.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.shape.4</p>
 <!-- Testing: arc() from 0 to -pi/2 draws stuff in the right quadrant -->
-<canvas height="50" id="c306" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c341" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_shape_4() {
 
-var canvas = document.getElementById('c306');
+var canvas = document.getElementById('c341');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.lineWidth = 150;
 ctx.strokeStyle = '#0f0';
 ctx.beginPath();
 ctx.arc(-50, 50, 100, 0, -Math.PI/2, true);
@@ -9456,22 +10306,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.shape.5.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.shape.5</p>
 <!-- Testing: arc() from 0 to 5pi does not draw crazy things -->
-<canvas height="50" id="c307" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c342" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_shape_5() {
 
-var canvas = document.getElementById('c307');
+var canvas = document.getElementById('c342');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.lineWidth = 200;
 ctx.strokeStyle = '#f00';
 ctx.beginPath();
 ctx.arc(300, 0, 100, 0, 5*Math.PI, false);
@@ -9485,22 +10335,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.twopie.1.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.twopie.1</p>
 <!-- Testing: arc() draws nothing when end = start + 2pi-e and anticlockwise -->
-<canvas height="50" id="c308" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c343" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_twopie_1() {
 
-var canvas = document.getElementById('c308');
+var canvas = document.getElementById('c343');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#f00';
 ctx.lineWidth = 100;
 ctx.beginPath();
 ctx.arc(50, 25, 50, 0, 2*Math.PI - 1e-4, true);
@@ -9510,22 +10360,22 @@ isPixel(ctx, 50,20, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.twopie.2.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.twopie.2</p>
 <!-- Testing: arc() draws a full circle when end = start + 2pi-e and clockwise -->
-<canvas height="50" id="c309" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c344" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_twopie_2() {
 
-var canvas = document.getElementById('c309');
+var canvas = document.getElementById('c344');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 100;
 ctx.beginPath();
 ctx.arc(50, 25, 50, 0, 2*Math.PI - 1e-4, false);
@@ -9535,22 +10385,22 @@ isPixel(ctx, 50,20, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.twopie.3.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.twopie.3</p>
 <!-- Testing: arc() draws a full circle when end = start + 2pi+e and anticlockwise -->
-<canvas height="50" id="c310" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c345" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_twopie_3() {
 
-var canvas = document.getElementById('c310');
+var canvas = document.getElementById('c345');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 100;
 ctx.beginPath();
 ctx.arc(50, 25, 50, 0, 2*Math.PI + 1e-4, true);
@@ -9560,22 +10410,22 @@ isPixel(ctx, 50,20, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.twopie.4.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.twopie.4</p>
 <!-- Testing: arc() draws nothing when end = start + 2pi+e and clockwise -->
-<canvas height="50" id="c311" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c346" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_twopie_4() {
 
-var canvas = document.getElementById('c311');
+var canvas = document.getElementById('c346');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 100;
 ctx.beginPath();
 ctx.arc(50, 25, 50, 0, 2*Math.PI + 1e-4, false);
@@ -9585,22 +10435,22 @@ isPixel(ctx, 50,20, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.zero.1.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.zero.1</p>
 <!-- Testing: arc() draws nothing when startAngle = endAngle and anticlockwise -->
-<canvas height="50" id="c312" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c347" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_zero_1() {
 
-var canvas = document.getElementById('c312');
+var canvas = document.getElementById('c347');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#f00';
 ctx.lineWidth = 100;
 ctx.beginPath();
 ctx.arc(50, 25, 50, 0, 0, true);
@@ -9610,22 +10460,22 @@ isPixel(ctx, 50,20, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.zero.2.html ]]] -->
 
 <p>Canvas test: 2d.path.arc.zero.2</p>
 <!-- Testing: arc() draws nothing when startAngle = endAngle and clockwise -->
-<canvas height="50" id="c313" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c348" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arc_zero_2() {
 
-var canvas = document.getElementById('c313');
+var canvas = document.getElementById('c348');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#f00';
 ctx.lineWidth = 100;
 ctx.beginPath();
 ctx.arc(50, 25, 50, 0, 0, false);
@@ -9635,22 +10485,22 @@ isPixel(ctx, 50,20, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arcTo.coincide.1.html ]]] -->
 
 <p>Canvas test: 2d.path.arcTo.coincide.1</p>
 <!-- Testing: arcTo() has no effect if P0 = P1 -->
-<canvas height="50" id="c314" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c349" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arcTo_coincide_1() {
 
-var canvas = document.getElementById('c314');
+var canvas = document.getElementById('c349');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.lineWidth = 50;
 
 ctx.strokeStyle = '#0f0';
 ctx.beginPath();
@@ -9672,22 +10522,22 @@ isPixel(ctx, 50,48, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arcTo.coincide.2.html ]]] -->
 
 <p>Canvas test: 2d.path.arcTo.coincide.2</p>
 <!-- Testing: arcTo() draws a straight line to P1 if P1 = P2 -->
-<canvas height="50" id="c315" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c350" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arcTo_coincide_2() {
 
-var canvas = document.getElementById('c315');
+var canvas = document.getElementById('c350');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.lineWidth = 50;
 ctx.strokeStyle = '#0f0';
 ctx.beginPath();
 ctx.moveTo(0, 25);
@@ -9699,22 +10549,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arcTo.collinear.1.html ]]] -->
 
 <p>Canvas test: 2d.path.arcTo.collinear.1</p>
 <!-- Testing: arcTo() with all points on a line, and P1 between P0/P2, draws a straight line to P1 -->
-<canvas height="50" id="c316" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c351" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arcTo_collinear_1() {
 
-var canvas = document.getElementById('c316');
+var canvas = document.getElementById('c351');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.lineWidth = 50;
 
 ctx.strokeStyle = '#0f0';
 ctx.beginPath();
@@ -9733,22 +10583,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arcTo.collinear.2.html ]]] -->
 
 <p>Canvas test: 2d.path.arcTo.collinear.2</p>
 <!-- Testing: arcTo() with all points on a line, and P2 between P0/P1, draws a straight line to P1 -->
-<canvas height="50" id="c317" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c352" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arcTo_collinear_2() {
 
-var canvas = document.getElementById('c317');
+var canvas = document.getElementById('c352');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.lineWidth = 50;
 
 ctx.strokeStyle = '#0f0';
 ctx.beginPath();
@@ -9767,22 +10617,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arcTo.collinear.3.html ]]] -->
 
 <p>Canvas test: 2d.path.arcTo.collinear.3</p>
 <!-- Testing: arcTo() with all points on a line, and P0 between P1/P2, draws a straight line to P1 -->
-<canvas height="50" id="c318" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c353" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arcTo_collinear_3() {
 
-var canvas = document.getElementById('c318');
+var canvas = document.getElementById('c353');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.lineWidth = 50;
 
 ctx.strokeStyle = '#0f0';
 ctx.beginPath();
@@ -9806,22 +10656,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arcTo.ensuresubpath.1.html ]]] -->
 
 <p>Canvas test: 2d.path.arcTo.ensuresubpath.1</p>
 <!-- Testing: If there is no subpath, the first control point is added (and nothing is drawn up to it) -->
-<canvas height="50" id="c319" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c354" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arcTo_ensuresubpath_1() {
 
-var canvas = document.getElementById('c319');
+var canvas = document.getElementById('c354');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.lineWidth = 50;
 ctx.strokeStyle = '#f00';
 ctx.beginPath();
 ctx.arcTo(100, 50, 200, 50, 0.1);
@@ -9831,22 +10681,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arcTo.ensuresubpath.2.html ]]] -->
 
 <p>Canvas test: 2d.path.arcTo.ensuresubpath.2</p>
 <!-- Testing: If there is no subpath, the first control point is added -->
-<canvas height="50" id="c320" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c355" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arcTo_ensuresubpath_2() {
 
-var canvas = document.getElementById('c320');
+var canvas = document.getElementById('c355');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.lineWidth = 50;
 ctx.strokeStyle = '#0f0';
 ctx.beginPath();
 ctx.arcTo(0, 25, 50, 250, 0.1); // adds (x1,y1), draws nothing
@@ -9857,42 +10707,42 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arcTo.negative.html ]]] -->
 
 <p>Canvas test: 2d.path.arcTo.negative</p>
 <!-- Testing: arcTo() with negative radius throws an exception -->
-<canvas height="50" id="c321" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c356" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arcTo_negative() {
 
-var canvas = document.getElementById('c321');
+var canvas = document.getElementById('c356');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   ctx.arcTo(0, 0, 0, 0, -1);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw INDEX_SIZE_ERR");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arcTo.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.path.arcTo.nonfinite</p>
 <!-- Testing: arcTo() with Infinity/NaN is ignored -->
-<canvas height="50" id="c322" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c357" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arcTo_nonfinite() {
 
-var canvas = document.getElementById('c322');
+var canvas = document.getElementById('c357');
 var ctx = canvas.getContext('2d');
 
 ctx.moveTo(0, 0);
 ctx.lineTo(100, 0);
 ctx.arcTo(Infinity, 50, 0, 50, 0);
 ctx.arcTo(-Infinity, 50, 0, 50, 0);
 ctx.arcTo(NaN, 50, 0, 50, 0);
 ctx.arcTo(0, Infinity, 0, 50, 0);
@@ -9943,22 +10793,22 @@ isPixel(ctx, 90,45, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arcTo.scale.html ]]] -->
 
 <p>Canvas test: 2d.path.arcTo.scale</p>
 <!-- Testing: arcTo scales the curve, not just the control points -->
-<canvas height="50" id="c323" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c358" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arcTo_scale() {
 
-var canvas = document.getElementById('c323');
+var canvas = document.getElementById('c358');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.fillStyle = '#0f0';
 ctx.beginPath();
 ctx.moveTo(0, 50);
@@ -9981,22 +10831,22 @@ isPixel(ctx, 99,49, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arcTo.shape.end.html ]]] -->
 
 <p>Canvas test: 2d.path.arcTo.shape.end</p>
 <!-- Testing: arcTo() does not draw anything from P1 to P2 -->
-<canvas height="50" id="c324" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c359" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arcTo_shape_end() {
 
-var canvas = document.getElementById('c324');
+var canvas = document.getElementById('c359');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#f00';
 ctx.lineWidth = 50;
 ctx.beginPath();
 ctx.moveTo(-100, -100);
@@ -10012,22 +10862,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arcTo.shape.start.html ]]] -->
 
 <p>Canvas test: 2d.path.arcTo.shape.start</p>
 <!-- Testing: arcTo() draws a straight line from P0 to P1 -->
-<canvas height="50" id="c325" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c360" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arcTo_shape_start() {
 
-var canvas = document.getElementById('c325');
+var canvas = document.getElementById('c360');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 50;
 ctx.beginPath();
 ctx.moveTo(0, 25);
@@ -10043,22 +10893,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arcTo.transformation.html ]]] -->
 
 <p>Canvas test: 2d.path.arcTo.transformation</p>
 <!-- Testing: arcTo joins up to the last subpath point correctly -->
-<canvas height="50" id="c326" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c361" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arcTo_transformation() {
 
-var canvas = document.getElementById('c326');
+var canvas = document.getElementById('c361');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.fillStyle = '#0f0';
 ctx.beginPath();
 ctx.moveTo(0, 50);
@@ -10080,22 +10930,22 @@ isPixel(ctx, 99,49, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arcTo.zero.1.html ]]] -->
 
 <p>Canvas test: 2d.path.arcTo.zero.1</p>
 <!-- Testing: arcTo() with zero radius draws a straight line from P0 to P1 -->
-<canvas height="50" id="c327" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c362" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arcTo_zero_1() {
 
-var canvas = document.getElementById('c327');
+var canvas = document.getElementById('c362');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.lineWidth = 50;
 
 ctx.strokeStyle = '#0f0';
 ctx.beginPath();
@@ -10114,22 +10964,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arcTo.zero.2.html ]]] -->
 
 <p>Canvas test: 2d.path.arcTo.zero.2</p>
 <!-- Testing: arcTo() with zero radius draws a straight line from P0 to P1, even when all points are collinear -->
-<canvas height="50" id="c328" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c363" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arcTo_zero_2() {
 
-var canvas = document.getElementById('c328');
+var canvas = document.getElementById('c363');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.lineWidth = 50;
 
 ctx.strokeStyle = '#0f0';
 ctx.beginPath();
@@ -10147,22 +10997,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.beginPath.html ]]] -->
 
 <p>Canvas test: 2d.path.beginPath</p>
-<canvas height="50" id="c329" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c364" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_beginPath() {
 
-var canvas = document.getElementById('c329');
+var canvas = document.getElementById('c364');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.rect(0, 0, 100, 50);
 ctx.beginPath();
 ctx.fillStyle = '#f00';
 ctx.fill();
@@ -10170,22 +11020,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.bezierCurveTo.basic.html ]]] -->
 
 <p>Canvas test: 2d.path.bezierCurveTo.basic</p>
-<canvas height="50" id="c330" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c365" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_bezierCurveTo_basic() {
 
-var canvas = document.getElementById('c330');
+var canvas = document.getElementById('c365');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 50;
 ctx.beginPath();
 ctx.moveTo(0, 25);
@@ -10196,22 +11046,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.bezierCurveTo.ensuresubpath.1.html ]]] -->
 
 <p>Canvas test: 2d.path.bezierCurveTo.ensuresubpath.1</p>
 <!-- Testing: If there is no subpath, the first control point is added (and nothing is drawn up to it) -->
-<canvas height="50" id="c331" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c366" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_bezierCurveTo_ensuresubpath_1() {
 
-var canvas = document.getElementById('c331');
+var canvas = document.getElementById('c366');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#f00';
 ctx.lineWidth = 50;
 ctx.beginPath();
 ctx.bezierCurveTo(100, 50, 200, 50, 200, 50);
@@ -10222,22 +11072,22 @@ isPixel(ctx, 95,45, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.bezierCurveTo.ensuresubpath.2.html ]]] -->
 
 <p>Canvas test: 2d.path.bezierCurveTo.ensuresubpath.2</p>
 <!-- Testing: If there is no subpath, the first control point is added -->
-<canvas height="50" id="c332" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c367" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_bezierCurveTo_ensuresubpath_2() {
 
-var canvas = document.getElementById('c332');
+var canvas = document.getElementById('c367');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 50;
 ctx.beginPath();
 ctx.bezierCurveTo(0, 25, 100, 25, 100, 25);
@@ -10248,22 +11098,22 @@ isPixel(ctx, 5,45, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.bezierCurveTo.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.path.bezierCurveTo.nonfinite</p>
 <!-- Testing: bezierCurveTo() with Infinity/NaN is ignored -->
-<canvas height="50" id="c333" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c368" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_bezierCurveTo_nonfinite() {
 
-var canvas = document.getElementById('c333');
+var canvas = document.getElementById('c368');
 var ctx = canvas.getContext('2d');
 
 ctx.moveTo(0, 0);
 ctx.lineTo(100, 0);
 ctx.bezierCurveTo(Infinity, 50, 0, 50, 0, 50);
 ctx.bezierCurveTo(-Infinity, 50, 0, 50, 0, 50);
 ctx.bezierCurveTo(NaN, 50, 0, 50, 0, 50);
 ctx.bezierCurveTo(0, Infinity, 0, 50, 0, 50);
@@ -10347,22 +11197,22 @@ isPixel(ctx, 90,45, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.bezierCurveTo.scaled.html ]]] -->
 
 <p>Canvas test: 2d.path.bezierCurveTo.scaled</p>
-<canvas height="50" id="c334" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c369" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_bezierCurveTo_scaled() {
 
-var canvas = document.getElementById('c334');
+var canvas = document.getElementById('c369');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.scale(1000, 1000);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 0.055;
 ctx.beginPath();
@@ -10377,22 +11227,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.bezierCurveTo.shape.html ]]] -->
 
 <p>Canvas test: 2d.path.bezierCurveTo.shape</p>
-<canvas height="50" id="c335" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c370" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_bezierCurveTo_shape() {
 
-var canvas = document.getElementById('c335');
+var canvas = document.getElementById('c370');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 55;
 ctx.beginPath();
 ctx.moveTo(-2000, 3100);
@@ -10406,22 +11256,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.clip.basic.1.html ]]] -->
 
 <p>Canvas test: 2d.path.clip.basic.1</p>
-<canvas height="50" id="c336" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c371" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_clip_basic_1() {
 
-var canvas = document.getElementById('c336');
+var canvas = document.getElementById('c371');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.beginPath();
 ctx.rect(0, 0, 100, 50);
 ctx.clip();
@@ -10433,22 +11283,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.clip.basic.2.html ]]] -->
 
 <p>Canvas test: 2d.path.clip.basic.2</p>
-<canvas height="50" id="c337" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c372" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_clip_basic_2() {
 
-var canvas = document.getElementById('c337');
+var canvas = document.getElementById('c372');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.beginPath();
 ctx.rect(-100, 0, 100, 50);
 ctx.clip();
@@ -10460,22 +11310,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.clip.empty.html ]]] -->
 
 <p>Canvas test: 2d.path.clip.empty</p>
-<canvas height="50" id="c338" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c373" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_clip_empty() {
 
-var canvas = document.getElementById('c338');
+var canvas = document.getElementById('c373');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.beginPath();
 ctx.clip();
 
@@ -10486,22 +11336,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.clip.intersect.html ]]] -->
 
 <p>Canvas test: 2d.path.clip.intersect</p>
-<canvas height="50" id="c339" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c374" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_clip_intersect() {
 
-var canvas = document.getElementById('c339');
+var canvas = document.getElementById('c374');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.beginPath();
 ctx.rect(0, 0, 50, 50);
 ctx.clip();
@@ -10516,22 +11366,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.clip.unaffected.html ]]] -->
 
 <p>Canvas test: 2d.path.clip.unaffected</p>
-<canvas height="50" id="c340" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c375" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_clip_unaffected() {
 
-var canvas = document.getElementById('c340');
+var canvas = document.getElementById('c375');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.fillStyle = '#0f0';
 
 ctx.beginPath();
@@ -10548,22 +11398,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.clip.winding.1.html ]]] -->
 
 <p>Canvas test: 2d.path.clip.winding.1</p>
-<canvas height="50" id="c341" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c376" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_clip_winding_1() {
 
-var canvas = document.getElementById('c341');
+var canvas = document.getElementById('c376');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.beginPath();
 ctx.moveTo(-10, -10);
 ctx.lineTo(110, -10);
@@ -10583,22 +11433,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.clip.winding.2.html ]]] -->
 
 <p>Canvas test: 2d.path.clip.winding.2</p>
-<canvas height="50" id="c342" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c377" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_clip_winding_2() {
 
-var canvas = document.getElementById('c342');
+var canvas = document.getElementById('c377');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.beginPath();
 ctx.moveTo(-10, -10);
 ctx.lineTo(110, -10);
@@ -10622,44 +11472,44 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.closePath.empty.html ]]] -->
 
 <p>Canvas test: 2d.path.closePath.empty</p>
-<canvas height="50" id="c343" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c378" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_closePath_empty() {
 
-var canvas = document.getElementById('c343');
+var canvas = document.getElementById('c378');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.closePath();
 ctx.fillStyle = '#f00';
 ctx.fill();
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.closePath.newline.html ]]] -->
 
 <p>Canvas test: 2d.path.closePath.newline</p>
-<canvas height="50" id="c344" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c379" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_closePath_newline() {
 
-var canvas = document.getElementById('c344');
+var canvas = document.getElementById('c379');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 50;
 ctx.moveTo(-100, 25);
 ctx.lineTo(-100, -100);
@@ -10671,22 +11521,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.closePath.nextpoint.html ]]] -->
 
 <p>Canvas test: 2d.path.closePath.nextpoint</p>
-<canvas height="50" id="c345" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c380" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_closePath_nextpoint() {
 
-var canvas = document.getElementById('c345');
+var canvas = document.getElementById('c380');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 50;
 ctx.moveTo(-100, 25);
 ctx.lineTo(-100, -1000);
@@ -10697,22 +11547,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.fill.closed.basic.html ]]] -->
 
 <p>Canvas test: 2d.path.fill.closed.basic</p>
-<canvas height="50" id="c346" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c381" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_fill_closed_basic() {
 
-var canvas = document.getElementById('c346');
+var canvas = document.getElementById('c381');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.fillStyle = '#0f0';
 ctx.moveTo(0, 0);
 ctx.lineTo(100, 0);
@@ -10724,22 +11574,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.fill.closed.unaffected.html ]]] -->
 
 <p>Canvas test: 2d.path.fill.closed.unaffected</p>
-<canvas height="50" id="c347" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c382" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_fill_closed_unaffected() {
 
-var canvas = document.getElementById('c347');
+var canvas = document.getElementById('c382');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#00f';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.moveTo(0, 0);
 ctx.lineTo(100, 0);
 ctx.lineTo(100, 50);
@@ -10754,22 +11604,22 @@ isPixel(ctx, 10,40, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.fill.overlap.html ]]] -->
 
 <p>Canvas test: 2d.path.fill.overlap</p>
-<canvas height="50" id="c348" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c383" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_fill_overlap() {
 
-var canvas = document.getElementById('c348');
+var canvas = document.getElementById('c383');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#000';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';
 ctx.rect(0, 0, 100, 50);
 ctx.closePath();
@@ -10780,22 +11630,22 @@ isPixel(ctx, 50,25, 0,127,0,255, 1);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.fill.winding.add.html ]]] -->
 
 <p>Canvas test: 2d.path.fill.winding.add</p>
-<canvas height="50" id="c349" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c384" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_fill_winding_add() {
 
-var canvas = document.getElementById('c349');
+var canvas = document.getElementById('c384');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.fillStyle = '#0f0';
 ctx.moveTo(-10, -10);
 ctx.lineTo(110, -10);
@@ -10812,22 +11662,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.fill.winding.subtract.1.html ]]] -->
 
 <p>Canvas test: 2d.path.fill.winding.subtract.1</p>
-<canvas height="50" id="c350" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c385" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_fill_winding_subtract_1() {
 
-var canvas = document.getElementById('c350');
+var canvas = document.getElementById('c385');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.fillStyle = '#f00';
 ctx.moveTo(-10, -10);
 ctx.lineTo(110, -10);
@@ -10844,22 +11694,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.fill.winding.subtract.2.html ]]] -->
 
 <p>Canvas test: 2d.path.fill.winding.subtract.2</p>
-<canvas height="50" id="c351" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c386" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_fill_winding_subtract_2() {
 
-var canvas = document.getElementById('c351');
+var canvas = document.getElementById('c386');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.fillStyle = '#f00';
 ctx.moveTo(-10, -10);
 ctx.lineTo(110, -10);
@@ -10875,22 +11725,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.fill.winding.subtract.3.html ]]] -->
 
 <p>Canvas test: 2d.path.fill.winding.subtract.3</p>
-<canvas height="50" id="c352" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c387" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_fill_winding_subtract_3() {
 
-var canvas = document.getElementById('c352');
+var canvas = document.getElementById('c387');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.fillStyle = '#0f0';
 ctx.moveTo(-10, -10);
 ctx.lineTo(110, -10);
@@ -10912,22 +11762,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.initial.html ]]] -->
 
 <p>Canvas test: 2d.path.initial</p>
-<canvas height="50" id="c353" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c388" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_initial() {
 
-var canvas = document.getElementById('c353');
+var canvas = document.getElementById('c388');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.closePath();
 ctx.fillStyle = '#f00';
 ctx.fill();
 isPixel(ctx, 50,25, 0,255,0,255, 0);
@@ -10935,22 +11785,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.isPointInPath.arc.html ]]] -->
 
 <p>Canvas test: 2d.path.isPointInPath.arc</p>
 <!-- Testing: isPointInPath() works on arcs -->
-<canvas height="50" id="c354" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c389" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_isPointInPath_arc() {
 
-var canvas = document.getElementById('c354');
+var canvas = document.getElementById('c389');
 var ctx = canvas.getContext('2d');
 
 ctx.arc(50, 25, 10, 0, Math.PI, false);
 ok(ctx.isPointInPath(50, 10) === false, "ctx.isPointInPath(50, 10) === false");
 ok(ctx.isPointInPath(50, 20) === false, "ctx.isPointInPath(50, 20) === false");
 ok(ctx.isPointInPath(50, 30) === true, "ctx.isPointInPath(50, 30) === true");
 ok(ctx.isPointInPath(50, 40) === false, "ctx.isPointInPath(50, 40) === false");
 ok(ctx.isPointInPath(30, 20) === false, "ctx.isPointInPath(30, 20) === false");
@@ -10961,62 +11811,62 @@ ok(ctx.isPointInPath(70, 30) === false, 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.isPointInPath.basic.1.html ]]] -->
 
 <p>Canvas test: 2d.path.isPointInPath.basic.1</p>
 <!-- Testing: isPointInPath() detects whether the point is inside the path -->
-<canvas height="50" id="c355" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c390" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_isPointInPath_basic_1() {
 
-var canvas = document.getElementById('c355');
+var canvas = document.getElementById('c390');
 var ctx = canvas.getContext('2d');
 
 ctx.rect(0, 0, 20, 20);
 ok(ctx.isPointInPath(10, 10) === true, "ctx.isPointInPath(10, 10) === true");
 ok(ctx.isPointInPath(30, 10) === false, "ctx.isPointInPath(30, 10) === false");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.isPointInPath.basic.2.html ]]] -->
 
 <p>Canvas test: 2d.path.isPointInPath.basic.2</p>
 <!-- Testing: isPointInPath() detects whether the point is inside the path -->
-<canvas height="50" id="c356" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c391" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_isPointInPath_basic_2() {
 
-var canvas = document.getElementById('c356');
+var canvas = document.getElementById('c391');
 var ctx = canvas.getContext('2d');
 
 ctx.rect(20, 0, 20, 20);
 ok(ctx.isPointInPath(10, 10) === false, "ctx.isPointInPath(10, 10) === false");
 ok(ctx.isPointInPath(30, 10) === true, "ctx.isPointInPath(30, 10) === true");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.isPointInPath.bezier.html ]]] -->
 
 <p>Canvas test: 2d.path.isPointInPath.bezier</p>
 <!-- Testing: isPointInPath() works on Bezier curves -->
-<canvas height="50" id="c357" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c392" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_isPointInPath_bezier() {
 
-var canvas = document.getElementById('c357');
+var canvas = document.getElementById('c392');
 var ctx = canvas.getContext('2d');
 
 ctx.moveTo(25, 25);
 ctx.bezierCurveTo(50, -50, 50, 100, 75, 25);
 ok(ctx.isPointInPath(25, 20) == false, "ctx.isPointInPath(25, 20) == false");
 ok(ctx.isPointInPath(25, 30) == false, "ctx.isPointInPath(25, 30) == false");
 ok(ctx.isPointInPath(30, 20) == true, "ctx.isPointInPath(30, 20) == true");
 ok(ctx.isPointInPath(30, 30) == false, "ctx.isPointInPath(30, 30) == false");
@@ -11040,22 +11890,22 @@ ok(ctx.isPointInPath(75, 30) == false, "
 
 }
 </script>
 
 <!-- [[[ test_2d.path.isPointInPath.bigarc.html ]]] -->
 
 <p>Canvas test: 2d.path.isPointInPath.bigarc</p>
 <!-- Testing: isPointInPath() works on unclosed arcs larger than 2pi -->
-<canvas height="50" id="c358" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c393" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_isPointInPath_bigarc() {
 
-var canvas = document.getElementById('c358');
+var canvas = document.getElementById('c393');
 var ctx = canvas.getContext('2d');
 
 ctx.arc(50, 25, 10, 0, 7, false);
 ok(ctx.isPointInPath(50, 10) === false, "ctx.isPointInPath(50, 10) === false");
 ok(ctx.isPointInPath(50, 20) === true, "ctx.isPointInPath(50, 20) === true");
 ok(ctx.isPointInPath(50, 30) === true, "ctx.isPointInPath(50, 30) === true");
 ok(ctx.isPointInPath(50, 40) === false, "ctx.isPointInPath(50, 40) === false");
 ok(ctx.isPointInPath(30, 20) === false, "ctx.isPointInPath(30, 20) === false");
@@ -11066,22 +11916,22 @@ ok(ctx.isPointInPath(70, 30) === false, 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.isPointInPath.edge.html ]]] -->
 
 <p>Canvas test: 2d.path.isPointInPath.edge</p>
 <!-- Testing: isPointInPath() counts points on the path as being inside -->
-<canvas height="50" id="c359" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c394" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_isPointInPath_edge() {
 
-var canvas = document.getElementById('c359');
+var canvas = document.getElementById('c394');
 var ctx = canvas.getContext('2d');
 
 ctx.rect(0, 0, 20, 20);
 ok(ctx.isPointInPath(0, 0) === true, "ctx.isPointInPath(0, 0) === true");
 ok(ctx.isPointInPath(10, 0) === true, "ctx.isPointInPath(10, 0) === true");
 ok(ctx.isPointInPath(20, 0) === true, "ctx.isPointInPath(20, 0) === true");
 ok(ctx.isPointInPath(20, 10) === true, "ctx.isPointInPath(20, 10) === true");
 ok(ctx.isPointInPath(20, 20) === true, "ctx.isPointInPath(20, 20) === true");
@@ -11096,40 +11946,40 @@ ok(ctx.isPointInPath(20.01, 10) === fals
 
 }
 </script>
 
 <!-- [[[ test_2d.path.isPointInPath.empty.html ]]] -->
 
 <p>Canvas test: 2d.path.isPointInPath.empty</p>
 <!-- Testing: isPointInPath() works when there is no path -->
-<canvas height="50" id="c360" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c395" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_isPointInPath_empty() {
 
-var canvas = document.getElementById('c360');
+var canvas = document.getElementById('c395');
 var ctx = canvas.getContext('2d');
 
 ok(ctx.isPointInPath(0, 0) === false, "ctx.isPointInPath(0, 0) === false");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.isPointInPath.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.path.isPointInPath.nonfinite</p>
 <!-- Testing: isPointInPath() returns false for non-finite arguments -->
-<canvas height="50" id="c361" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c396" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_isPointInPath_nonfinite() {
 
-var canvas = document.getElementById('c361');
+var canvas = document.getElementById('c396');
 var ctx = canvas.getContext('2d');
 
 ctx.rect(-100, -50, 200, 100);
 ok(ctx.isPointInPath(Infinity, 0) === false, "ctx.isPointInPath(Infinity, 0) === false");
 ok(ctx.isPointInPath(-Infinity, 0) === false, "ctx.isPointInPath(-Infinity, 0) === false");
 ok(ctx.isPointInPath(NaN, 0) === false, "ctx.isPointInPath(NaN, 0) === false");
 ok(ctx.isPointInPath(0, Infinity) === false, "ctx.isPointInPath(0, Infinity) === false");
 ok(ctx.isPointInPath(0, -Infinity) === false, "ctx.isPointInPath(0, -Infinity) === false");
@@ -11139,22 +11989,22 @@ ok(ctx.isPointInPath(NaN, NaN) === false
 
 }
 </script>
 
 <!-- [[[ test_2d.path.isPointInPath.outside.html ]]] -->
 
 <p>Canvas test: 2d.path.isPointInPath.outside</p>
 <!-- Testing: isPointInPath() works on paths outside the canvas -->
-<canvas height="50" id="c362" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c397" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_isPointInPath_outside() {
 
-var canvas = document.getElementById('c362');
+var canvas = document.getElementById('c397');
 var ctx = canvas.getContext('2d');
 
 ctx.rect(0, -100, 20, 20);
 ctx.rect(20, -10, 20, 20);
 ok(ctx.isPointInPath(10, -110) === false, "ctx.isPointInPath(10, -110) === false");
 ok(ctx.isPointInPath(10, -90) === true, "ctx.isPointInPath(10, -90) === true");
 ok(ctx.isPointInPath(10, -70) === false, "ctx.isPointInPath(10, -70) === false");
 ok(ctx.isPointInPath(30, -20) === false, "ctx.isPointInPath(30, -20) === false");
@@ -11164,22 +12014,22 @@ ok(ctx.isPointInPath(30, 20) === false, 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.isPointInPath.subpath.html ]]] -->
 
 <p>Canvas test: 2d.path.isPointInPath.subpath</p>
 <!-- Testing: isPointInPath() uses the current path, not just the subpath -->
-<canvas height="50" id="c363" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c398" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_isPointInPath_subpath() {
 
-var canvas = document.getElementById('c363');
+var canvas = document.getElementById('c398');
 var ctx = canvas.getContext('2d');
 
 ctx.rect(0, 0, 20, 20);
 ctx.beginPath();
 ctx.rect(20, 0, 20, 20);
 ctx.closePath();
 ctx.rect(40, 0, 20, 20);
 ok(ctx.isPointInPath(10, 10) === false, "ctx.isPointInPath(10, 10) === false");
@@ -11189,22 +12039,22 @@ ok(ctx.isPointInPath(50, 10) === true, "
 
 }
 </script>
 
 <!-- [[[ test_2d.path.isPointInPath.transform.1.html ]]] -->
 
 <p>Canvas test: 2d.path.isPointInPath.transform.1</p>
 <!-- Testing: isPointInPath() handles transformations correctly -->
-<canvas height="50" id="c364" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c399" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_isPointInPath_transform_1() {
 
-var canvas = document.getElementById('c364');
+var canvas = document.getElementById('c399');
 var ctx = canvas.getContext('2d');
 
 ctx.translate(50, 0);
 ctx.rect(0, 0, 20, 20);
 ok(ctx.isPointInPath(-40, 10) === false, "ctx.isPointInPath(-40, 10) === false");
 ok(ctx.isPointInPath(10, 10) === false, "ctx.isPointInPath(10, 10) === false");
 ok(ctx.isPointInPath(49, 10) === false, "ctx.isPointInPath(49, 10) === false");
 ok(ctx.isPointInPath(51, 10) === true, "ctx.isPointInPath(51, 10) === true");
@@ -11214,22 +12064,22 @@ ok(ctx.isPointInPath(71, 10) === false, 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.isPointInPath.transform.2.html ]]] -->
 
 <p>Canvas test: 2d.path.isPointInPath.transform.2</p>
 <!-- Testing: isPointInPath() handles transformations correctly -->
-<canvas height="50" id="c365" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c400" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_isPointInPath_transform_2() {
 
-var canvas = document.getElementById('c365');
+var canvas = document.getElementById('c400');
 var ctx = canvas.getContext('2d');
 
 ctx.rect(50, 0, 20, 20);
 ctx.translate(50, 0);
 ok(ctx.isPointInPath(-40, 10) === false, "ctx.isPointInPath(-40, 10) === false");
 ok(ctx.isPointInPath(10, 10) === false, "ctx.isPointInPath(10, 10) === false");
 ok(ctx.isPointInPath(49, 10) === false, "ctx.isPointInPath(49, 10) === false");
 ok(ctx.isPointInPath(51, 10) === true, "ctx.isPointInPath(51, 10) === true");
@@ -11239,22 +12089,22 @@ ok(ctx.isPointInPath(71, 10) === false, 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.isPointInPath.transform.3.html ]]] -->
 
 <p>Canvas test: 2d.path.isPointInPath.transform.3</p>
 <!-- Testing: isPointInPath() handles transformations correctly -->
-<canvas height="50" id="c366" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c401" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_isPointInPath_transform_3() {
 
-var canvas = document.getElementById('c366');
+var canvas = document.getElementById('c401');
 var ctx = canvas.getContext('2d');
 
 ctx.scale(-1, 1);
 ctx.rect(-70, 0, 20, 20);
 ok(ctx.isPointInPath(-40, 10) === false, "ctx.isPointInPath(-40, 10) === false");
 ok(ctx.isPointInPath(10, 10) === false, "ctx.isPointInPath(10, 10) === false");
 ok(ctx.isPointInPath(49, 10) === false, "ctx.isPointInPath(49, 10) === false");
 ok(ctx.isPointInPath(51, 10) === true, "ctx.isPointInPath(51, 10) === true");
@@ -11264,22 +12114,22 @@ ok(ctx.isPointInPath(71, 10) === false, 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.isPointInPath.unclosed.html ]]] -->
 
 <p>Canvas test: 2d.path.isPointInPath.unclosed</p>
 <!-- Testing: isPointInPath() works on unclosed subpaths -->
-<canvas height="50" id="c367" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c402" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_isPointInPath_unclosed() {
 
-var canvas = document.getElementById('c367');
+var canvas = document.getElementById('c402');
 var ctx = canvas.getContext('2d');
 
 ctx.moveTo(0, 0);
 ctx.lineTo(20, 0);
 ctx.lineTo(20, 20);
 ctx.lineTo(0, 20);
 ok(ctx.isPointInPath(10, 10) === true, "ctx.isPointInPath(10, 10) === true");
 ok(ctx.isPointInPath(30, 10) === false, "ctx.isPointInPath(30, 10) === false");
@@ -11287,22 +12137,22 @@ ok(ctx.isPointInPath(30, 10) === false, 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.isPointInPath.winding.html ]]] -->
 
 <p>Canvas test: 2d.path.isPointInPath.winding</p>
 <!-- Testing: isPointInPath() uses the non-zero winding number rule -->
-<canvas height="50" id="c368" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c403" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_isPointInPath_winding() {
 
-var canvas = document.getElementById('c368');
+var canvas = document.getElementById('c403');
 var ctx = canvas.getContext('2d');
 
 // Create a square ring, using opposite windings to make a hole in the centre
 ctx.moveTo(0, 0);
 ctx.lineTo(50, 0);
 ctx.lineTo(50, 50);
 ctx.lineTo(0, 50);
 ctx.lineTo(0, 0);
@@ -11324,22 +12174,22 @@ ok(ctx.isPointInPath(45, 45) === true, "
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.lineTo.basic.html ]]] -->
 
 <p>Canvas test: 2d.path.lineTo.basic</p>
-<canvas height="50" id="c369" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c404" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_lineTo_basic() {
 
-var canvas = document.getElementById('c369');
+var canvas = document.getElementById('c404');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 50;
 ctx.beginPath();
 ctx.moveTo(0, 25);
@@ -11350,22 +12200,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.lineTo.ensuresubpath.1.html ]]] -->
 
 <p>Canvas test: 2d.path.lineTo.ensuresubpath.1</p>
 <!-- Testing: If there is no subpath, the point is added and nothing is drawn -->
-<canvas height="50" id="c370" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c405" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_lineTo_ensuresubpath_1() {
 
-var canvas = document.getElementById('c370');
+var canvas = document.getElementById('c405');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#f00';
 ctx.lineWidth = 50;
 ctx.beginPath();
 ctx.lineTo(100, 50);
@@ -11375,22 +12225,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.lineTo.ensuresubpath.2.html ]]] -->
 
 <p>Canvas test: 2d.path.lineTo.ensuresubpath.2</p>
 <!-- Testing: If there is no subpath, the point is added and used for subsequent drawing -->
-<canvas height="50" id="c371" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c406" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_lineTo_ensuresubpath_2() {
 
-var canvas = document.getElementById('c371');
+var canvas = document.getElementById('c406');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 50;
 ctx.beginPath();
 ctx.lineTo(0, 25);
@@ -11400,22 +12250,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.lineTo.nextpoint.html ]]] -->
 
 <p>Canvas test: 2d.path.lineTo.nextpoint</p>
-<canvas height="50" id="c372" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c407" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_lineTo_nextpoint() {
 
-var canvas = document.getElementById('c372');
+var canvas = document.getElementById('c407');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 50;
 ctx.beginPath();
 ctx.moveTo(-100, -100);
@@ -11427,22 +12277,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.lineTo.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.path.lineTo.nonfinite</p>
 <!-- Testing: lineTo() with Infinity/NaN is ignored -->
-<canvas height="50" id="c373" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c408" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_lineTo_nonfinite() {
 
-var canvas = document.getElementById('c373');
+var canvas = document.getElementById('c408');
 var ctx = canvas.getContext('2d');
 
 ctx.moveTo(0, 0);
 ctx.lineTo(100, 0);
 ctx.lineTo(Infinity, 50);
 ctx.lineTo(-Infinity, 50);
 ctx.lineTo(NaN, 50);
 ctx.lineTo(0, Infinity);
@@ -11458,22 +12308,22 @@ isPixel(ctx, 90,45, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.moveTo.basic.html ]]] -->
 
 <p>Canvas test: 2d.path.moveTo.basic</p>
-<canvas height="50" id="c374" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c409" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_moveTo_basic() {
 
-var canvas = document.getElementById('c374');
+var canvas = document.getElementById('c409');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.rect(0, 0, 10, 50);
 ctx.moveTo(100, 0);
 ctx.lineTo(10, 0);
 ctx.lineTo(10, 50);
@@ -11484,22 +12334,22 @@ isPixel(ctx, 90,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.moveTo.multiple.html ]]] -->
 
 <p>Canvas test: 2d.path.moveTo.multiple</p>
-<canvas height="50" id="c375" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c410" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_moveTo_multiple() {
 
-var canvas = document.getElementById('c375');
+var canvas = document.getElementById('c410');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.moveTo(0, 25);
 ctx.moveTo(100, 25);
 ctx.moveTo(0, 25);
 ctx.lineTo(100, 25);
@@ -11510,22 +12360,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.moveTo.newsubpath.html ]]] -->
 
 <p>Canvas test: 2d.path.moveTo.newsubpath</p>
-<canvas height="50" id="c376" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c411" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_moveTo_newsubpath() {
 
-var canvas = document.getElementById('c376');
+var canvas = document.getElementById('c411');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.beginPath();
 ctx.moveTo(0, 0);
 ctx.moveTo(100, 0);
 ctx.moveTo(100, 50);
@@ -11537,22 +12387,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.moveTo.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.path.moveTo.nonfinite</p>
 <!-- Testing: moveTo() with Infinity/NaN is ignored -->
-<canvas height="50" id="c377" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c412" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_moveTo_nonfinite() {
 
-var canvas = document.getElementById('c377');
+var canvas = document.getElementById('c412');
 var ctx = canvas.getContext('2d');
 
 ctx.moveTo(0, 0);
 ctx.lineTo(100, 0);
 ctx.moveTo(Infinity, 50);
 ctx.moveTo(-Infinity, 50);
 ctx.moveTo(NaN, 50);
 ctx.moveTo(0, Infinity);
@@ -11567,22 +12417,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.quadraticCurveTo.basic.html ]]] -->
 
 <p>Canvas test: 2d.path.quadraticCurveTo.basic</p>
-<canvas height="50" id="c378" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c413" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_quadraticCurveTo_basic() {
 
-var canvas = document.getElementById('c378');
+var canvas = document.getElementById('c413');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 50;
 ctx.beginPath();
 ctx.moveTo(0, 25);
@@ -11593,22 +12443,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.quadraticCurveTo.ensuresubpath.1.html ]]] -->
 
 <p>Canvas test: 2d.path.quadraticCurveTo.ensuresubpath.1</p>
 <!-- Testing: If there is no subpath, the first control point is added (and nothing is drawn up to it) -->
-<canvas height="50" id="c379" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c414" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_quadraticCurveTo_ensuresubpath_1() {
 
-var canvas = document.getElementById('c379');
+var canvas = document.getElementById('c414');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#f00';
 ctx.lineWidth = 50;
 ctx.beginPath();
 ctx.quadraticCurveTo(100, 50, 200, 50);
@@ -11619,22 +12469,22 @@ todo_isPixel(ctx, 95,45, 0,255,0,255, 0)
 
 }
 </script>
 
 <!-- [[[ test_2d.path.quadraticCurveTo.ensuresubpath.2.html ]]] -->
 
 <p>Canvas test: 2d.path.quadraticCurveTo.ensuresubpath.2</p>
 <!-- Testing: If there is no subpath, the first control point is added -->
-<canvas height="50" id="c380" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c415" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_quadraticCurveTo_ensuresubpath_2() {
 
-var canvas = document.getElementById('c380');
+var canvas = document.getElementById('c415');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 50;
 ctx.beginPath();
 ctx.quadraticCurveTo(0, 25, 100, 25);
@@ -11645,22 +12495,22 @@ todo_isPixel(ctx, 5,45, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.quadraticCurveTo.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.path.quadraticCurveTo.nonfinite</p>
 <!-- Testing: quadraticCurveTo() with Infinity/NaN is ignored -->
-<canvas height="50" id="c381" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c416" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_quadraticCurveTo_nonfinite() {
 
-var canvas = document.getElementById('c381');
+var canvas = document.getElementById('c416');
 var ctx = canvas.getContext('2d');
 
 ctx.moveTo(0, 0);
 ctx.lineTo(100, 0);
 ctx.quadraticCurveTo(Infinity, 50, 0, 50);
 ctx.quadraticCurveTo(-Infinity, 50, 0, 50);
 ctx.quadraticCurveTo(NaN, 50, 0, 50);
 ctx.quadraticCurveTo(0, Infinity, 0, 50);
@@ -11692,22 +12542,22 @@ isPixel(ctx, 90,45, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.quadraticCurveTo.scaled.html ]]] -->
 
 <p>Canvas test: 2d.path.quadraticCurveTo.scaled</p>
-<canvas height="50" id="c382" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c417" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_quadraticCurveTo_scaled() {
 
-var canvas = document.getElementById('c382');
+var canvas = document.getElementById('c417');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.scale(1000, 1000);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 0.055;
 ctx.beginPath();
@@ -11722,22 +12572,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.quadraticCurveTo.shape.html ]]] -->
 
 <p>Canvas test: 2d.path.quadraticCurveTo.shape</p>
-<canvas height="50" id="c383" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c418" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_quadraticCurveTo_shape() {
 
-var canvas = document.getElementById('c383');
+var canvas = document.getElementById('c418');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 55;
 ctx.beginPath();
 ctx.moveTo(-1000, 1050);
@@ -11751,44 +12601,44 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.rect.basic.html ]]] -->
 
 <p>Canvas test: 2d.path.rect.basic</p>
-<canvas height="50" id="c384" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c419" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_rect_basic() {
 
-var canvas = document.getElementById('c384');
+var canvas = document.getElementById('c419');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#0f0';
 ctx.rect(0, 0, 100, 50);
 ctx.fill();
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.rect.closed.html ]]] -->
 
 <p>Canvas test: 2d.path.rect.closed</p>
-<canvas height="50" id="c385" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c420" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_rect_closed() {
 
-var canvas = document.getElementById('c385');
+var canvas = document.getElementById('c420');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 200;
 ctx.lineJoin = 'miter';
 ctx.rect(100, 50, 100, 100);
@@ -11797,22 +12647,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.rect.end.1.html ]]] -->
 
 <p>Canvas test: 2d.path.rect.end.1</p>
-<canvas height="50" id="c386" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c421" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_rect_end_1() {
 
-var canvas = document.getElementById('c386');
+var canvas = document.getElementById('c421');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 100;
 ctx.rect(200, 100, 400, 1000);
 ctx.lineTo(-2000, -1000);
@@ -11821,22 +12671,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.rect.end.2.html ]]] -->
 
 <p>Canvas test: 2d.path.rect.end.2</p>
-<canvas height="50" id="c387" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c422" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_rect_end_2() {
 
-var canvas = document.getElementById('c387');
+var canvas = document.getElementById('c422');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 450;
 ctx.lineCap = 'round';
 ctx.lineJoin = 'bevel';
@@ -11850,22 +12700,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.rect.negative.html ]]] -->
 
 <p>Canvas test: 2d.path.rect.negative</p>
-<canvas height="50" id="c388" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c423" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_rect_negative() {
 
-var canvas = document.getElementById('c388');
+var canvas = document.getElementById('c423');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.beginPath();
 ctx.fillStyle = '#0f0';
 ctx.rect(0, 0, 50, 25);
 ctx.rect(100, 0, -50, 25);
@@ -11879,22 +12729,22 @@ isPixel(ctx, 75,37, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.rect.newsubpath.html ]]] -->
 
 <p>Canvas test: 2d.path.rect.newsubpath</p>
-<canvas height="50" id="c389" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c424" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_rect_newsubpath() {
 
-var canvas = document.getElementById('c389');
+var canvas = document.getElementById('c424');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.beginPath();
 ctx.strokeStyle = '#f00';
 ctx.lineWidth = 50;
 ctx.moveTo(-100, 25);
@@ -11906,22 +12756,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.rect.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.path.rect.nonfinite</p>
 <!-- Testing: rect() with Infinity/NaN is ignored -->
-<canvas height="50" id="c390" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c425" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_rect_nonfinite() {
 
-var canvas = document.getElementById('c390');
+var canvas = document.getElementById('c425');
 var ctx = canvas.getContext('2d');
 
 ctx.moveTo(0, 0);
 ctx.lineTo(100, 0);
 ctx.rect(Infinity, 50, 1, 1);
 ctx.rect(-Infinity, 50, 1, 1);
 ctx.rect(NaN, 50, 1, 1);
 ctx.rect(0, Infinity, 1, 1);
@@ -11953,22 +12803,22 @@ isPixel(ctx, 90,45, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.rect.winding.html ]]] -->
 
 <p>Canvas test: 2d.path.rect.winding</p>
-<canvas height="50" id="c391" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c426" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_rect_winding() {
 
-var canvas = document.getElementById('c391');
+var canvas = document.getElementById('c426');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.beginPath();
 ctx.fillStyle = '#f00';
 ctx.rect(0, 0, 50, 50);
 ctx.rect(100, 50, -50, -50);
@@ -11982,22 +12832,22 @@ isPixel(ctx, 75,37, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.rect.zero.1.html ]]] -->
 
 <p>Canvas test: 2d.path.rect.zero.1</p>
-<canvas height="50" id="c392" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c427" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_rect_zero_1() {
 
-var canvas = document.getElementById('c392');
+var canvas = document.getElementById('c427');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 100;
 ctx.beginPath();
 ctx.rect(0, 50, 100, 0);
@@ -12006,22 +12856,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.rect.zero.2.html ]]] -->
 
 <p>Canvas test: 2d.path.rect.zero.2</p>
-<canvas height="50" id="c393" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c428" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_rect_zero_2() {
 
-var canvas = document.getElementById('c393');
+var canvas = document.getElementById('c428');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 100;
 ctx.beginPath();
 ctx.rect(50, -100, 0, 250);
@@ -12030,22 +12880,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.rect.zero.4.html ]]] -->
 
 <p>Canvas test: 2d.path.rect.zero.4</p>
-<canvas height="50" id="c394" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c429" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_rect_zero_4() {
 
-var canvas = document.getElementById('c394');
+var canvas = document.getElementById('c429');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 50;
 ctx.rect(100, 25, 0, 0);
 ctx.lineTo(0, 25);
@@ -12054,22 +12904,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.rect.zero.5.html ]]] -->
 
 <p>Canvas test: 2d.path.rect.zero.5</p>
-<canvas height="50" id="c395" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c430" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_rect_zero_5() {
 
-var canvas = document.getElementById('c395');
+var canvas = document.getElementById('c430');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#f00';
 ctx.lineWidth = 50;
 ctx.moveTo(0, 0);
 ctx.rect(100, 25, 0, 0);
@@ -12079,22 +12929,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.stroke.empty.html ]]] -->
 
 <p>Canvas test: 2d.path.stroke.empty</p>
 <!-- Testing: Empty subpaths are not stroked -->
-<canvas height="50" id="c396" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c431" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_stroke_empty() {
 
-var canvas = document.getElementById('c396');
+var canvas = document.getElementById('c431');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.strokeStyle = '#f00';
 ctx.lineWidth = 100;
 ctx.lineCap = 'round';
@@ -12110,22 +12960,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.stroke.overlap.html ]]] -->
 
 <p>Canvas test: 2d.path.stroke.overlap</p>
 <!-- Testing: Stroked subpaths are combined before being drawn -->
-<canvas height="50" id="c397" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c432" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_stroke_overlap() {
 
-var canvas = document.getElementById('c397');
+var canvas = document.getElementById('c432');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#000';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.strokeStyle = 'rgba(0, 255, 0, 0.5)';
 ctx.lineWidth = 50;
 ctx.moveTo(0, 20);
@@ -12139,22 +12989,22 @@ isPixel(ctx, 50,25, 0,127,0,255, 1);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.stroke.prune.arc.html ]]] -->
 
 <p>Canvas test: 2d.path.stroke.prune.arc</p>
 <!-- Testing: Zero-length line segments from arcTo and arc are removed before stroking -->
-<canvas height="50" id="c398" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c433" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_stroke_prune_arc() {
 
-var canvas = document.getElementById('c398');
+var canvas = document.getElementById('c433');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.strokeStyle = '#f00';
 ctx.lineWidth = 100;
 ctx.lineCap = 'round';
@@ -12175,22 +13025,22 @@ todo_isPixel(ctx, 50,25, 0,255,0,255, 0)
 
 }
 </script>
 
 <!-- [[[ test_2d.path.stroke.prune.corner.html ]]] -->
 
 <p>Canvas test: 2d.path.stroke.prune.corner</p>
 <!-- Testing: Zero-length line segments are removed before stroking with miters -->
-<canvas height="50" id="c399" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c434" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_stroke_prune_corner() {
 
-var canvas = document.getElementById('c399');
+var canvas = document.getElementById('c434');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.strokeStyle = '#f00';
 ctx.lineWidth = 400;
 ctx.lineJoin = 'miter';
@@ -12209,22 +13059,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.stroke.scale1.html ]]] -->
 
 <p>Canvas test: 2d.path.stroke.scale1</p>
 <!-- Testing: Stroke line widths are scaled by the current transformation matrix -->
-<canvas height="50" id="c400" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c435" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_stroke_scale1() {
 
-var canvas = document.getElementById('c400');
+var canvas = document.getElementById('c435');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.beginPath();
 ctx.rect(25, 12.5, 50, 25);
 ctx.save();
@@ -12254,22 +13104,22 @@ isPixel(ctx, 99,49, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.stroke.skew.html ]]] -->
 
 <p>Canvas test: 2d.path.stroke.skew</p>
 <!-- Testing: Strokes lines are skewed by the current transformation matrix -->
-<canvas height="50" id="c401" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c436" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_stroke_skew() {
 
-var canvas = document.getElementById('c401');
+var canvas = document.getElementById('c436');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.save();
 ctx.beginPath();
 ctx.moveTo(49, -50);
@@ -12315,22 +13165,22 @@ isPixel(ctx, 99,49, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.stroke.unaffected.html ]]] -->
 
 <p>Canvas test: 2d.path.stroke.unaffected</p>
 <!-- Testing: Stroking does not start a new path or subpath -->
-<canvas height="50" id="c402" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c437" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_stroke_unaffected() {
 
-var canvas = document.getElementById('c402');
+var canvas = document.getElementById('c437');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.lineWidth = 50;
 ctx.moveTo(-100, 25);
 ctx.lineTo(-100, -100);
@@ -12348,22 +13198,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.stroke.union.html ]]] -->
 
 <p>Canvas test: 2d.path.stroke.union</p>
 <!-- Testing: Strokes in opposite directions are unioned, not subtracted -->
-<canvas height="50" id="c403" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c438" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_stroke_union() {
 
-var canvas = document.getElementById('c403');
+var canvas = document.getElementById('c438');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 40;
 ctx.moveTo(0, 10);
@@ -12376,22 +13226,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.transformation.basic.html ]]] -->
 
 <p>Canvas test: 2d.path.transformation.basic</p>
-<canvas height="50" id="c404" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c439" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_transformation_basic() {
 
-var canvas = document.getElementById('c404');
+var canvas = document.getElementById('c439');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.translate(-100, 0);
 ctx.rect(100, 0, 100, 50);
 ctx.translate(0, -100);
@@ -12403,22 +13253,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.transformation.changing.html ]]] -->
 
 <p>Canvas test: 2d.path.transformation.changing</p>
 <!-- Testing: Transformations are applied while building paths, not when drawing -->
-<canvas height="50" id="c405" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c440" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_transformation_changing() {
 
-var canvas = document.getElementById('c405');
+var canvas = document.getElementById('c440');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#0f0';
 ctx.moveTo(0, 0);
 ctx.translate(100, 0);
 ctx.lineTo(0, 0);
@@ -12436,22 +13286,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.path.transformation.multiple.html ]]] -->
 
 <p>Canvas test: 2d.path.transformation.multiple</p>
 <!-- Testing: Transformations are applied while building paths, not when drawing -->
-<canvas height="50" id="c406" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c441" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_transformation_multiple() {
 
-var canvas = document.getElementById('c406');
+var canvas = document.getElementById('c441');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.fillStyle = '#f00';    
 ctx.translate(-100, 0);
 ctx.rect(0, 0, 100, 50);
@@ -12473,22 +13323,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.pattern.basic.canvas.html ]]] -->
 
 <p>Canvas test: 2d.pattern.basic.canvas</p>
-<canvas height="50" id="c407" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c442" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_basic_canvas() {
 
-var canvas = document.getElementById('c407');
+var canvas = document.getElementById('c442');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 var canvas2 = document.createElement('canvas');
 canvas2.width = 100;
 canvas2.height = 50;
@@ -12512,22 +13362,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.pattern.basic.image.html ]]] -->
 
 <p>Canvas test: 2d.pattern.basic.image</p>
-<canvas height="50" id="c408" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c443" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_basic_image() {
 
-var canvas = document.getElementById('c408');
+var canvas = document.getElementById('c443');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 var img = document.getElementById('green_7.png');
 var pattern = ctx.createPattern(img, 'no-repeat');
 ctx.fillStyle = pattern;
 ctx.fillRect(0, 0, 100, 50);
@@ -12540,22 +13390,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 <img class="resource" id="green_7.png" src="image_green.png">
 
 <!-- [[[ test_2d.pattern.basic.nocontext.html ]]] -->
 
 <p>Canvas test: 2d.pattern.basic.nocontext</p>
-<canvas height="50" id="c409" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c444" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_basic_nocontext() {
 
-var canvas = document.getElementById('c409');
+var canvas = document.getElementById('c444');
 var ctx = canvas.getContext('2d');
 
 var canvas2 = document.createElement('canvas');
 canvas2.width = 100;
 canvas2.height = 50;
 var pattern = ctx.createPattern(canvas2, 'no-repeat');
 
 ctx.fillStyle = '#0f0';
@@ -12571,22 +13421,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.pattern.basic.type.html ]]] -->
 
 <p>Canvas test: 2d.pattern.basic.type</p>
-<canvas height="50" id="c410" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c445" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_basic_type() {
 
-var canvas = document.getElementById('c410');
+var canvas = document.getElementById('c445');
 var ctx = canvas.getContext('2d');
 
 ok(window.CanvasPattern !== undefined, "window.CanvasPattern !== undefined");
 
 window.CanvasPattern.prototype.thisImplementsCanvasPattern = true;
 
 var img = document.getElementById('green_8.png');
 var pattern = ctx.createPattern(img, 'no-repeat');
@@ -12595,22 +13445,22 @@ ok(pattern.thisImplementsCanvasPattern, 
 
 }
 </script>
 <img class="resource" id="green_8.png" src="image_green.png">
 
 <!-- [[[ test_2d.pattern.basic.zerocanvas.html ]]] -->
 
 <p>Canvas test: 2d.pattern.basic.zerocanvas</p>
-<canvas height="50" id="c411" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c446" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_basic_zerocanvas() {
 
-var canvas = document.getElementById('c411');
+var canvas = document.getElementById('c446');
 var ctx = canvas.getContext('2d');
 
 canvas.width = 0;
 canvas.height = 10;
 ok(canvas.width === 0, "canvas.width === 0");
 ok(canvas.height === 10, "canvas.height === 10");
 var _thrown = undefined; try {
   ctx.createPattern(canvas, 'repeat');
@@ -12634,22 +13484,22 @@ var _thrown = undefined; try {
 
 
 }
 </script>
 
 <!-- [[[ test_2d.pattern.crosscanvas.html ]]] -->
 
 <p>Canvas test: 2d.pattern.crosscanvas</p>
-<canvas height="50" id="c412" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c447" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_crosscanvas() {
 
-var canvas = document.getElementById('c412');
+var canvas = document.getElementById('c447');
 var ctx = canvas.getContext('2d');
 
 var img = document.getElementById('green_9.png');
 
 var pattern = document.createElement('canvas').getContext('2d').createPattern(img, 'no-repeat');
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = pattern;
@@ -12660,122 +13510,230 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 <img class="resource" id="green_9.png" src="image_green.png">
 
 <!-- [[[ test_2d.pattern.image.broken.html ]]] -->
 
 <p>Canvas test: 2d.pattern.image.broken</p>
-<canvas height="50" id="c413" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c448" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_image_broken() {
 
-var canvas = document.getElementById('c413');
+var canvas = document.getElementById('c448');
 var ctx = canvas.getContext('2d');
 
 var img = document.getElementById('broken_2.png');
 todo(ctx.createPattern(img, 'repeat') === null, "ctx.createPattern(img, 'repeat') === null");
 
 
 }
 </script>
 <img class="resource" id="broken_2.png" src="image_broken.png">
 
+<!-- [[[ test_2d.pattern.image.incomplete.emptysrc.html ]]] -->
+
+<p>Canvas test: 2d.pattern.image.incomplete.emptysrc</p>
+<canvas height="50" id="c449" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_pattern_image_incomplete_emptysrc() {
+
+var canvas = document.getElementById('c449');
+var ctx = canvas.getContext('2d');
+
+var _thrown_outer = false;
+try {
+
+var img = document.getElementById('red_18.png');
+img.src = "";
+ok(ctx.createPattern(img, 'repeat') === null, "ctx.createPattern(img, 'repeat') === null");
+
+} catch (e) {
+    _thrown_outer = true;
+}
+todo(!_thrown_outer, 'should not throw exception');
+
+
+}
+</script>
+<img class="resource" id="red_18.png" src="image_red.png">
+
 <!-- [[[ test_2d.pattern.image.incomplete.immediate.html ]]] -->
 
 <p>Canvas test: 2d.pattern.image.incomplete.immediate</p>
-<canvas height="50" id="c414" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c450" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_image_incomplete_immediate() {
 
-var canvas = document.getElementById('c414');
+var canvas = document.getElementById('c450');
 var ctx = canvas.getContext('2d');
 
 var img = new Image();
 img.src = 'image_red.png';
 // This triggers the "update the image data" algorithm.
 // The image will not go to the "completely available" state
 // until a fetch task in the networking task source is processed,
 // so the image must not be fully decodable yet:
 todo(ctx.createPattern(img, 'repeat') === null, "ctx.createPattern(img, 'repeat') === null");
 
 
 }
 </script>
-<img class="resource" id="red_15.png" src="image_red.png">
+<img class="resource" id="red_19.png" src="image_red.png">
+
+<!-- [[[ test_2d.pattern.image.incomplete.nosrc.html ]]] -->
+
+<p>Canvas test: 2d.pattern.image.incomplete.nosrc</p>
+<canvas height="50" id="c451" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_pattern_image_incomplete_nosrc() {
+
+var canvas = document.getElementById('c451');
+var ctx = canvas.getContext('2d');
+
+var _thrown_outer = false;
+try {
+
+var img = new Image();
+ok(ctx.createPattern(img, 'repeat') === null, "ctx.createPattern(img, 'repeat') === null");
+
+} catch (e) {
+    _thrown_outer = true;
+}
+todo(!_thrown_outer, 'should not throw exception');
+
+
+}
+</script>
+
+<!-- [[[ test_2d.pattern.image.incomplete.reload.html ]]] -->
+
+<p>Canvas test: 2d.pattern.image.incomplete.reload</p>
+<canvas height="50" id="c452" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_pattern_image_incomplete_reload() {
+
+var canvas = document.getElementById('c452');
+var ctx = canvas.getContext('2d');
+
+var img = document.getElementById('yellow_4.png');
+img.src = 'image_red.png';
+// This triggers the "update the image data" algorithm,
+// and resets the image to the "unavailable" state.
+// The image will not go to the "completely available" state
+// until a fetch task in the networking task source is processed,
+// so the image must not be fully decodable yet:
+todo(ctx.createPattern(img, 'repeat') === null, "ctx.createPattern(img, 'repeat') === null");
+
+
+}
+</script>
+<img class="resource" id="yellow_4.png" src="image_yellow.png">
+<img class="resource" id="red_20.png" src="image_red.png">
+
+<!-- [[[ test_2d.pattern.image.incomplete.removedsrc.html ]]] -->
+
+<p>Canvas test: 2d.pattern.image.incomplete.removedsrc</p>
+<canvas height="50" id="c453" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_pattern_image_incomplete_removedsrc() {
+
+var canvas = document.getElementById('c453');
+var ctx = canvas.getContext('2d');
+
+var _thrown_outer = false;
+try {
+
+var img = document.getElementById('red_21.png');
+img.removeAttribute('src');
+ok(ctx.createPattern(img, 'repeat') === null, "ctx.createPattern(img, 'repeat') === null");
+
+} catch (e) {
+    _thrown_outer = true;
+}
+todo(!_thrown_outer, 'should not throw exception');
+
+
+}
+</script>
+<img class="resource" id="red_21.png" src="image_red.png">
 
 <!-- [[[ test_2d.pattern.image.null.html ]]] -->
 
 <p>Canvas test: 2d.pattern.image.null</p>
-<canvas height="50" id="c415" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c454" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_image_null() {
 
-var canvas = document.getElementById('c415');
+var canvas = document.getElementById('c454');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   ctx.createPattern(null, 'repeat');
 } catch (e) { _thrown = e }; todo(_thrown && (_thrown instanceof TypeError), "should throw TypeError");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.pattern.image.string.html ]]] -->
 
 <p>Canvas test: 2d.pattern.image.string</p>
-<canvas height="50" id="c416" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c455" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_image_string() {
 
-var canvas = document.getElementById('c416');
+var canvas = document.getElementById('c455');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   ctx.createPattern('image_red.png', 'repeat');
 } catch (e) { _thrown = e }; todo(_thrown && (_thrown instanceof TypeError), "should throw TypeError");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.pattern.image.undefined.html ]]] -->
 
 <p>Canvas test: 2d.pattern.image.undefined</p>
-<canvas height="50" id="c417" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c456" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_image_undefined() {
 
-var canvas = document.getElementById('c417');
+var canvas = document.getElementById('c456');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   ctx.createPattern(undefined, 'repeat');
 } catch (e) { _thrown = e }; todo(_thrown && (_thrown instanceof TypeError), "should throw TypeError");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.pattern.modify.canvas1.html ]]] -->
 
 <p>Canvas test: 2d.pattern.modify.canvas1</p>
-<canvas height="50" id="c418" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c457" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_modify_canvas1() {
 
-var canvas = document.getElementById('c418');
+var canvas = document.getElementById('c457');
 var ctx = canvas.getContext('2d');
 
 var canvas2 = document.createElement('canvas');
 canvas2.width = 100;
 canvas2.height = 50;
 var ctx2 = canvas2.getContext('2d');
 ctx2.fillStyle = '#0f0';
 ctx2.fillRect(0, 0, 100, 50);
@@ -12795,22 +13753,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.pattern.modify.canvas2.html ]]] -->
 
 <p>Canvas test: 2d.pattern.modify.canvas2</p>
-<canvas height="50" id="c419" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c458" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_modify_canvas2() {
 
-var canvas = document.getElementById('c419');
+var canvas = document.getElementById('c458');
 var ctx = canvas.getContext('2d');
 
 var canvas2 = document.createElement('canvas');
 canvas2.width = 100;
 canvas2.height = 50;
 var ctx2 = canvas2.getContext('2d');
 ctx2.fillStyle = '#0f0';
 ctx2.fillRect(0, 0, 100, 50);
@@ -12834,22 +13792,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.pattern.paint.norepeat.basic.html ]]] -->
 
 <p>Canvas test: 2d.pattern.paint.norepeat.basic</p>
-<canvas height="50" id="c420" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c459" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_paint_norepeat_basic() {
 
-var canvas = document.getElementById('c420');
+var canvas = document.getElementById('c459');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 var img = document.getElementById('green_10.png');
 var pattern = ctx.createPattern(img, 'no-repeat');
 ctx.fillStyle = pattern;
@@ -12863,22 +13821,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 <img class="resource" id="green_10.png" src="image_green.png">
 
 <!-- [[[ test_2d.pattern.paint.norepeat.coord1.html ]]] -->
 
 <p>Canvas test: 2d.pattern.paint.norepeat.coord1</p>
-<canvas height="50" id="c421" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c460" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_paint_norepeat_coord1() {
 
-var canvas = document.getElementById('c421');
+var canvas = document.getElementById('c460');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 50, 50);
 ctx.fillStyle = '#f00';
 ctx.fillRect(50, 0, 50, 50);
 
 var img = document.getElementById('green_11.png');
@@ -12895,22 +13853,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 <img class="resource" id="green_11.png" src="image_green.png">
 
 <!-- [[[ test_2d.pattern.paint.norepeat.coord2.html ]]] -->
 
 <p>Canvas test: 2d.pattern.paint.norepeat.coord2</p>
-<canvas height="50" id="c422" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c461" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_paint_norepeat_coord2() {
 
-var canvas = document.getElementById('c422');
+var canvas = document.getElementById('c461');
 var ctx = canvas.getContext('2d');
 
 var img = document.getElementById('green_12.png');
 var pattern = ctx.createPattern(img, 'no-repeat');
 ctx.fillStyle = pattern;
 ctx.fillRect(0, 0, 50, 50);
 
 ctx.fillStyle = '#f00';
@@ -12928,61 +13886,61 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 <img class="resource" id="green_12.png" src="image_green.png">
 
 <!-- [[[ test_2d.pattern.paint.norepeat.coord3.html ]]] -->
 
 <p>Canvas test: 2d.pattern.paint.norepeat.coord3</p>
-<canvas height="50" id="c423" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c462" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_paint_norepeat_coord3() {
 
-var canvas = document.getElementById('c423');
-var ctx = canvas.getContext('2d');
-
-ctx.fillStyle = '#0f0';
-ctx.fillRect(0, 0, 100, 50);
-
-var img = document.getElementById('red_16.png');
+var canvas = document.getElementById('c462');
+var ctx = canvas.getContext('2d');
+
+ctx.fillStyle = '#0f0';
+ctx.fillRect(0, 0, 100, 50);
+
+var img = document.getElementById('red_22.png');
 var pattern = ctx.createPattern(img, 'no-repeat');
 ctx.fillStyle = pattern;
 ctx.translate(50, 25);
 ctx.fillRect(-50, -25, 100, 50);
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 50, 25);
 
 isPixel(ctx, 1,1, 0,255,0,255, 0);
 isPixel(ctx, 98,1, 0,255,0,255, 0);
 isPixel(ctx, 1,48, 0,255,0,255, 0);
 isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 
 }
 </script>
-<img class="resource" id="red_16.png" src="image_red.png">
+<img class="resource" id="red_22.png" src="image_red.png">
 
 <!-- [[[ test_2d.pattern.paint.norepeat.outside.html ]]] -->
 
 <p>Canvas test: 2d.pattern.paint.norepeat.outside</p>
-<canvas height="50" id="c424" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c463" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_paint_norepeat_outside() {
 
-var canvas = document.getElementById('c424');
-var ctx = canvas.getContext('2d');
-
-ctx.fillStyle = '#f00';
-ctx.fillRect(0, 0, 100, 50);
-
-var img = document.getElementById('red_17.png');
+var canvas = document.getElementById('c463');
+var ctx = canvas.getContext('2d');
+
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
+
+var img = document.getElementById('red_23.png');
 var pattern = ctx.createPattern(img, 'no-repeat');
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.fillStyle = pattern;
 ctx.fillRect(0, -50, 100, 50);
 ctx.fillRect(-100, 0, 100, 50);
 ctx.fillRect(0, 50, 100, 50);
@@ -12991,28 +13949,28 @@ ctx.fillRect(100, 0, 100, 50);
 isPixel(ctx, 1,1, 0,255,0,255, 0);
 isPixel(ctx, 98,1, 0,255,0,255, 0);
 isPixel(ctx, 1,48, 0,255,0,255, 0);
 isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 
 }
 </script>
-<img class="resource" id="red_17.png" src="image_red.png">
+<img class="resource" id="red_23.png" src="image_red.png">
 
 <!-- [[[ test_2d.pattern.paint.orientation.canvas.html ]]] -->
 
 <p>Canvas test: 2d.pattern.paint.orientation.canvas</p>
 <!-- Testing: Canvas patterns do not get flipped when painted -->
-<canvas height="50" id="c425" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c464" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_paint_orientation_canvas() {
 
-var canvas = document.getElementById('c425');
+var canvas = document.getElementById('c464');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 var canvas2 = document.createElement('canvas');
 canvas2.width = 100;
 canvas2.height = 50;
@@ -13036,22 +13994,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.pattern.paint.orientation.image.html ]]] -->
 
 <p>Canvas test: 2d.pattern.paint.orientation.image</p>
 <!-- Testing: Image patterns do not get flipped when painted -->
-<canvas height="50" id="c426" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c465" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_paint_orientation_image() {
 
-var canvas = document.getElementById('c426');
+var canvas = document.getElementById('c465');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 var img = document.getElementById('rrgg-256x256_1.png');
 var pattern = ctx.createPattern(img, 'no-repeat');
 ctx.fillStyle = pattern;
@@ -13071,22 +14029,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 <img class="resource" id="rrgg-256x256_1.png" src="image_rrgg-256x256.png">
 
 <!-- [[[ test_2d.pattern.paint.repeat.basic.html ]]] -->
 
 <p>Canvas test: 2d.pattern.paint.repeat.basic</p>
-<canvas height="50" id="c427" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c466" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_paint_repeat_basic() {
 
-var canvas = document.getElementById('c427');
+var canvas = document.getElementById('c466');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 var img = document.getElementById('green-16x16_1.png');
 var pattern = ctx.createPattern(img, 'repeat');
 ctx.fillStyle = pattern;
@@ -13100,22 +14058,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 <img class="resource" id="green-16x16_1.png" src="image_green-16x16.png">
 
 <!-- [[[ test_2d.pattern.paint.repeat.coord1.html ]]] -->
 
 <p>Canvas test: 2d.pattern.paint.repeat.coord1</p>
-<canvas height="50" id="c428" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c467" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_paint_repeat_coord1() {
 
-var canvas = document.getElementById('c428');
+var canvas = document.getElementById('c467');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 var img = document.getElementById('rgrg-256x256_3.png');
 var pattern = ctx.createPattern(img, 'repeat');
 ctx.fillStyle = pattern;
@@ -13130,22 +14088,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 <img class="resource" id="rgrg-256x256_3.png" src="image_rgrg-256x256.png">
 
 <!-- [[[ test_2d.pattern.paint.repeat.coord2.html ]]] -->
 
 <p>Canvas test: 2d.pattern.paint.repeat.coord2</p>
-<canvas height="50" id="c429" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c468" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_paint_repeat_coord2() {
 
-var canvas = document.getElementById('c429');
+var canvas = document.getElementById('c468');
 var ctx = canvas.getContext('2d');
 
 var img = document.getElementById('ggrr-256x256_4.png');
 var pattern = ctx.createPattern(img, 'repeat');
 ctx.fillStyle = pattern;
 ctx.fillRect(0, 0, 100, 50);
 
 isPixel(ctx, 1,1, 0,255,0,255, 0);
@@ -13156,22 +14114,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 <img class="resource" id="ggrr-256x256_4.png" src="image_ggrr-256x256.png">
 
 <!-- [[[ test_2d.pattern.paint.repeat.outside.html ]]] -->
 
 <p>Canvas test: 2d.pattern.paint.repeat.outside</p>
-<canvas height="50" id="c430" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c469" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_paint_repeat_outside() {
 
-var canvas = document.getElementById('c430');
+var canvas = document.getElementById('c469');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 var img = document.getElementById('green-16x16_2.png');
 var pattern = ctx.createPattern(img, 'repeat');
 ctx.fillStyle = pattern;
@@ -13186,22 +14144,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 <img class="resource" id="green-16x16_2.png" src="image_green-16x16.png">
 
 <!-- [[[ test_2d.pattern.paint.repeatx.basic.html ]]] -->
 
 <p>Canvas test: 2d.pattern.paint.repeatx.basic</p>
-<canvas height="50" id="c431" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c470" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_paint_repeatx_basic() {
 
-var canvas = document.getElementById('c431');
+var canvas = document.getElementById('c470');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 16);
 
 var img = document.getElementById('green-16x16_3.png');
@@ -13217,22 +14175,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 <img class="resource" id="green-16x16_3.png" src="image_green-16x16.png">
 
 <!-- [[[ test_2d.pattern.paint.repeaty.basic.html ]]] -->
 
 <p>Canvas test: 2d.pattern.paint.repeaty.basic</p>
-<canvas height="50" id="c432" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c471" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_paint_repeaty_basic() {
 
-var canvas = document.getElementById('c432');
+var canvas = document.getElementById('c471');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 16, 50);
 
 var img = document.getElementById('green-16x16_4.png');
@@ -13248,41 +14206,41 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 <img class="resource" id="green-16x16_4.png" src="image_green-16x16.png">
 
 <!-- [[[ test_2d.pattern.repeat.case.html ]]] -->
 
 <p>Canvas test: 2d.pattern.repeat.case</p>
-<canvas height="50" id="c433" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c472" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_repeat_case() {
 
-var canvas = document.getElementById('c433');
+var canvas = document.getElementById('c472');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   ctx.createPattern(canvas, "Repeat");
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.SYNTAX_ERR, "should throw SYNTAX_ERR");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.pattern.repeat.empty.html ]]] -->
 
 <p>Canvas test: 2d.pattern.repeat.empty</p>
-<canvas height="50" id="c434" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c473" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_repeat_empty() {
 
-var canvas = document.getElementById('c434');
+var canvas = document.getElementById('c473');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 var img = document.getElementById('green-1x1_1.png');
 var pattern = ctx.createPattern(img, "");
 ctx.fillStyle = pattern;
 ctx.fillRect(0, 0, 200, 50);
@@ -13295,22 +14253,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 <img class="resource" id="green-1x1_1.png" src="image_green-1x1.png">
 
 <!-- [[[ test_2d.pattern.repeat.null.html ]]] -->
 
 <p>Canvas test: 2d.pattern.repeat.null</p>
-<canvas height="50" id="c435" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c474" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_repeat_null() {
 
-var canvas = document.getElementById('c435');
+var canvas = document.getElementById('c474');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 var img = document.getElementById('green-1x1_2.png');
 var pattern = ctx.createPattern(img, null);
 ctx.fillStyle = pattern;
 ctx.fillRect(0, 0, 100, 50);
@@ -13323,80 +14281,80 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 <img class="resource" id="green-1x1_2.png" src="image_green-1x1.png">
 
 <!-- [[[ test_2d.pattern.repeat.nullsuffix.html ]]] -->
 
 <p>Canvas test: 2d.pattern.repeat.nullsuffix</p>
-<canvas height="50" id="c436" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c475" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_repeat_nullsuffix() {
 
-var canvas = document.getElementById('c436');
+var canvas = document.getElementById('c475');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   ctx.createPattern(canvas, "repeat\0");
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.SYNTAX_ERR, "should throw SYNTAX_ERR");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.pattern.repeat.undefined.html ]]] -->
 
 <p>Canvas test: 2d.pattern.repeat.undefined</p>
-<canvas height="50" id="c437" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c476" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_repeat_undefined() {
 
-var canvas = document.getElementById('c437');
+var canvas = document.getElementById('c476');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   ctx.createPattern(canvas, undefined);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.SYNTAX_ERR, "should throw SYNTAX_ERR");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.pattern.repeat.unrecognised.html ]]] -->
 
 <p>Canvas test: 2d.pattern.repeat.unrecognised</p>
-<canvas height="50" id="c438" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c477" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_repeat_unrecognised() {
 
-var canvas = document.getElementById('c438');
+var canvas = document.getElementById('c477');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   ctx.createPattern(canvas, "invalid");
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.code == DOMException.SYNTAX_ERR, "should throw SYNTAX_ERR");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.scaled.html ]]] -->
 
 <p>Canvas test: 2d.scaled</p>
 <!-- Testing: CSS-scaled canvases get drawn correctly -->
-<canvas height="25" id="c439" style="width: 100px; height: 50px" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="25" id="c478" style="width: 100px; height: 50px" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_scaled() {
 
-var canvas = document.getElementById('c439');
+var canvas = document.getElementById('c478');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#00f';
 ctx.fillRect(0, 0, 50, 25);
 ctx.fillStyle = '#0ff';
 ctx.fillRect(0, 0, 25, 10);
 
 todo(false, "test completed successfully"); // (Bug 483989)
@@ -13404,22 +14362,22 @@ todo(false, "test completed successfully
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.alpha.1.html ]]] -->
 
 <p>Canvas test: 2d.shadow.alpha.1</p>
 <!-- Testing: Shadow colour alpha components are used -->
-<canvas height="50" id="c440" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c479" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_alpha_1() {
 
-var canvas = document.getElementById('c440');
+var canvas = document.getElementById('c479');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.shadowColor = 'rgba(255, 0, 0, 0.01)';
 ctx.shadowOffsetY = 50;
 ctx.fillRect(0, -50, 100, 50);
 
@@ -13428,22 +14386,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 4);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.alpha.2.html ]]] -->
 
 <p>Canvas test: 2d.shadow.alpha.2</p>
 <!-- Testing: Shadow colour alpha components are used -->
-<canvas height="50" id="c441" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c480" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_alpha_2() {
 
-var canvas = document.getElementById('c441');
+var canvas = document.getElementById('c480');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.shadowColor = 'rgba(0, 0, 255, 0.5)';
 ctx.shadowOffsetY = 50;
 ctx.fillRect(0, -50, 100, 50);
 
@@ -13452,22 +14410,22 @@ isPixel(ctx, 50,25, 127,0,127,255, 2);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.alpha.3.html ]]] -->
 
 <p>Canvas test: 2d.shadow.alpha.3</p>
 <!-- Testing: Shadows are affected by globalAlpha -->
-<canvas height="50" id="c442" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c481" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_alpha_3() {
 
-var canvas = document.getElementById('c442');
+var canvas = document.getElementById('c481');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#f00'; // (work around broken Firefox globalAlpha caching)
 ctx.shadowColor = '#00f';
 ctx.shadowOffsetY = 50;
 ctx.globalAlpha = 0.5;
@@ -13478,22 +14436,22 @@ isPixel(ctx, 50,25, 127,0,127,255, 2);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.alpha.4.html ]]] -->
 
 <p>Canvas test: 2d.shadow.alpha.4</p>
 <!-- Testing: Shadows with alpha components are correctly affected by globalAlpha -->
-<canvas height="50" id="c443" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c482" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_alpha_4() {
 
-var canvas = document.getElementById('c443');
+var canvas = document.getElementById('c482');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#f00'; // (work around broken Firefox globalAlpha caching)
 ctx.shadowColor = 'rgba(0, 0, 255, 0.707)';
 ctx.shadowOffsetY = 50;
 ctx.globalAlpha = 0.707;
@@ -13504,22 +14462,22 @@ isPixel(ctx, 50,25, 127,0,127,255, 2);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.alpha.5.html ]]] -->
 
 <p>Canvas test: 2d.shadow.alpha.5</p>
 <!-- Testing: Shadows of shapes with alpha components are drawn correctly -->
-<canvas height="50" id="c444" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c483" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_alpha_5() {
 
-var canvas = document.getElementById('c444');
+var canvas = document.getElementById('c483');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = 'rgba(64, 0, 0, 0.5)';
 ctx.shadowColor = '#00f';
 ctx.shadowOffsetY = 50;
 ctx.fillRect(0, -50, 100, 50);
@@ -13528,39 +14486,39 @@ isPixel(ctx, 50,25, 127,0,127,255, 2);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.attributes.shadowBlur.initial.html ]]] -->
 
 <p>Canvas test: 2d.shadow.attributes.shadowBlur.initial</p>
-<canvas height="50" id="c445" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c484" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_attributes_shadowBlur_initial() {
 
-var canvas = document.getElementById('c445');
+var canvas = document.getElementById('c484');
 var ctx = canvas.getContext('2d');
 
 ok(ctx.shadowBlur === 0, "ctx.shadowBlur === 0");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.attributes.shadowBlur.invalid.html ]]] -->
 
 <p>Canvas test: 2d.shadow.attributes.shadowBlur.invalid</p>
-<canvas height="50" id="c446" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c485" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_attributes_shadowBlur_invalid() {
 
-var canvas = document.getElementById('c446');
+var canvas = document.getElementById('c485');
 var ctx = canvas.getContext('2d');
 
 ctx.shadowBlur = 1;
 ctx.shadowBlur = -2;
 ok(ctx.shadowBlur === 1, "ctx.shadowBlur === 1");
 
 ctx.shadowBlur = 1;
 ctx.shadowBlur = Infinity;
@@ -13576,22 +14534,22 @@ ok(ctx.shadowBlur === 1, "ctx.shadowBlur
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.attributes.shadowBlur.valid.html ]]] -->
 
 <p>Canvas test: 2d.shadow.attributes.shadowBlur.valid</p>
-<canvas height="50" id="c447" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c486" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_attributes_shadowBlur_valid() {
 
-var canvas = document.getElementById('c447');
+var canvas = document.getElementById('c486');
 var ctx = canvas.getContext('2d');
 
 ctx.shadowBlur = 1;
 ok(ctx.shadowBlur === 1, "ctx.shadowBlur === 1");
 
 ctx.shadowBlur = 0.5;
 ok(ctx.shadowBlur === 0.5, "ctx.shadowBlur === 0.5");
 
@@ -13603,39 +14561,39 @@ ok(ctx.shadowBlur === 0, "ctx.shadowBlur
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.attributes.shadowColor.initial.html ]]] -->
 
 <p>Canvas test: 2d.shadow.attributes.shadowColor.initial</p>
-<canvas height="50" id="c448" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c487" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_attributes_shadowColor_initial() {
 
-var canvas = document.getElementById('c448');
+var canvas = document.getElementById('c487');
 var ctx = canvas.getContext('2d');
 
 ok(ctx.shadowColor === 'rgba(0, 0, 0, 0)', "ctx.shadowColor === 'rgba(0, 0, 0, 0)'");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.attributes.shadowColor.invalid.html ]]] -->
 
 <p>Canvas test: 2d.shadow.attributes.shadowColor.invalid</p>
-<canvas height="50" id="c449" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c488" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_attributes_shadowColor_invalid() {
 
-var canvas = document.getElementById('c449');
+var canvas = document.getElementById('c488');
 var ctx = canvas.getContext('2d');
 
 ctx.shadowColor = '#00ff00';
 ctx.shadowColor = 'bogus';
 ok(ctx.shadowColor === '#00ff00', "ctx.shadowColor === '#00ff00'");
 
 ctx.shadowColor = '#00ff00';
 ctx.shadowColor = 'red bogus';
@@ -13651,61 +14609,61 @@ ok(ctx.shadowColor === '#00ff00', "ctx.s
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.attributes.shadowColor.valid.html ]]] -->
 
 <p>Canvas test: 2d.shadow.attributes.shadowColor.valid</p>
-<canvas height="50" id="c450" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c489" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_attributes_shadowColor_valid() {
 
-var canvas = document.getElementById('c450');
+var canvas = document.getElementById('c489');
 var ctx = canvas.getContext('2d');
 
 ctx.shadowColor = 'lime';
 ok(ctx.shadowColor === '#00ff00', "ctx.shadowColor === '#00ff00'");
 
 ctx.shadowColor = 'RGBA(0,255, 0,0)';
 ok(ctx.shadowColor === 'rgba(0, 255, 0, 0)', "ctx.shadowColor === 'rgba(0, 255, 0, 0)'");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.attributes.shadowOffset.initial.html ]]] -->
 
 <p>Canvas test: 2d.shadow.attributes.shadowOffset.initial</p>
-<canvas height="50" id="c451" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c490" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_attributes_shadowOffset_initial() {
 
-var canvas = document.getElementById('c451');
+var canvas = document.getElementById('c490');
 var ctx = canvas.getContext('2d');
 
 ok(ctx.shadowOffsetX === 0, "ctx.shadowOffsetX === 0");
 ok(ctx.shadowOffsetY === 0, "ctx.shadowOffsetY === 0");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.attributes.shadowOffset.invalid.html ]]] -->
 
 <p>Canvas test: 2d.shadow.attributes.shadowOffset.invalid</p>
-<canvas height="50" id="c452" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c491" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_attributes_shadowOffset_invalid() {
 
-var canvas = document.getElementById('c452');
+var canvas = document.getElementById('c491');
 var ctx = canvas.getContext('2d');
 
 ctx.shadowOffsetX = 1;
 ctx.shadowOffsetY = 2;
 ctx.shadowOffsetX = Infinity;
 ctx.shadowOffsetY = Infinity;
 ok(ctx.shadowOffsetX === 1, "ctx.shadowOffsetX === 1");
 ok(ctx.shadowOffsetY === 2, "ctx.shadowOffsetY === 2");
@@ -13726,22 +14684,22 @@ ok(ctx.shadowOffsetY === 2, "ctx.shadowO
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.attributes.shadowOffset.valid.html ]]] -->
 
 <p>Canvas test: 2d.shadow.attributes.shadowOffset.valid</p>
-<canvas height="50" id="c453" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c492" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_attributes_shadowOffset_valid() {
 
-var canvas = document.getElementById('c453');
+var canvas = document.getElementById('c492');
 var ctx = canvas.getContext('2d');
 
 ctx.shadowOffsetX = 1;
 ctx.shadowOffsetY = 2;
 ok(ctx.shadowOffsetX === 1, "ctx.shadowOffsetX === 1");
 ok(ctx.shadowOffsetY === 2, "ctx.shadowOffsetY === 2");
 
 ctx.shadowOffsetX = 0.5;
@@ -13767,22 +14725,22 @@ ok(ctx.shadowOffsetY === 1e6, "ctx.shado
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.blur.high.html ]]] -->
 
 <p>Canvas test: 2d.shadow.blur.high</p>
 <!-- Testing: Shadows look correct for large blurs -->
-<canvas height="50" id="c454" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c493" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_blur_high() {
 
-var canvas = document.getElementById('c454');
+var canvas = document.getElementById('c493');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#ff0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.shadowColor = '#00f';
 ctx.shadowOffsetY = 0;
 ctx.shadowBlur = 100;
 ctx.fillRect(-200, -200, 200, 400);
@@ -13792,22 +14750,22 @@ todo(false, "test completed successfully
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.blur.low.html ]]] -->
 
 <p>Canvas test: 2d.shadow.blur.low</p>
 <!-- Testing: Shadows look correct for small blurs -->
-<canvas height="50" id="c455" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c494" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_blur_low() {
 
-var canvas = document.getElementById('c455');
+var canvas = document.getElementById('c494');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#ff0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.shadowColor = '#00f';
 ctx.shadowOffsetY = 25;
 for (var x = 0; x < 100; ++x) {
     ctx.save();
@@ -13824,22 +14782,22 @@ todo(false, "test completed successfully
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.canvas.alpha.html ]]] -->
 
 <p>Canvas test: 2d.shadow.canvas.alpha</p>
 <!-- Testing: Shadows are drawn correctly for partially-transparent canvases -->
-<canvas height="50" id="c456" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c495" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_canvas_alpha() {
 
-var canvas = document.getElementById('c456');
+var canvas = document.getElementById('c495');
 var ctx = canvas.getContext('2d');
 
 var canvas2 = document.createElement('canvas');
 canvas2.width = 100;
 canvas2.height = 50;
 var ctx2 = canvas2.getContext('2d');
 ctx2.fillStyle = 'rgba(255, 0, 0, 0.5)';
 ctx2.fillRect(0, 0, 100, 50);
@@ -13856,22 +14814,22 @@ isPixel(ctx, 50,25, 127,0,127,255, 2);
 }
 </script>
 <img class="resource" id="transparent50_1.png" src="image_transparent50.png">
 
 <!-- [[[ test_2d.shadow.canvas.basic.html ]]] -->
 
 <p>Canvas test: 2d.shadow.canvas.basic</p>
 <!-- Testing: Shadows are drawn for canvases -->
-<canvas height="50" id="c457" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c496" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_canvas_basic() {
 
-var canvas = document.getElementById('c457');
+var canvas = document.getElementById('c496');
 var ctx = canvas.getContext('2d');
 
 var canvas2 = document.createElement('canvas');
 canvas2.width = 100;
 canvas2.height = 50;
 var ctx2 = canvas2.getContext('2d');
 ctx2.fillStyle = '#f00';
 ctx2.fillRect(0, 0, 100, 50);
@@ -13887,22 +14845,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.canvas.transparent.1.html ]]] -->
 
 <p>Canvas test: 2d.shadow.canvas.transparent.1</p>
 <!-- Testing: Shadows are not drawn for transparent canvases -->
-<canvas height="50" id="c458" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c497" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_canvas_transparent_1() {
 
-var canvas = document.getElementById('c458');
+var canvas = document.getElementById('c497');
 var ctx = canvas.getContext('2d');
 
 var canvas2 = document.createElement('canvas');
 canvas2.width = 100;
 canvas2.height = 50;
 var ctx2 = canvas2.getContext('2d');
 
 ctx.fillStyle = '#0f0';
@@ -13916,22 +14874,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.canvas.transparent.2.html ]]] -->
 
 <p>Canvas test: 2d.shadow.canvas.transparent.2</p>
 <!-- Testing: Shadows are not drawn for transparent parts of canvases -->
-<canvas height="50" id="c459" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c498" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_canvas_transparent_2() {
 
-var canvas = document.getElementById('c459');
+var canvas = document.getElementById('c498');
 var ctx = canvas.getContext('2d');
 
 var canvas2 = document.createElement('canvas');
 canvas2.width = 100;
 canvas2.height = 50;
 var ctx2 = canvas2.getContext('2d');
 ctx2.fillStyle = '#f00';
 ctx2.fillRect(0, 0, 50, 50);
@@ -13953,22 +14911,22 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.clip.1.html ]]] -->
 
 <p>Canvas test: 2d.shadow.clip.1</p>
 <!-- Testing: Shadows of clipped shapes are still drawn within the clipping region -->
-<canvas height="50" id="c460" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c499" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_clip_1() {
 
-var canvas = document.getElementById('c460');
+var canvas = document.getElementById('c499');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 50, 50);
 ctx.fillStyle = '#f00';
 ctx.fillRect(50, 0, 50, 50);
 
 ctx.save();
@@ -13986,22 +14944,22 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.clip.2.html ]]] -->
 
 <p>Canvas test: 2d.shadow.clip.2</p>
 <!-- Testing: Shadows are not drawn outside the clipping region -->
-<canvas height="50" id="c461" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c500" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_clip_2() {
 
-var canvas = document.getElementById('c461');
+var canvas = document.getElementById('c500');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 50, 50);
 ctx.fillStyle = '#0f0';
 ctx.fillRect(50, 0, 50, 50);
 
 ctx.save();
@@ -14019,22 +14977,22 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.clip.3.html ]]] -->
 
 <p>Canvas test: 2d.shadow.clip.3</p>
 <!-- Testing: Shadows of clipped shapes are still drawn within the clipping region -->
-<canvas height="50" id="c462" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c501" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_clip_3() {
 
-var canvas = document.getElementById('c462');
+var canvas = document.getElementById('c501');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 50, 50);
 ctx.fillStyle = '#0f0';
 ctx.fillRect(50, 0, 50, 50);
 
 ctx.save();
@@ -14053,22 +15011,22 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.composite.1.html ]]] -->
 
 <p>Canvas test: 2d.shadow.composite.1</p>
 <!-- Testing: Shadows are drawn using globalCompositeOperation -->
-<canvas height="50" id="c463" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c502" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_composite_1() {
 
-var canvas = document.getElementById('c463');
+var canvas = document.getElementById('c502');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.globalCompositeOperation = 'xor';
 ctx.shadowColor = '#f00';
 ctx.shadowOffsetX = 100;
 ctx.fillStyle = '#0f0';
@@ -14079,91 +15037,160 @@ isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.composite.2.html ]]] -->
 
 <p>Canvas test: 2d.shadow.composite.2</p>
 <!-- Testing: Shadows are drawn using globalCompositeOperation -->
-<canvas height="50" id="c464" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c503" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_composite_2() {
 
-var canvas = document.getElementById('c464');
+var canvas = document.getElementById('c503');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.globalCompositeOperation = 'xor';
 ctx.shadowColor = '#f00';
 ctx.shadowBlur = 1;
 ctx.fillStyle = '#0f0';
 ctx.fillRect(-10, -10, 120, 70);
 
 isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 
 }
 </script>
 
+<!-- [[[ test_2d.shadow.enable.blur.html ]]] -->
+
+<p>Canvas test: 2d.shadow.enable.blur</p>
+<!-- Testing: Shadows are drawn if shadowBlur is set -->
+<canvas height="50" id="c504" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_shadow_enable_blur() {
+
+var canvas = document.getElementById('c504');
+var ctx = canvas.getContext('2d');
+
+ctx.globalCompositeOperation = 'destination-atop';
+ctx.shadowColor = '#0f0';
+ctx.shadowBlur = 0.1;
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+
+
+}
+</script>
+
 <!-- [[[ test_2d.shadow.enable.off.1.html ]]] -->
 
 <p>Canvas test: 2d.shadow.enable.off.1</p>
 <!-- Testing: Shadows are not drawn when only shadowColor is set -->
-<canvas height="50" id="c465" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c505" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_enable_off_1() {
 
-var canvas = document.getElementById('c465');
+var canvas = document.getElementById('c505');
 var ctx = canvas.getContext('2d');
 
 ctx.shadowColor = '#f00';
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.enable.off.2.html ]]] -->
 
 <p>Canvas test: 2d.shadow.enable.off.2</p>
 <!-- Testing: Shadows are not drawn when only shadowColor is set -->
-<canvas height="50" id="c466" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c506" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_enable_off_2() {
 
-var canvas = document.getElementById('c466');
+var canvas = document.getElementById('c506');
 var ctx = canvas.getContext('2d');
 
 ctx.globalCompositeOperation = 'destination-atop';
 ctx.shadowColor = '#f00';
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
+<!-- [[[ test_2d.shadow.enable.x.html ]]] -->
+
+<p>Canvas test: 2d.shadow.enable.x</p>
+<!-- Testing: Shadows are drawn if shadowOffsetX is set -->
+<canvas height="50" id="c507" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_shadow_enable_x() {
+
+var canvas = document.getElementById('c507');
+var ctx = canvas.getContext('2d');
+
+ctx.globalCompositeOperation = 'destination-atop';
+ctx.shadowColor = '#0f0';
+ctx.shadowOffsetX = 0.1;
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+
+
+}
+</script>
+
+<!-- [[[ test_2d.shadow.enable.y.html ]]] -->
+
+<p>Canvas test: 2d.shadow.enable.y</p>
+<!-- Testing: Shadows are drawn if shadowOffsetY is set -->
+<canvas height="50" id="c508" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_shadow_enable_y() {
+
+var canvas = document.getElementById('c508');
+var ctx = canvas.getContext('2d');
+
+ctx.globalCompositeOperation = 'destination-atop';
+ctx.shadowColor = '#0f0';
+ctx.shadowOffsetY = 0.1;
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+
+
+}
+</script>
+
 <!-- [[[ test_2d.shadow.gradient.alpha.html ]]] -->
 
 <p>Canvas test: 2d.shadow.gradient.alpha</p>
 <!-- Testing: Shadows are drawn correctly for partially-transparent gradient fills -->
-<canvas height="50" id="c467" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c509" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_gradient_alpha() {
 
-var canvas = document.getElementById('c467');
+var canvas = document.getElementById('c509');
 var ctx = canvas.getContext('2d');
 
 var gradient = ctx.createLinearGradient(0, 0, 100, 0);
 gradient.addColorStop(0, 'rgba(255,0,0,0.5)');
 gradient.addColorStop(1, 'rgba(255,0,0,0.5)');
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.shadowOffsetY = 50;
@@ -14176,22 +15203,22 @@ isPixel(ctx, 50,25, 127,0,127,255, 2);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.gradient.basic.html ]]] -->
 
 <p>Canvas test: 2d.shadow.gradient.basic</p>
 <!-- Testing: Shadows are drawn for gradient fills -->
-<canvas height="50" id="c468" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c510" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_gradient_basic() {
 
-var canvas = document.getElementById('c468');
+var canvas = document.getElementById('c510');
 var ctx = canvas.getContext('2d');
 
 var gradient = ctx.createLinearGradient(0, 0, 100, 0);
 gradient.addColorStop(0, '#f00');
 gradient.addColorStop(1, '#f00');
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.shadowColor = '#0f0';
@@ -14204,22 +15231,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.gradient.transparent.1.html ]]] -->
 
 <p>Canvas test: 2d.shadow.gradient.transparent.1</p>
 <!-- Testing: Shadows are not drawn for transparent gradient fills -->
-<canvas height="50" id="c469" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c511" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_gradient_transparent_1() {
 
-var canvas = document.getElementById('c469');
+var canvas = document.getElementById('c511');
 var ctx = canvas.getContext('2d');
 
 var gradient = ctx.createLinearGradient(0, 0, 100, 0);
 gradient.addColorStop(0, 'rgba(0,0,0,0)');
 gradient.addColorStop(1, 'rgba(0,0,0,0)');
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.shadowColor = '#f00';
@@ -14232,22 +15259,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.gradient.transparent.2.html ]]] -->
 
 <p>Canvas test: 2d.shadow.gradient.transparent.2</p>
 <!-- Testing: Shadows are not drawn for transparent parts of gradient fills -->
-<canvas height="50" id="c470" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c512" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_gradient_transparent_2() {
 
-var canvas = document.getElementById('c470');
+var canvas = document.getElementById('c512');
 var ctx = canvas.getContext('2d');
 
 var gradient = ctx.createLinearGradient(0, 0, 100, 0);
 gradient.addColorStop(0, '#f00');
 gradient.addColorStop(0.499, '#f00');
 gradient.addColorStop(0.5, 'rgba(0,0,0,0)');
 gradient.addColorStop(1, 'rgba(0,0,0,0)');
 ctx.fillStyle = '#f00';
@@ -14266,22 +15293,22 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.image.alpha.html ]]] -->
 
 <p>Canvas test: 2d.shadow.image.alpha</p>
 <!-- Testing: Shadows are drawn correctly for partially-transparent images -->
-<canvas height="50" id="c471" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c513" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_image_alpha() {
 
-var canvas = document.getElementById('c471');
+var canvas = document.getElementById('c513');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.shadowOffsetY = 50;
 ctx.shadowColor = '#00f';
 ctx.drawImage(document.getElementById('transparent50_2.png'), 0, -50);
 
@@ -14291,47 +15318,47 @@ isPixel(ctx, 50,25, 127,0,127,255, 2);
 }
 </script>
 <img class="resource" id="transparent50_2.png" src="image_transparent50.png">
 
 <!-- [[[ test_2d.shadow.image.basic.html ]]] -->
 
 <p>Canvas test: 2d.shadow.image.basic</p>
 <!-- Testing: Shadows are drawn for images -->
-<canvas height="50" id="c472" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c514" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_image_basic() {
 
-var canvas = document.getElementById('c472');
+var canvas = document.getElementById('c514');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.shadowColor = '#0f0';
 ctx.shadowOffsetY = 50;
-ctx.drawImage(document.getElementById('red_18.png'), 0, -50);
-
-isPixel(ctx, 50,25, 0,255,0,255, 0);
-
-
-}
-</script>
-<img class="resource" id="red_18.png" src="image_red.png">
+ctx.drawImage(document.getElementById('red_24.png'), 0, -50);
+
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+
+
+}
+</script>
+<img class="resource" id="red_24.png" src="image_red.png">
 
 <!-- [[[ test_2d.shadow.image.scale.html ]]] -->
 
 <p>Canvas test: 2d.shadow.image.scale</p>
 <!-- Testing: Shadows are drawn correctly for scaled images -->
-<canvas height="50" id="c473" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c515" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_image_scale() {
 
-var canvas = document.getElementById('c473');
+var canvas = document.getElementById('c515');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.shadowOffsetY = 50;
 ctx.shadowColor = '#0f0';
 ctx.drawImage(document.getElementById('redtransparent_2.png'), 0, 0, 100, 50, -10, -50, 240, 50);
 
@@ -14343,22 +15370,22 @@ isPixel(ctx, 75,25, 0,255,0,255, 2);
 }
 </script>
 <img class="resource" id="redtransparent_2.png" src="image_redtransparent.png">
 
 <!-- [[[ test_2d.shadow.image.section.html ]]] -->
 
 <p>Canvas test: 2d.shadow.image.section</p>
 <!-- Testing: Shadows are not drawn for areas outside image source rectangles -->
-<canvas height="50" id="c474" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c516" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_image_section() {
 
-var canvas = document.getElementById('c474');
+var canvas = document.getElementById('c516');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.shadowOffsetY = 50;
 ctx.shadowColor = '#f00';
 ctx.drawImage(document.getElementById('redtransparent_3.png'), 50, 0, 50, 50, 0, -50, 50, 50);
 
@@ -14370,22 +15397,22 @@ isPixel(ctx, 75,25, 0,255,0,255, 2);
 }
 </script>
 <img class="resource" id="redtransparent_3.png" src="image_redtransparent.png">
 
 <!-- [[[ test_2d.shadow.image.transparent.1.html ]]] -->
 
 <p>Canvas test: 2d.shadow.image.transparent.1</p>
 <!-- Testing: Shadows are not drawn for transparent images -->
-<canvas height="50" id="c475" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c517" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_image_transparent_1() {
 
-var canvas = document.getElementById('c475');
+var canvas = document.getElementById('c517');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.shadowColor = '#f00';
 ctx.shadowOffsetY = 50;
 ctx.drawImage(document.getElementById('transparent_1.png'), 0, -50);
 
@@ -14395,22 +15422,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 }
 </script>
 <img class="resource" id="transparent_1.png" src="image_transparent.png">
 
 <!-- [[[ test_2d.shadow.image.transparent.2.html ]]] -->
 
 <p>Canvas test: 2d.shadow.image.transparent.2</p>
 <!-- Testing: Shadows are not drawn for transparent parts of images -->
-<canvas height="50" id="c476" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c518" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_image_transparent_2() {
 
-var canvas = document.getElementById('c476');
+var canvas = document.getElementById('c518');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 50, 50);
 ctx.fillStyle = '#f00';
 ctx.fillRect(50, 0, 50, 50);
 ctx.shadowOffsetY = 50;
 ctx.shadowColor = '#0f0';
@@ -14426,22 +15453,22 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 }
 </script>
 <img class="resource" id="redtransparent_4.png" src="image_redtransparent.png">
 
 <!-- [[[ test_2d.shadow.offset.negativeX.html ]]] -->
 
 <p>Canvas test: 2d.shadow.offset.negativeX</p>
 <!-- Testing: Shadows can be offset with negative x -->
-<canvas height="50" id="c477" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c519" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_offset_negativeX() {
 
-var canvas = document.getElementById('c477');
+var canvas = document.getElementById('c519');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#0f0';
 ctx.shadowColor = '#0f0';
 ctx.shadowOffsetX = -50;
 ctx.fillRect(50, 0, 50, 50);
@@ -14451,22 +15478,22 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.offset.negativeY.html ]]] -->
 
 <p>Canvas test: 2d.shadow.offset.negativeY</p>
 <!-- Testing: Shadows can be offset with negative y -->
-<canvas height="50" id="c478" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c520" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_offset_negativeY() {
 
-var canvas = document.getElementById('c478');
+var canvas = document.getElementById('c520');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#0f0';
 ctx.shadowColor = '#0f0';
 ctx.shadowOffsetY = -25;
 ctx.fillRect(0, 25, 100, 25);
@@ -14476,22 +15503,22 @@ isPixel(ctx, 50,37, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.offset.positiveX.html ]]] -->
 
 <p>Canvas test: 2d.shadow.offset.positiveX</p>
 <!-- Testing: Shadows can be offset with positive x -->
-<canvas height="50" id="c479" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c521" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_offset_positiveX() {
 
-var canvas = document.getElementById('c479');
+var canvas = document.getElementById('c521');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#0f0';
 ctx.shadowColor = '#0f0';
 ctx.shadowOffsetX = 50;
 ctx.fillRect(0, 0, 50, 50);
@@ -14501,22 +15528,22 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.offset.positiveY.html ]]] -->
 
 <p>Canvas test: 2d.shadow.offset.positiveY</p>
 <!-- Testing: Shadows can be offset with positive y -->
-<canvas height="50" id="c480" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c522" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_offset_positiveY() {
 
-var canvas = document.getElementById('c480');
+var canvas = document.getElementById('c522');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#0f0';
 ctx.shadowColor = '#0f0';
 ctx.shadowOffsetY = 25;
 ctx.fillRect(0, 0, 100, 25);
@@ -14526,22 +15553,22 @@ isPixel(ctx, 50,37, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.outside.html ]]] -->
 
 <p>Canvas test: 2d.shadow.outside</p>
 <!-- Testing: Shadows of shapes outside the visible area can be offset onto the visible area -->
-<canvas height="50" id="c481" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c523" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_outside() {
 
-var canvas = document.getElementById('c481');
+var canvas = document.getElementById('c523');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.shadowColor = '#0f0';
 ctx.shadowOffsetX = 100;
 ctx.fillRect(-100, 0, 25, 50);
 ctx.shadowOffsetX = -100;
@@ -14559,22 +15586,22 @@ isPixel(ctx, 50,37, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.pattern.alpha.html ]]] -->
 
 <p>Canvas test: 2d.shadow.pattern.alpha</p>
 <!-- Testing: Shadows are drawn correctly for partially-transparent fill patterns -->
-<canvas height="50" id="c482" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c524" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_pattern_alpha() {
 
-var canvas = document.getElementById('c482');
+var canvas = document.getElementById('c524');
 var ctx = canvas.getContext('2d');
 
 var pattern = ctx.createPattern(document.getElementById('transparent50_3.png'), 'repeat');
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.shadowOffsetY = 50;
 ctx.shadowColor = '#00f';
 ctx.fillStyle = pattern;
@@ -14586,49 +15613,49 @@ isPixel(ctx, 50,25, 127,0,127,255, 2);
 }
 </script>
 <img class="resource" id="transparent50_3.png" src="image_transparent50.png">
 
 <!-- [[[ test_2d.shadow.pattern.basic.html ]]] -->
 
 <p>Canvas test: 2d.shadow.pattern.basic</p>
 <!-- Testing: Shadows are drawn for fill patterns -->
-<canvas height="50" id="c483" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c525" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_pattern_basic() {
 
-var canvas = document.getElementById('c483');
-var ctx = canvas.getContext('2d');
-
-var pattern = ctx.createPattern(document.getElementById('red_19.png'), 'repeat');
+var canvas = document.getElementById('c525');
+var ctx = canvas.getContext('2d');
+
+var pattern = ctx.createPattern(document.getElementById('red_25.png'), 'repeat');
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.shadowColor = '#0f0';
 ctx.shadowOffsetY = 50;
 ctx.fillStyle = pattern;
 ctx.fillRect(0, -50, 100, 50);
 
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
-<img class="resource" id="red_19.png" src="image_red.png">
+<img class="resource" id="red_25.png" src="image_red.png">
 
 <!-- [[[ test_2d.shadow.pattern.transparent.1.html ]]] -->
 
 <p>Canvas test: 2d.shadow.pattern.transparent.1</p>
 <!-- Testing: Shadows are not drawn for transparent fill patterns -->
-<canvas height="50" id="c484" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c526" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_pattern_transparent_1() {
 
-var canvas = document.getElementById('c484');
+var canvas = document.getElementById('c526');
 var ctx = canvas.getContext('2d');
 
 var pattern = ctx.createPattern(document.getElementById('transparent_2.png'), 'repeat');
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.shadowColor = '#f00';
 ctx.shadowOffsetY = 50;
 ctx.fillStyle = pattern;
@@ -14640,22 +15667,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 }
 </script>
 <img class="resource" id="transparent_2.png" src="image_transparent.png">
 
 <!-- [[[ test_2d.shadow.pattern.transparent.2.html ]]] -->
 
 <p>Canvas test: 2d.shadow.pattern.transparent.2</p>
 <!-- Testing: Shadows are not drawn for transparent parts of fill patterns -->
-<canvas height="50" id="c485" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c527" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_pattern_transparent_2() {
 
-var canvas = document.getElementById('c485');
+var canvas = document.getElementById('c527');
 var ctx = canvas.getContext('2d');
 
 var pattern = ctx.createPattern(document.getElementById('redtransparent_5.png'), 'repeat');
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 50, 50);
 ctx.fillStyle = '#0f0';
 ctx.fillRect(50, 0, 50, 50);
 ctx.shadowOffsetY = 50;
@@ -14671,22 +15698,22 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 }
 </script>
 <img class="resource" id="redtransparent_5.png" src="image_redtransparent.png">
 
 <!-- [[[ test_2d.shadow.stroke.basic.html ]]] -->
 
 <p>Canvas test: 2d.shadow.stroke.basic</p>
 <!-- Testing: Shadows are drawn for strokes -->
-<canvas height="50" id="c486" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c528" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_stroke_basic() {
 
-var canvas = document.getElementById('c486');
+var canvas = document.getElementById('c528');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#f00';
 ctx.shadowColor = '#0f0';
 ctx.shadowOffsetY = 50;
 ctx.beginPath();
@@ -14702,22 +15729,22 @@ isPixel(ctx, 98,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.stroke.cap.1.html ]]] -->
 
 <p>Canvas test: 2d.shadow.stroke.cap.1</p>
 <!-- Testing: Shadows are not drawn for areas outside stroke caps -->
-<canvas height="50" id="c487" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c529" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_stroke_cap_1() {
 
-var canvas = document.getElementById('c487');
+var canvas = document.getElementById('c529');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#f00';
 ctx.shadowColor = '#f00';
 ctx.shadowOffsetY = 50;
 ctx.beginPath();
@@ -14736,22 +15763,22 @@ isPixel(ctx, 98,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.stroke.cap.2.html ]]] -->
 
 <p>Canvas test: 2d.shadow.stroke.cap.2</p>
 <!-- Testing: Shadows are drawn for stroke caps -->
-<canvas height="50" id="c488" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c530" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_stroke_cap_2() {
 
-var canvas = document.getElementById('c488');
+var canvas = document.getElementById('c530');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#f00';
 ctx.shadowColor = '#0f0';
 ctx.shadowOffsetY = 50;
 ctx.beginPath();
@@ -14768,22 +15795,22 @@ isPixel(ctx, 98,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.stroke.join.1.html ]]] -->
 
 <p>Canvas test: 2d.shadow.stroke.join.1</p>
 <!-- Testing: Shadows are not drawn for areas outside stroke joins -->
-<canvas height="50" id="c489" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c531" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_stroke_join_1() {
 
-var canvas = document.getElementById('c489');
+var canvas = document.getElementById('c531');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#f00';
 ctx.shadowColor = '#f00';
 ctx.shadowOffsetX = 100;
 ctx.lineWidth = 200;
@@ -14802,22 +15829,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.stroke.join.2.html ]]] -->
 
 <p>Canvas test: 2d.shadow.stroke.join.2</p>
 <!-- Testing: Shadows are drawn for stroke joins -->
-<canvas height="50" id="c490" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c532" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_stroke_join_2() {
 
-var canvas = document.getElementById('c490');
+var canvas = document.getElementById('c532');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 50, 50);
 ctx.fillStyle = '#0f0';
 ctx.fillRect(50, 0, 50, 50);
 ctx.strokeStyle = '#f00';
 ctx.shadowColor = '#0f0';
@@ -14838,22 +15865,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.stroke.join.3.html ]]] -->
 
 <p>Canvas test: 2d.shadow.stroke.join.3</p>
 <!-- Testing: Shadows are drawn for stroke joins respecting miter limit -->
-<canvas height="50" id="c491" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c533" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_stroke_join_3() {
 
-var canvas = document.getElementById('c491');
+var canvas = document.getElementById('c533');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#f00';
 ctx.shadowColor = '#f00';
 ctx.shadowOffsetX = 100;
 ctx.lineWidth = 200;
@@ -14873,22 +15900,22 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.transform.1.html ]]] -->
 
 <p>Canvas test: 2d.shadow.transform.1</p>
 <!-- Testing: Shadows take account of transformations -->
-<canvas height="50" id="c492" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c534" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_transform_1() {
 
-var canvas = document.getElementById('c492');
+var canvas = document.getElementById('c534');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.shadowOffsetY = 50;
 ctx.shadowColor = '#0f0';
 ctx.translate(100, 100);
 ctx.fillRect(-100, -150, 100, 50);
@@ -14898,22 +15925,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.transform.2.html ]]] -->
 
 <p>Canvas test: 2d.shadow.transform.2</p>
 <!-- Testing: Shadow offsets are not affected by transformations -->
-<canvas height="50" id="c493" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c535" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_transform_2() {
 
-var canvas = document.getElementById('c493');
+var canvas = document.getElementById('c535');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.shadowOffsetY = 50;
 ctx.shadowColor = '#0f0';
 ctx.rotate(Math.PI)
 ctx.fillRect(-100, 0, 100, 50);
@@ -14923,22 +15950,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.state.saverestore.bitmap.html ]]] -->
 
 <p>Canvas test: 2d.state.saverestore.bitmap</p>
 <!-- Testing: save()/restore() does not affect the current bitmap -->
-<canvas height="50" id="c494" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c536" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_state_saverestore_bitmap() {
 
-var canvas = document.getElementById('c494');
+var canvas = document.getElementById('c536');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.save();
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.restore();
@@ -14947,22 +15974,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.state.saverestore.clip.html ]]] -->
 
 <p>Canvas test: 2d.state.saverestore.clip</p>
 <!-- Testing: save()/restore() affects the clipping path -->
-<canvas height="50" id="c495" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c537" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_state_saverestore_clip() {
 
-var canvas = document.getElementById('c495');
+var canvas = document.getElementById('c537');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.save();
 ctx.rect(0, 0, 1, 1);
 ctx.clip();
 ctx.restore();
@@ -14973,22 +16000,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.state.saverestore.fillStyle.html ]]] -->
 
 <p>Canvas test: 2d.state.saverestore.fillStyle</p>
 <!-- Testing: save()/restore() works for fillStyle -->
-<canvas height="50" id="c496" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c538" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_state_saverestore_fillStyle() {
 
-var canvas = document.getElementById('c496');
+var canvas = document.getElementById('c538');
 var ctx = canvas.getContext('2d');
 
 // Test that restore() undoes any modifications
 var old = ctx.fillStyle;
 ctx.save();
 ctx.fillStyle = "#ff0000";
 ctx.restore();
 ok(ctx.fillStyle === old, "ctx.fillStyle === old");
@@ -15001,26 +16028,58 @@ old = ctx.fillStyle;
 ctx.save();
 ok(ctx.fillStyle === old, "ctx.fillStyle === old");
 ctx.restore();
 
 
 }
 </script>
 
+<!-- [[[ test_2d.state.saverestore.font.html ]]] -->
+
+<p>Canvas test: 2d.state.saverestore.font</p>
+<!-- Testing: save()/restore() works for font -->
+<canvas height="50" id="c539" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_state_saverestore_font() {
+
+var canvas = document.getElementById('c539');
+var ctx = canvas.getContext('2d');
+
+// Test that restore() undoes any modifications
+var old = ctx.font;
+ctx.save();
+ctx.font = "25px serif";
+ctx.restore();
+ok(ctx.font === old, "ctx.font === old");
+
+// Also test that save() doesn't modify the values
+ctx.font = "25px serif";
+old = ctx.font;
+    // we're not interested in failures caused by get(set(x)) != x (e.g.
+    // from rounding), so compare against 'old' instead of against "25px serif"
+ctx.save();
+ok(ctx.font === old, "ctx.font === old");
+ctx.restore();
+
+
+}
+</script>
+
 <!-- [[[ test_2d.state.saverestore.globalAlpha.html ]]] -->
 
 <p>Canvas test: 2d.state.saverestore.globalAlpha</p>
 <!-- Testing: save()/restore() works for globalAlpha -->
-<canvas height="50" id="c497" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c540" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_state_saverestore_globalAlpha() {
 
-var canvas = document.getElementById('c497');
+var canvas = document.getElementById('c540');
 var ctx = canvas.getContext('2d');
 
 // Test that restore() undoes any modifications
 var old = ctx.globalAlpha;
 ctx.save();
 ctx.globalAlpha = 0.5;
 ctx.restore();
 ok(ctx.globalAlpha === old, "ctx.globalAlpha === old");
@@ -15037,22 +16096,22 @@ ctx.restore();
 
 }
 </script>
 
 <!-- [[[ test_2d.state.saverestore.globalCompositeOperation.html ]]] -->
 
 <p>Canvas test: 2d.state.saverestore.globalCompositeOperation</p>
 <!-- Testing: save()/restore() works for globalCompositeOperation -->
-<canvas height="50" id="c498" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c541" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_state_saverestore_globalCompositeOperation() {
 
-var canvas = document.getElementById('c498');
+var canvas = document.getElementById('c541');
 var ctx = canvas.getContext('2d');
 
 // Test that restore() undoes any modifications
 var old = ctx.globalCompositeOperation;
 ctx.save();
 ctx.globalCompositeOperation = "copy";
 ctx.restore();
 ok(ctx.globalCompositeOperation === old, "ctx.globalCompositeOperation === old");
@@ -15069,22 +16128,22 @@ ctx.restore();
 
 }
 </script>
 
 <!-- [[[ test_2d.state.saverestore.lineCap.html ]]] -->
 
 <p>Canvas test: 2d.state.saverestore.lineCap</p>
 <!-- Testing: save()/restore() works for lineCap -->
-<canvas height="50" id="c499" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c542" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_state_saverestore_lineCap() {
 
-var canvas = document.getElementById('c499');
+var canvas = document.getElementById('c542');
 var ctx = canvas.getContext('2d');
 
 // Test that restore() undoes any modifications
 var old = ctx.lineCap;
 ctx.save();
 ctx.lineCap = "round";
 ctx.restore();
 ok(ctx.lineCap === old, "ctx.lineCap === old");
@@ -15101,22 +16160,22 @@ ctx.restore();
 
 }
 </script>
 
 <!-- [[[ test_2d.state.saverestore.lineJoin.html ]]] -->
 
 <p>Canvas test: 2d.state.saverestore.lineJoin</p>
 <!-- Testing: save()/restore() works for lineJoin -->
-<canvas height="50" id="c500" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c543" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_state_saverestore_lineJoin() {
 
-var canvas = document.getElementById('c500');
+var canvas = document.getElementById('c543');
 var ctx = canvas.getContext('2d');
 
 // Test that restore() undoes any modifications
 var old = ctx.lineJoin;
 ctx.save();
 ctx.lineJoin = "round";
 ctx.restore();
 ok(ctx.lineJoin === old, "ctx.lineJoin === old");
@@ -15133,22 +16192,22 @@ ctx.restore();
 
 }
 </script>
 
 <!-- [[[ test_2d.state.saverestore.lineWidth.html ]]] -->
 
 <p>Canvas test: 2d.state.saverestore.lineWidth</p>
 <!-- Testing: save()/restore() works for lineWidth -->
-<canvas height="50" id="c501" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c544" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_state_saverestore_lineWidth() {
 
-var canvas = document.getElementById('c501');
+var canvas = document.getElementById('c544');
 var ctx = canvas.getContext('2d');
 
 // Test that restore() undoes any modifications
 var old = ctx.lineWidth;
 ctx.save();
 ctx.lineWidth = 0.5;
 ctx.restore();
 ok(ctx.lineWidth === old, "ctx.lineWidth === old");
@@ -15165,22 +16224,22 @@ ctx.restore();
 
 }
 </script>
 
 <!-- [[[ test_2d.state.saverestore.miterLimit.html ]]] -->
 
 <p>Canvas test: 2d.state.saverestore.miterLimit</p>
 <!-- Testing: save()/restore() works for miterLimit -->
-<canvas height="50" id="c502" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c545" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_state_saverestore_miterLimit() {
 
-var canvas = document.getElementById('c502');
+var canvas = document.getElementById('c545');
 var ctx = canvas.getContext('2d');
 
 // Test that restore() undoes any modifications
 var old = ctx.miterLimit;
 ctx.save();
 ctx.miterLimit = 0.5;
 ctx.restore();
 ok(ctx.miterLimit === old, "ctx.miterLimit === old");
@@ -15197,22 +16256,22 @@ ctx.restore();
 
 }
 </script>
 
 <!-- [[[ test_2d.state.saverestore.path.html ]]] -->
 
 <p>Canvas test: 2d.state.saverestore.path</p>
 <!-- Testing: save()/restore() does not affect the current path -->
-<canvas height="50" id="c503" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c546" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_state_saverestore_path() {
 
-var canvas = document.getElementById('c503');
+var canvas = document.getElementById('c546');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.save();
 ctx.rect(0, 0, 100, 50);
 ctx.restore();
 ctx.fillStyle = '#0f0';
@@ -15222,22 +16281,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.state.saverestore.shadowBlur.html ]]] -->
 
 <p>Canvas test: 2d.state.saverestore.shadowBlur</p>
 <!-- Testing: save()/restore() works for shadowBlur -->
-<canvas height="50" id="c504" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c547" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_state_saverestore_shadowBlur() {
 
-var canvas = document.getElementById('c504');
+var canvas = document.getElementById('c547');
 var ctx = canvas.getContext('2d');
 
 // Test that restore() undoes any modifications
 var old = ctx.shadowBlur;
 ctx.save();
 ctx.shadowBlur = 5;
 ctx.restore();
 ok(ctx.shadowBlur === old, "ctx.shadowBlur === old");
@@ -15254,22 +16313,22 @@ ctx.restore();
 
 }
 </script>
 
 <!-- [[[ test_2d.state.saverestore.shadowColor.html ]]] -->
 
 <p>Canvas test: 2d.state.saverestore.shadowColor</p>
 <!-- Testing: save()/restore() works for shadowColor -->
-<canvas height="50" id="c505" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c548" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_state_saverestore_shadowColor() {
 
-var canvas = document.getElementById('c505');
+var canvas = document.getElementById('c548');
 var ctx = canvas.getContext('2d');
 
 // Test that restore() undoes any modifications
 var old = ctx.shadowColor;
 ctx.save();
 ctx.shadowColor = "#ff0000";
 ctx.restore();
 ok(ctx.shadowColor === old, "ctx.shadowColor === old");
@@ -15286,22 +16345,22 @@ ctx.restore();
 
 }
 </script>
 
 <!-- [[[ test_2d.state.saverestore.shadowOffsetX.html ]]] -->
 
 <p>Canvas test: 2d.state.saverestore.shadowOffsetX</p>
 <!-- Testing: save()/restore() works for shadowOffsetX -->
-<canvas height="50" id="c506" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c549" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_state_saverestore_shadowOffsetX() {
 
-var canvas = document.getElementById('c506');
+var canvas = document.getElementById('c549');
 var ctx = canvas.getContext('2d');
 
 // Test that restore() undoes any modifications
 var old = ctx.shadowOffsetX;
 ctx.save();
 ctx.shadowOffsetX = 5;
 ctx.restore();
 ok(ctx.shadowOffsetX === old, "ctx.shadowOffsetX === old");
@@ -15318,22 +16377,22 @@ ctx.restore();
 
 }
 </script>
 
 <!-- [[[ test_2d.state.saverestore.shadowOffsetY.html ]]] -->
 
 <p>Canvas test: 2d.state.saverestore.shadowOffsetY</p>
 <!-- Testing: save()/restore() works for shadowOffsetY -->
-<canvas height="50" id="c507" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c550" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_state_saverestore_shadowOffsetY() {
 
-var canvas = document.getElementById('c507');
+var canvas = document.getElementById('c550');
 var ctx = canvas.getContext('2d');
 
 // Test that restore() undoes any modifications
 var old = ctx.shadowOffsetY;
 ctx.save();
 ctx.shadowOffsetY = 5;
 ctx.restore();
 ok(ctx.shadowOffsetY === old, "ctx.shadowOffsetY === old");
@@ -15350,22 +16409,22 @@ ctx.restore();
 
 }
 </script>
 
 <!-- [[[ test_2d.state.saverestore.stack.html ]]] -->
 
 <p>Canvas test: 2d.state.saverestore.stack</p>
 <!-- Testing: save()/restore() can be nested as a stack -->
-<canvas height="50" id="c508" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c551" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_state_saverestore_stack() {
 
-var canvas = document.getElementById('c508');
+var canvas = document.getElementById('c551');
 var ctx = canvas.getContext('2d');
 
 ctx.lineWidth = 1;
 ctx.save();
 ctx.lineWidth = 2;
 ctx.save();
 ctx.lineWidth = 3;
 ok(ctx.lineWidth == 3, "ctx.lineWidth == 3");
@@ -15377,22 +16436,22 @@ ok(ctx.lineWidth == 1, "ctx.lineWidth ==
 
 }
 </script>
 
 <!-- [[[ test_2d.state.saverestore.stackdepth.html ]]] -->
 
 <p>Canvas test: 2d.state.saverestore.stackdepth</p>
 <!-- Testing: save()/restore() stack depth is not unreasonably limited -->
-<canvas height="50" id="c509" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c552" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_state_saverestore_stackdepth() {
 
-var canvas = document.getElementById('c509');
+var canvas = document.getElementById('c552');
 var ctx = canvas.getContext('2d');
 
 var limit = 512;
 for (var i = 1; i < limit; ++i)
 {
     ctx.save();
     ctx.lineWidth = i;
 }
@@ -15405,22 +16464,22 @@ for (var i = limit-1; i > 0; --i)
 
 }
 </script>
 
 <!-- [[[ test_2d.state.saverestore.strokeStyle.html ]]] -->
 
 <p>Canvas test: 2d.state.saverestore.strokeStyle</p>
 <!-- Testing: save()/restore() works for strokeStyle -->
-<canvas height="50" id="c510" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c553" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_state_saverestore_strokeStyle() {
 
-var canvas = document.getElementById('c510');
+var canvas = document.getElementById('c553');
 var ctx = canvas.getContext('2d');
 
 // Test that restore() undoes any modifications
 var old = ctx.strokeStyle;
 ctx.save();
 ctx.strokeStyle = "#ff0000";
 ctx.restore();
 ok(ctx.strokeStyle === old, "ctx.strokeStyle === old");
@@ -15433,26 +16492,90 @@ old = ctx.strokeStyle;
 ctx.save();
 ok(ctx.strokeStyle === old, "ctx.strokeStyle === old");
 ctx.restore();
 
 
 }
 </script>
 
+<!-- [[[ test_2d.state.saverestore.textAlign.html ]]] -->
+
+<p>Canvas test: 2d.state.saverestore.textAlign</p>
+<!-- Testing: save()/restore() works for textAlign -->
+<canvas height="50" id="c554" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_state_saverestore_textAlign() {
+
+var canvas = document.getElementById('c554');
+var ctx = canvas.getContext('2d');
+
+// Test that restore() undoes any modifications
+var old = ctx.textAlign;
+ctx.save();
+ctx.textAlign = "center";
+ctx.restore();
+ok(ctx.textAlign === old, "ctx.textAlign === old");
+
+// Also test that save() doesn't modify the values
+ctx.textAlign = "center";
+old = ctx.textAlign;
+    // we're not interested in failures caused by get(set(x)) != x (e.g.
+    // from rounding), so compare against 'old' instead of against "center"
+ctx.save();
+ok(ctx.textAlign === old, "ctx.textAlign === old");
+ctx.restore();
+
+
+}
+</script>
+
+<!-- [[[ test_2d.state.saverestore.textBaseline.html ]]] -->
+
+<p>Canvas test: 2d.state.saverestore.textBaseline</p>
+<!-- Testing: save()/restore() works for textBaseline -->
+<canvas height="50" id="c555" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_state_saverestore_textBaseline() {
+
+var canvas = document.getElementById('c555');
+var ctx = canvas.getContext('2d');
+
+// Test that restore() undoes any modifications
+var old = ctx.textBaseline;
+ctx.save();
+ctx.textBaseline = "bottom";
+ctx.restore();
+ok(ctx.textBaseline === old, "ctx.textBaseline === old");
+
+// Also test that save() doesn't modify the values
+ctx.textBaseline = "bottom";
+old = ctx.textBaseline;
+    // we're not interested in failures caused by get(set(x)) != x (e.g.
+    // from rounding), so compare against 'old' instead of against "bottom"
+ctx.save();
+ok(ctx.textBaseline === old, "ctx.textBaseline === old");
+ctx.restore();
+
+
+}
+</script>
+
 <!-- [[[ test_2d.state.saverestore.transformation.html ]]] -->
 
 <p>Canvas test: 2d.state.saverestore.transformation</p>
 <!-- Testing: save()/restore() affects the current transformation matrix -->
-<canvas height="50" id="c511" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c556" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_state_saverestore_transformation() {
 
-var canvas = document.getElementById('c511');
+var canvas = document.getElementById('c556');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.save();
 ctx.translate(200, 0);
 ctx.restore();
 ctx.fillStyle = '#f00';
@@ -15462,65 +16585,65 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.state.saverestore.underflow.html ]]] -->
 
 <p>Canvas test: 2d.state.saverestore.underflow</p>
 <!-- Testing: restore() with an empty stack has no effect -->
-<canvas height="50" id="c512" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c557" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_state_saverestore_underflow() {
 
-var canvas = document.getElementById('c512');
+var canvas = document.getElementById('c557');
 var ctx = canvas.getContext('2d');
 
 for (var i = 0; i < 16; ++i)
     ctx.restore();
 ctx.lineWidth = 0.5;
 ctx.restore();
 ok(ctx.lineWidth == 0.5, "ctx.lineWidth == 0.5");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.basic.html ]]] -->
 
 <p>Canvas test: 2d.strokeRect.basic</p>
 <!-- Testing: strokeRect works -->
-<canvas height="50" id="c513" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c558" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_basic() {
 
-var canvas = document.getElementById('c513');
+var canvas = document.getElementById('c558');
 var ctx = canvas.getContext('2d');
 
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 50;
 ctx.strokeRect(25, 24, 50, 2);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.clip.html ]]] -->
 
 <p>Canvas test: 2d.strokeRect.clip</p>
 <!-- Testing: strokeRect is affected by clipping regions -->
-<canvas height="50" id="c514" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c559" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_clip() {
 
-var canvas = document.getElementById('c514');
+var canvas = document.getElementById('c559');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.beginPath();
 ctx.rect(0, 0, 16, 16);
 ctx.clip();
@@ -15537,66 +16660,66 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.globalalpha.html ]]] -->
 
 <p>Canvas test: 2d.strokeRect.globalalpha</p>
 <!-- Testing: strokeRect is affected by globalAlpha -->
-<canvas height="50" id="c515" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c560" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_globalalpha() {
 
-var canvas = document.getElementById('c515');
+var canvas = document.getElementById('c560');
 var ctx = canvas.getContext('2d');
 
 ctx.globalAlpha = 0;
 ctx.strokeStyle = '#f00';
 ctx.lineWidth = 50;
 ctx.strokeRect(25, 24, 50, 2);
 isPixel(ctx, 50,25, 0,0,0,0, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.globalcomposite.html ]]] -->
 
 <p>Canvas test: 2d.strokeRect.globalcomposite</p>
 <!-- Testing: strokeRect is not affected by globalCompositeOperation -->
-<canvas height="50" id="c516" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c561" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_globalcomposite() {
 
-var canvas = document.getElementById('c516');
+var canvas = document.getElementById('c561');
 var ctx = canvas.getContext('2d');
 
 ctx.globalCompositeOperation = 'source-in';
 ctx.strokeStyle = '#f00';
 ctx.lineWidth = 50;
 ctx.strokeRect(25, 24, 50, 2);
 isPixel(ctx, 50,25, 0,0,0,0, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.negative.html ]]] -->
 
 <p>Canvas test: 2d.strokeRect.negative</p>
 <!-- Testing: strokeRect of negative sizes works -->
-<canvas height="50" id="c517" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c562" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_negative() {
 
-var canvas = document.getElementById('c517');
+var canvas = document.getElementById('c562');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 25;
 ctx.strokeRect(12, 12, 26, 1);
 ctx.strokeRect(88, 12, -26, 1);
@@ -15610,22 +16733,22 @@ isPixel(ctx, 75,37, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.strokeRect.nonfinite</p>
 <!-- Testing: strokeRect() with Infinity/NaN is ignored -->
-<canvas height="50" id="c518" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c563" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_nonfinite() {
 
-var canvas = document.getElementById('c518');
+var canvas = document.getElementById('c563');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.strokeStyle = '#f00';
 ctx.lineWidth = 150;
 ctx.strokeRect(Infinity, 0, 100, 50);
@@ -15657,22 +16780,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.path.html ]]] -->
 
 <p>Canvas test: 2d.strokeRect.path</p>
 <!-- Testing: strokeRect does not affect the current path -->
-<canvas height="50" id="c519" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c564" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_path() {
 
-var canvas = document.getElementById('c519');
+var canvas = document.getElementById('c564');
 var ctx = canvas.getContext('2d');
 
 ctx.beginPath();
 ctx.rect(0, 0, 100, 50);
 ctx.strokeStyle = '#f00';
 ctx.lineWidth = 5;
 ctx.strokeRect(0, 0, 16, 16);
 ctx.fillStyle = '#0f0';
@@ -15682,22 +16805,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.shadow.html ]]] -->
 
 <p>Canvas test: 2d.strokeRect.shadow</p>
 <!-- Testing: strokeRect draws shadows -->
-<canvas height="50" id="c520" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c565" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_shadow() {
 
-var canvas = document.getElementById('c520');
+var canvas = document.getElementById('c565');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#f00';
 ctx.shadowColor = '#0f0';
 ctx.shadowBlur = 0;
 ctx.shadowOffsetX = 0;
@@ -15710,22 +16833,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.transform.html ]]] -->
 
 <p>Canvas test: 2d.strokeRect.transform</p>
 <!-- Testing: fillRect is affected by transforms -->
-<canvas height="50" id="c521" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c566" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_transform() {
 
-var canvas = document.getElementById('c521');
+var canvas = document.getElementById('c566');
 var ctx = canvas.getContext('2d');
 
 ctx.scale(10, 10);
 ctx.translate(0, 5);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 5;
 ctx.strokeRect(2.5, -2.6, 5, 0.2);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
@@ -15733,22 +16856,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.zero.2.html ]]] -->
 
 <p>Canvas test: 2d.strokeRect.zero.2</p>
 <!-- Testing: strokeRect of 0x0 pixels draws nothing, including caps and joins -->
-<canvas height="50" id="c522" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c567" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_zero_2() {
 
-var canvas = document.getElementById('c522');
+var canvas = document.getElementById('c567');
 var ctx = canvas.getContext('2d');
 
 ctx.strokeStyle = '#f00';
 ctx.lineWidth = 250;
 ctx.lineCap = 'round';
 ctx.lineJoin = 'round';
 ctx.strokeRect(50, 25, 0, 0);
 isPixel(ctx, 50,25, 0,0,0,0, 0);
@@ -15756,98 +16879,98 @@ isPixel(ctx, 50,25, 0,0,0,0, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.zero.3.html ]]] -->
 
 <p>Canvas test: 2d.strokeRect.zero.3</p>
 <!-- Testing: strokeRect of Nx0 pixels draws a straight line -->
-<canvas height="50" id="c523" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c568" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_zero_3() {
 
-var canvas = document.getElementById('c523');
+var canvas = document.getElementById('c568');
 var ctx = canvas.getContext('2d');
 
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 50;
 ctx.strokeRect(0, 25, 100, 0);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.zero.4.html ]]] -->
 
 <p>Canvas test: 2d.strokeRect.zero.4</p>
 <!-- Testing: strokeRect of Nx0 pixels draws a closed line with no caps -->
-<canvas height="50" id="c524" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c569" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_zero_4() {
 
-var canvas = document.getElementById('c524');
+var canvas = document.getElementById('c569');
 var ctx = canvas.getContext('2d');
 
 ctx.strokeStyle = '#f00';
 ctx.lineWidth = 250;
 ctx.lineCap = 'round';
 ctx.strokeRect(100, 25, 100, 0);
 isPixel(ctx, 50,25, 0,0,0,0, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeStyle.default.html ]]] -->
 
 <p>Canvas test: 2d.strokeStyle.default</p>
-<canvas height="50" id="c525" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c570" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeStyle_default() {
 
-var canvas = document.getElementById('c525');
+var canvas = document.getElementById('c570');
 var ctx = canvas.getContext('2d');
 
 ok(ctx.strokeStyle == '#000000', "ctx.strokeStyle == '#000000'");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.text.align.default.html ]]] -->
 
 <p>Canvas test: 2d.text.align.default</p>
-<canvas height="50" id="c526" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c571" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_text_align_default() {
 
-var canvas = document.getElementById('c526');
+var canvas = document.getElementById('c571');
 var ctx = canvas.getContext('2d');
 
 ok(ctx.textAlign === 'start', "ctx.textAlign === 'start'");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.text.align.invalid.html ]]] -->
 
 <p>Canvas test: 2d.text.align.invalid</p>
-<canvas height="50" id="c527" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c572" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_text_align_invalid() {
 
-var canvas = document.getElementById('c527');
+var canvas = document.getElementById('c572');
 var ctx = canvas.getContext('2d');
 
 ctx.textAlign = 'start';
 ctx.textAlign = 'bogus';
 ok(ctx.textAlign === 'start', "ctx.textAlign === 'start'");
 
 ctx.textAlign = 'start';
 ctx.textAlign = 'END';
@@ -15860,42 +16983,72 @@ ok(ctx.textAlign === 'start', "ctx.textA
 ctx.textAlign = 'start';
 ctx.textAlign = 'end\0';
 ok(ctx.textAlign === 'start', "ctx.textAlign === 'start'");
 
 
 }
 </script>
 
+<!-- [[[ test_2d.text.align.valid.html ]]] -->
+
+<p>Canvas test: 2d.text.align.valid</p>
+<canvas height="50" id="c573" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_text_align_valid() {
+
+var canvas = document.getElementById('c573');
+var ctx = canvas.getContext('2d');
+
+ctx.textAlign = 'start';
+ok(ctx.textAlign === 'start', "ctx.textAlign === 'start'");
+
+ctx.textAlign = 'end';
+ok(ctx.textAlign === 'end', "ctx.textAlign === 'end'");
+
+ctx.textAlign = 'left';
+ok(ctx.textAlign === 'left', "ctx.textAlign === 'left'");
+
+ctx.textAlign = 'right';
+ok(ctx.textAlign === 'right', "ctx.textAlign === 'right'");
+
+ctx.textAlign = 'center';
+ok(ctx.textAlign === 'center', "ctx.textAlign === 'center'");
+
+
+}
+</script>
+
 <!-- [[[ test_2d.text.baseline.default.html ]]] -->
 
 <p>Canvas test: 2d.text.baseline.default</p>
-<canvas height="50" id="c528" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c574" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_text_baseline_default() {
 
-var canvas = document.getElementById('c528');
+var canvas = document.getElementById('c574');
 var ctx = canvas.getContext('2d');
 
 ok(ctx.textBaseline === 'alphabetic', "ctx.textBaseline === 'alphabetic'");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.text.baseline.invalid.html ]]] -->
 
 <p>Canvas test: 2d.text.baseline.invalid</p>
-<canvas height="50" id="c529" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c575" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_text_baseline_invalid() {
 
-var canvas = document.getElementById('c529');
+var canvas = document.getElementById('c575');
 var ctx = canvas.getContext('2d');
 
 ctx.textBaseline = 'top';
 ctx.textBaseline = 'bogus';
 ok(ctx.textBaseline === 'top', "ctx.textBaseline === 'top'");
 
 ctx.textBaseline = 'top';
 ctx.textBaseline = 'MIDDLE';
@@ -15908,26 +17061,462 @@ ok(ctx.textBaseline === 'top', "ctx.text
 ctx.textBaseline = 'top';
 ctx.textBaseline = 'middle\0';
 ok(ctx.textBaseline === 'top', "ctx.textBaseline === 'top'");
 
 
 }
 </script>
 
+<!-- [[[ test_2d.text.baseline.valid.html ]]] -->
+
+<p>Canvas test: 2d.text.baseline.valid</p>
+<canvas height="50" id="c576" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_text_baseline_valid() {
+
+var canvas = document.getElementById('c576');
+var ctx = canvas.getContext('2d');
+
+ctx.textBaseline = 'top';
+ok(ctx.textBaseline === 'top', "ctx.textBaseline === 'top'");
+
+ctx.textBaseline = 'hanging';
+ok(ctx.textBaseline === 'hanging', "ctx.textBaseline === 'hanging'");
+
+ctx.textBaseline = 'middle';
+ok(ctx.textBaseline === 'middle', "ctx.textBaseline === 'middle'");
+
+ctx.textBaseline = 'alphabetic';
+ok(ctx.textBaseline === 'alphabetic', "ctx.textBaseline === 'alphabetic'");
+
+ctx.textBaseline = 'ideographic';
+ok(ctx.textBaseline === 'ideographic', "ctx.textBaseline === 'ideographic'");
+
+ctx.textBaseline = 'bottom';
+ok(ctx.textBaseline === 'bottom', "ctx.textBaseline === 'bottom'");
+
+
+}
+</script>
+
+<!-- [[[ test_2d.text.draw.fill.basic.html ]]] -->
+
+<p>Canvas test: 2d.text.draw.fill.basic</p>
+<!-- Testing: fillText draws filled text -->
+<canvas height="50" id="c577" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_text_draw_fill_basic() {
+
+var canvas = document.getElementById('c577');
+var ctx = canvas.getContext('2d');
+
+ctx.fillStyle = '#000';
+ctx.fillRect(0, 0, 100, 50);
+ctx.fillStyle = '#0f0';
+ctx.strokeStyle = '#f00';
+ctx.font = '35px Arial, sans-serif';
+ctx.fillText('PASS', 5, 35);
+
+todo(false, "test completed successfully"); // (Bug 483989)
+
+
+}
+</script>
+
+<!-- [[[ test_2d.text.draw.fill.maxWidth.large.html ]]] -->
+
+<p>Canvas test: 2d.text.draw.fill.maxWidth.large</p>
+<!-- Testing: fillText handles maxWidth correctly -->
+<canvas height="50" id="c578" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_text_draw_fill_maxWidth_large() {
+
+var canvas = document.getElementById('c578');
+var ctx = canvas.getContext('2d');
+
+ctx.fillStyle = '#000';
+ctx.fillRect(0, 0, 100, 50);
+ctx.fillStyle = '#0f0';
+ctx.font = '35px Arial, sans-serif';
+ctx.fillText('PASS', 5, 35, 200);
+
+todo(false, "test completed successfully"); // (Bug 483989)
+
+
+}
+</script>
+
+<!-- [[[ test_2d.text.draw.fill.maxWidth.small.html ]]] -->
+
+<p>Canvas test: 2d.text.draw.fill.maxWidth.small</p>
+<!-- Testing: fillText handles maxWidth correctly -->
+<canvas height="50" id="c579" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_text_draw_fill_maxWidth_small() {
+
+var canvas = document.getElementById('c579');
+var ctx = canvas.getContext('2d');
+
+ctx.fillStyle = '#0f0';
+ctx.fillRect(0, 0, 100, 50);
+ctx.fillStyle = '#f00';
+ctx.font = '35px Arial, sans-serif';
+ctx.fillText('fail fail fail fail fail', -100, 35, 90);
+
+todo(false, "test completed successfully"); // (Bug 483989)
+
+
+}
+</script>
+
+<!-- [[[ test_2d.text.draw.fill.maxWidth.zero.html ]]] -->
+
+<p>Canvas test: 2d.text.draw.fill.maxWidth.zero</p>
+<!-- Testing: fillText handles maxWidth correctly -->
+<canvas height="50" id="c580" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_text_draw_fill_maxWidth_zero() {
+
+var canvas = document.getElementById('c580');
+var ctx = canvas.getContext('2d');
+
+ctx.fillStyle = '#0f0';
+ctx.fillRect(0, 0, 100, 50);
+ctx.fillStyle = '#f00';
+ctx.font = '35px Arial, sans-serif';
+ctx.fillText('fail fail fail fail fail', 5, 35, 0);
+
+
+}
+</script>
+
+<!-- [[[ test_2d.text.draw.fill.rtl.html ]]] -->
+
+<p>Canvas test: 2d.text.draw.fill.rtl</p>
+<!-- Testing: fillText respects Right-To-Left Override characters -->
+<canvas height="50" id="c581" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_text_draw_fill_rtl() {
+
+var canvas = document.getElementById('c581');
+var ctx = canvas.getContext('2d');
+
+ctx.fillStyle = '#000';
+ctx.fillRect(0, 0, 100, 50);
+ctx.fillStyle = '#0f0';
+ctx.strokeStyle = '#f00';
+ctx.font = '35px Arial, sans-serif';
+ctx.fillText('\u202eFAIL \xa0 \xa0 SSAP', 5, 35);
+
+todo(false, "test completed successfully"); // (Bug 483989)
+
+
+}
+</script>
+
+<!-- [[[ test_2d.text.draw.fill.unaffected.html ]]] -->
+
+<p>Canvas test: 2d.text.draw.fill.unaffected</p>
+<!-- Testing: fillText does not start a new path or subpath -->
+<canvas height="50" id="c582" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_text_draw_fill_unaffected() {
+
+var canvas = document.getElementById('c582');
+var ctx = canvas.getContext('2d');
+
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
+
+ctx.moveTo(0, 0);
+ctx.lineTo(100, 0);
+
+ctx.font = '35px Arial, sans-serif';
+ctx.fillText('FAIL', 5, 35);
+
+ctx.lineTo(100, 50);
+ctx.lineTo(0, 50);
+ctx.fillStyle = '#0f0';
+ctx.fill();
+
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+isPixel(ctx, 5,45, 0,255,0,255, 0);
+
+
+}
+</script>
+
+<!-- [[[ test_2d.text.draw.kern.consistent.html ]]] -->
+
+<p>Canvas test: 2d.text.draw.kern.consistent</p>
+<!-- Testing: Stroked and filled text should have exactly the same kerning so it overlaps -->
+<canvas height="50" id="c583" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_text_draw_kern_consistent() {
+
+var canvas = document.getElementById('c583');
+var ctx = canvas.getContext('2d');
+
+ctx.fillStyle = '#0f0';
+ctx.fillRect(0, 0, 100, 50);
+ctx.fillStyle = '#f00';
+ctx.strokeStyle = '#0f0';
+ctx.lineWidth = 3;
+ctx.font = '20px Arial, sans-serif';
+ctx.fillText('VAVAVAVAVAVAVA', -50, 25);
+ctx.fillText('ToToToToToToTo', -50, 45);
+ctx.strokeText('VAVAVAVAVAVAVA', -50, 25);
+ctx.strokeText('ToToToToToToTo', -50, 45);
+
+todo(false, "test completed successfully"); // (Bug 483989)
+
+
+}
+</script>
+
+<!-- [[[ test_2d.text.draw.stroke.basic.html ]]] -->
+
+<p>Canvas test: 2d.text.draw.stroke.basic</p>
+<!-- Testing: strokeText draws stroked text -->
+<canvas height="50" id="c584" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_text_draw_stroke_basic() {
+
+var canvas = document.getElementById('c584');
+var ctx = canvas.getContext('2d');
+
+ctx.fillStyle = '#000';
+ctx.fillRect(0, 0, 100, 50);
+ctx.strokeStyle = '#0f0';
+ctx.fillStyle = '#f00';
+ctx.lineWidth = 1;
+ctx.font = '35px Arial, sans-serif';
+ctx.strokeText('PASS', 5, 35);
+
+todo(false, "test completed successfully"); // (Bug 483989)
+
+
+}
+</script>
+
+<!-- [[[ test_2d.text.draw.stroke.unaffected.html ]]] -->
+
+<p>Canvas test: 2d.text.draw.stroke.unaffected</p>
+<!-- Testing: strokeText does not start a new path or subpath -->
+<canvas height="50" id="c585" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_text_draw_stroke_unaffected() {
+
+var canvas = document.getElementById('c585');
+var ctx = canvas.getContext('2d');
+
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
+
+ctx.moveTo(0, 0);
+ctx.lineTo(100, 0);
+
+ctx.font = '35px Arial, sans-serif';
+ctx.strokeStyle = '#f00';
+ctx.strokeText('FAIL', 5, 35);
+
+ctx.lineTo(100, 50);
+ctx.lineTo(0, 50);
+ctx.fillStyle = '#0f0';
+ctx.fill();
+
+isPixel(ctx, 50,25, 0,255,0,255, 0);
+isPixel(ctx, 5,45, 0,255,0,255, 0);
+
+
+}
+</script>
+
+<!-- [[[ test_2d.text.font.default.html ]]] -->
+
+<p>Canvas test: 2d.text.font.default</p>
+<canvas height="50" id="c586" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_text_font_default() {
+
+var canvas = document.getElementById('c586');
+var ctx = canvas.getContext('2d');
+
+ok(ctx.font === '10px sans-serif', "ctx.font === '10px sans-serif'");
+
+
+}
+</script>
+
+<!-- [[[ test_2d.text.font.parse.basic.html ]]] -->
+
+<p>Canvas test: 2d.text.font.parse.basic</p>
+<canvas height="50" id="c587" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_text_font_parse_basic() {
+
+var canvas = document.getElementById('c587');
+var ctx = canvas.getContext('2d');
+
+ctx.font = '20px serif';
+ok(ctx.font === '20px serif', "ctx.font === '20px serif'");
+
+ctx.font = '20PX   SERIF';
+todo(ctx.font === '20px serif', "ctx.font === '20px serif'");
+
+
+}
+</script>
+
+<!-- [[[ test_2d.text.font.parse.complex.html ]]] -->
+
+<p>Canvas test: 2d.text.font.parse.complex</p>
+<canvas height="50" id="c588" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_text_font_parse_complex() {
+
+var canvas = document.getElementById('c588');
+var ctx = canvas.getContext('2d');
+
+ctx.font = 'small-caps italic 400 12px/2 Unknown Font, sans-serif';
+todo(ctx.font === 'italic small-caps 12px "Unknown Font", sans-serif', "ctx.font === 'italic small-caps 12px \"Unknown Font\", sans-serif'");
+
+
+}
+</script>
+
+<!-- [[[ test_2d.text.font.parse.invalid.html ]]] -->
+
+<p>Canvas test: 2d.text.font.parse.invalid</p>
+<canvas height="50" id="c589" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_text_font_parse_invalid() {
+
+var canvas = document.getElementById('c589');
+var ctx = canvas.getContext('2d');
+
+ctx.font = '20px serif';
+ok(ctx.font === '20px serif', "ctx.font === '20px serif'");
+
+ctx.font = '20px serif';
+ctx.font = 'bogus';
+ok(ctx.font === '20px serif', "ctx.font === '20px serif'");
+
+ctx.font = '20px serif';
+ctx.font = 'inherit';
+ok(ctx.font === '20px serif', "ctx.font === '20px serif'");
+
+ctx.font = '20px serif';
+ctx.font = '10px {bogus}';
+ok(ctx.font === '20px serif', "ctx.font === '20px serif'");
+
+ctx.font = '20px serif';
+ctx.font = '10px initial';
+todo(ctx.font === '20px serif', "ctx.font === '20px serif'");
+
+ctx.font = '20px serif';
+ctx.font = '10px default';
+todo(ctx.font === '20px serif', "ctx.font === '20px serif'");
+
+ctx.font = '20px serif';
+ctx.font = '10px inherit';
+ok(ctx.font === '20px serif', "ctx.font === '20px serif'");
+
+ctx.font = '20px serif';
+ctx.font = '1em serif; background: green; margin: 10px';
+ok(ctx.font === '20px serif', "ctx.font === '20px serif'");
+
+
+}
+</script>
+
+<!-- [[[ test_2d.text.font.parse.size.percentage.default.html ]]] -->
+
+<p>Canvas test: 2d.text.font.parse.size.percentage.default</p>
+<canvas height="50" id="c590" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_text_font_parse_size_percentage_default() {
+
+var canvas = document.getElementById('c590');
+var ctx = canvas.getContext('2d');
+
+var canvas2 = document.createElement('canvas');
+var ctx2 = canvas2.getContext('2d');
+ctx.font = '1000% serif';
+todo(ctx.font === '100px serif', "ctx.font === '100px serif'");
+
+
+}
+</script>
+
+<!-- [[[ test_2d.text.font.parse.size.percentage.html ]]] -->
+
+<p>Canvas test: 2d.text.font.parse.size.percentage</p>
+<canvas height="50" id="c591" style="font-size: 144px" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_text_font_parse_size_percentage() {
+
+var canvas = document.getElementById('c591');
+var ctx = canvas.getContext('2d');
+
+ctx.font = '50% serif';
+todo(ctx.font === '72px serif', "ctx.font === '72px serif'");
+canvas.setAttribute('style', 'font-size: 100px');
+todo(ctx.font === '72px serif', "ctx.font === '72px serif'");
+
+
+}
+</script>
+
+<!-- [[[ test_2d.text.font.parse.system.html ]]] -->
+
+<p>Canvas test: 2d.text.font.parse.system</p>
+<!-- Testing: System fonts must be computed to explicit values -->
+<canvas height="50" id="c592" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_text_font_parse_system() {
+
+var canvas = document.getElementById('c592');
+var ctx = canvas.getContext('2d');
+
+ctx.font = 'message-box';
+ok(ctx.font !== 'message-box', "ctx.font !== 'message-box'");
+
+
+}
+</script>
+
 <!-- [[[ test_2d.transformation.order.html ]]] -->
 
 <p>Canvas test: 2d.transformation.order</p>
 <!-- Testing: Transformations are applied in the right order -->
-<canvas height="50" id="c530" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c593" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_transformation_order() {
 
-var canvas = document.getElementById('c530');
+var canvas = document.getElementById('c593');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.scale(2, 1);
 ctx.rotate(Math.PI / 2);
 ctx.fillStyle = '#0f0';
@@ -15937,22 +17526,22 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.transformation.rotate.direction.html ]]] -->
 
 <p>Canvas test: 2d.transformation.rotate.direction</p>
 <!-- Testing: rotate() is clockwise -->
-<canvas height="50" id="c531" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c594" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_transformation_rotate_direction() {
 
-var canvas = document.getElementById('c531');
+var canvas = document.getElementById('c594');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.rotate(Math.PI / 2);
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, -100, 50, 100);
@@ -15961,22 +17550,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.transformation.rotate.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.transformation.rotate.nonfinite</p>
 <!-- Testing: rotate() with Infinity/NaN is ignored -->
-<canvas height="50" id="c532" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c595" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_transformation_rotate_nonfinite() {
 
-var canvas = document.getElementById('c532');
+var canvas = document.getElementById('c595');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.translate(100, 10);
 ctx.rotate(Infinity);
 ctx.rotate(-Infinity);
@@ -15990,22 +17579,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.transformation.rotate.radians.html ]]] -->
 
 <p>Canvas test: 2d.transformation.rotate.radians</p>
 <!-- Testing: rotate() uses radians -->
-<canvas height="50" id="c533" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c596" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_transformation_rotate_radians() {
 
-var canvas = document.getElementById('c533');
+var canvas = document.getElementById('c596');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.rotate(Math.PI); // should fail obviously if this is 3.1 degrees
 ctx.fillStyle = '#0f0';
 ctx.fillRect(-100, -50, 100, 50);
@@ -16014,22 +17603,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.transformation.rotate.wrap.html ]]] -->
 
 <p>Canvas test: 2d.transformation.rotate.wrap</p>
 <!-- Testing: rotate() wraps large positive values correctly -->
-<canvas height="50" id="c534" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c597" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_transformation_rotate_wrap() {
 
-var canvas = document.getElementById('c534');
+var canvas = document.getElementById('c597');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.rotate(Math.PI * (1 + 4096)); // == pi (mod 2*pi)
 // We need about pi +/- 0.001 in order to get correct-looking results
 // 32-bit floats can store pi*4097 with precision 2^-10, so that should
@@ -16043,22 +17632,22 @@ isPixel(ctx, 98,47, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.transformation.rotate.wrapnegative.html ]]] -->
 
 <p>Canvas test: 2d.transformation.rotate.wrapnegative</p>
 <!-- Testing: rotate() wraps large negative values correctly -->
-<canvas height="50" id="c535" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c598" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_transformation_rotate_wrapnegative() {
 
-var canvas = document.getElementById('c535');
+var canvas = document.getElementById('c598');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.rotate(-Math.PI * (1 + 4096));
 ctx.fillStyle = '#0f0';
 ctx.fillRect(-100, -50, 100, 50);
@@ -16069,22 +17658,22 @@ isPixel(ctx, 98,47, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.transformation.rotate.zero.html ]]] -->
 
 <p>Canvas test: 2d.transformation.rotate.zero</p>
 <!-- Testing: rotate() by 0 does nothing -->
-<canvas height="50" id="c536" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c599" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_transformation_rotate_zero() {
 
-var canvas = document.getElementById('c536');
+var canvas = document.getElementById('c599');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.rotate(0);
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
@@ -16093,22 +17682,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.transformation.scale.basic.html ]]] -->
 
 <p>Canvas test: 2d.transformation.scale.basic</p>
 <!-- Testing: scale() works -->
-<canvas height="50" id="c537" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c600" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_transformation_scale_basic() {
 
-var canvas = document.getElementById('c537');
+var canvas = document.getElementById('c600');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.scale(2, 4);
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 50, 12.5);
@@ -16117,22 +17706,22 @@ isPixel(ctx, 90,40, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.transformation.scale.large.html ]]] -->
 
 <p>Canvas test: 2d.transformation.scale.large</p>
 <!-- Testing: scale() with large scale factors works -->
-<canvas height="50" id="c538" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c601" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_transformation_scale_large() {
 
-var canvas = document.getElementById('c538');
+var canvas = document.getElementById('c601');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.scale(1e5, 1e5);
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 1, 1);
@@ -16141,22 +17730,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.transformation.scale.multiple.html ]]] -->
 
 <p>Canvas test: 2d.transformation.scale.multiple</p>
 <!-- Testing: Multiple scale()s combine -->
-<canvas height="50" id="c539" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c602" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_transformation_scale_multiple() {
 
-var canvas = document.getElementById('c539');
+var canvas = document.getElementById('c602');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.scale(Math.sqrt(2), Math.sqrt(2));
 ctx.scale(Math.sqrt(2), Math.sqrt(2));
 ctx.fillStyle = '#0f0';
@@ -16166,22 +17755,22 @@ isPixel(ctx, 90,40, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.transformation.scale.negative.html ]]] -->
 
 <p>Canvas test: 2d.transformation.scale.negative</p>
 <!-- Testing: scale() with negative scale factors works -->
-<canvas height="50" id="c540" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c603" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_transformation_scale_negative() {
 
-var canvas = document.getElementById('c540');
+var canvas = document.getElementById('c603');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.save();
 ctx.scale(-1, 1);
 ctx.fillStyle = '#0f0';
@@ -16199,22 +17788,22 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.transformation.scale.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.transformation.scale.nonfinite</p>
 <!-- Testing: scale() with Infinity/NaN is ignored -->
-<canvas height="50" id="c541" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c604" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_transformation_scale_nonfinite() {
 
-var canvas = document.getElementById('c541');
+var canvas = document.getElementById('c604');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.translate(100, 10);
 ctx.scale(Infinity, 0.1);
 ctx.scale(-Infinity, 0.1);
@@ -16232,22 +17821,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.transformation.scale.zero.html ]]] -->
 
 <p>Canvas test: 2d.transformation.scale.zero</p>
 <!-- Testing: scale() with a scale factor of zero works -->
-<canvas height="50" id="c542" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c605" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_transformation_scale_zero() {
 
-var canvas = document.getElementById('c542');
+var canvas = document.getElementById('c605');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.save();
 ctx.translate(50, 0);
 ctx.scale(0, 1);
@@ -16268,22 +17857,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.transformation.setTransform.multiple.html ]]] -->
 
 <p>Canvas test: 2d.transformation.setTransform.multiple</p>
-<canvas height="50" id="c543" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c606" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_transformation_setTransform_multiple() {
 
-var canvas = document.getElementById('c543');
+var canvas = document.getElementById('c606');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.setTransform(1/2,0, 0,1/2, 0,0);
 ctx.setTransform(2,0, 0,2, 0,0);
 ctx.fillStyle = '#0f0';
@@ -16293,22 +17882,22 @@ isPixel(ctx, 75,35, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.transformation.setTransform.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.transformation.setTransform.nonfinite</p>
 <!-- Testing: setTransform() with Infinity/NaN is ignored -->
-<canvas height="50" id="c544" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c607" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_transformation_setTransform_nonfinite() {
 
-var canvas = document.getElementById('c544');
+var canvas = document.getElementById('c607');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.translate(100, 10);
 ctx.setTransform(Infinity, 0, 0, 0, 0, 0);
 ctx.setTransform(-Infinity, 0, 0, 0, 0, 0);
@@ -16394,22 +17983,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.transformation.transform.identity.html ]]] -->
 
 <p>Canvas test: 2d.transformation.transform.identity</p>
 <!-- Testing: transform() with the identity matrix does nothing -->
-<canvas height="50" id="c545" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c608" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_transformation_transform_identity() {
 
-var canvas = document.getElementById('c545');
+var canvas = document.getElementById('c608');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.transform(1,0, 0,1, 0,0);
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
@@ -16418,22 +18007,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.transformation.transform.multiply.html ]]] -->
 
 <p>Canvas test: 2d.transformation.transform.multiply</p>
 <!-- Testing: transform() multiplies the CTM -->
-<canvas height="50" id="c546" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c609" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_transformation_transform_multiply() {
 
-var canvas = document.getElementById('c546');
+var canvas = document.getElementById('c609');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.transform(1,2, 3,4, 5,6);
 ctx.transform(-2,1, 3/2,-1/2, 1,-2);
 ctx.fillStyle = '#0f0';
@@ -16443,22 +18032,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.transformation.transform.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.transformation.transform.nonfinite</p>
 <!-- Testing: transform() with Infinity/NaN is ignored -->
-<canvas height="50" id="c547" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c610" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_transformation_transform_nonfinite() {
 
-var canvas = document.getElementById('c547');
+var canvas = document.getElementById('c610');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.translate(100, 10);
 ctx.transform(Infinity, 0, 0, 0, 0, 0);
 ctx.transform(-Infinity, 0, 0, 0, 0, 0);
@@ -16544,22 +18133,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.transformation.translate.basic.html ]]] -->
 
 <p>Canvas test: 2d.transformation.translate.basic</p>
 <!-- Testing: translate() works -->
-<canvas height="50" id="c548" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c611" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_transformation_translate_basic() {
 
-var canvas = document.getElementById('c548');
+var canvas = document.getElementById('c611');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.translate(100, 50);
 ctx.fillStyle = '#0f0';
 ctx.fillRect(-100, -50, 100, 50);
@@ -16568,22 +18157,22 @@ isPixel(ctx, 90,40, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.transformation.translate.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.transformation.translate.nonfinite</p>
 <!-- Testing: translate() with Infinity/NaN is ignored -->
-<canvas height="50" id="c549" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c612" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_transformation_translate_nonfinite() {
 
-var canvas = document.getElementById('c549');
+var canvas = document.getElementById('c612');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.translate(100, 10);
 ctx.translate(Infinity, 0.1);
 ctx.translate(-Infinity, 0.1);
@@ -16601,40 +18190,40 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.type.exists.html ]]] -->
 
 <p>Canvas test: 2d.type.exists</p>
 <!-- Testing: The 2D context interface is a property of 'window' -->
-<canvas height="50" id="c550" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c613" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_type_exists() {
 
-var canvas = document.getElementById('c550');
+var canvas = document.getElementById('c613');
 var ctx = canvas.getContext('2d');
 
 ok(window.CanvasRenderingContext2D, "window.CanvasRenderingContext2D");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.type.extend.html ]]] -->
 
 <p>Canvas test: 2d.type.extend</p>
 <!-- Testing: Interface methods can be added -->
-<canvas height="50" id="c551" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c614" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_type_extend() {
 
-var canvas = document.getElementById('c551');
+var canvas = document.getElementById('c614');
 var ctx = canvas.getContext('2d');
 
 window.CanvasRenderingContext2D.prototype.fillRectGreen = function (x, y, w, h)
 {
     this.fillStyle = '#0f0';
     this.fillRect(x, y, w, h);
 };
 ctx.fillStyle = '#f00';
@@ -16644,22 +18233,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_2d.voidreturn.html ]]] -->
 
 <p>Canvas test: 2d.voidreturn</p>
 <!-- Testing: void methods return undefined -->
-<canvas height="50" id="c552" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c615" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_voidreturn() {
 
-var canvas = document.getElementById('c552');
+var canvas = document.getElementById('c615');
 var ctx = canvas.getContext('2d');
 
 ok(ctx.save() === undefined, "ctx.save() === undefined");
 ok(ctx.restore() === undefined, "ctx.restore() === undefined");
 ok(ctx.scale(1, 1) === undefined, "ctx.scale(1, 1) === undefined");
 ok(ctx.rotate(0) === undefined, "ctx.rotate(0) === undefined");
 ok(ctx.translate(0, 0) === undefined, "ctx.translate(0, 0) === undefined");
 if (ctx.transform) { // (avoid spurious failures, since the aim here is not to test that all features are supported)
@@ -16685,234 +18274,234 @@ ok(ctx.stroke() === undefined, "ctx.stro
 ok(ctx.clip() === undefined, "ctx.clip() === undefined");
 if (ctx.fillText) {
     ok(ctx.fillText('test', 0, 0) === undefined, "ctx.fillText('test', 0, 0) === undefined");
     ok(ctx.strokeText('test', 0, 0) === undefined, "ctx.strokeText('test', 0, 0) === undefined");
 }
 if (ctx.putImageData) {
     ok(ctx.putImageData(ctx.getImageData(0, 0, 1, 1), 0, 0) === undefined, "ctx.putImageData(ctx.getImageData(0, 0, 1, 1), 0, 0) === undefined");
 }
-ok(ctx.drawImage(document.getElementById('yellow_3.png'), 0, 0, 1, 1, 0, 0, 0, 0) === undefined, "ctx.drawImage(document.getElementById('yellow_3.png'), 0, 0, 1, 1, 0, 0, 0, 0) === undefined");
+ok(ctx.drawImage(document.getElementById('yellow_5.png'), 0, 0, 1, 1, 0, 0, 0, 0) === undefined, "ctx.drawImage(document.getElementById('yellow_5.png'), 0, 0, 1, 1, 0, 0, 0, 0) === undefined");
 ok(ctx.drawImage(canvas, 0, 0, 1, 1, 0, 0, 0, 0) === undefined, "ctx.drawImage(canvas, 0, 0, 1, 1, 0, 0, 0, 0) === undefined");
 ok(ctx.createLinearGradient(0, 0, 0, 0).addColorStop(0, 'white') === undefined, "ctx.createLinearGradient(0, 0, 0, 0).addColorStop(0, 'white') === undefined");
 
 
 }
 </script>
-<img class="resource" id="yellow_3.png" src="image_yellow.png">
+<img class="resource" id="yellow_5.png" src="image_yellow.png">
 
 <!-- [[[ test_context.arguments.missing.html ]]] -->
 
 <p>Canvas test: context.arguments.missing</p>
-<canvas height="50" id="c553" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c616" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_context_arguments_missing() {
 
-var canvas = document.getElementById('c553');
+var canvas = document.getElementById('c616');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   canvas.getContext();
 } catch (e) { _thrown = e }; todo(_thrown && (_thrown instanceof TypeError), "should throw TypeError");
 
 
 }
 </script>
 
 <!-- [[[ test_context.casesensitive.html ]]] -->
 
 <p>Canvas test: context.casesensitive</p>
 <!-- Testing: Context name "2D" is unrecognised; matching is case sensitive -->
-<canvas height="50" id="c554" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c617" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_context_casesensitive() {
 
-var canvas = document.getElementById('c554');
+var canvas = document.getElementById('c617');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.getContext('2D') === null, "canvas.getContext('2D') === null");
 
 
 }
 </script>
 
 <!-- [[[ test_context.emptystring.html ]]] -->
 
 <p>Canvas test: context.emptystring</p>
 <!-- Testing: getContext with empty string returns null -->
-<canvas height="50" id="c555" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c618" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_context_emptystring() {
 
-var canvas = document.getElementById('c555');
+var canvas = document.getElementById('c618');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.getContext("") === null, "canvas.getContext(\"\") === null");
 
 
 }
 </script>
 
 <!-- [[[ test_context.unrecognised.badname.html ]]] -->
 
 <p>Canvas test: context.unrecognised.badname</p>
 <!-- Testing: getContext with unrecognised context name returns null -->
-<canvas height="50" id="c556" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c619" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_context_unrecognised_badname() {
 
-var canvas = document.getElementById('c556');
+var canvas = document.getElementById('c619');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.getContext('This is not an implemented context in any real browser') === null, "canvas.getContext('This is not an implemented context in any real browser') === null");
 
 
 }
 </script>
 
 <!-- [[[ test_context.unrecognised.badsuffix.html ]]] -->
 
 <p>Canvas test: context.unrecognised.badsuffix</p>
 <!-- Testing: Context name "2d" plus a suffix is unrecognised -->
-<canvas height="50" id="c557" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c620" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_context_unrecognised_badsuffix() {
 
-var canvas = document.getElementById('c557');
+var canvas = document.getElementById('c620');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.getContext("2d#") === null, "canvas.getContext(\"2d#\") === null");
 
 
 }
 </script>
 
 <!-- [[[ test_context.unrecognised.nullsuffix.html ]]] -->
 
 <p>Canvas test: context.unrecognised.nullsuffix</p>
 <!-- Testing: Context name "2d" plus a "\0" suffix is unrecognised -->
-<canvas height="50" id="c558" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c621" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_context_unrecognised_nullsuffix() {
 
-var canvas = document.getElementById('c558');
+var canvas = document.getElementById('c621');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.getContext("2d\0") === null, "canvas.getContext(\"2d\\0\") === null");
 
 
 }
 </script>
 
 <!-- [[[ test_context.unrecognised.unicode.html ]]] -->
 
 <p>Canvas test: context.unrecognised.unicode</p>
 <!-- Testing: Context name which kind of looks like "2d" is unrecognised -->
-<canvas height="50" id="c559" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c622" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_context_unrecognised_unicode() {
 
-var canvas = document.getElementById('c559');
+var canvas = document.getElementById('c622');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.getContext("2\uFF44") === null, "canvas.getContext(\"2\\uFF44\") === null"); // Fullwidth Latin Small Letter D
 
 
 }
 </script>
 
 <!-- [[[ test_fallback.basic.html ]]] -->
 
 <p>Canvas test: fallback.basic</p>
 <!-- Testing: Fallback content is inserted into the DOM -->
-<canvas height="50" id="c560" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c623" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_fallback_basic() {
 
-var canvas = document.getElementById('c560');
+var canvas = document.getElementById('c623');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.childNodes.length == 1, "canvas.childNodes.length == 1");
 
 
 }
 </script>
 
 <!-- [[[ test_fallback.multiple.html ]]] -->
 
 <p>Canvas test: fallback.multiple</p>
 <!-- Testing: Fallback content with multiple elements -->
-<canvas height="50" id="c561" width="100"><p class="fallback">FAIL</p><p class="fallback">FAIL</p></canvas>
+<canvas height="50" id="c624" width="100"><p class="fallback">FAIL</p><p class="fallback">FAIL</p></canvas>
 <script>
 
 function test_fallback_multiple() {
 
-var canvas = document.getElementById('c561');
+var canvas = document.getElementById('c624');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.childNodes.length == 2, "canvas.childNodes.length == 2");
 
 
 }
 </script>
 
 <!-- [[[ test_fallback.nested.html ]]] -->
 
 <p>Canvas test: fallback.nested</p>
 <!-- Testing: Fallback content containing another canvas (mostly testing parsers) -->
-<canvas height="50" id="c562" width="100"><canvas><p class="fallback">FAIL (fallback content)</p></canvas><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c625" width="100"><canvas><p class="fallback">FAIL (fallback content)</p></canvas><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_fallback_nested() {
 
-var canvas = document.getElementById('c562');
+var canvas = document.getElementById('c625');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.childNodes.length == 2, "canvas.childNodes.length == 2");
 
 
 }
 </script>
 
 <!-- [[[ test_initial.colour.html ]]] -->
 
 <p>Canvas test: initial.colour</p>
 <!-- Testing: Initial state is transparent black -->
-<canvas height="50" id="c563" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c626" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_initial_colour() {
 
-var canvas = document.getElementById('c563');
+var canvas = document.getElementById('c626');
 var ctx = canvas.getContext('2d');
 
 isPixel(ctx, 20,20, 0,0,0,0, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_initial.reset.2dstate.html ]]] -->
 
 <p>Canvas test: initial.reset.2dstate</p>
 <!-- Testing: Resetting the canvas state resets 2D state variables -->
-<canvas height="50" id="c564" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c627" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_initial_reset_2dstate() {
 
-var canvas = document.getElementById('c564');
+var canvas = document.getElementById('c627');
 var ctx = canvas.getContext('2d');
 
 canvas.width = 100;
 var default_val;
 
 default_val = ctx.strokeStyle;
 ctx.strokeStyle = "#ff0000";
 canvas.width = 100;
@@ -16991,22 +18580,22 @@ ok(ctx.textBaseline === default_val, "ct
 
 }
 </script>
 
 <!-- [[[ test_initial.reset.clip.html ]]] -->
 
 <p>Canvas test: initial.reset.clip</p>
 <!-- Testing: Resetting the canvas state resets the current clip region -->
-<canvas height="50" id="c565" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c628" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_initial_reset_clip() {
 
-var canvas = document.getElementById('c565');
+var canvas = document.getElementById('c628');
 var ctx = canvas.getContext('2d');
 
 canvas.width = 100;
 ctx.rect(0, 0, 1, 1);
 ctx.clip();
 canvas.width = 100;
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
@@ -17015,44 +18604,44 @@ isPixel(ctx, 20,20, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_initial.reset.different.html ]]] -->
 
 <p>Canvas test: initial.reset.different</p>
 <!-- Testing: Changing size resets canvas to transparent black -->
-<canvas height="50" id="c566" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c629" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_initial_reset_different() {
 
-var canvas = document.getElementById('c566');
+var canvas = document.getElementById('c629');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 50, 50);
 isPixel(ctx, 20,20, 255,0,0,255, 0);
 canvas.width = 50;
 isPixel(ctx, 20,20, 0,0,0,0, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_initial.reset.gradient.html ]]] -->
 
 <p>Canvas test: initial.reset.gradient</p>
 <!-- Testing: Resetting the canvas state does not invalidate any existing gradients -->
-<canvas height="50" id="c567" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c630" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_initial_reset_gradient() {
 
-var canvas = document.getElementById('c567');
+var canvas = document.getElementById('c630');
 var ctx = canvas.getContext('2d');
 
 canvas.width = 50;
 var g = ctx.createLinearGradient(0, 0, 100, 0);
 g.addColorStop(0, '#0f0');
 g.addColorStop(1, '#0f0');
 canvas.width = 100;
 ctx.fillStyle = '#f00';
@@ -17064,22 +18653,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_initial.reset.path.html ]]] -->
 
 <p>Canvas test: initial.reset.path</p>
 <!-- Testing: Resetting the canvas state resets the current path -->
-<canvas height="50" id="c568" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c631" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_initial_reset_path() {
 
-var canvas = document.getElementById('c568');
+var canvas = document.getElementById('c631');
 var ctx = canvas.getContext('2d');
 
 canvas.width = 100;
 ctx.rect(0, 0, 100, 50);
 canvas.width = 100;
 ctx.fillStyle = '#f00';
 ctx.fill();
 isPixel(ctx, 20,20, 0,0,0,0, 0);
@@ -17087,22 +18676,22 @@ isPixel(ctx, 20,20, 0,0,0,0, 0);
 
 }
 </script>
 
 <!-- [[[ test_initial.reset.pattern.html ]]] -->
 
 <p>Canvas test: initial.reset.pattern</p>
 <!-- Testing: Resetting the canvas state does not invalidate any existing patterns -->
-<canvas height="50" id="c569" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c632" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_initial_reset_pattern() {
 
-var canvas = document.getElementById('c569');
+var canvas = document.getElementById('c632');
 var ctx = canvas.getContext('2d');
 
 canvas.width = 30;
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 30, 50);
 var p = ctx.createPattern(canvas, 'repeat-x');
 canvas.width = 100;
 ctx.fillStyle = '#f00';
@@ -17114,22 +18703,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_initial.reset.same.html ]]] -->
 
 <p>Canvas test: initial.reset.same</p>
 <!-- Testing: Setting size (not changing the value) resets canvas to transparent black -->
-<canvas height="50" id="c570" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c633" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_initial_reset_same() {
 
-var canvas = document.getElementById('c570');
+var canvas = document.getElementById('c633');
 var ctx = canvas.getContext('2d');
 
 canvas.width = 100;
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 50, 50);
 isPixel(ctx, 20,20, 255,0,0,255, 0);
 canvas.width = 100;
 isPixel(ctx, 20,20, 0,0,0,0, 0);
@@ -17137,22 +18726,22 @@ isPixel(ctx, 20,20, 0,0,0,0, 0);
 
 }
 </script>
 
 <!-- [[[ test_initial.reset.transform.html ]]] -->
 
 <p>Canvas test: initial.reset.transform</p>
 <!-- Testing: Resetting the canvas state resets the current transformation matrix -->
-<canvas height="50" id="c571" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c634" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_initial_reset_transform() {
 
-var canvas = document.getElementById('c571');
+var canvas = document.getElementById('c634');
 var ctx = canvas.getContext('2d');
 
 canvas.width = 100;
 ctx.scale(0.1, 0.1);
 canvas.width = 100;
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 20,20, 0,255,0,255, 0);
@@ -17160,64 +18749,64 @@ isPixel(ctx, 20,20, 0,255,0,255, 0);
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.default.html ]]] -->
 
 <p>Canvas test: size.attributes.default</p>
 <!-- Testing: Default width/height when attributes are missing -->
-<canvas id="c572"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas id="c635"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_default() {
 
-var canvas = document.getElementById('c572');
+var canvas = document.getElementById('c635');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.width === 300, "canvas.width === 300");
 ok(canvas.height === 150, "canvas.height === 150");
 ok(!canvas.hasAttribute('width'), "!canvas.hasAttribute('width')");
 ok(!canvas.hasAttribute('height'), "!canvas.hasAttribute('height')");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.get.html ]]] -->
 
 <p>Canvas test: size.attributes.get</p>
 <!-- Testing: Getting width/height IDL/content attributes -->
-<canvas height="60" id="c573" width="120"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="60" id="c636" width="120"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_get() {
 
-var canvas = document.getElementById('c573');
+var canvas = document.getElementById('c636');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.width === 120, "canvas.width === 120");
 ok(canvas.height === 60, "canvas.height === 60");
 ok(canvas.getAttribute('width') === '120', "canvas.getAttribute('width') === '120'");
 ok(canvas.getAttribute('height') === '60', "canvas.getAttribute('height') === '60'");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.idl.html ]]] -->
 
 <p>Canvas test: size.attributes.idl</p>
 <!-- Testing: Getting/setting width/height IDL attributes -->
-<canvas height="50" id="c574" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c637" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_idl() {
 
-var canvas = document.getElementById('c574');
+var canvas = document.getElementById('c637');
 var ctx = canvas.getContext('2d');
 
 canvas.width = "100";
 canvas.height = "100";
 ok(canvas.width === 100, "canvas.width === 100");
 ok(canvas.height === 100, "canvas.height === 100");
 
 canvas.width = "+1.5e2";
@@ -17243,341 +18832,341 @@ ok(canvas.height === 0, "canvas.height =
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.idl.set.zero.html ]]] -->
 
 <p>Canvas test: size.attributes.idl.set.zero</p>
 <!-- Testing: Setting width/height IDL attributes to 0 -->
-<canvas height="50" id="c575" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c638" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_idl_set_zero() {
 
-var canvas = document.getElementById('c575');
+var canvas = document.getElementById('c638');
 var ctx = canvas.getContext('2d');
 
 canvas.width = 0;
 canvas.height = 0;
 ok(canvas.width === 0, "canvas.width === 0");
 ok(canvas.height === 0, "canvas.height === 0");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.parse.decimal.html ]]] -->
 
 <p>Canvas test: size.attributes.parse.decimal</p>
 <!-- Testing: Parsing of non-negative integers -->
-<canvas height="100.999" id="c576" width="100.999"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="100.999" id="c639" width="100.999"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_parse_decimal() {
 
-var canvas = document.getElementById('c576');
+var canvas = document.getElementById('c639');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.width === 100, "canvas.width === 100");
 ok(canvas.height === 100, "canvas.height === 100");
 ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "100px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"100px\"");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.parse.em.html ]]] -->
 
 <p>Canvas test: size.attributes.parse.em</p>
 <!-- Testing: Parsing of non-negative integers -->
-<canvas height="100em" id="c577" width="100em"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="100em" id="c640" width="100em"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_parse_em() {
 
-var canvas = document.getElementById('c577');
+var canvas = document.getElementById('c640');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.width === 100, "canvas.width === 100");
 ok(canvas.height === 100, "canvas.height === 100");
 ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "100px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"100px\"");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.parse.empty.html ]]] -->
 
 <p>Canvas test: size.attributes.parse.empty</p>
 <!-- Testing: Parsing of non-negative integers -->
-<canvas height="" id="c578" width=""><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="" id="c641" width=""><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_parse_empty() {
 
-var canvas = document.getElementById('c578');
+var canvas = document.getElementById('c641');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.width === 300, "canvas.width === 300");
 ok(canvas.height === 150, "canvas.height === 150");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.parse.exp.html ]]] -->
 
 <p>Canvas test: size.attributes.parse.exp</p>
 <!-- Testing: Parsing of non-negative integers -->
-<canvas height="100e1" id="c579" width="100e1"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="100e1" id="c642" width="100e1"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_parse_exp() {
 
-var canvas = document.getElementById('c579');
+var canvas = document.getElementById('c642');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.width === 100, "canvas.width === 100");
 ok(canvas.height === 100, "canvas.height === 100");
 ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "100px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"100px\"");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.parse.hex.html ]]] -->
 
 <p>Canvas test: size.attributes.parse.hex</p>
 <!-- Testing: Parsing of non-negative integers -->
-<canvas height="0x100" id="c580" width="0x100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="0x100" id="c643" width="0x100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_parse_hex() {
 
-var canvas = document.getElementById('c580');
+var canvas = document.getElementById('c643');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.width === 0, "canvas.width === 0");
 ok(canvas.height === 0, "canvas.height === 0");
 ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "0px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"0px\"");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.parse.junk.html ]]] -->
 
 <p>Canvas test: size.attributes.parse.junk</p>
 <!-- Testing: Parsing of non-negative integers -->
-<canvas height="#!?" id="c581" width="#!?"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="#!?" id="c644" width="#!?"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_parse_junk() {
 
-var canvas = document.getElementById('c581');
+var canvas = document.getElementById('c644');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.width === 300, "canvas.width === 300");
 ok(canvas.height === 150, "canvas.height === 150");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.parse.minus.html ]]] -->
 
 <p>Canvas test: size.attributes.parse.minus</p>
 <!-- Testing: Parsing of non-negative integers -->
-<canvas height="-100" id="c582" width="-100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="-100" id="c645" width="-100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_parse_minus() {
 
-var canvas = document.getElementById('c582');
+var canvas = document.getElementById('c645');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.width === 300, "canvas.width === 300");
 ok(canvas.height === 150, "canvas.height === 150");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.parse.octal.html ]]] -->
 
 <p>Canvas test: size.attributes.parse.octal</p>
 <!-- Testing: Parsing of non-negative integers -->
-<canvas height="0100" id="c583" width="0100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="0100" id="c646" width="0100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_parse_octal() {
 
-var canvas = document.getElementById('c583');
+var canvas = document.getElementById('c646');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.width === 100, "canvas.width === 100");
 ok(canvas.height === 100, "canvas.height === 100");
 ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "100px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"100px\"");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.parse.onlyspace.html ]]] -->
 
 <p>Canvas test: size.attributes.parse.onlyspace</p>
 <!-- Testing: Parsing of non-negative integers -->
-<canvas height="  " id="c584" width="  "><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="  " id="c647" width="  "><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_parse_onlyspace() {
 
-var canvas = document.getElementById('c584');
+var canvas = document.getElementById('c647');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.width === 300, "canvas.width === 300");
 ok(canvas.height === 150, "canvas.height === 150");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.parse.percent.html ]]] -->
 
 <p>Canvas test: size.attributes.parse.percent</p>
 <!-- Testing: Parsing of non-negative integers -->
-<canvas height="100%" id="c585" width="100%"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="100%" id="c648" width="100%"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_parse_percent() {
 
-var canvas = document.getElementById('c585');
+var canvas = document.getElementById('c648');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.width === 100, "canvas.width === 100");
 ok(canvas.height === 100, "canvas.height === 100");
 ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "100px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"100px\"");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.parse.plus.html ]]] -->
 
 <p>Canvas test: size.attributes.parse.plus</p>
 <!-- Testing: Parsing of non-negative integers -->
-<canvas height="+100" id="c586" width="+100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="+100" id="c649" width="+100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_parse_plus() {
 
-var canvas = document.getElementById('c586');
+var canvas = document.getElementById('c649');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.width === 100, "canvas.width === 100");
 ok(canvas.height === 100, "canvas.height === 100");
 ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "100px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"100px\"");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.parse.space.html ]]] -->
 
 <p>Canvas test: size.attributes.parse.space</p>
 <!-- Testing: Parsing of non-negative integers -->
-<canvas height="  100" id="c587" width="  100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="  100" id="c650" width="  100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_parse_space() {
 
-var canvas = document.getElementById('c587');
+var canvas = document.getElementById('c650');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.width === 100, "canvas.width === 100");
 ok(canvas.height === 100, "canvas.height === 100");
 ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "100px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"100px\"");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.parse.trailingjunk.html ]]] -->
 
 <p>Canvas test: size.attributes.parse.trailingjunk</p>
 <!-- Testing: Parsing of non-negative integers -->
-<canvas height="100#!?" id="c588" width="100#!?"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="100#!?" id="c651" width="100#!?"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_parse_trailingjunk() {
 
-var canvas = document.getElementById('c588');
+var canvas = document.getElementById('c651');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.width === 100, "canvas.width === 100");
 ok(canvas.height === 100, "canvas.height === 100");
 ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "100px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"100px\"");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.parse.whitespace.html ]]] -->
 
 <p>Canvas test: size.attributes.parse.whitespace</p>
 <!-- Testing: Parsing of non-negative integers -->
 <canvas height="
-	100" id="c589" width="
+	100" id="c652" width="
 	100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_parse_whitespace() {
 
-var canvas = document.getElementById('c589');
+var canvas = document.getElementById('c652');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.width === 100, "canvas.width === 100");
 ok(canvas.height === 100, "canvas.height === 100");
 ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "100px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"100px\"");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.parse.zero.html ]]] -->
 
 <p>Canvas test: size.attributes.parse.zero</p>
 <!-- Testing: Parsing of non-negative integers -->
-<canvas height="0" id="c590" width="0"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="0" id="c653" width="0"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_parse_zero() {
 
-var canvas = document.getElementById('c590');
+var canvas = document.getElementById('c653');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.width === 0, "canvas.width === 0");
 ok(canvas.height === 0, "canvas.height === 0");
 ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "0px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"0px\"");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.reflect.setcontent.html ]]] -->
 
 <p>Canvas test: size.attributes.reflect.setcontent</p>
 <!-- Testing: Setting content attributes updates IDL and content attributes -->
-<canvas height="50" id="c591" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c654" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_reflect_setcontent() {
 
-var canvas = document.getElementById('c591');
+var canvas = document.getElementById('c654');
 var ctx = canvas.getContext('2d');
 
 canvas.setAttribute('width', '120');
 canvas.setAttribute('height', '60');
 ok(canvas.getAttribute('width') === '120', "canvas.getAttribute('width') === '120'");
 ok(canvas.getAttribute('height') === '60', "canvas.getAttribute('height') === '60'");
 ok(canvas.width === 120, "canvas.width === 120");
 ok(canvas.height === 60, "canvas.height === 60");
@@ -17585,22 +19174,22 @@ ok(canvas.height === 60, "canvas.height 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.reflect.setidl.html ]]] -->
 
 <p>Canvas test: size.attributes.reflect.setidl</p>
 <!-- Testing: Setting IDL attributes updates IDL and content attributes -->
-<canvas height="50" id="c592" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c655" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_reflect_setidl() {
 
-var canvas = document.getElementById('c592');
+var canvas = document.getElementById('c655');
 var ctx = canvas.getContext('2d');
 
 canvas.width = 120;
 canvas.height = 60;
 ok(canvas.getAttribute('width') === '120', "canvas.getAttribute('width') === '120'");
 ok(canvas.getAttribute('height') === '60', "canvas.getAttribute('height') === '60'");
 ok(canvas.width === 120, "canvas.width === 120");
 ok(canvas.height === 60, "canvas.height === 60");
@@ -17608,22 +19197,22 @@ ok(canvas.height === 60, "canvas.height 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.reflect.setidlzero.html ]]] -->
 
 <p>Canvas test: size.attributes.reflect.setidlzero</p>
 <!-- Testing: Setting IDL attributes to 0 updates IDL and content attributes -->
-<canvas height="50" id="c593" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c656" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_reflect_setidlzero() {
 
-var canvas = document.getElementById('c593');
+var canvas = document.getElementById('c656');
 var ctx = canvas.getContext('2d');
 
 canvas.width = 0;
 canvas.height = 0;
 ok(canvas.getAttribute('width') === '0', "canvas.getAttribute('width') === '0'");
 ok(canvas.getAttribute('height') === '0', "canvas.getAttribute('height') === '0'");
 ok(canvas.width === 0, "canvas.width === 0");
 ok(canvas.height === 0, "canvas.height === 0");
@@ -17631,625 +19220,734 @@ ok(canvas.height === 0, "canvas.height =
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.removed.html ]]] -->
 
 <p>Canvas test: size.attributes.removed</p>
 <!-- Testing: Removing content attributes reverts to default size -->
-<canvas height="60" id="c594" width="120"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="60" id="c657" width="120"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_removed() {
 
-var canvas = document.getElementById('c594');
+var canvas = document.getElementById('c657');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.width === 120, "canvas.width === 120");
 canvas.removeAttribute('width');
 ok(canvas.width === 300, "canvas.width === 300");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.set.html ]]] -->
 
 <p>Canvas test: size.attributes.set</p>
 <!-- Testing: Setting width/height IDL attributes -->
-<canvas height="50" id="c595" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c658" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_set() {
 
-var canvas = document.getElementById('c595');
+var canvas = document.getElementById('c658');
 var ctx = canvas.getContext('2d');
 
 canvas.width = 120;
 canvas.height = 60;
 ok(canvas.width === 120, "canvas.width === 120");
 ok(canvas.height === 60, "canvas.height === 60");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.setAttribute.decimal.html ]]] -->
 
 <p>Canvas test: size.attributes.setAttribute.decimal</p>
 <!-- Testing: Parsing of non-negative integers in setAttribute -->
-<canvas height="50" id="c596" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c659" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_setAttribute_decimal() {
 
-var canvas = document.getElementById('c596');
+var canvas = document.getElementById('c659');
 var ctx = canvas.getContext('2d');
 
 canvas.setAttribute('width', '100.999');
 canvas.setAttribute('height', '100.999');
 ok(canvas.width === 100, "canvas.width === 100");
 ok(canvas.height === 100, "canvas.height === 100");
 ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "100px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"100px\"");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.setAttribute.em.html ]]] -->
 
 <p>Canvas test: size.attributes.setAttribute.em</p>
 <!-- Testing: Parsing of non-negative integers in setAttribute -->
-<canvas height="50" id="c597" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c660" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_setAttribute_em() {
 
-var canvas = document.getElementById('c597');
+var canvas = document.getElementById('c660');
 var ctx = canvas.getContext('2d');
 
 canvas.setAttribute('width', '100em');
 canvas.setAttribute('height', '100em');
 ok(canvas.width === 100, "canvas.width === 100");
 ok(canvas.height === 100, "canvas.height === 100");
 ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "100px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"100px\"");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.setAttribute.empty.html ]]] -->
 
 <p>Canvas test: size.attributes.setAttribute.empty</p>
 <!-- Testing: Parsing of non-negative integers in setAttribute -->
-<canvas height="50" id="c598" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c661" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_setAttribute_empty() {
 
-var canvas = document.getElementById('c598');
+var canvas = document.getElementById('c661');
 var ctx = canvas.getContext('2d');
 
 canvas.setAttribute('width', '');
 canvas.setAttribute('height', '');
 ok(canvas.width === 300, "canvas.width === 300");
 ok(canvas.height === 150, "canvas.height === 150");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.setAttribute.exp.html ]]] -->
 
 <p>Canvas test: size.attributes.setAttribute.exp</p>
 <!-- Testing: Parsing of non-negative integers in setAttribute -->
-<canvas height="50" id="c599" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c662" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_setAttribute_exp() {
 
-var canvas = document.getElementById('c599');
+var canvas = document.getElementById('c662');
 var ctx = canvas.getContext('2d');
 
 canvas.setAttribute('width', '100e1');
 canvas.setAttribute('height', '100e1');
 ok(canvas.width === 100, "canvas.width === 100");
 ok(canvas.height === 100, "canvas.height === 100");
 ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "100px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"100px\"");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.setAttribute.hex.html ]]] -->
 
 <p>Canvas test: size.attributes.setAttribute.hex</p>
 <!-- Testing: Parsing of non-negative integers in setAttribute -->
-<canvas height="50" id="c600" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c663" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_setAttribute_hex() {
 
-var canvas = document.getElementById('c600');
+var canvas = document.getElementById('c663');
 var ctx = canvas.getContext('2d');
 
 canvas.setAttribute('width', '0x100');
 canvas.setAttribute('height', '0x100');
 ok(canvas.width === 0, "canvas.width === 0");
 ok(canvas.height === 0, "canvas.height === 0");
 ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "0px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"0px\"");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.setAttribute.junk.html ]]] -->
 
 <p>Canvas test: size.attributes.setAttribute.junk</p>
 <!-- Testing: Parsing of non-negative integers in setAttribute -->
-<canvas height="50" id="c601" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c664" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_setAttribute_junk() {
 
-var canvas = document.getElementById('c601');
+var canvas = document.getElementById('c664');
 var ctx = canvas.getContext('2d');
 
 canvas.setAttribute('width', '#!?');
 canvas.setAttribute('height', '#!?');
 ok(canvas.width === 300, "canvas.width === 300");
 ok(canvas.height === 150, "canvas.height === 150");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.setAttribute.minus.html ]]] -->
 
 <p>Canvas test: size.attributes.setAttribute.minus</p>
 <!-- Testing: Parsing of non-negative integers in setAttribute -->
-<canvas height="50" id="c602" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c665" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_setAttribute_minus() {
 
-var canvas = document.getElementById('c602');
+var canvas = document.getElementById('c665');
 var ctx = canvas.getContext('2d');
 
 canvas.setAttribute('width', '-100');
 canvas.setAttribute('height', '-100');
 ok(canvas.width === 300, "canvas.width === 300");
 ok(canvas.height === 150, "canvas.height === 150");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.setAttribute.octal.html ]]] -->
 
 <p>Canvas test: size.attributes.setAttribute.octal</p>
 <!-- Testing: Parsing of non-negative integers in setAttribute -->
-<canvas height="50" id="c603" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c666" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_setAttribute_octal() {
 
-var canvas = document.getElementById('c603');
+var canvas = document.getElementById('c666');
 var ctx = canvas.getContext('2d');
 
 canvas.setAttribute('width', '0100');
 canvas.setAttribute('height', '0100');
 ok(canvas.width === 100, "canvas.width === 100");
 ok(canvas.height === 100, "canvas.height === 100");
 ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "100px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"100px\"");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.setAttribute.onlyspace.html ]]] -->
 
 <p>Canvas test: size.attributes.setAttribute.onlyspace</p>
 <!-- Testing: Parsing of non-negative integers in setAttribute -->
-<canvas height="50" id="c604" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c667" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_setAttribute_onlyspace() {
 
-var canvas = document.getElementById('c604');
+var canvas = document.getElementById('c667');
 var ctx = canvas.getContext('2d');
 
 canvas.setAttribute('width', '  ');
 canvas.setAttribute('height', '  ');
 ok(canvas.width === 300, "canvas.width === 300");
 ok(canvas.height === 150, "canvas.height === 150");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.setAttribute.percent.html ]]] -->
 
 <p>Canvas test: size.attributes.setAttribute.percent</p>
 <!-- Testing: Parsing of non-negative integers in setAttribute -->
-<canvas height="50" id="c605" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c668" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_setAttribute_percent() {
 
-var canvas = document.getElementById('c605');
+var canvas = document.getElementById('c668');
 var ctx = canvas.getContext('2d');
 
 canvas.setAttribute('width', '100%');
 canvas.setAttribute('height', '100%');
 ok(canvas.width === 100, "canvas.width === 100");
 ok(canvas.height === 100, "canvas.height === 100");
 ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "100px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"100px\"");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.setAttribute.plus.html ]]] -->
 
 <p>Canvas test: size.attributes.setAttribute.plus</p>
 <!-- Testing: Parsing of non-negative integers in setAttribute -->
-<canvas height="50" id="c606" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c669" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_setAttribute_plus() {
 
-var canvas = document.getElementById('c606');
+var canvas = document.getElementById('c669');
 var ctx = canvas.getContext('2d');
 
 canvas.setAttribute('width', '+100');
 canvas.setAttribute('height', '+100');
 ok(canvas.width === 100, "canvas.width === 100");
 ok(canvas.height === 100, "canvas.height === 100");
 ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "100px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"100px\"");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.setAttribute.space.html ]]] -->
 
 <p>Canvas test: size.attributes.setAttribute.space</p>
 <!-- Testing: Parsing of non-negative integers in setAttribute -->
-<canvas height="50" id="c607" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c670" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_setAttribute_space() {
 
-var canvas = document.getElementById('c607');
+var canvas = document.getElementById('c670');
 var ctx = canvas.getContext('2d');
 
 canvas.setAttribute('width', '  100');
 canvas.setAttribute('height', '  100');
 ok(canvas.width === 100, "canvas.width === 100");
 ok(canvas.height === 100, "canvas.height === 100");
 ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "100px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"100px\"");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.setAttribute.trailingjunk.html ]]] -->
 
 <p>Canvas test: size.attributes.setAttribute.trailingjunk</p>
 <!-- Testing: Parsing of non-negative integers in setAttribute -->
-<canvas height="50" id="c608" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c671" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_setAttribute_trailingjunk() {
 
-var canvas = document.getElementById('c608');
+var canvas = document.getElementById('c671');
 var ctx = canvas.getContext('2d');
 
 canvas.setAttribute('width', '100#!?');
 canvas.setAttribute('height', '100#!?');
 ok(canvas.width === 100, "canvas.width === 100");
 ok(canvas.height === 100, "canvas.height === 100");
 ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "100px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"100px\"");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.setAttribute.whitespace.html ]]] -->
 
 <p>Canvas test: size.attributes.setAttribute.whitespace</p>
 <!-- Testing: Parsing of non-negative integers in setAttribute -->
-<canvas height="50" id="c609" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c672" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_setAttribute_whitespace() {
 
-var canvas = document.getElementById('c609');
+var canvas = document.getElementById('c672');
 var ctx = canvas.getContext('2d');
 
 canvas.setAttribute('width', '\r\n\t\x0c100');
 canvas.setAttribute('height', '\r\n\t\x0c100');
 ok(canvas.width === 100, "canvas.width === 100");
 ok(canvas.height === 100, "canvas.height === 100");
 ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "100px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"100px\"");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.setAttribute.zero.html ]]] -->
 
 <p>Canvas test: size.attributes.setAttribute.zero</p>
 <!-- Testing: Parsing of non-negative integers in setAttribute -->
-<canvas height="50" id="c610" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c673" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_setAttribute_zero() {
 
-var canvas = document.getElementById('c610');
+var canvas = document.getElementById('c673');
 var ctx = canvas.getContext('2d');
 
 canvas.setAttribute('width', '0');
 canvas.setAttribute('height', '0');
 ok(canvas.width === 0, "canvas.width === 0");
 ok(canvas.height === 0, "canvas.height === 0");
 ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "0px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"0px\"");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.style.html ]]] -->
 
 <p>Canvas test: size.attributes.style</p>
 <!-- Testing: Canvas size is independent of CSS resizing -->
-<canvas height="30" id="c611" style="width: 100px; height: 50px" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="30" id="c674" style="width: 100px; height: 50px" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_style() {
 
-var canvas = document.getElementById('c611');
+var canvas = document.getElementById('c674');
 var ctx = canvas.getContext('2d');
 
 ok(canvas.width == 50, "canvas.width == 50");
 ok(canvas.height == 30, "canvas.height == 30");
 
 
 }
 </script>
 
 <!-- [[[ test_toDataURL.arguments.1.html ]]] -->
 
 <p>Canvas test: toDataURL.arguments.1</p>
 <!-- Testing: toDataURL ignores extra arguments -->
-<canvas height="50" id="c612" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c675" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_toDataURL_arguments_1() {
 
-var canvas = document.getElementById('c612');
+var canvas = document.getElementById('c675');
 var ctx = canvas.getContext('2d');
 
 var data = canvas.toDataURL('image/png', 'another argument that should not raise an exception');
 ok(data.match(/^data:image\/png[;,]/), "data.match(/^data:image\\/png[;,]/)");
 
 
 }
 </script>
 
 <!-- [[[ test_toDataURL.arguments.2.html ]]] -->
 
 <p>Canvas test: toDataURL.arguments.2</p>
 <!-- Testing: toDataURL ignores extra arguments -->
-<canvas height="50" id="c613" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c676" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_toDataURL_arguments_2() {
 
-var canvas = document.getElementById('c613');
+var canvas = document.getElementById('c676');
 var ctx = canvas.getContext('2d');
 
 var data = canvas.toDataURL('image/png', 'another argument that should not raise an exception', 'and another');
 ok(data.match(/^data:image\/png[;,]/), "data.match(/^data:image\\/png[;,]/)");
 
 
 }
 </script>
 
 <!-- [[[ test_toDataURL.arguments.3.html ]]] -->
 
 <p>Canvas test: toDataURL.arguments.3</p>
 <!-- Testing: toDataURL ignores extra arguments -->
-<canvas height="50" id="c614" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c677" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_toDataURL_arguments_3() {
 
-var canvas = document.getElementById('c614');
+var canvas = document.getElementById('c677');
 var ctx = canvas.getContext('2d');
 
 // More arguments that should not raise exceptions
 var data = canvas.toDataURL('image/png', null, null, null);
 ok(data.match(/^data:image\/png[;,]/), "data.match(/^data:image\\/png[;,]/)");
 
 
 }
 </script>
 
+<!-- [[[ test_toDataURL.bogustype.html ]]] -->
+
+<p>Canvas test: toDataURL.bogustype</p>
+<!-- Testing: toDataURL with a syntactically invalid type returns a PNG -->
+<canvas height="50" id="c678" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_toDataURL_bogustype() {
+
+var canvas = document.getElementById('c678');
+var ctx = canvas.getContext('2d');
+
+var data = canvas.toDataURL('bogus');
+ok(data.match(/^data:image\/png[;,]/), "data.match(/^data:image\\/png[;,]/)");
+
+
+}
+</script>
+
 <!-- [[[ test_toDataURL.default.html ]]] -->
 
 <p>Canvas test: toDataURL.default</p>
 <!-- Testing: toDataURL with no arguments returns a PNG -->
-<canvas height="50" id="c615" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c679" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_toDataURL_default() {
 
-var canvas = document.getElementById('c615');
+var canvas = document.getElementById('c679');
 var ctx = canvas.getContext('2d');
 
 var data = canvas.toDataURL();
 ok(data.match(/^data:image\/png[;,]/), "data.match(/^data:image\\/png[;,]/)");
 
 
 }
 </script>
 
+<!-- [[[ test_toDataURL.jpeg.quality.notnumber.html ]]] -->
+
+<p>Canvas test: toDataURL.jpeg.quality.notnumber</p>
+<!-- Testing: toDataURL with JPEG handles non-numeric quality parameters -->
+<canvas height="50" id="c680" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_toDataURL_jpeg_quality_notnumber() {
+
+var canvas = document.getElementById('c680');
+var ctx = canvas.getContext('2d');
+
+ctx.fillStyle = '#00f';
+ctx.fillRect(0, 0, 100, 50);
+ctx.fillStyle = '#0ff';
+ctx.fillRect(0, 3, 100, 1);
+// Check for JPEG support first
+var data = canvas.toDataURL('image/jpeg');
+if (!data.match(/^data:image\/jpeg[;,]/)) {
+  ok(true, "true");
+} else {
+    ok(canvas.toDataURL('image/jpeg', 'bogus') === data, "canvas.toDataURL('image/jpeg', 'bogus') === data");
+    ok(canvas.toDataURL('image/jpeg', {}) === data, "canvas.toDataURL('image/jpeg', {}) === data");
+    ok(canvas.toDataURL('image/jpeg', null) === data, "canvas.toDataURL('image/jpeg', null) === data");
+    ok(canvas.toDataURL('image/jpeg', undefined) === data, "canvas.toDataURL('image/jpeg', undefined) === data");
+    ok(canvas.toDataURL('image/jpeg', true) === data, "canvas.toDataURL('image/jpeg', true) === data");
+    ok(canvas.toDataURL('image/jpeg', '0.01') === data, "canvas.toDataURL('image/jpeg', '0.01') === data");
+}
+
+
+}
+</script>
+
+<!-- [[[ test_toDataURL.jpeg.quality.outsiderange.html ]]] -->
+
+<p>Canvas test: toDataURL.jpeg.quality.outsiderange</p>
+<!-- Testing: toDataURL with JPEG handles out-of-range quality parameters -->
+<canvas height="50" id="c681" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_toDataURL_jpeg_quality_outsiderange() {
+
+var canvas = document.getElementById('c681');
+var ctx = canvas.getContext('2d');
+
+ctx.fillStyle = '#00f';
+ctx.fillRect(0, 0, 100, 50);
+ctx.fillStyle = '#0ff';
+ctx.fillRect(0, 3, 100, 1);
+// Check for JPEG support first
+var data = canvas.toDataURL('image/jpeg');
+if (!data.match(/^data:image\/jpeg[;,]/)) {
+  ok(true, "true");
+} else {
+    ok(canvas.toDataURL('image/jpeg', 10) === data, "canvas.toDataURL('image/jpeg', 10) === data");
+    ok(canvas.toDataURL('image/jpeg', -10) === data, "canvas.toDataURL('image/jpeg', -10) === data");
+    ok(canvas.toDataURL('image/jpeg', 1.01) === data, "canvas.toDataURL('image/jpeg', 1.01) === data");
+    ok(canvas.toDataURL('image/jpeg', -0.01) === data, "canvas.toDataURL('image/jpeg', -0.01) === data");
+
+    ok(canvas.toDataURL('image/jpeg', 1).length >= canvas.toDataURL('image/jpeg', 0.9).length, "canvas.toDataURL('image/jpeg', 1).length >= canvas.toDataURL('image/jpeg', 0.9).length");
+    ok(canvas.toDataURL('image/jpeg', 0).length <= canvas.toDataURL('image/jpeg', 0.1).length, "canvas.toDataURL('image/jpeg', 0).length <= canvas.toDataURL('image/jpeg', 0.1).length");
+}
+
+
+}
+</script>
+
 <!-- [[[ test_toDataURL.lowercase.ascii.html ]]] -->
 
 <p>Canvas test: toDataURL.lowercase.ascii</p>
 <!-- Testing: toDataURL type is case-insensitive -->
-<canvas height="50" id="c616" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c682" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_toDataURL_lowercase_ascii() {
 
-var canvas = document.getElementById('c616');
+var canvas = document.getElementById('c682');
 var ctx = canvas.getContext('2d');
 
 var data = canvas.toDataURL('ImAgE/PnG');
 ok(data.match(/^data:image\/png[;,]/), "data.match(/^data:image\\/png[;,]/)");
 
 // If JPEG is supported at all, it must be supported case-insensitively
 data = canvas.toDataURL('image/jpeg');
 if (data.match(/^data:image\/jpeg[;,]/)) {
     data = canvas.toDataURL('ImAgE/JpEg');
     ok(data.match(/^data:image\/jpeg[;,]/), "data.match(/^data:image\\/jpeg[;,]/)");
 }
 
 
 }
 </script>
 
+<!-- [[[ test_toDataURL.lowercase.unicode.html ]]] -->
+
+<p>Canvas test: toDataURL.lowercase.unicode</p>
+<!-- Testing: toDataURL type is ASCII-case-insensitive -->
+<canvas height="50" id="c683" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_toDataURL_lowercase_unicode() {
+
+var canvas = document.getElementById('c683');
+var ctx = canvas.getContext('2d');
+
+// Use LATIN CAPITAL LETTER I WITH DOT ABOVE (Unicode lowercase is "i")
+var data = canvas.toDataURL('\u0130mage/png');
+ok(data.match(/^data:image\/png[;,]/), "data.match(/^data:image\\/png[;,]/)");
+
+var data = canvas.toDataURL('\u0130mage/jpeg');
+ok(data.match(/^data:image\/png[;,]/), "data.match(/^data:image\\/png[;,]/)");
+
+
+}
+</script>
+
 <!-- [[[ test_toDataURL.nocontext.html ]]] -->
 
 <p>Canvas test: toDataURL.nocontext</p>
 <!-- Testing: toDataURL works before any context has been got -->
-<canvas height="50" id="c617" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c684" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_toDataURL_nocontext() {
 
-var canvas = document.getElementById('c617');
+var canvas = document.getElementById('c684');
 var ctx = canvas.getContext('2d');
 
 var canvas2 = document.createElement('canvas');
 var data = canvas2.toDataURL();
 ok(data.match(/^data:image\/png[;,]/), "data.match(/^data:image\\/png[;,]/)");
 
 
 }
 </script>
 
 <!-- [[[ test_toDataURL.png.html ]]] -->
 
 <p>Canvas test: toDataURL.png</p>
 <!-- Testing: toDataURL with image/png returns a PNG -->
-<canvas height="50" id="c618" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c685" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_toDataURL_png() {
 
-var canvas = document.getElementById('c618');
+var canvas = document.getElementById('c685');
 var ctx = canvas.getContext('2d');
 
 var data = canvas.toDataURL('image/png');
 ok(data.match(/^data:image\/png[;,]/), "data.match(/^data:image\\/png[;,]/)");
 
 
 }
 </script>
 
 <!-- [[[ test_toDataURL.unrecognised.html ]]] -->
 
 <p>Canvas test: toDataURL.unrecognised</p>
 <!-- Testing: toDataURL with an unhandled type returns a PNG -->
-<canvas height="50" id="c619" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c686" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_toDataURL_unrecognised() {
 
-var canvas = document.getElementById('c619');
+var canvas = document.getElementById('c686');
 var ctx = canvas.getContext('2d');
 
 var data = canvas.toDataURL('image/example');
 ok(data.match(/^data:image\/png[;,]/), "data.match(/^data:image\\/png[;,]/)");
 
 
 }
 </script>
 
 <!-- [[[ test_toDataURL.zerosize.html ]]] -->
 
 <p>Canvas test: toDataURL.zerosize</p>
 <!-- Testing: toDataURL on zero-size canvas returns 'data:,' -->
-<canvas height="0" id="c620" width="0"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="0" id="c687" width="0"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_toDataURL_zerosize() {
 
-var canvas = document.getElementById('c620');
+var canvas = document.getElementById('c687');
 var ctx = canvas.getContext('2d');
 
 var data = canvas.toDataURL();
 ok(data === 'data:,', "data === 'data:,'");
 
 
 }
 </script>
 
 <!-- [[[ test_type.exists.html ]]] -->
 
 <p>Canvas test: type.exists</p>
 <!-- Testing: HTMLCanvasElement is a property of window -->
-<canvas height="50" id="c621" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c688" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_type_exists() {
 
-var canvas = document.getElementById('c621');
+var canvas = document.getElementById('c688');
 var ctx = canvas.getContext('2d');
 
 ok(window.HTMLCanvasElement, "window.HTMLCanvasElement");
 
 
 }
 </script>
 
 <!-- [[[ test_type.extend.html ]]] -->
 
 <p>Canvas test: type.extend</p>
 <!-- Testing: HTMLCanvasElement methods can be added, and the new methods used by canvases -->
-<canvas height="50" id="c622" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c689" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_type_extend() {
 
-var canvas = document.getElementById('c622');
+var canvas = document.getElementById('c689');
 var ctx = canvas.getContext('2d');
 
 window.HTMLCanvasElement.prototype.getZero = function () { return 0; };
 ok(canvas.getZero() === 0, "canvas.getZero() === 0");
 
 
 }
 </script>
 
 <!-- [[[ test_type.name.html ]]] -->
 
 <p>Canvas test: type.name</p>
 <!-- Testing: HTMLCanvasElement type and toString -->
-<canvas height="50" id="c623" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c690" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_type_name() {
 
-var canvas = document.getElementById('c623');
+var canvas = document.getElementById('c690');
 var ctx = canvas.getContext('2d');
 
 ok(Object.prototype.toString.call(canvas) === '[object HTMLCanvasElement]', "Object.prototype.toString.call(canvas) === '[object HTMLCanvasElement]'");
 
 
 }
 </script>
 
@@ -18591,21 +20289,51 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_composite_uncovered_fill_copy");
  }
  try {
   test_2d_composite_uncovered_image_copy();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_composite_uncovered_image_copy");
  }
  try {
+  test_2d_composite_uncovered_nocontext_copy();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_composite_uncovered_nocontext_copy");
+ }
+ try {
+  test_2d_composite_uncovered_nocontext_destination_atop();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_composite_uncovered_nocontext_destination_atop");
+ }
+ try {
+  test_2d_composite_uncovered_nocontext_destination_in();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_composite_uncovered_nocontext_destination_in");
+ }
+ try {
+  test_2d_composite_uncovered_nocontext_source_in();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_composite_uncovered_nocontext_source_in");
+ }
+ try {
+  test_2d_composite_uncovered_nocontext_source_out();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_composite_uncovered_nocontext_source_out");
+ }
+ try {
   test_2d_composite_uncovered_pattern_copy();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_composite_uncovered_pattern_copy");
  }
  try {
+  test_2d_coordinatespace();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_coordinatespace");
+ }
+ try {
   test_2d_drawImage_3arg();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_drawImage_3arg");
  }
  try {
   test_2d_drawImage_5arg();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_drawImage_5arg");
@@ -18666,21 +20394,41 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_drawImage_composite");
  }
  try {
   test_2d_drawImage_floatsource();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_drawImage_floatsource");
  }
  try {
+  test_2d_drawImage_incomplete_emptysrc();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_drawImage_incomplete_emptysrc");
+ }
+ try {
   test_2d_drawImage_incomplete_immediate();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_drawImage_incomplete_immediate");
  }
  try {
+  test_2d_drawImage_incomplete_nosrc();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_drawImage_incomplete_nosrc");
+ }
+ try {
+  test_2d_drawImage_incomplete_reload();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_drawImage_incomplete_reload");
+ }
+ try {
+  test_2d_drawImage_incomplete_removedsrc();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_drawImage_incomplete_removedsrc");
+ }
+ try {
   test_2d_drawImage_negativedest();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_drawImage_negativedest");
  }
  try {
   test_2d_drawImage_negativedir();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_drawImage_negativedir");
@@ -18726,16 +20474,21 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_drawImage_transform");
  }
  try {
   test_2d_drawImage_wrongtype();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_drawImage_wrongtype");
  }
  try {
+  test_2d_drawImage_zerocanvas();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_drawImage_zerocanvas");
+ }
+ try {
   test_2d_drawImage_zerosource();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_drawImage_zerosource");
  }
  try {
   test_2d_fillRect_basic();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillRect_basic");
@@ -18851,16 +20604,21 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hsl_4");
  }
  try {
   test_2d_fillStyle_parse_hsl_5();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hsl_5");
  }
  try {
+  test_2d_fillStyle_parse_hsl_6();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hsl_6");
+ }
+ try {
   test_2d_fillStyle_parse_hsl_clamp_1();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hsl_clamp_1");
  }
  try {
   test_2d_fillStyle_parse_hsl_clamp_2();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hsl_clamp_2");
@@ -18916,26 +20674,56 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_hsla_clamp_6");
  }
  try {
   test_2d_fillStyle_parse_html4();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_html4");
  }
  try {
+  test_2d_fillStyle_parse_invalid_hex1();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hex1");
+ }
+ try {
+  test_2d_fillStyle_parse_invalid_hex2();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hex2");
+ }
+ try {
   test_2d_fillStyle_parse_invalid_hex3();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hex3");
  }
  try {
+  test_2d_fillStyle_parse_invalid_hex4();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hex4");
+ }
+ try {
+  test_2d_fillStyle_parse_invalid_hex5();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hex5");
+ }
+ try {
   test_2d_fillStyle_parse_invalid_hex6();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hex6");
  }
  try {
+  test_2d_fillStyle_parse_invalid_hex7();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hex7");
+ }
+ try {
+  test_2d_fillStyle_parse_invalid_hex8();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hex8");
+ }
+ try {
   test_2d_fillStyle_parse_invalid_hsl_1();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hsl_1");
  }
  try {
   test_2d_fillStyle_parse_invalid_hsl_2();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hsl_2");
@@ -18951,16 +20739,21 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hsl_4");
  }
  try {
   test_2d_fillStyle_parse_invalid_hsl_5();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hsl_5");
  }
  try {
+  test_2d_fillStyle_parse_invalid_hsl_6();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hsl_6");
+ }
+ try {
   test_2d_fillStyle_parse_invalid_hsla_1();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hsla_1");
  }
  try {
   test_2d_fillStyle_parse_invalid_hsla_2();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_hsla_2");
@@ -18976,16 +20769,26 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_name_2");
  }
  try {
   test_2d_fillStyle_parse_invalid_name_3();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_name_3");
  }
  try {
+  test_2d_fillStyle_parse_invalid_name_4();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_name_4");
+ }
+ try {
+  test_2d_fillStyle_parse_invalid_name_5();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_name_5");
+ }
+ try {
   test_2d_fillStyle_parse_invalid_rgb_1();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_rgb_1");
  }
  try {
   test_2d_fillStyle_parse_invalid_rgb_2();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_rgb_2");
@@ -19036,16 +20839,26 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_rgba_4");
  }
  try {
   test_2d_fillStyle_parse_invalid_rgba_5();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_rgba_5");
  }
  try {
+  test_2d_fillStyle_parse_invalid_rgba_6();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_rgba_6");
+ }
+ try {
+  test_2d_fillStyle_parse_invalid_rgba_7();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_invalid_rgba_7");
+ }
+ try {
   test_2d_fillStyle_parse_rgb_clamp_1();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgb_clamp_1");
  }
  try {
   test_2d_fillStyle_parse_rgb_clamp_2();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgb_clamp_2");
@@ -19061,16 +20874,21 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgb_clamp_4");
  }
  try {
   test_2d_fillStyle_parse_rgb_clamp_5();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgb_clamp_5");
  }
  try {
+  test_2d_fillStyle_parse_rgb_eof();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgb_eof");
+ }
+ try {
   test_2d_fillStyle_parse_rgb_num();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgb_num");
  }
  try {
   test_2d_fillStyle_parse_rgb_percent();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgb_percent");
@@ -19081,16 +20899,21 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgba_clamp_1");
  }
  try {
   test_2d_fillStyle_parse_rgba_clamp_2();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgba_clamp_2");
  }
  try {
+  test_2d_fillStyle_parse_rgba_eof();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgba_eof");
+ }
+ try {
   test_2d_fillStyle_parse_rgba_num_1();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgba_num_1");
  }
  try {
   test_2d_fillStyle_parse_rgba_num_2();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgba_num_2");
@@ -19106,16 +20929,26 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgba_solid_1");
  }
  try {
   test_2d_fillStyle_parse_rgba_solid_2();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgba_solid_2");
  }
  try {
+  test_2d_fillStyle_parse_rgba_solid_3();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgba_solid_3");
+ }
+ try {
+  test_2d_fillStyle_parse_rgba_solid_4();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_rgba_solid_4");
+ }
+ try {
   test_2d_fillStyle_parse_svg_1();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_svg_1");
  }
  try {
   test_2d_fillStyle_parse_svg_2();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_fillStyle_parse_svg_2");
@@ -19226,16 +21059,21 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_gradient_object_compare");
  }
  try {
   test_2d_gradient_object_crosscanvas();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_gradient_object_crosscanvas");
  }
  try {
+  test_2d_gradient_object_current();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_gradient_object_current");
+ }
+ try {
   test_2d_gradient_object_invalidcolour();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_gradient_object_invalidcolour");
  }
  try {
   test_2d_gradient_object_invalidoffset();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_gradient_object_invalidoffset");
@@ -19366,16 +21204,21 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_imageData_get_basic");
  }
  try {
   test_2d_imageData_get_clamp();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_imageData_get_clamp");
  }
  try {
+  test_2d_imageData_get_length();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_imageData_get_length");
+ }
+ try {
   test_2d_imageData_get_nonfinite();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_imageData_get_nonfinite");
  }
  try {
   test_2d_imageData_get_nonpremul();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_imageData_get_nonpremul");
@@ -19591,16 +21434,21 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_line_cap_round");
  }
  try {
   test_2d_line_cap_square();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_line_cap_square");
  }
  try {
+  test_2d_line_cap_valid();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_line_cap_valid");
+ }
+ try {
   test_2d_line_cross();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_line_cross");
  }
  try {
   test_2d_line_defaults();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_line_defaults");
@@ -19631,16 +21479,21 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_line_join_open");
  }
  try {
   test_2d_line_join_round();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_line_join_round");
  }
  try {
+  test_2d_line_join_valid();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_line_join_valid");
+ }
+ try {
   test_2d_line_miter_acute();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_line_miter_acute");
  }
  try {
   test_2d_line_miter_exceeded();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_line_miter_exceeded");
@@ -19661,16 +21514,21 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_line_miter_obtuse");
  }
  try {
   test_2d_line_miter_rightangle();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_line_miter_rightangle");
  }
  try {
+  test_2d_line_miter_valid();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_line_miter_valid");
+ }
+ try {
   test_2d_line_miter_within();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_line_miter_within");
  }
  try {
   test_2d_line_union();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_line_union");
@@ -19681,21 +21539,31 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_line_width_basic");
  }
  try {
   test_2d_line_width_invalid();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_line_width_invalid");
  }
  try {
+  test_2d_line_width_scaledefault();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_line_width_scaledefault");
+ }
+ try {
   test_2d_line_width_transformed();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_line_width_transformed");
  }
  try {
+  test_2d_line_width_valid();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_line_width_valid");
+ }
+ try {
   test_2d_missingargs();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_missingargs");
  }
  try {
   test_2d_path_arc_angle_1();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_path_arc_angle_1");
@@ -19721,16 +21589,21 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_path_arc_angle_5");
  }
  try {
   test_2d_path_arc_angle_6();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_path_arc_angle_6");
  }
  try {
+  test_2d_path_arc_default();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_path_arc_default");
+ }
+ try {
   test_2d_path_arc_empty();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_path_arc_empty");
  }
  try {
   test_2d_path_arc_end();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_path_arc_end");
@@ -20316,21 +22189,41 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_pattern_crosscanvas");
  }
  try {
   test_2d_pattern_image_broken();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_pattern_image_broken");
  }
  try {
+  test_2d_pattern_image_incomplete_emptysrc();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_pattern_image_incomplete_emptysrc");
+ }
+ try {
   test_2d_pattern_image_incomplete_immediate();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_pattern_image_incomplete_immediate");
  }
  try {
+  test_2d_pattern_image_incomplete_nosrc();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_pattern_image_incomplete_nosrc");
+ }
+ try {
+  test_2d_pattern_image_incomplete_reload();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_pattern_image_incomplete_reload");
+ }
+ try {
+  test_2d_pattern_image_incomplete_removedsrc();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_pattern_image_incomplete_removedsrc");
+ }
+ try {
   test_2d_pattern_image_null();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_pattern_image_null");
  }
  try {
   test_2d_pattern_image_string();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_pattern_image_string");
@@ -20571,26 +22464,41 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_shadow_composite_1");
  }
  try {
   test_2d_shadow_composite_2();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_shadow_composite_2");
  }
  try {
+  test_2d_shadow_enable_blur();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_shadow_enable_blur");
+ }
+ try {
   test_2d_shadow_enable_off_1();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_shadow_enable_off_1");
  }
  try {
   test_2d_shadow_enable_off_2();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_shadow_enable_off_2");
  }
  try {
+  test_2d_shadow_enable_x();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_shadow_enable_x");
+ }
+ try {
+  test_2d_shadow_enable_y();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_shadow_enable_y");
+ }
+ try {
   test_2d_shadow_gradient_alpha();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_shadow_gradient_alpha");
  }
  try {
   test_2d_shadow_gradient_basic();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_shadow_gradient_basic");
@@ -20731,16 +22639,21 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_clip");
  }
  try {
   test_2d_state_saverestore_fillStyle();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_fillStyle");
  }
  try {
+  test_2d_state_saverestore_font();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_state_saverestore_font");
+ }
+ try {
   test_2d_state_saverestore_globalAlpha();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_globalAlpha");
  }
  try {
   test_2d_state_saverestore_globalCompositeOperation();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_globalCompositeOperation");
@@ -20801,16 +22714,26 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_stackdepth");
  }
  try {
   test_2d_state_saverestore_strokeStyle();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_strokeStyle");
  }
  try {
+  test_2d_state_saverestore_textAlign();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_state_saverestore_textAlign");
+ }
+ try {
+  test_2d_state_saverestore_textBaseline();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_state_saverestore_textBaseline");
+ }
+ try {
   test_2d_state_saverestore_transformation();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_transformation");
  }
  try {
   test_2d_state_saverestore_underflow();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_state_saverestore_underflow");
@@ -20886,26 +22809,116 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_text_align_default");
  }
  try {
   test_2d_text_align_invalid();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_text_align_invalid");
  }
  try {
+  test_2d_text_align_valid();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_text_align_valid");
+ }
+ try {
   test_2d_text_baseline_default();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_text_baseline_default");
  }
  try {
   test_2d_text_baseline_invalid();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_text_baseline_invalid");
  }
  try {
+  test_2d_text_baseline_valid();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_text_baseline_valid");
+ }
+ try {
+  test_2d_text_draw_fill_basic();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_text_draw_fill_basic");
+ }
+ try {
+  test_2d_text_draw_fill_maxWidth_large();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_text_draw_fill_maxWidth_large");
+ }
+ try {
+  test_2d_text_draw_fill_maxWidth_small();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_text_draw_fill_maxWidth_small");
+ }
+ try {
+  test_2d_text_draw_fill_maxWidth_zero();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_text_draw_fill_maxWidth_zero");
+ }
+ try {
+  test_2d_text_draw_fill_rtl();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_text_draw_fill_rtl");
+ }
+ try {
+  test_2d_text_draw_fill_unaffected();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_text_draw_fill_unaffected");
+ }
+ try {
+  test_2d_text_draw_kern_consistent();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_text_draw_kern_consistent");
+ }
+ try {
+  test_2d_text_draw_stroke_basic();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_text_draw_stroke_basic");
+ }
+ try {
+  test_2d_text_draw_stroke_unaffected();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_text_draw_stroke_unaffected");
+ }
+ try {
+  test_2d_text_font_default();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_text_font_default");
+ }
+ try {
+  test_2d_text_font_parse_basic();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_text_font_parse_basic");
+ }
+ try {
+  test_2d_text_font_parse_complex();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_text_font_parse_complex");
+ }
+ try {
+  test_2d_text_font_parse_invalid();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_text_font_parse_invalid");
+ }
+ try {
+  test_2d_text_font_parse_size_percentage_default();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_text_font_parse_size_percentage_default");
+ }
+ try {
+  test_2d_text_font_parse_size_percentage();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_text_font_parse_size_percentage");
+ }
+ try {
+  test_2d_text_font_parse_system();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_text_font_parse_system");
+ }
+ try {
   test_2d_transformation_order();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_transformation_order");
  }
  try {
   test_2d_transformation_rotate_direction();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_transformation_rotate_direction");
@@ -21321,26 +23334,46 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_toDataURL_arguments_2");
  }
  try {
   test_toDataURL_arguments_3();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_toDataURL_arguments_3");
  }
  try {
+  test_toDataURL_bogustype();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_toDataURL_bogustype");
+ }
+ try {
   test_toDataURL_default();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_toDataURL_default");
  }
  try {
+  test_toDataURL_jpeg_quality_notnumber();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_toDataURL_jpeg_quality_notnumber");
+ }
+ try {
+  test_toDataURL_jpeg_quality_outsiderange();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_toDataURL_jpeg_quality_outsiderange");
+ }
+ try {
   test_toDataURL_lowercase_ascii();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_toDataURL_lowercase_ascii");
  }
  try {
+  test_toDataURL_lowercase_unicode();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_toDataURL_lowercase_unicode");
+ }
+ try {
   test_toDataURL_nocontext();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_toDataURL_nocontext");
  }
  try {
   test_toDataURL_png();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_toDataURL_png");
