From: Ms2ger <ms2ger@gmail.com>
Bug 665345 - Move Mozilla-specific tests to a separate file

This patch moves those tests that are not part of Philip Taylor's
cross-browser canvas test suite to test_canvas_mozilla.html, to
ensure they remain in our test suite.

diff --git a/content/canvas/test/Makefile.in b/content/canvas/test/Makefile.in
--- a/content/canvas/test/Makefile.in
+++ b/content/canvas/test/Makefile.in
@@ -8,16 +8,17 @@ topsrcdir	= @top_srcdir@
 srcdir		= @srcdir@
 VPATH		= @srcdir@
 relativesrcdir  = @relativesrcdir@
 
 include $(DEPTH)/config/autoconf.mk
 MOCHITEST_FILES = \
 	canvas-tests.js \
 	test_canvas.html \
+	test_canvas_mozilla.html \
 	test_isPointInStroke.html \
 	image_transparent50.png \
 	image_redtransparent.png \
 	image_yellow.png \
 	image_anim-poster-gr.png \
 	image_green-16x16.png \
 	image_red-16x16.png \
 	image_green-1x1.png \
diff --git a/content/canvas/test/test_canvas.html b/content/canvas/test/test_canvas.html
--- a/content/canvas/test/test_canvas.html
+++ b/content/canvas/test/test_canvas.html
@@ -7758,22 +7758,22 @@ var _thrown = undefined; try {
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.object.clamp.html ]]] -->
 
 <p>Canvas test: 2d.imageData.object.clamp</p>
 <!-- Testing: ImageData.data clamps numbers to [0, 255] -->
-<canvas height="50" id="c279" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="50" id="c263" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_object_clamp() {
 
-var canvas = document.getElementById('c279');
+var canvas = document.getElementById('c263');
 var ctx = canvas.getContext('2d');
 
 var imgdata = ctx.getImageData(0, 0, 10, 10);
 
 imgdata.data[0] = 100;
 imgdata.data[0] = 300;
 ok(imgdata.data[0] === 255, "imgdata.data[\""+(0)+"\"] === 255");
 imgdata.data[0] = 100;
@@ -18057,100 +18057,16 @@ ok(ctx.drawImage(document.getElementById
 ok(ctx.drawImage(canvas, 0, 0, 1, 1, 0, 0, 0, 0) === undefined, "ctx.drawImage(canvas, 0, 0, 1, 1, 0, 0, 0, 0) === undefined");
 ok(ctx.createLinearGradient(0, 0, 0, 0).addColorStop(0, 'white') === undefined, "ctx.createLinearGradient(0, 0, 0, 0).addColorStop(0, 'white') === undefined");
 
 
 }
 </script>
 <img class="resource" id="yellow_11.png" src="image_yellow.png">
 
-<!-- [[[ test_bug397524.html ]]] -->
-
-<p>Test for Bug 397524</p>
-<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=397524" target="_blank">Mozilla Bug 397524</a>
-<p id="display">
-  <canvas height="1" id="canvas1" width="1"></canvas>
-  <canvas height="1" id="canvas2" width="1"></canvas>
-  <canvas height="1" id="canvas3" width="1"></canvas>
-  <img id="i1" src="image_green-1x1.png">
-  <img id="i2" src="http://example.com/tests/content/canvas/test/image_green-1x1.png">
-  <img id="i3" src="image_green-redirect">
-</p>
-<div id="content" style="display: none">
-  
-</div>
-<pre id="test"><script class="testbody" type="text/javascript">
-
-/** Test for Bug 397524 **/
-
-function draw(n) {
-  $("canvas" + n).getContext('2d').drawImage($("i" + n), 0, 0);
-}
-
-function test_bug397524() {
-  draw(1);
-  draw(2);
-  draw(3);
-
-  // Should be able to get the data out of the first canvas
-  $("canvas1").toDataURL("image/png");
-
-  // Should not be able to get the data out of a cross-site load
-  var gotData = false;  
-  try {
-    $("canvas2").toDataURL("image/png");
-    gotData = true;
-  } catch (ex if (ex.code == 18 && ex.name == "SecurityError")) {
-  }
-  is(gotData, false, "Shouldn't be able to read images cross-site!");
-
-  // Should not be able to get the data out of a redirected cross-site load
-  var gotData = false;  
-  try {
-    $("canvas3").toDataURL("image/png");
-    gotData = true;
-  } catch (ex if (ex.code == 18 && ex.name == "SecurityError")) {
-  }
-  is(gotData, false, "Shouldn't be able to read images redirected cross-site!");
-
-}
-
-</script>
-</pre>
-
-<!-- [[[ test_bug405982.html ]]] -->
-
-<p>Canvas test: toDataURL.png</p>
-<canvas height="50" id="c614" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-function test_bug405982() {
-
-var canvas = SpecialPowers.wrap(document.getElementById('c614'));
-var ctx = canvas.getContext('2d');
-
-var _threw = false;
-try {
-  var data = canvas.toDataURL('image/png', 'quality=100');
-}
-catch (e) {
-  _threw = true;
-}
-ok(!_threw, "Should not throw an exception for invalid args to png encoder");
-
-_threw = false;
-try {
-  var data = canvas.toDataURL('image/jpeg', 'foobar=true');
-}
-catch (e) {
-  _threw = true;
-}
-ok(!_threw, "Should not throw an exception for invalid args to jpeg encoder");
-
-}
-</script>
 <!-- [[[ test_context.arguments.extra.html ]]] -->
 
 <p>Canvas test: context.arguments.extra</p>
 <canvas height="50" id="c615" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_context_arguments_extra() {
 
@@ -19071,215 +18987,16 @@ canvas.width = 120;
 canvas.height = 60;
 ok(canvas.width === 120, "canvas.width === 120");
 ok(canvas.height === 60, "canvas.height === 60");
 
 
 }
 </script>
 
-<!-- [[[ test_text.font.html ]]] -->
-
-<p>Canvas test: text.font</p>
-<canvas height="50" id="c659" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-var _deferred = true;
-
-function test_text_font() {
-
-var canvas = document.getElementById('c659');
-var ctx = canvas.getContext('2d');
-
-is(ctx.font, '10px sans-serif', "default font is not '10px sans-serif'");
-
-ctx.save();
-ctx.font = '20pt serif';
-is(ctx.font, '20pt serif', 'font getter returns incorrect value');
-
-ctx.restore();
-is(ctx.font, '10px sans-serif', 'font not being stored in the context state');
-
-if (!_deferred) SimpleTest.finish();
-}
-</script>
-
-<!-- [[[ test_text.measure.html ]]] -->
-
-<p>Canvas test: text.measure</p>
-<canvas height="50" id="c660" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-var _deferred = true;
-
-function test_text_measure() {
-
-var canvas = document.getElementById('c660');
-var ctx = canvas.getContext('2d');
-
-ctx.font = "10px sans-serif";
-ctx.textAlign = "left";
-ctx.textBaseline = "top";
-
-var str = 'Test String';
-var wid = ctx.measureText(str).width;
-
-ok(wid > 0, "measureText returns nonpositive value for non-empty string");
-
-ctx.font = "20px sans-serif";
-isnot(wid, ctx.measureText(str).width, "measureText does not change with a different font size");
-
-ctx.font = "10px sans-serif";
-ctx.textAlign = "center";
-ctx.textBaseline = "alphabetic";
-
-is(wid, ctx.measureText(str).width, "measureText changes when alignement/baseline is changed");
-
-
-if (!_deferred) SimpleTest.finish();
-}
-</script>
-
-<!-- [[[ test_text.space.replace.html ]]] -->
-
-<p>Canvas test: text.space.replace</p>
-<canvas height="50" id="c661" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-var _deferred = true;
-
-function test_text_space_replace() {
-
-var canvas = document.getElementById('c661');
-var ctx = canvas.getContext('2d');
-
-var swid = ctx.measureText(' ').width;
-ctx.font = "10px sans-serif";
-
-isnot(swid, 0.0, "measureText reutuns zero for a non-empty string");
-is(swid, ctx.measureText('\x09').width, "measureText does not replace whitespace char with a space");
-is(swid, ctx.measureText('\x0A').width, "measureText does not replace whitespace char with a space");
-is(swid, ctx.measureText('\x0B').width, "measureText does not replace whitespace char with a space");
-is(swid, ctx.measureText('\x0C').width, "measureText does not replace whitespace char with a space");
-is(swid, ctx.measureText('\x0D').width, "measureText does not replace whitespace char with a space");
-
-if (!_deferred) SimpleTest.finish();
-}
-</script>
-
-<!-- [[[ test_text.textAlign.html ]]] -->
-
-<p>Canvas test: text.textAlign</p>
-<canvas height="50" id="c662" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-var _deferred = true;
-
-function test_text_textAlign() {
-
-var canvas = document.getElementById('c662');
-var ctx = canvas.getContext('2d');
-
-is(ctx.textAlign, 'start', "default textAlign is not 'start'");
-
-ctx.save();
-ctx.textAlign = 'end';
-is(ctx.textAlign, 'end', 'textAlign getter returns incorrect value');
-
-ctx.save();
-ctx.textAlign = 'left';
-is(ctx.textAlign, 'left', 'textAlign getter returns incorrect value');
-
-ctx.save();
-ctx.textAlign = 'center';
-is(ctx.textAlign, 'center', 'textAlign getter returns incorrect value');
-
-ctx.save();
-ctx.textAlign = 'right';
-is(ctx.textAlign, 'right', 'textAlign getter returns incorrect value');
-
-ctx.save();
-ctx.textAlign = 'start';
-is(ctx.textAlign, 'start', 'textAlign getter returns incorrect value');
-
-ctx.restore();
-is(ctx.textAlign, 'right', 'textAlign not being stored in the context state');
-
-ctx.restore();
-is(ctx.textAlign, 'center', 'textAlign not being stored in the context state');
-
-ctx.restore();
-is(ctx.textAlign, 'left', 'textAlign not being stored in the context state');
-
-ctx.restore();
-is(ctx.textAlign, 'end', 'textAlign not being stored in the context state');
-
-ctx.restore();
-is(ctx.textAlign, 'start', 'textAlign not being stored in the context state');
-
-if (!_deferred) SimpleTest.finish();
-}
-</script>
-
-<!-- [[[ test_text.textBaseline.html ]]] -->
-
-<p>Canvas test: text.textBaseline</p>
-<canvas height="50" id="c663" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-var _deferred = true;
-
-function test_text_textBaseline() {
-
-var canvas = document.getElementById('c663');
-var ctx = canvas.getContext('2d');
-
-is(ctx.textBaseline, 'alphabetic', "default textBaseline is not 'alphabetic'");
-
-ctx.save();
-ctx.textBaseline = 'ideographic';
-is(ctx.textBaseline, 'ideographic', 'textBaseline getter returns incorrect value');
-
-ctx.save();
-ctx.textBaseline = 'top';
-is(ctx.textBaseline, 'top', 'textBaseline getter returns incorrect value');
-
-ctx.save();
-ctx.textBaseline = 'middle';
-is(ctx.textBaseline, 'middle', 'textBaseline getter returns incorrect value');
-
-ctx.save();
-ctx.textBaseline = 'bottom';
-is(ctx.textBaseline, 'bottom', 'textBaseline getter returns incorrect value');
-
-ctx.save();
-ctx.textBaseline = 'hanging';
-is(ctx.textBaseline, 'hanging', 'textBaseline getter returns incorrect value');
-
-ctx.save();
-ctx.textBaseline = 'alphabetic';
-is(ctx.textBaseline, 'alphabetic', 'textBaseline getter returns incorrect value');
-
-ctx.restore();
-is(ctx.textBaseline, 'hanging', 'textBaseline not being stored in the context state');
-
-ctx.restore();
-is(ctx.textBaseline, 'bottom', 'textBaseline not being stored in the context state');
-
-ctx.restore();
-is(ctx.textBaseline, 'middle', 'textBaseline not being stored in the context state');
-
-ctx.restore();
-is(ctx.textBaseline, 'top', 'textBaseline not being stored in the context state');
-
-ctx.restore();
-is(ctx.textBaseline, 'ideographic', 'textBaseline not being stored in the context state');
-
-ctx.restore();
-is(ctx.textBaseline, 'alphabetic', 'textBaseline not being stored in the context state');
-
-if (!_deferred) SimpleTest.finish();
-}
-</script>
-
 <!-- [[[ test_toDataURL.arguments.1.html ]]] -->
 
 <p>Canvas test: toDataURL.arguments.1 - bug 401795</p>
 <!-- Testing: toDataURL ignores extra arguments -->
 <canvas height="50" id="c664" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_toDataURL_arguments_1() {
@@ -19577,222 +19294,16 @@ var canvas = document.getElementById('c6
 var ctx = canvas.getContext('2d');
 
 ok(Object.prototype.toString.call(canvas) === '[object HTMLCanvasElement]', "Object.prototype.toString.call(canvas) === '[object HTMLCanvasElement]'");
 
 
 }
 </script>
 
-<!-- [[[ test_2d.imagedata_coercion.html ]]] -->
-
-<p>Canvas test: 2d.imagedata_coercion</p>
-<!-- Testing: imagedata coerced correctly on set -->
-<canvas height="1" id="c681" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-
-/* NOTE: Due to round-tripping through premultiplied values and the rounding
-that ensues, values of alpha < 255 will tend to do weird things.  In
-particular, the premultiplied color values are computed by multiplying by a,
-dividing by 255, then always rounding up.  The conversion the other way is done
-by multiplying by 255/a and rounding down.  So if
-
-  255/a * (amount added when rounding) > 1
-
-we will get a change in value when we go through a putImageData/getImageData cycle.  Therefore, to make sure we don't have to worry about our color
-channels, our alpha channel should never be < 250, unless it's 0.  And when it's 0, all our color channels will come back as 0 too. */
-  
-/* Our tests.  Each test has two arrays: the array of values to set and the
-   array of values that should read back as a result. */
-var tests = [
-  [
-    [ 0, 1, 3, 250 ], [ 0, 1, 3, 250 ]
-  ],
-  [
-    [ 0, 1, 2, 250, 4, 5, 6, 250 ], [ 0, 1, 2, 250, 4, 5, 6, 250 ]
-  ],
-  [
-    [ 0, 1000, 2, 300, 400, 5, 600, 250 ], [ 0, 255, 2, 255, 255, 5, 255, 250 ]
-  ],
-  [
-    [ -10, -5, NaN, 250, 4, 5, 6, -250 ], [ 0, 0, 0, 250, 0, 0, 0, 0 ]
-  ],
-  [
-    [ 0.5, 12.2, 12.8, 251.5, 12.5, 13.5, 13.2, 250.5 ],
-    [ 0, 12, 13, 252, 12, 14, 13, 250 ]
-  ]
-];
-
-function doTest(type, idx) {
-  var testPair = tests[idx];
-  var test = testPair[0];
-  var ref = testPair[1];
-  var descSuffix = " for " + type + " test #" + (idx+1);
-  function myIs(a, b, str) {
-    is(a, b, str + descSuffix);
-  }
-
-  myIs(test.length, ref.length, "Length mismatch");
-  myIs(test.length % 4, 0, "Length not a multiple of 4");
-  var pixels = test.length / 4;
-  var imageData = ctx681.createImageData(pixels, 1);
-  myIs(imageData.width, pixels, "Incorrect created data width");
-  myIs(imageData.height, 1, "Incorrect created data height");
-  myIs(imageData.data.length, test.length,
-       "Incorrect length in created image data");
-
-  ctx681.putImageData(imageData, 0, 0);
-  var testImageData = ctx681.getImageData(0, 0, pixels, 1);
-  myIs(testImageData.data.length, test.length,
-       "Incorrect length in test image data after clearing pixels");
-  var j;
-  for (j = 0; j < testImageData.data.length; ++j) {
-    myIs(testImageData.data[j], 0,
-         "Nonzero value at position " + j + " in test image data " +
-         "after clearing pixels");
-  }
-  for (j = 0; j < imageData.data.length; ++j) {
-    imageData.data[j] = test[j];
-  }
-  if (type == "slow") {
-    // convert to a non-dense array so we can test that codepath
-    imageData.data.makeMeSlow = 1;
-  }
-  ctx681.putImageData(imageData, 0, 0);
-  testImageData = ctx681.getImageData(0, 0, pixels, 1);
-  myIs(testImageData.data.length, test.length,
-       "Incorrect length in test image data after putting our imagedata");
-  for (j = 0; j < testImageData.data.length; ++j) {
-    myIs(testImageData.data[j], ref[j],
-         "Incorrect value at position " + j + " in test image data " +
-         "after putting our imagedata");
-  }
-}
-
-function doTests(type) {
-  for (var i = 0; i < tests.length; ++i) {
-    doTest(type, i);
-  }
-}
-
-var canvas681;
-var ctx681;
-                      
-function test_2d_imagedata_coercion() {
-
-canvas681 = document.getElementById('c681');
-ctx681 = canvas681.getContext('2d');
-
-doTests("fast");
-doTests("slow");
-
-}
-</script>
-
-<!-- [[[ test_2d.imageSmoothing.html ]]] -->
-
-<p>Canvas test: 2d.imageRenderingQuality</p>
-<canvas height="10" id="c682" width="10"></canvas><br>
-<canvas height="2" id="c683" style="visibility: hidden" width="2"></canvas>
-<script type="text/javascript">
-
-function setup_test_2d_imageSmoothing() {
-  var c683 = document.getElementById("c683");
-  var cx683 = c683.getContext("2d");
-
-  cx683.fillStyle = "red";
-  cx683.fillRect(0, 0, 2, 2);
-
-  cx683.fillStyle = "rgb(0,255,0)";
-  cx683.fillRect(0, 0, 1, 1);
-}
-
-function test_2d_imageSmoothing() {
-  setup_test_2d_imageSmoothing();
-
-  var c682 = document.getElementById("c682");
-  var c683 = document.getElementById("c683");
-
-  var cx682 = c682.getContext("2d");
-
-  ok(cx682.mozImageSmoothingEnabled == true, "initial mozImageSmoothingEnabled is true");
-
-  // check that mozImageSmoothingEnabled is part of the context
-  cx682.save();
-  cx682.mozImageSmoothingEnabled = false;
-  ok(cx682.mozImageSmoothingEnabled == false, "mozImageSmoothingEnabled is false after setting");
-  cx682.restore();
-  ok(cx682.mozImageSmoothingEnabled == true, "mozImageSmoothingEnabled is true after restore");
-
-  // check that false works
-  cx682.mozImageSmoothingEnabled = false;
-
-  cx682.scale(10,10);
-  cx682.drawImage(c683, 0, 0);
-
-  // this should be all red
-  var data = cx682.getImageData(9, 9, 1, 1);
-  var pixels = data.data;
-  ok (pixels[0] == 0 &&
-      pixels[1] == 255 &&
-      pixels[2] == 0 &&
-      pixels[3] == 255,
-      "pixel is " + pixels.toSource() + " (expected [0,255,0,255])");
-}
-
-</script>
-
-<p>Canvas test: zero_dimensions</p>
-<canvas height="0" id="c684" width="0"></canvas>
-<script type="text/javascript">
-function test_zero_dimensions() {
-  var c = document.getElementById("c684");
-  ok(c.width == 0, "c.width not 0");
-  ok(c.height == 0, "c.height not 0");
-}
-</script>
-
-<p>Canvas test: zero_dimensions_image_data</p>
-<canvas height="0" id="c685" width="0"></canvas>
-<script type="text/javascript">
-function test_zero_dimensions_imagedata() {
-  var c = document.getElementById("c685");
-  var ctx = c.getContext("2d");
-  ctx.fillStyle = "blue";
-  ctx.fillRect(0, 0, 100, 100);
-  var imgdata = ctx.getImageData(0, 0, 100, 100);
-  var isTransparentBlack = true;
-  for (var i = 0; i < imgdata.data.length; ++i)
-      if (imgdata.data[i] !== 0)
-          isTransparentBlack = false;
-  ok(isTransparentBlack, "isTransparentBlack");
-}
-</script>
-
-<p>Canvas test: getImageData_after_zero_canvas</p>
-<canvas height="100" id="c686" width="100"></canvas>
-<script type="text/javascript">
-function test_getImageData_after_zero_canvas() {
-    var c = document.getElementById("c686");
-    var ctx = c.getContext("2d");
-    ctx.fillStyle = "rgba(0, 0, 0, 1.0)";
-    ctx.fillRect(0, 0, c.width, c.height);
-    var oldimgdata = ctx.getImageData(0, 0, c.width, c.height);
-    c.width = c.height = 0;
-    c.width = c.height = 100;
-    ctx.fillRect(0, 0, c.width, c.height);
-    var imgdata = ctx.getImageData(0, 0, c.width, c.height);
-    var same = false;
-    ok(imgdata.data.length === oldimgdata.data.length, "not the same length");
-    for (var i = 0; i < imgdata.data.length; ++i)
-        same = imgdata.data[i] === oldimgdata.data[i];
-    ok(same, "changing dimensions broke canvas");
-}
-</script>
-
 <script>
 function runTests() {
 /**
  * xor and lighter aren't well handled by cairo; they mostly work, but we don't want
  * to test that
  */
  //test_2d_composite_solid_lighter();
  //test_2d_composite_transparent_xor();
@@ -22633,26 +22144,16 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_type_extend");
  }
  try {
   test_2d_voidreturn();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_voidreturn");
  }
  try {
-  test_bug397524();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_bug397524");
- }
- try {
-  test_bug405982();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_bug405982");
- }
- try {
   test_context_arguments_extra();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_context_arguments_extra");
  }
  try {
   test_context_arguments_missing();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_context_arguments_missing");
@@ -22863,41 +22364,16 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_size_attributes_type_get");
  }
  try {
   test_size_attributes_type_set();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_size_attributes_type_set");
  }
  try {
-  test_text_font();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_text_font");
- }
- try {
-  test_text_measure();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_text_measure");
- }
- try {
-  test_text_space_replace();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_text_space_replace");
- }
- try {
-  test_text_textAlign();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_text_textAlign");
- }
- try {
-  test_text_textBaseline();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_text_textBaseline");
- }
- try {
   test_toDataURL_arguments_1();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_toDataURL_arguments_1");
  }
  try {
   test_toDataURL_arguments_2();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_toDataURL_arguments_2");
@@ -22957,42 +22433,16 @@ function runTests() {
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_type_extend");
  }
  try {
   test_type_name();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_type_name");
  }
- try {
-  test_2d_imagedata_coercion();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_2d_imagedata_coercion");
- }
- try {
-  test_2d_imageSmoothing();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_2d_imageSmoothing");
- }
- try {
-  test_zero_dimensions();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_zero_dimensions");
- }
- try {
-  test_zero_dimensions_imagedata();
- } catch(e) {
-  ok(false, "unexpected exception thrown in: test_zero_dimensions_imagedata");
- }
- try {
-  test_getImageData_after_zero_canvas();
- } catch(e) {
-  throw e;
-  ok(false, "unexpected exception thrown in: test_getImageData_after_zero_canvas");
- }
 
 
  SimpleTest.finish();
 }
 
 addLoadEvent(runTests);
 
 </script>
diff --git a/content/canvas/test/test_canvas_mozilla.html b/content/canvas/test/test_canvas_mozilla.html
new file mode 100644
--- /dev/null
+++ b/content/canvas/test/test_canvas_mozilla.html
@@ -0,0 +1,561 @@
+<!DOCTYPE html>
+<title>Mozilla-specific Canvas Tests</title>
+<script src="/MochiKit/packed.js"></script>
+<script src="/tests/SimpleTest/SimpleTest.js"></script>
+<link href="/tests/SimpleTest/test.css" rel="stylesheet">
+<body>
+<script>
+
+SimpleTest.waitForExplicitFinish();
+</script>
+<!-- [[[ test_bug397524.html ]]] -->
+
+<p>Test for Bug 397524</p>
+<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=397524" target="_blank">Mozilla Bug 397524</a>
+<p id="display">
+  <canvas height="1" id="canvas1" width="1"></canvas>
+  <canvas height="1" id="canvas2" width="1"></canvas>
+  <canvas height="1" id="canvas3" width="1"></canvas>
+  <img id="i1" src="image_green-1x1.png">
+  <img id="i2" src="http://example.com/tests/content/canvas/test/image_green-1x1.png">
+  <img id="i3" src="image_green-redirect">
+</p>
+<div id="content" style="display: none">
+  
+</div>
+<pre id="test"><script class="testbody" type="text/javascript">
+
+/** Test for Bug 397524 **/
+
+function draw(n) {
+  $("canvas" + n).getContext('2d').drawImage($("i" + n), 0, 0);
+}
+
+function test_bug397524() {
+  draw(1);
+  draw(2);
+  draw(3);
+
+  // Should be able to get the data out of the first canvas
+  $("canvas1").toDataURL("image/png");
+
+  // Should not be able to get the data out of a cross-site load
+  var gotData = false;  
+  try {
+    $("canvas2").toDataURL("image/png");
+    gotData = true;
+  } catch (ex if (ex.code == 18 && ex.name == "SecurityError")) {
+  }
+  is(gotData, false, "Shouldn't be able to read images cross-site!");
+
+  // Should not be able to get the data out of a redirected cross-site load
+  var gotData = false;  
+  try {
+    $("canvas3").toDataURL("image/png");
+    gotData = true;
+  } catch (ex if (ex.code == 18 && ex.name == "SecurityError")) {
+  }
+  is(gotData, false, "Shouldn't be able to read images redirected cross-site!");
+
+}
+
+</script>
+</pre>
+
+<!-- [[[ test_bug405982.html ]]] -->
+
+<p>Canvas test: toDataURL.png</p>
+<canvas height="50" id="c614" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+function test_bug405982() {
+
+var canvas = SpecialPowers.wrap(document.getElementById('c614'));
+var ctx = canvas.getContext('2d');
+
+var _threw = false;
+try {
+  var data = canvas.toDataURL('image/png', 'quality=100');
+}
+catch (e) {
+  _threw = true;
+}
+ok(!_threw, "Should not throw an exception for invalid args to png encoder");
+
+_threw = false;
+try {
+  var data = canvas.toDataURL('image/jpeg', 'foobar=true');
+}
+catch (e) {
+  _threw = true;
+}
+ok(!_threw, "Should not throw an exception for invalid args to jpeg encoder");
+
+}
+</script>
+
+<!-- [[[ test_2d.imagedata_coercion.html ]]] -->
+
+<p>Canvas test: 2d.imagedata_coercion</p>
+<!-- Testing: imagedata coerced correctly on set -->
+<canvas height="1" id="c681" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+/* NOTE: Due to round-tripping through premultiplied values and the rounding
+that ensues, values of alpha < 255 will tend to do weird things.  In
+particular, the premultiplied color values are computed by multiplying by a,
+dividing by 255, then always rounding up.  The conversion the other way is done
+by multiplying by 255/a and rounding down.  So if
+
+  255/a * (amount added when rounding) > 1
+
+we will get a change in value when we go through a putImageData/getImageData cycle.  Therefore, to make sure we don't have to worry about our color
+channels, our alpha channel should never be < 250, unless it's 0.  And when it's 0, all our color channels will come back as 0 too. */
+  
+/* Our tests.  Each test has two arrays: the array of values to set and the
+   array of values that should read back as a result. */
+var tests = [
+  [
+    [ 0, 1, 3, 250 ], [ 0, 1, 3, 250 ]
+  ],
+  [
+    [ 0, 1, 2, 250, 4, 5, 6, 250 ], [ 0, 1, 2, 250, 4, 5, 6, 250 ]
+  ],
+  [
+    [ 0, 1000, 2, 300, 400, 5, 600, 250 ], [ 0, 255, 2, 255, 255, 5, 255, 250 ]
+  ],
+  [
+    [ -10, -5, NaN, 250, 4, 5, 6, -250 ], [ 0, 0, 0, 250, 0, 0, 0, 0 ]
+  ],
+  [
+    [ 0.5, 12.2, 12.8, 251.5, 12.5, 13.5, 13.2, 250.5 ],
+    [ 0, 12, 13, 252, 12, 14, 13, 250 ]
+  ]
+];
+
+function doTest(type, idx) {
+  var testPair = tests[idx];
+  var test = testPair[0];
+  var ref = testPair[1];
+  var descSuffix = " for " + type + " test #" + (idx+1);
+  function myIs(a, b, str) {
+    is(a, b, str + descSuffix);
+  }
+
+  myIs(test.length, ref.length, "Length mismatch");
+  myIs(test.length % 4, 0, "Length not a multiple of 4");
+  var pixels = test.length / 4;
+  var imageData = ctx681.createImageData(pixels, 1);
+  myIs(imageData.width, pixels, "Incorrect created data width");
+  myIs(imageData.height, 1, "Incorrect created data height");
+  myIs(imageData.data.length, test.length,
+       "Incorrect length in created image data");
+
+  ctx681.putImageData(imageData, 0, 0);
+  var testImageData = ctx681.getImageData(0, 0, pixels, 1);
+  myIs(testImageData.data.length, test.length,
+       "Incorrect length in test image data after clearing pixels");
+  var j;
+  for (j = 0; j < testImageData.data.length; ++j) {
+    myIs(testImageData.data[j], 0,
+         "Nonzero value at position " + j + " in test image data " +
+         "after clearing pixels");
+  }
+  for (j = 0; j < imageData.data.length; ++j) {
+    imageData.data[j] = test[j];
+  }
+  if (type == "slow") {
+    // convert to a non-dense array so we can test that codepath
+    imageData.data.makeMeSlow = 1;
+  }
+  ctx681.putImageData(imageData, 0, 0);
+  testImageData = ctx681.getImageData(0, 0, pixels, 1);
+  myIs(testImageData.data.length, test.length,
+       "Incorrect length in test image data after putting our imagedata");
+  for (j = 0; j < testImageData.data.length; ++j) {
+    myIs(testImageData.data[j], ref[j],
+         "Incorrect value at position " + j + " in test image data " +
+         "after putting our imagedata");
+  }
+}
+
+function doTests(type) {
+  for (var i = 0; i < tests.length; ++i) {
+    doTest(type, i);
+  }
+}
+
+var canvas681;
+var ctx681;
+                      
+function test_2d_imagedata_coercion() {
+
+canvas681 = document.getElementById('c681');
+ctx681 = canvas681.getContext('2d');
+
+doTests("fast");
+doTests("slow");
+
+}
+</script>
+
+<!-- [[[ test_2d.imageSmoothing.html ]]] -->
+
+<p>Canvas test: 2d.imageRenderingQuality</p>
+<canvas height="10" id="c682" width="10"></canvas><br>
+<canvas height="2" id="c683" style="visibility: hidden" width="2"></canvas>
+<script type="text/javascript">
+
+function setup_test_2d_imageSmoothing() {
+  var c683 = document.getElementById("c683");
+  var cx683 = c683.getContext("2d");
+
+  cx683.fillStyle = "red";
+  cx683.fillRect(0, 0, 2, 2);
+
+  cx683.fillStyle = "rgb(0,255,0)";
+  cx683.fillRect(0, 0, 1, 1);
+}
+
+function test_2d_imageSmoothing() {
+  setup_test_2d_imageSmoothing();
+
+  var c682 = document.getElementById("c682");
+  var c683 = document.getElementById("c683");
+
+  var cx682 = c682.getContext("2d");
+
+  ok(cx682.mozImageSmoothingEnabled == true, "initial mozImageSmoothingEnabled is true");
+
+  // check that mozImageSmoothingEnabled is part of the context
+  cx682.save();
+  cx682.mozImageSmoothingEnabled = false;
+  ok(cx682.mozImageSmoothingEnabled == false, "mozImageSmoothingEnabled is false after setting");
+  cx682.restore();
+  ok(cx682.mozImageSmoothingEnabled == true, "mozImageSmoothingEnabled is true after restore");
+
+  // check that false works
+  cx682.mozImageSmoothingEnabled = false;
+
+  cx682.scale(10,10);
+  cx682.drawImage(c683, 0, 0);
+
+  // this should be all red
+  var data = cx682.getImageData(9, 9, 1, 1);
+  var pixels = data.data;
+  ok (pixels[0] == 0 &&
+      pixels[1] == 255 &&
+      pixels[2] == 0 &&
+      pixels[3] == 255,
+      "pixel is " + pixels.toSource() + " (expected [0,255,0,255])");
+}
+
+</script>
+
+<p>Canvas test: zero_dimensions</p>
+<canvas height="0" id="c684" width="0"></canvas>
+<script type="text/javascript">
+function test_zero_dimensions() {
+  var c = document.getElementById("c684");
+  ok(c.width == 0, "c.width not 0");
+  ok(c.height == 0, "c.height not 0");
+}
+</script>
+
+<p>Canvas test: zero_dimensions_image_data</p>
+<canvas height="0" id="c685" width="0"></canvas>
+<script type="text/javascript">
+function test_zero_dimensions_imagedata() {
+  var c = document.getElementById("c685");
+  var ctx = c.getContext("2d");
+  ctx.fillStyle = "blue";
+  ctx.fillRect(0, 0, 100, 100);
+  var imgdata = ctx.getImageData(0, 0, 100, 100);
+  var isTransparentBlack = true;
+  for (var i = 0; i < imgdata.data.length; ++i)
+      if (imgdata.data[i] !== 0)
+          isTransparentBlack = false;
+  ok(isTransparentBlack, "isTransparentBlack");
+}
+</script>
+
+<p>Canvas test: getImageData_after_zero_canvas</p>
+<canvas height="100" id="c686" width="100"></canvas>
+<script type="text/javascript">
+function test_getImageData_after_zero_canvas() {
+    var c = document.getElementById("c686");
+    var ctx = c.getContext("2d");
+    ctx.fillStyle = "rgba(0, 0, 0, 1.0)";
+    ctx.fillRect(0, 0, c.width, c.height);
+    var oldimgdata = ctx.getImageData(0, 0, c.width, c.height);
+    c.width = c.height = 0;
+    c.width = c.height = 100;
+    ctx.fillRect(0, 0, c.width, c.height);
+    var imgdata = ctx.getImageData(0, 0, c.width, c.height);
+    var same = false;
+    ok(imgdata.data.length === oldimgdata.data.length, "not the same length");
+    for (var i = 0; i < imgdata.data.length; ++i)
+        same = imgdata.data[i] === oldimgdata.data[i];
+    ok(same, "changing dimensions broke canvas");
+}
+</script>
+
+<!-- [[[ test_text.font.html ]]] -->
+
+<p>Canvas test: text.font</p>
+<canvas height="50" id="c659" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_text_font() {
+
+var canvas = document.getElementById('c659');
+var ctx = canvas.getContext('2d');
+
+is(ctx.font, '10px sans-serif', "default font is not '10px sans-serif'");
+
+ctx.save();
+ctx.font = '20pt serif';
+is(ctx.font, '20pt serif', 'font getter returns incorrect value');
+
+ctx.restore();
+is(ctx.font, '10px sans-serif', 'font not being stored in the context state');
+
+}
+</script>
+
+<!-- [[[ test_text.measure.html ]]] -->
+
+<p>Canvas test: text.measure</p>
+<canvas height="50" id="c660" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_text_measure() {
+
+var canvas = document.getElementById('c660');
+var ctx = canvas.getContext('2d');
+
+ctx.font = "10px sans-serif";
+ctx.textAlign = "left";
+ctx.textBaseline = "top";
+
+var str = 'Test String';
+var wid = ctx.measureText(str).width;
+
+ok(wid > 0, "measureText returns nonpositive value for non-empty string");
+
+ctx.font = "20px sans-serif";
+isnot(wid, ctx.measureText(str).width, "measureText does not change with a different font size");
+
+ctx.font = "10px sans-serif";
+ctx.textAlign = "center";
+ctx.textBaseline = "alphabetic";
+
+is(wid, ctx.measureText(str).width, "measureText changes when alignement/baseline is changed");
+
+
+}
+</script>
+
+<!-- [[[ test_text.space.replace.html ]]] -->
+
+<p>Canvas test: text.space.replace</p>
+<canvas height="50" id="c661" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_text_space_replace() {
+
+var canvas = document.getElementById('c661');
+var ctx = canvas.getContext('2d');
+
+var swid = ctx.measureText(' ').width;
+ctx.font = "10px sans-serif";
+
+isnot(swid, 0.0, "measureText reutuns zero for a non-empty string");
+is(swid, ctx.measureText('\x09').width, "measureText does not replace whitespace char with a space");
+is(swid, ctx.measureText('\x0A').width, "measureText does not replace whitespace char with a space");
+is(swid, ctx.measureText('\x0B').width, "measureText does not replace whitespace char with a space");
+is(swid, ctx.measureText('\x0C').width, "measureText does not replace whitespace char with a space");
+is(swid, ctx.measureText('\x0D').width, "measureText does not replace whitespace char with a space");
+
+}
+</script>
+
+<!-- [[[ test_text.textAlign.html ]]] -->
+
+<p>Canvas test: text.textAlign</p>
+<canvas height="50" id="c662" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_text_textAlign() {
+
+var canvas = document.getElementById('c662');
+var ctx = canvas.getContext('2d');
+
+is(ctx.textAlign, 'start', "default textAlign is not 'start'");
+
+ctx.save();
+ctx.textAlign = 'end';
+is(ctx.textAlign, 'end', 'textAlign getter returns incorrect value');
+
+ctx.save();
+ctx.textAlign = 'left';
+is(ctx.textAlign, 'left', 'textAlign getter returns incorrect value');
+
+ctx.save();
+ctx.textAlign = 'center';
+is(ctx.textAlign, 'center', 'textAlign getter returns incorrect value');
+
+ctx.save();
+ctx.textAlign = 'right';
+is(ctx.textAlign, 'right', 'textAlign getter returns incorrect value');
+
+ctx.save();
+ctx.textAlign = 'start';
+is(ctx.textAlign, 'start', 'textAlign getter returns incorrect value');
+
+ctx.restore();
+is(ctx.textAlign, 'right', 'textAlign not being stored in the context state');
+
+ctx.restore();
+is(ctx.textAlign, 'center', 'textAlign not being stored in the context state');
+
+ctx.restore();
+is(ctx.textAlign, 'left', 'textAlign not being stored in the context state');
+
+ctx.restore();
+is(ctx.textAlign, 'end', 'textAlign not being stored in the context state');
+
+ctx.restore();
+is(ctx.textAlign, 'start', 'textAlign not being stored in the context state');
+
+}
+</script>
+
+<!-- [[[ test_text.textBaseline.html ]]] -->
+
+<p>Canvas test: text.textBaseline</p>
+<canvas height="50" id="c663" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_text_textBaseline() {
+
+var canvas = document.getElementById('c663');
+var ctx = canvas.getContext('2d');
+
+is(ctx.textBaseline, 'alphabetic', "default textBaseline is not 'alphabetic'");
+
+ctx.save();
+ctx.textBaseline = 'ideographic';
+is(ctx.textBaseline, 'ideographic', 'textBaseline getter returns incorrect value');
+
+ctx.save();
+ctx.textBaseline = 'top';
+is(ctx.textBaseline, 'top', 'textBaseline getter returns incorrect value');
+
+ctx.save();
+ctx.textBaseline = 'middle';
+is(ctx.textBaseline, 'middle', 'textBaseline getter returns incorrect value');
+
+ctx.save();
+ctx.textBaseline = 'bottom';
+is(ctx.textBaseline, 'bottom', 'textBaseline getter returns incorrect value');
+
+ctx.save();
+ctx.textBaseline = 'hanging';
+is(ctx.textBaseline, 'hanging', 'textBaseline getter returns incorrect value');
+
+ctx.save();
+ctx.textBaseline = 'alphabetic';
+is(ctx.textBaseline, 'alphabetic', 'textBaseline getter returns incorrect value');
+
+ctx.restore();
+is(ctx.textBaseline, 'hanging', 'textBaseline not being stored in the context state');
+
+ctx.restore();
+is(ctx.textBaseline, 'bottom', 'textBaseline not being stored in the context state');
+
+ctx.restore();
+is(ctx.textBaseline, 'middle', 'textBaseline not being stored in the context state');
+
+ctx.restore();
+is(ctx.textBaseline, 'top', 'textBaseline not being stored in the context state');
+
+ctx.restore();
+is(ctx.textBaseline, 'ideographic', 'textBaseline not being stored in the context state');
+
+ctx.restore();
+is(ctx.textBaseline, 'alphabetic', 'textBaseline not being stored in the context state');
+
+}
+</script>
+
+<script>
+ 
+function runTests() {
+ try {
+  test_bug397524();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_bug397524");
+ }
+ try {
+  test_bug405982();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_bug405982");
+ }
+ try {
+  test_2d_imagedata_coercion();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_imagedata_coercion");
+ }
+ try {
+  test_2d_imageSmoothing();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_imageSmoothing");
+ }
+ try {
+  test_zero_dimensions();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_zero_dimensions");
+ }
+ try {
+  test_zero_dimensions_imagedata();
+ } catch(e) {
+  ok(false, "unexpected exception thrown in: test_zero_dimensions_imagedata");
+ }
+ try {
+  test_getImageData_after_zero_canvas();
+ } catch(e) {
+  throw e;
+  ok(false, "unexpected exception thrown in: test_getImageData_after_zero_canvas");
+ }
+ try {
+  test_text_font();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_text_font");
+ }
+ try {
+  test_text_measure();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_text_measure");
+ }
+ try {
+  test_text_space_replace();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_text_space_replace");
+ }
+ try {
+  test_text_textAlign();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_text_textAlign");
+ }
+ try {
+  test_text_textBaseline();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_text_textBaseline");
+ }
+
+ SimpleTest.finish();
+}
+
+addLoadEvent(runTests);
+
+</script>
