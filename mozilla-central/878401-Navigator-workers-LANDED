From: Ms2ger <ms2ger@gmail.com>
All members can be annotated with [Constant].

Bug 878401 - Move WorkerNavigator to WebIDL; r=khuey

diff --git a/dom/bindings/Bindings.conf b/dom/bindings/Bindings.conf
--- a/dom/bindings/Bindings.conf
+++ b/dom/bindings/Bindings.conf
@@ -1285,16 +1285,22 @@ DOMInterfaces = {
     'concrete': False
 },
 {
     # We need a worker descriptor for WindowProxy because EventTarget exists in
     # workers.  But it's an external interface, so it'll just map to JSObject*.
     'workers': True
 }],
 
+'WorkerNavigator': {
+    'headerFile': 'mozilla/dom/workers/bindings/Navigator.h',
+    'castable': True,
+    'workers': True,
+},
+
 'XMLHttpRequest': [
 {
     'nativeType': 'nsXMLHttpRequest',
     'implicitJSContext': [ 'constructor', ],
     'resultNotAddRefed': [ 'upload', 'responseXML' ]
 },
 {
     'workers': True,
diff --git a/dom/webidl/WebIDL.mk b/dom/webidl/WebIDL.mk
--- a/dom/webidl/WebIDL.mk
+++ b/dom/webidl/WebIDL.mk
@@ -350,16 +350,17 @@ webidl_files = \
   WebComponents.webidl \
   WebSocket.webidl \
   WheelEvent.webidl \
   UndoManager.webidl \
   URLUtils.webidl \
   VideoStreamTrack.webidl \
   WaveShaperNode.webidl \
   Window.webidl \
+  WorkerNavigator.webidl \
   XMLDocument.webidl \
   XMLHttpRequest.webidl \
   XMLHttpRequestEventTarget.webidl \
   XMLHttpRequestUpload.webidl \
   XMLSerializer.webidl \
   XMLStylesheetProcessingInstruction.webidl \
   XPathEvaluator.webidl \
   XULCommandEvent.webidl \
diff --git a/dom/webidl/WorkerNavigator.webidl b/dom/webidl/WorkerNavigator.webidl
new file mode 100644
--- /dev/null
+++ b/dom/webidl/WorkerNavigator.webidl
@@ -0,0 +1,10 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+interface WorkerNavigator {
+  readonly attribute DOMString appName;
+  readonly attribute DOMString appVersion;
+  readonly attribute DOMString platform;
+  readonly attribute DOMString userAgent;
+};
diff --git a/dom/workers/DOMBindingInlines.h b/dom/workers/DOMBindingInlines.h
--- a/dom/workers/DOMBindingInlines.h
+++ b/dom/workers/DOMBindingInlines.h
@@ -7,25 +7,27 @@
 #define mozilla_dom_workers_dombindinginlines_h__
 
 #include "mozilla/dom/FileReaderSyncBinding.h"
 #include "mozilla/dom/ImageDataBinding.h"
 #include "mozilla/dom/TextDecoderBinding.h"
 #include "mozilla/dom/TextEncoderBinding.h"
 #include "mozilla/dom/XMLHttpRequestBinding.h"
 #include "mozilla/dom/XMLHttpRequestUploadBinding.h"
+#include "mozilla/dom/WorkerNavigatorBinding.h"
 
 BEGIN_WORKERS_NAMESPACE
 
 class FileReaderSync;
 class ImageData;
 class TextDecoder;
 class TextEncoder;
 class XMLHttpRequest;
 class XMLHttpRequestUpload;
+class WorkerNavigator;
 
 namespace {
 
 template <class T>
 struct WrapPrototypeTraits
 { };
 
 // XXX I kinda hate this, but we decided it wasn't worth generating this in the
@@ -50,16 +52,17 @@ struct WrapPrototypeTraits
   };
 
 SPECIALIZE_PROTO_TRAITS(FileReaderSync)
 SPECIALIZE_PROTO_TRAITS(ImageData)
 SPECIALIZE_PROTO_TRAITS(TextDecoder)
 SPECIALIZE_PROTO_TRAITS(TextEncoder)
 SPECIALIZE_PROTO_TRAITS(XMLHttpRequest)
 SPECIALIZE_PROTO_TRAITS(XMLHttpRequestUpload)
+SPECIALIZE_PROTO_TRAITS(WorkerNavigator)
 
 #undef SPECIALIZE_PROTO_TRAITS
 
 } // anonymous namespace
 
 template <class T>
 inline JSObject*
 Wrap(JSContext* aCx, JSObject* aGlobal, nsRefPtr<T>& aConcreteObject)
diff --git a/dom/workers/Navigator.cpp b/dom/workers/Navigator.cpp
--- a/dom/workers/Navigator.cpp
+++ b/dom/workers/Navigator.cpp
@@ -1,178 +1,45 @@
 /* -*- Mode: c++; c-basic-offset: 2; indent-tabs-mode: nil; tab-width: 40 -*- */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "Navigator.h"
 
-#include "jsapi.h"
-#include "jsfriendapi.h"
-
-#include "nsTraceRefcnt.h"
-
+#include "DOMBindingInlines.h"
 #include "RuntimeService.h"
 
-#define PROPERTY_FLAGS \
-  (JSPROP_ENUMERATE | JSPROP_SHARED)
-
-USING_WORKERS_NAMESPACE
-
-namespace {
-
-class Navigator
-{
-  static JSClass sClass;
-  static const JSPropertySpec sProperties[];
-
-  enum SLOT {
-    SLOT_appName = 0,
-    SLOT_appVersion,
-    SLOT_platform,
-    SLOT_userAgent,
-
-    SLOT_COUNT
-  };
-
-public:
-  static JSObject*
-  InitClass(JSContext* aCx, JSObject* aObj)
-  {
-    return JS_InitClass(aCx, aObj, NULL, &sClass, Construct, 0, sProperties,
-                        NULL, NULL, NULL);
-  }
-
-  static JSObject*
-  Create(JSContext* aCx)
-  {
-    RuntimeService* rts = RuntimeService::GetService();
-    JS_ASSERT(rts);
-
-    const RuntimeService::NavigatorStrings& strings =
-      rts->GetNavigatorStrings();
-
-    JS::Rooted<JSString*> appName(aCx), version(aCx), platform(aCx), userAgent(aCx);
-
-#define COPY_STRING(_jsstr, _str)                                              \
-  if (strings. _str .IsEmpty()) {                                              \
-    _jsstr = NULL;                                                             \
-  }                                                                            \
-  else if (!(_jsstr = JS_NewUCStringCopyN(aCx, strings. _str .get(),           \
-                                          strings. _str .Length()))) {         \
-    return NULL;                                                               \
-  }
-
-    COPY_STRING(appName, mAppName);
-    COPY_STRING(version, mAppVersion);
-    COPY_STRING(platform, mPlatform);
-    COPY_STRING(userAgent, mUserAgent);
-
-#undef COPY_STRING
-
-    JSObject* obj = JS_NewObject(aCx, &sClass, NULL, NULL);
-    if (!obj) {
-      return NULL;
-    }
-
-    jsval empty = JS_GetEmptyStringValue(aCx);
-
-    JS_SetReservedSlot(obj, SLOT_appName,
-                       appName ? STRING_TO_JSVAL(appName) : empty);
-    JS_SetReservedSlot(obj, SLOT_appVersion,
-                       version ? STRING_TO_JSVAL(version) : empty);
-    JS_SetReservedSlot(obj, SLOT_platform,
-                       platform ? STRING_TO_JSVAL(platform) : empty);
-    JS_SetReservedSlot(obj, SLOT_userAgent,
-                       userAgent ? STRING_TO_JSVAL(userAgent) : empty);
-
-    Navigator* priv = new Navigator();
-    JS_SetPrivate(obj, priv);
-
-    return obj;
-  }
-
-private:
-  Navigator()
-  {
-    MOZ_COUNT_CTOR(mozilla::dom::workers::Navigator);
-  }
-
-  ~Navigator()
-  {
-    MOZ_COUNT_DTOR(mozilla::dom::workers::Navigator);
-  }
-
-  static JSBool
-  Construct(JSContext* aCx, unsigned aArgc, jsval* aVp)
-  {
-    JS_ReportErrorNumber(aCx, js_GetErrorMessage, NULL, JSMSG_WRONG_CONSTRUCTOR,
-                         sClass.name);
-    return false;
-  }
-
-  static void
-  Finalize(JSFreeOp* aFop, JSObject* aObj)
-  {
-    JS_ASSERT(JS_GetClass(aObj) == &sClass);
-    delete static_cast<Navigator*>(JS_GetPrivate(aObj));
-  }
-
-  static JSBool
-  GetProperty(JSContext* aCx, JS::Handle<JSObject*> aObj, JS::Handle<jsid> aIdval,
-              JS::MutableHandle<JS::Value> aVp)
-  {
-    JSClass* classPtr = JS_GetClass(aObj);
-    if (classPtr != &sClass) {
-      JS_ReportErrorNumber(aCx, js_GetErrorMessage, NULL,
-                           JSMSG_INCOMPATIBLE_PROTO, sClass.name, "GetProperty",
-                           classPtr->name);
-      return false;
-    }
-
-    JS_ASSERT(JSID_IS_INT(aIdval));
-    JS_ASSERT(JSID_TO_INT(aIdval) >= 0 && JSID_TO_INT(aIdval) < SLOT_COUNT);
-
-    aVp.set(JS_GetReservedSlot(aObj, JSID_TO_INT(aIdval)));
-    return true;
-  }
-};
-
-JSClass Navigator::sClass = {
-  "WorkerNavigator",
-  JSCLASS_HAS_PRIVATE | JSCLASS_HAS_RESERVED_SLOTS(SLOT_COUNT),
-  JS_PropertyStub, JS_DeletePropertyStub, JS_PropertyStub, JS_StrictPropertyStub,
-  JS_EnumerateStub, JS_ResolveStub, JS_ConvertStub, Finalize
-};
-
-const JSPropertySpec Navigator::sProperties[] = {
-  { "appName", SLOT_appName, PROPERTY_FLAGS, JSOP_WRAPPER(GetProperty),
-    JSOP_WRAPPER(js_GetterOnlyPropertyStub) },
-  { "appVersion", SLOT_appVersion, PROPERTY_FLAGS, JSOP_WRAPPER(GetProperty),
-    JSOP_WRAPPER(js_GetterOnlyPropertyStub) },
-  { "platform", SLOT_platform, PROPERTY_FLAGS, JSOP_WRAPPER(GetProperty),
-    JSOP_WRAPPER(js_GetterOnlyPropertyStub) },
-  { "userAgent", SLOT_userAgent, PROPERTY_FLAGS, JSOP_WRAPPER(GetProperty),
-    JSOP_WRAPPER(js_GetterOnlyPropertyStub) },
-  { 0, 0, 0, JSOP_NULLWRAPPER, JSOP_NULLWRAPPER }
-};
-
-} // anonymous namespace
-
 BEGIN_WORKERS_NAMESPACE
 
-namespace navigator {
+/* static */ already_AddRefed<WorkerNavigator>
+WorkerNavigator::Create(JSContext* aCx, JS::Handle<JSObject*> aGlobal)
+{
+  RuntimeService* rts = RuntimeService::GetService();
+  MOZ_ASSERT(rts);
 
-bool
-InitClass(JSContext* aCx, JSObject* aGlobal)
-{
-  return !!Navigator::InitClass(aCx, aGlobal);
+  const RuntimeService::NavigatorStrings& strings =
+    rts->GetNavigatorStrings();
+
+  nsRefPtr<WorkerNavigator> navigator =
+    new WorkerNavigator(aCx, strings.mAppName, strings.mAppVersion,
+                        strings.mPlatform, strings.mUserAgent);
+
+  if (!Wrap(aCx, aGlobal, navigator)) {
+    return nullptr;
+  }
+
+  return navigator.forget();
 }
 
-JSObject*
-Create(JSContext* aCx)
+void
+WorkerNavigator::_trace(JSTracer* aTrc)
 {
-  return Navigator::Create(aCx);
+  DOMBindingBase::_trace(aTrc);
 }
 
-} // namespace navigator
+void
+WorkerNavigator::_finalize(JSFreeOp* aFop)
+{
+  DOMBindingBase::_finalize(aFop);
+}
 
 END_WORKERS_NAMESPACE
diff --git a/dom/workers/Navigator.h b/dom/workers/Navigator.h
--- a/dom/workers/Navigator.h
+++ b/dom/workers/Navigator.h
@@ -2,26 +2,70 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifndef mozilla_dom_workers_navigator_h__
 #define mozilla_dom_workers_navigator_h__
 
 #include "Workers.h"
-
-#include "jspubtd.h"
+#include "mozilla/dom/workers/bindings/DOMBindingBase.h"
+#include "nsStringGlue.h"
 
 BEGIN_WORKERS_NAMESPACE
 
-namespace navigator {
+class WorkerNavigator MOZ_FINAL : public DOMBindingBase
+{
+  nsString mAppName;
+  nsString mAppVersion;
+  nsString mPlatform;
+  nsString mUserAgent;
 
-bool
-InitClass(JSContext* aCx, JSObject* aGlobal);
+  WorkerNavigator(JSContext* aCx,
+                  const nsAString& aAppName,
+                  const nsAString& aAppVersion,
+                  const nsAString& aPlatform,
+                  const nsAString& aUserAgent)
+    : DOMBindingBase(aCx)
+    , mAppName(aAppName)
+    , mAppVersion(aAppVersion)
+    , mPlatform(aPlatform)
+    , mUserAgent(aUserAgent)
+  {
+    MOZ_COUNT_CTOR(mozilla::dom::workers::WorkerNavigator);
+  }
 
-JSObject*
-Create(JSContext* aCx);
+public:
+  static already_AddRefed<WorkerNavigator>
+  Create(JSContext* aCx, JS::Handle<JSObject*> aGlobal);
 
-} // namespace navigator
+  virtual void
+  _trace(JSTracer* aTrc) MOZ_OVERRIDE;
 
+  virtual void
+  _finalize(JSFreeOp* aFop) MOZ_OVERRIDE;
+
+  ~WorkerNavigator()
+  {
+    MOZ_COUNT_DTOR(mozilla::dom::workers::WorkerNavigator);
+  }
+
+  void GetAppName(nsString& aAppName) const
+  {
+    aAppName = mAppName;
+  }
+  void GetAppVersion(nsString& aAppVersion) const
+  {
+    aAppVersion = mAppVersion;
+  }
+  void GetPlatform(nsString& aPlatform) const
+  {
+    aPlatform = mPlatform;
+  }
+  void GetUserAgent(nsString& aUserAgent) const
+  {
+    aUserAgent = mUserAgent;
+  }
+
+};
 END_WORKERS_NAMESPACE
 
 #endif // mozilla_dom_workers_navigator_h__
diff --git a/dom/workers/WorkerScope.cpp b/dom/workers/WorkerScope.cpp
--- a/dom/workers/WorkerScope.cpp
+++ b/dom/workers/WorkerScope.cpp
@@ -14,16 +14,17 @@
 #include "mozilla/dom/BindingUtils.h"
 #include "mozilla/dom/FileReaderSyncBinding.h"
 #include "mozilla/dom/ImageDataBinding.h"
 #include "mozilla/dom/TextDecoderBinding.h"
 #include "mozilla/dom/TextEncoderBinding.h"
 #include "mozilla/dom/XMLHttpRequestBinding.h"
 #include "mozilla/dom/XMLHttpRequestUploadBinding.h"
 #include "mozilla/dom/URLBinding.h"
+#include "mozilla/dom/WorkerNavigatorBinding.h"
 #include "mozilla/OSFileConstants.h"
 #include "nsTraceRefcnt.h"
 #include "xpcpublic.h"
 
 #ifdef ANDROID
 #include <android/log.h>
 #endif
 
@@ -392,22 +393,22 @@ private:
   {
     WorkerGlobalScope* scope =
       GetInstancePrivate(aCx, aObj, sProperties[SLOT_navigator].name);
     if (!scope) {
       return false;
     }
 
     if (JSVAL_IS_VOID(scope->mSlots[SLOT_navigator])) {
-      JSObject* navigator = navigator::Create(aCx);
+      nsRefPtr<WorkerNavigator> navigator = WorkerNavigator::Create(aCx, aObj);
       if (!navigator) {
         return false;
       }
 
-      scope->mSlots[SLOT_navigator] = OBJECT_TO_JSVAL(navigator);
+      scope->mSlots[SLOT_navigator] = OBJECT_TO_JSVAL(navigator->GetJSObject());
     }
 
     aVp.set(scope->mSlots[SLOT_navigator]);
     return true;
   }
 
   static JSBool
   Close(JSContext* aCx, unsigned aArgc, jsval* aVp)
@@ -1031,29 +1032,29 @@ CreateDedicatedWorkerGlobalScope(JSConte
       return NULL;
     }
   }
 
   // Init other classes we care about.
   if (!events::InitClasses(aCx, global, false) ||
       !file::InitClasses(aCx, global) ||
       !exceptions::InitClasses(aCx, global) ||
-      !location::InitClass(aCx, global) ||
-      !navigator::InitClass(aCx, global)) {
+      !location::InitClass(aCx, global)) {
     return NULL;
   }
 
   // Init other paris-bindings.
   if (!FileReaderSyncBinding_workers::GetConstructorObject(aCx, global) ||
       !ImageDataBinding_workers::GetConstructorObject(aCx, global) ||
       !TextDecoderBinding_workers::GetConstructorObject(aCx, global) ||
       !TextEncoderBinding_workers::GetConstructorObject(aCx, global) ||
       !XMLHttpRequestBinding_workers::GetConstructorObject(aCx, global) ||
       !XMLHttpRequestUploadBinding_workers::GetConstructorObject(aCx, global) ||
-      !URLBinding_workers::GetConstructorObject(aCx, global)) {
+      !URLBinding_workers::GetConstructorObject(aCx, global) ||
+      !WorkerNavigatorBinding_workers::GetConstructorObject(aCx, global)) {
     return NULL;
   }
 
   if (!JS_DefineProfilingFunctions(aCx, global)) {
     return NULL;
   }
 
   return global;
diff --git a/dom/workers/moz.build b/dom/workers/moz.build
--- a/dom/workers/moz.build
+++ b/dom/workers/moz.build
@@ -15,16 +15,17 @@ EXPORTS.mozilla.dom.workers += [
 
 # Stuff needed for the bindings, not really public though.
 EXPORTS.mozilla.dom.workers.bindings += [
     'DOMBindingBase.h',
     'EventListenerManager.h',
     'EventTarget.h',
     'FileReaderSync.h',
     'ImageData.h',
+    'Navigator.h',
     'TextDecoder.h',
     'TextEncoder.h',
     'URL.h',
     'WorkerFeature.h',
     'XMLHttpRequest.h',
     'XMLHttpRequestEventTarget.h',
     'XMLHttpRequestUpload.h',
 ]
