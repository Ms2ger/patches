From: Ms2ger <ms2ger@gmail.com>

diff --git a/content/base/src/nsDOMParser.cpp b/content/base/src/nsDOMParser.cpp
--- a/content/base/src/nsDOMParser.cpp
+++ b/content/base/src/nsDOMParser.cpp
@@ -313,39 +313,42 @@ nsDOMParser::Init(nsIPrincipal* principa
   // documentURI as the base.  Otherwise for null principals we'll get
   // nsDocument::SetBaseURI giving errors.
 
   NS_POSTCONDITION(mPrincipal, "Must have principal");
   NS_POSTCONDITION(mOriginalPrincipal, "Must have original principal");
   NS_POSTCONDITION(mDocumentURI, "Must have document URI");
   return NS_OK;
 }
-  
-static nsQueryInterface
+
+template<class T>
+static already_AddRefed<T>
 JSvalToInterface(JSContext* cx, jsval val, nsIXPConnect* xpc, bool* wasNull)
 {
   if (val == JSVAL_NULL) {
     *wasNull = true;
-    return nsQueryInterface(nullptr);
+    return nullptr;
   }
   
   *wasNull = false;
-  if (JSVAL_IS_OBJECT(val)) {
-    JSObject* arg = JSVAL_TO_OBJECT(val);
+  if (!JSVAL_IS_OBJECT(val)) {
+    return nullptr;
+  }
+  JSObject* arg = JSVAL_TO_OBJECT(val);
 
-    nsCOMPtr<nsIXPConnectWrappedNative> native;
-    xpc->GetWrappedNativeOfJSObject(cx, arg, getter_AddRefs(native));
+  nsCOMPtr<nsIXPConnectWrappedNative> native;
+  xpc->GetWrappedNativeOfJSObject(cx, arg, getter_AddRefs(native));
 
-    // do_QueryWrappedNative is not null-safe
-    if (native) {
-      return do_QueryWrappedNative(native);
-    }
+  if (!native) {
+    // do_QueryWrappedNative is not null-safe.
+    return nullptr;
   }
-  
-  return nsQueryInterface(nullptr);
+
+  nsCOMPtr<T> n = do_QueryWrappedNative(native);
+  return n.forget();
 }
 
 static nsresult
 GetInitArgs(JSContext *cx, uint32_t argc, jsval *argv,
             nsIPrincipal** aPrincipal, nsIURI** aDocumentURI,
             nsIURI** aBaseURI)
 {
   // Only proceed if the caller has UniversalXPConnect.
@@ -358,43 +361,43 @@ GetInitArgs(JSContext *cx, uint32_t argc
     return NS_ERROR_DOM_SECURITY_ERR;
   }    
   
   nsIXPConnect* xpc = nsContentUtils::XPConnect();
   
   // First arg is our principal.  If someone passes something that's
   // not a principal and not null, die to prevent privilege escalation.
   bool wasNull;
-  nsCOMPtr<nsIPrincipal> prin = JSvalToInterface(cx, argv[0], xpc, &wasNull);
+  nsCOMPtr<nsIPrincipal> prin = JSvalToInterface<nsIPrincipal>(cx, argv[0], xpc, &wasNull);
   if (!prin && !wasNull) {
     return NS_ERROR_INVALID_ARG;
   }
 
   nsCOMPtr<nsIURI> documentURI;
   nsCOMPtr<nsIURI> baseURI;
   if (argc > 1) {
     // Grab our document URI too.  Again, if it's something unexpected bail
     // out.
-    documentURI = JSvalToInterface(cx, argv[1], xpc, &wasNull);
+    documentURI = JSvalToInterface<nsIURI>(cx, argv[1], xpc, &wasNull);
     if (!documentURI && !wasNull) {
       return NS_ERROR_INVALID_ARG;
     }
 
     if (argc > 2) {
       // Grab our base URI as well
-      baseURI = JSvalToInterface(cx, argv[2], xpc, &wasNull);
+      baseURI = JSvalToInterface<nsIURI>(cx, argv[2], xpc, &wasNull);
       if (!baseURI && !wasNull) {
         return NS_ERROR_INVALID_ARG;
       }
     }
   }
 
-  NS_IF_ADDREF(*aPrincipal = prin);
-  NS_IF_ADDREF(*aDocumentURI = documentURI);
-  NS_IF_ADDREF(*aBaseURI = baseURI);
+  prin.forget(aPrincipal);
+  documentURI.forget(aDocumentURI);
+  baseURI.forget(aBaseURI);
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsDOMParser::Initialize(nsISupports* aOwner, JSContext* cx, JSObject* obj,
                         uint32_t argc, jsval *argv)
 {
   AttemptedInitMarker marker(&mAttemptedInit);
