From: Ms2ger <ms2ger@gmail.com>
Bug 665345 - Remove tests that are not being run from test_canvas.html (5/6)

This patch removes tests that are not being run within test_canvas.html
to avoid confusion over test coverage, and to simplify the generating code.

diff --git a/content/canvas/test/standalone.dat b/content/canvas/test/standalone.dat
--- a/content/canvas/test/standalone.dat
+++ b/content/canvas/test/standalone.dat
@@ -38,16 +38,25 @@ test_2d.composite.image.destination-atop
 test_2d.composite.image.destination-in.html
 test_2d.composite.image.source-in.html
 test_2d.composite.image.source-out.html
 # Only pass on Mac.
 test_2d.gradient.radial.equal.html
 test_2d.gradient.radial.touch1.html
 test_2d.gradient.radial.touch2.html
 test_2d.gradient.radial.touch3.html
+# Other troubles
+test_2d.composite.uncovered.fill.destination-atop.html
+test_2d.composite.uncovered.fill.destination-in.html
+test_2d.composite.uncovered.fill.source-in.html
+test_2d.composite.uncovered.fill.source-out.html
+test_2d.composite.uncovered.pattern.destination-atop.html
+test_2d.composite.uncovered.pattern.destination-in.html
+test_2d.composite.uncovered.pattern.source-in.html
+test_2d.composite.uncovered.pattern.source-out.html
 # D2D
 test_2d.gradient.interpolate.overlap.html
 test_2d.path.rect.zero.3.html
 test_2d.path.stroke.scale2.html
 test_2d.strokeRect.zero.1.html
 # Skia
 test_2d.path.arcTo.shape.curve1.html
 test_2d.path.arcTo.shape.curve2.html
diff --git a/content/canvas/test/test_canvas.html b/content/canvas/test/test_canvas.html
--- a/content/canvas/test/test_canvas.html
+++ b/content/canvas/test/test_canvas.html
@@ -1608,116 +1608,16 @@ ctx.fillStyle = 'rgba(0, 0, 255, 0.75)';
 ctx.translate(0, 25);
 ctx.fillRect(0, 50, 100, 50);
 isPixel(ctx, 50,25, 0,0,0,0, 5);
 
 
 }
 </script>
 
-<!-- [[[ test_2d.composite.uncovered.fill.destination-atop.html ]]] -->
-
-<p>Canvas test: 2d.composite.uncovered.fill.destination-atop</p>
-<!-- Testing: fill() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
-<canvas height="50" id="c86" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-
-function test_2d_composite_uncovered_fill_destination_atop() {
-
-var canvas = document.getElementById('c86');
-var ctx = canvas.getContext('2d');
-
-
-ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';
-ctx.fillRect(0, 0, 100, 50);
-ctx.globalCompositeOperation = 'destination-atop';
-ctx.fillStyle = 'rgba(0, 0, 255, 0.75)';
-ctx.translate(0, 25);
-ctx.fillRect(0, 50, 100, 50);
-isPixel(ctx, 50,25, 0,0,0,0, 5);
-
-
-}
-</script>
-
-<!-- [[[ test_2d.composite.uncovered.fill.destination-in.html ]]] -->
-
-<p>Canvas test: 2d.composite.uncovered.fill.destination-in</p>
-<!-- Testing: fill() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
-<canvas height="50" id="c87" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-
-function test_2d_composite_uncovered_fill_destination_in() {
-
-var canvas = document.getElementById('c87');
-var ctx = canvas.getContext('2d');
-
-
-ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';
-ctx.fillRect(0, 0, 100, 50);
-ctx.globalCompositeOperation = 'destination-in';
-ctx.fillStyle = 'rgba(0, 0, 255, 0.75)';
-ctx.translate(0, 25);
-ctx.fillRect(0, 50, 100, 50);
-isPixel(ctx, 50,25, 0,0,0,0, 5);
-
-
-}
-</script>
-
-<!-- [[[ test_2d.composite.uncovered.fill.source-in.html ]]] -->
-
-<p>Canvas test: 2d.composite.uncovered.fill.source-in</p>
-<!-- Testing: fill() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
-<canvas height="50" id="c88" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-
-function test_2d_composite_uncovered_fill_source_in() {
-
-var canvas = document.getElementById('c88');
-var ctx = canvas.getContext('2d');
-
-
-ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';
-ctx.fillRect(0, 0, 100, 50);
-ctx.globalCompositeOperation = 'source-in';
-ctx.fillStyle = 'rgba(0, 0, 255, 0.75)';
-ctx.translate(0, 25);
-ctx.fillRect(0, 50, 100, 50);
-isPixel(ctx, 50,25, 0,0,0,0, 5);
-
-
-}
-</script>
-
-<!-- [[[ test_2d.composite.uncovered.fill.source-out.html ]]] -->
-
-<p>Canvas test: 2d.composite.uncovered.fill.source-out</p>
-<!-- Testing: fill() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
-<canvas height="50" id="c89" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-
-function test_2d_composite_uncovered_fill_source_out() {
-
-var canvas = document.getElementById('c89');
-var ctx = canvas.getContext('2d');
-
-
-ctx.fillStyle = 'rgba(0, 255, 0, 0.5)';
-ctx.fillRect(0, 0, 100, 50);
-ctx.globalCompositeOperation = 'source-out';
-ctx.fillStyle = 'rgba(0, 0, 255, 0.75)';
-ctx.translate(0, 25);
-ctx.fillRect(0, 50, 100, 50);
-isPixel(ctx, 50,25, 0,0,0,0, 5);
-
-
-}
-</script>
-
 <!-- [[[ test_2d.composite.uncovered.image.copy.html ]]] -->
 
 <p>Canvas test: 2d.composite.uncovered.image.copy</p>
 <!-- Testing: drawImage() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
 <canvas height="50" id="c90" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_composite_uncovered_image_copy() {
@@ -1758,116 +1658,16 @@ ctx.fillStyle = ctx.createPattern(docume
 ctx.fillRect(0, 50, 100, 50);
 isPixel(ctx, 50,25, 0,0,0,0, 5);
 
 
 }
 </script>
 <img class="resource" id="yellow_6.png" src="image_yellow.png">
 
-<!-- [[[ test_2d.composite.uncovered.pattern.destination-atop.html ]]] -->
-
-<p>Canvas test: 2d.composite.uncovered.pattern.destination-atop</p>
-<!-- Testing: Pattern fill() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
-<canvas height="50" id="c96" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-
-function test_2d_composite_uncovered_pattern_destination_atop() {
-
-var canvas = document.getElementById('c96');
-var ctx = canvas.getContext('2d');
-
-
-ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
-ctx.fillRect(0, 0, 100, 50);
-ctx.globalCompositeOperation = 'destination-atop';
-ctx.fillStyle = ctx.createPattern(document.getElementById('yellow_7.png'), 'no-repeat');
-ctx.fillRect(0, 50, 100, 50);
-isPixel(ctx, 50,25, 0,0,0,0, 5);
-
-
-}
-</script>
-<img class="resource" id="yellow_7.png" src="image_yellow.png">
-
-<!-- [[[ test_2d.composite.uncovered.pattern.destination-in.html ]]] -->
-
-<p>Canvas test: 2d.composite.uncovered.pattern.destination-in</p>
-<!-- Testing: Pattern fill() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
-<canvas height="50" id="c97" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-
-function test_2d_composite_uncovered_pattern_destination_in() {
-
-var canvas = document.getElementById('c97');
-var ctx = canvas.getContext('2d');
-
-
-ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
-ctx.fillRect(0, 0, 100, 50);
-ctx.globalCompositeOperation = 'destination-in';
-ctx.fillStyle = ctx.createPattern(document.getElementById('yellow_8.png'), 'no-repeat');
-ctx.fillRect(0, 50, 100, 50);
-isPixel(ctx, 50,25, 0,0,0,0, 5);
-
-
-}
-</script>
-<img class="resource" id="yellow_8.png" src="image_yellow.png">
-
-<!-- [[[ test_2d.composite.uncovered.pattern.source-in.html ]]] -->
-
-<p>Canvas test: 2d.composite.uncovered.pattern.source-in</p>
-<!-- Testing: Pattern fill() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
-<canvas height="50" id="c98" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-
-function test_2d_composite_uncovered_pattern_source_in() {
-
-var canvas = document.getElementById('c98');
-var ctx = canvas.getContext('2d');
-
-
-ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
-ctx.fillRect(0, 0, 100, 50);
-ctx.globalCompositeOperation = 'source-in';
-ctx.fillStyle = ctx.createPattern(document.getElementById('yellow_9.png'), 'no-repeat');
-ctx.fillRect(0, 50, 100, 50);
-isPixel(ctx, 50,25, 0,0,0,0, 5);
-
-
-}
-</script>
-<img class="resource" id="yellow_9.png" src="image_yellow.png">
-
-<!-- [[[ test_2d.composite.uncovered.pattern.source-out.html ]]] -->
-
-<p>Canvas test: 2d.composite.uncovered.pattern.source-out</p>
-<!-- Testing: Pattern fill() draws pixels not covered by the source object as (0,0,0,0), and does not leave the pixels unchanged. -->
-<canvas height="50" id="c99" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-
-function test_2d_composite_uncovered_pattern_source_out() {
-
-var canvas = document.getElementById('c99');
-var ctx = canvas.getContext('2d');
-
-
-ctx.fillStyle = 'rgba(0, 255, 255, 0.5)';
-ctx.fillRect(0, 0, 100, 50);
-ctx.globalCompositeOperation = 'source-out';
-ctx.fillStyle = ctx.createPattern(document.getElementById('yellow_10.png'), 'no-repeat');
-ctx.fillRect(0, 50, 100, 50);
-isPixel(ctx, 50,25, 0,0,0,0, 5);
-
-
-}
-</script>
-<img class="resource" id="yellow_10.png" src="image_yellow.png">
-
 <!-- [[[ test_2d.drawImage.3arg.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.3arg</p>
 <canvas height="50" id="c100" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_3arg() {
 
@@ -18114,28 +17914,16 @@ var ctx = canvas.getContext('2d');
 ok(Object.prototype.toString.call(canvas) === '[object HTMLCanvasElement]', "Object.prototype.toString.call(canvas) === '[object HTMLCanvasElement]'");
 
 
 }
 </script>
 
 <script>
 function runTests() {
- /**
-  * Other tests not being run
-  */
- //test_2d_composite_uncovered_fill_destination_atop();
- //test_2d_composite_uncovered_fill_destination_in();
- //test_2d_composite_uncovered_fill_source_in();
- //test_2d_composite_uncovered_fill_source_out();
- //test_2d_composite_uncovered_pattern_destination_atop();
- //test_2d_composite_uncovered_pattern_destination_in();
- //test_2d_composite_uncovered_pattern_source_in();
- //test_2d_composite_uncovered_pattern_source_out();
- 
  //test_2d_path_rect_zero_6();	// This test is bogus according to the spec; see bug 407107
 
  // These tests are bogus according to the spec: shadows should not be 
  // drawn if shadowBlur, shadowOffsetX, and shadowOffsetY are all zero, whic
  // they are in these tests
  //test_2d_shadow_composite_3();
  //test_2d_shadow_composite_4();
  try {
