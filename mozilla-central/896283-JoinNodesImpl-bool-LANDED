From: Ms2ger <ms2ger@gmail.com>
Bug 896283 - Part a: Remove a useless argument from nsEditor::JoinNodesImpl; r=ehsan

diff --git a/editor/libeditor/base/JoinElementTxn.cpp b/editor/libeditor/base/JoinElementTxn.cpp
--- a/editor/libeditor/base/JoinElementTxn.cpp
+++ b/editor/libeditor/base/JoinElementTxn.cpp
@@ -88,17 +88,17 @@ NS_IMETHODIMP JoinElementTxn::DoTransact
 
   // set this instance mParent. 
   // Other methods will see a non-null mParent and know all is well
   mParent = leftParent;
   mOffset = leftNode->Length();
 
   nsresult rv = mEditor->JoinNodesImpl(mRightNode->AsDOMNode(),
                                        mLeftNode->AsDOMNode(),
-                                       mParent->AsDOMNode(), false);
+                                       mParent->AsDOMNode());
 
 #ifdef DEBUG
   if (NS_SUCCEEDED(rv) && gNoisy) {
     printf("  left node = %p removed\n", static_cast<void*>(mLeftNode.get()));
   }
 #endif
 
   return rv;
diff --git a/editor/libeditor/base/SplitElementTxn.cpp b/editor/libeditor/base/SplitElementTxn.cpp
--- a/editor/libeditor/base/SplitElementTxn.cpp
+++ b/editor/libeditor/base/SplitElementTxn.cpp
@@ -126,18 +126,17 @@ NS_IMETHODIMP SplitElementTxn::UndoTrans
   NS_ASSERTION(mEditor && mExistingRightNode && mNewLeftNode && mParent, "bad state");
   if (!mEditor || !mExistingRightNode || !mNewLeftNode || !mParent) {
     return NS_ERROR_NOT_INITIALIZED;
   }
 
   // this assumes Do inserted the new node in front of the prior existing node
   nsresult result = mEditor->JoinNodesImpl(mExistingRightNode->AsDOMNode(),
                                            mNewLeftNode->AsDOMNode(),
-                                           mParent->AsDOMNode(),
-                                           false);
+                                           mParent->AsDOMNode());
 #ifdef DEBUG
   if (gNoisy) 
   { 
     printf("** after join left child node %p into right node %p\n",
            static_cast<void*>(mNewLeftNode.get()),
            static_cast<void*>(mExistingRightNode.get()));
     if (gNoisy) {mEditor->DebugDumpContent(); } // DEBUG
   }
diff --git a/editor/libeditor/base/nsEditor.cpp b/editor/libeditor/base/nsEditor.cpp
--- a/editor/libeditor/base/nsEditor.cpp
+++ b/editor/libeditor/base/nsEditor.cpp
@@ -2836,18 +2836,17 @@ nsEditor::SplitNodeImpl(nsIDOMNode * aEx
     result = NS_ERROR_INVALID_ARG;
 
   return result;
 }
 
 nsresult
 nsEditor::JoinNodesImpl(nsIDOMNode * aNodeToKeep,
                         nsIDOMNode * aNodeToJoin,
-                        nsIDOMNode * aParent,
-                        bool         aNodeToKeepIsFirst)
+                        nsIDOMNode * aParent)
 {
   NS_ASSERTION(aNodeToKeep && aNodeToJoin && aParent, "null arg");
   nsresult result = NS_OK;
   if (aNodeToKeep && aNodeToJoin && aParent)
   {
     // get selection
     nsCOMPtr<nsISelection> selection;
     GetSelection(getter_AddRefs(selection));
@@ -2857,128 +2856,84 @@ nsEditor::JoinNodesImpl(nsIDOMNode * aNo
     nsCOMPtr<nsIDOMNode> selStartNode, selEndNode;
     int32_t selStartOffset, selEndOffset, joinOffset, keepOffset;
     result = GetStartNodeAndOffset(selection, getter_AddRefs(selStartNode), &selStartOffset);
     if (NS_FAILED(result)) selStartNode = nullptr;
     result = GetEndNodeAndOffset(selection, getter_AddRefs(selEndNode), &selEndOffset);
     // Joe or Kin should comment here on why the following line is not a copy/paste error
     if (NS_FAILED(result)) selStartNode = nullptr;
 
-    nsCOMPtr<nsIDOMNode> leftNode;
-    if (aNodeToKeepIsFirst)
-      leftNode = aNodeToKeep;
-    else
-      leftNode = aNodeToJoin;
+    nsCOMPtr<nsIDOMNode> leftNode = aNodeToJoin;
 
     uint32_t firstNodeLength;
     result = GetLengthOfDOMNode(leftNode, firstNodeLength);
     NS_ENSURE_SUCCESS(result, result);
     nsCOMPtr<nsIDOMNode> parent = GetNodeLocation(aNodeToJoin, &joinOffset);
     parent = GetNodeLocation(aNodeToKeep, &keepOffset);
     
     // if selection endpoint is between the nodes, remember it as being
     // in the one that is going away instead.  This simplifies later selection
     // adjustment logic at end of this method.
     if (selStartNode)
     {
       if (selStartNode == parent)
       {
-        if (aNodeToKeepIsFirst)
+        if ((selStartOffset > joinOffset) && (selStartOffset <= keepOffset))
         {
-          if ((selStartOffset > keepOffset) && (selStartOffset <= joinOffset))
-          {
-            selStartNode = aNodeToJoin; 
-            selStartOffset = 0;
-          }
-        }
-        else
-        {
-          if ((selStartOffset > joinOffset) && (selStartOffset <= keepOffset))
-          {
-            selStartNode = aNodeToJoin; 
-            selStartOffset = firstNodeLength;
-          }
+          selStartNode = aNodeToJoin;
+          selStartOffset = firstNodeLength;
         }
       }
       if (selEndNode == parent)
       {
-        if (aNodeToKeepIsFirst)
+        if ((selEndOffset > joinOffset) && (selEndOffset <= keepOffset))
         {
-          if ((selEndOffset > keepOffset) && (selEndOffset <= joinOffset))
-          {
-            selEndNode = aNodeToJoin; 
-            selEndOffset = 0;
-          }
-        }
-        else
-        {
-          if ((selEndOffset > joinOffset) && (selEndOffset <= keepOffset))
-          {
-            selEndNode = aNodeToJoin; 
-            selEndOffset = firstNodeLength;
-          }
+          selEndNode = aNodeToJoin;
+          selEndOffset = firstNodeLength;
         }
       }
     }
     // ok, ready to do join now.
     // if it's a text node, just shuffle around some text
     nsCOMPtr<nsIDOMCharacterData> keepNodeAsText( do_QueryInterface(aNodeToKeep) );
     nsCOMPtr<nsIDOMCharacterData> joinNodeAsText( do_QueryInterface(aNodeToJoin) );
     if (keepNodeAsText && joinNodeAsText)
     {
       nsAutoString rightText;
       nsAutoString leftText;
-      if (aNodeToKeepIsFirst)
-      {
-        keepNodeAsText->GetData(leftText);
-        joinNodeAsText->GetData(rightText);
-      }
-      else
-      {
-        keepNodeAsText->GetData(rightText);
-        joinNodeAsText->GetData(leftText);
-      }
+      keepNodeAsText->GetData(rightText);
+      joinNodeAsText->GetData(leftText);
       leftText += rightText;
       keepNodeAsText->SetData(leftText);          
     }
     else
     {  // otherwise it's an interior node, so shuffle around the children
       nsCOMPtr<nsIDOMNodeList> childNodes;
       result = aNodeToJoin->GetChildNodes(getter_AddRefs(childNodes));
       if ((NS_SUCCEEDED(result)) && (childNodes))
       {
         int32_t i;  // must be signed int!
         uint32_t childCount=0;
-        nsCOMPtr<nsIDOMNode> firstNode; //only used if aNodeToKeepIsFirst is false
+        nsCOMPtr<nsIDOMNode> firstNode;
         childNodes->GetLength(&childCount);
-        if (!aNodeToKeepIsFirst)
-        { // remember the first child in aNodeToKeep, we'll insert all the children of aNodeToJoin in front of it
-          result = aNodeToKeep->GetFirstChild(getter_AddRefs(firstNode));  
-          // GetFirstChild returns nullptr firstNode if aNodeToKeep has no children, that's ok.
-        }
+        // remember the first child in aNodeToKeep, we'll insert all the children of aNodeToJoin in front of it
+        result = aNodeToKeep->GetFirstChild(getter_AddRefs(firstNode));
+        // GetFirstChild returns nullptr firstNode if aNodeToKeep has no children, that's ok.
         nsCOMPtr<nsIDOMNode> resultNode;
         // have to go through the list backwards to keep deletes from interfering with iteration
         nsCOMPtr<nsIDOMNode> previousChild;
         for (i=childCount-1; ((NS_SUCCEEDED(result)) && (0<=i)); i--)
         {
           nsCOMPtr<nsIDOMNode> childNode;
           result = childNodes->Item(i, getter_AddRefs(childNode));
           if ((NS_SUCCEEDED(result)) && (childNode))
           {
-            if (aNodeToKeepIsFirst)
-            { // append children of aNodeToJoin
-              //was result = aNodeToKeep->AppendChild(childNode, getter_AddRefs(resultNode));
-              result = aNodeToKeep->InsertBefore(childNode, previousChild, getter_AddRefs(resultNode));
-              previousChild = do_QueryInterface(childNode);
-            }
-            else
-            { // prepend children of aNodeToJoin
-              result = aNodeToKeep->InsertBefore(childNode, firstNode, getter_AddRefs(resultNode));
-              firstNode = do_QueryInterface(childNode);
-            }
+            // prepend children of aNodeToJoin
+            result = aNodeToKeep->InsertBefore(childNode, firstNode, getter_AddRefs(resultNode));
+            firstNode = do_QueryInterface(childNode);
           }
         }
       }
       else if (!childNodes) {
         result = NS_ERROR_NULL_POINTER;
       }
     }
     if (NS_SUCCEEDED(result))
@@ -2997,38 +2952,30 @@ nsEditor::JoinNodesImpl(nsIDOMNode * aNo
         // HACK: this is overly simplified - multi-range selections need more work than this
         bool bNeedToAdjust = false;
         
         // check to see if we joined nodes where selection starts
         if (selStartNode.get() == aNodeToJoin)
         {
           bNeedToAdjust = true;
           selStartNode = aNodeToKeep;
-          if (aNodeToKeepIsFirst)
-          {
-            selStartOffset += firstNodeLength;
-          }
         }
-        else if ((selStartNode.get() == aNodeToKeep) && !aNodeToKeepIsFirst)
+        else if (selStartNode.get() == aNodeToKeep)
         {
           bNeedToAdjust = true;
           selStartOffset += firstNodeLength;
         }
                 
         // check to see if we joined nodes where selection ends
         if (selEndNode.get() == aNodeToJoin)
         {
           bNeedToAdjust = true;
           selEndNode = aNodeToKeep;
-          if (aNodeToKeepIsFirst)
-          {
-            selEndOffset += firstNodeLength;
-          }
         }
-        else if ((selEndNode.get() == aNodeToKeep) && !aNodeToKeepIsFirst)
+        else if (selEndNode.get() == aNodeToKeep)
         {
           bNeedToAdjust = true;
           selEndOffset += firstNodeLength;
         }
         
         // adjust selection if needed
         if (bNeedToAdjust)
         {
diff --git a/editor/libeditor/base/nsEditor.h b/editor/libeditor/base/nsEditor.h
--- a/editor/libeditor/base/nsEditor.h
+++ b/editor/libeditor/base/nsEditor.h
@@ -445,23 +445,20 @@ public:
                          nsIDOMNode *aParent);
 
   /** 
    * JoinNodes() takes 2 nodes and merge their content|children.
    * @param aNodeToKeep   The node that will remain after the join.
    * @param aNodeToJoin   The node that will be joined with aNodeToKeep.
    *                      There is no requirement that the two nodes be of the same type.
    * @param aParent       The parent of aNodeToKeep
-   * @param aNodeToKeepIsFirst  if true, the contents|children of aNodeToKeep come before the
-   *                            contents|children of aNodeToJoin, otherwise their positions are switched.
    */
   nsresult JoinNodesImpl(nsIDOMNode *aNodeToKeep,
                          nsIDOMNode *aNodeToJoin,
-                         nsIDOMNode *aParent,
-                         bool        aNodeToKeepIsFirst);
+                         nsIDOMNode *aParent);
 
   /**
    * Return the offset of aChild in aParent.  Asserts fatally if parent or
    * child is null, or parent is not child's parent.
    */
   static int32_t GetChildOffset(nsIDOMNode *aChild,
                                 nsIDOMNode *aParent);
 
