From: Ms2ger <ms2ger@gmail.com>

diff --git a/content/canvas/test/test_canvas.html b/content/canvas/test/test_canvas.html
--- a/content/canvas/test/test_canvas.html
+++ b/content/canvas/test/test_canvas.html
@@ -17122,68 +17122,51 @@ isPixel(ctx, 20,20, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.default.html ]]] -->
 
 <p>Canvas test: size.attributes.default</p>
-<!-- Testing: Default width/height -->
+<!-- Testing: Default width/height when attributes are missing -->
 <canvas id="c635"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_default() {
 
 var canvas = document.getElementById('c635');
 var ctx = canvas.getContext('2d');
 
-ok(canvas.width == 300, "canvas.width == 300");
-ok(canvas.height == 150, "canvas.height == 150");
+ok(canvas.width === 300, "canvas.width === 300");
+ok(canvas.height === 150, "canvas.height === 150");
 ok(!canvas.hasAttribute('width'), "!canvas.hasAttribute('width')");
 ok(!canvas.hasAttribute('height'), "!canvas.hasAttribute('height')");
 
 
 }
 </script>
 
-<!-- [[[ test_size.attributes.html ]]] -->
-
-<p>Canvas test: size.attributes</p>
-<!-- Testing: width/height DOM attributes and content attributes -->
-<canvas height="60" id="c636" width="120"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-
-function test_size_attributes() {
-
-var canvas = document.getElementById('c636');
-var ctx = canvas.getContext('2d');
-
-ok(canvas.width == 120, "canvas.width == 120");
-ok(canvas.height == 60, "canvas.height == 60");
-ok(canvas.getAttribute('width') == 120, "canvas.getAttribute('width') == 120");
-ok(canvas.getAttribute('height') == 60, "canvas.getAttribute('height') == 60");
-
-
-}
-</script>
-
-<!-- [[[ test_size.attributes.parse.floatsuffix.html ]]] -->
-
-<p>Canvas test: size.attributes.parse.floatsuffix</p>
+<!-- [[[ test_size.attributes.parse.decimal.html ]]] -->
+
+<p>Canvas test: size.attributes.parse.decimal</p>
 <!-- Testing: Parsing of non-negative integers -->
-<canvas height="50" id="c638" width="100.9"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-
-function test_size_attributes_parse_floatsuffix() {
+<canvas height="100.999" id="c638" width="100.999"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_size_attributes_parse_decimal() {
 
 var canvas = document.getElementById('c638');
 var ctx = canvas.getContext('2d');
 
-ok(canvas.width == 100, "canvas.width == 100");
+ok(canvas.width === 100, "canvas.width === 100");
+ok(canvas.height === 100, "canvas.height === 100");
+ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "100px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"100px\"");
+ok(canvas.getAttribute('width') === '100.999', "canvas.getAttribute('width') === '100.999'");
+ok(canvas.getAttribute('height') === '100.999', "canvas.getAttribute('height') === '100.999'");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.parse.junk.html ]]] -->
 
 <p>Canvas test: size.attributes.parse.junk</p>
@@ -17200,29 +17183,32 @@ ok(canvas.width === 300, "canvas.width =
 ok(canvas.height === 150, "canvas.height === 150");
 ok(canvas.getAttribute('width') === '#!?', "canvas.getAttribute('width') === '#!?'");
 ok(canvas.getAttribute('height') === '#!?', "canvas.getAttribute('height') === '#!?'");
 
 
 }
 </script>
 
-<!-- [[[ test_size.attributes.parse.negative.html ]]] -->
-
-<p>Canvas test: size.attributes.parse.negative</p>
+<!-- [[[ test_size.attributes.parse.minus.html ]]] -->
+
+<p>Canvas test: size.attributes.parse.minus</p>
 <!-- Testing: Parsing of non-negative integers -->
-<canvas height="50" id="c639" width="-100"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-
-function test_size_attributes_parse_negative() {
+<canvas height="-100" id="c639" width="-100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_size_attributes_parse_minus() {
 
 var canvas = document.getElementById('c639');
 var ctx = canvas.getContext('2d');
 
-ok(canvas.width == 300, "canvas.width == 300");
+ok(canvas.width === 300, "canvas.width === 300");
+ok(canvas.height === 150, "canvas.height === 150");
+ok(canvas.getAttribute('width') === '-100', "canvas.getAttribute('width') === '-100'");
+ok(canvas.getAttribute('height') === '-100', "canvas.getAttribute('height') === '-100'");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.parse.percentsuffix.html ]]] -->
 
 <p>Canvas test: size.attributes.parse.percentsuffix</p>
@@ -17294,34 +17280,16 @@ var canvas = document.getElementById('c6
 var ctx = canvas.getContext('2d');
 
 ok(canvas.width == 0, "canvas.width == 0");
 
 
 }
 </script>
 
-<!-- [[[ test_size.attributes.parse.zerosuffix.html ]]] -->
-
-<p>Canvas test: size.attributes.parse.zerosuffix</p>
-<!-- Testing: Parsing of non-negative integers -->
-<canvas height="50" id="c644" width="100.0"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-
-function test_size_attributes_parse_zerosuffix() {
-
-var canvas = document.getElementById('c644');
-var ctx = canvas.getContext('2d');
-
-ok(canvas.width == 100, "canvas.width == 100");
-
-
-}
-</script>
-
 <!-- [[[ test_size.attributes.reflect.1.html ]]] -->
 
 <p>Canvas test: size.attributes.reflect.1</p>
 <!-- Testing: Setting DOM attributes updates DOM and content attributes -->
 <canvas height="50" id="c645" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_reflect_1() {
@@ -17377,31 +17345,35 @@ var ctx = canvas.getContext('2d');
 
 canvas.removeAttribute('width');
 ok(canvas.width == 300, "canvas.width == 300");
 
 
 }
 </script>
 
-<!-- [[[ test_size.attributes.setAttribute.floatsuffix.html ]]] -->
-
-<p>Canvas test: size.attributes.setAttribute.floatsuffix</p>
+<!-- [[[ test_size.attributes.setAttribute.decimal.html ]]] -->
+
+<p>Canvas test: size.attributes.setAttribute.decimal</p>
 <!-- Testing: Parsing of non-negative integers in setAttribute -->
 <canvas height="50" id="c649" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
-function test_size_attributes_setAttribute_floatsuffix() {
+function test_size_attributes_setAttribute_decimal() {
 
 var canvas = document.getElementById('c649');
 var ctx = canvas.getContext('2d');
 
-canvas.setAttribute('width', '1');
-canvas.setAttribute('width', '100.9');
-ok(canvas.width == 100, "canvas.width == 100");
+canvas.setAttribute('width', '100.999');
+canvas.setAttribute('height', '100.999');
+ok(canvas.width === 100, "canvas.width === 100");
+ok(canvas.height === 100, "canvas.height === 100");
+ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "100px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"100px\"");
+ok(canvas.getAttribute('width') === '100.999', "canvas.getAttribute('width') === '100.999'");
+ok(canvas.getAttribute('height') === '100.999', "canvas.getAttribute('height') === '100.999'");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.setAttribute.junk.html ]]] -->
 
 <p>Canvas test: size.attributes.setAttribute.junk</p>
@@ -17420,30 +17392,34 @@ ok(canvas.width === 300, "canvas.width =
 ok(canvas.height === 150, "canvas.height === 150");
 ok(canvas.getAttribute('width') === '#!?', "canvas.getAttribute('width') === '#!?'");
 ok(canvas.getAttribute('height') === '#!?', "canvas.getAttribute('height') === '#!?'");
 
 
 }
 </script>
 
-<!-- [[[ test_size.attributes.setAttribute.negative.html ]]] -->
-
-<p>Canvas test: size.attributes.setAttribute.negative</p>
+<!-- [[[ test_size.attributes.setAttribute.minus.html ]]] -->
+
+<p>Canvas test: size.attributes.setAttribute.minus</p>
 <!-- Testing: Parsing of non-negative integers in setAttribute -->
 <canvas height="50" id="c650" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
-function test_size_attributes_setAttribute_negative() {
+function test_size_attributes_setAttribute_minus() {
 
 var canvas = document.getElementById('c650');
 var ctx = canvas.getContext('2d');
 
 canvas.setAttribute('width', '-100');
-ok(canvas.width == 300, "canvas.width == 300");
+canvas.setAttribute('height', '-100');
+ok(canvas.width === 300, "canvas.width === 300");
+ok(canvas.height === 150, "canvas.height === 150");
+ok(canvas.getAttribute('width') === '-100', "canvas.getAttribute('width') === '-100'");
+ok(canvas.getAttribute('height') === '-100', "canvas.getAttribute('height') === '-100'");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.setAttribute.percentsuffix.html ]]] -->
 
 <p>Canvas test: size.attributes.setAttribute.percentsuffix</p>
@@ -17520,36 +17496,16 @@ var ctx = canvas.getContext('2d');
 
 canvas.setAttribute('width', '0');
 ok(canvas.width == 0, "canvas.width == 0");
 
 
 }
 </script>
 
-<!-- [[[ test_size.attributes.setAttribute.zerosuffix.html ]]] -->
-
-<p>Canvas test: size.attributes.setAttribute.zerosuffix</p>
-<!-- Testing: Parsing of non-negative integers in setAttribute -->
-<canvas height="50" id="c655" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-
-function test_size_attributes_setAttribute_zerosuffix() {
-
-var canvas = document.getElementById('c655');
-var ctx = canvas.getContext('2d');
-
-canvas.setAttribute('width', '1');
-canvas.setAttribute('width', '100.0');
-ok(canvas.width == 100, "canvas.width == 100");
-
-
-}
-</script>
-
 <!-- [[[ test_size.attributes.style.html ]]] -->
 
 <p>Canvas test: size.attributes.style</p>
 <!-- Testing: Canvas size is independent of CSS resizing -->
 <canvas height="30" id="c656" style="width: 100px; height: 50px" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_style() {
@@ -17559,58 +17515,16 @@ var ctx = canvas.getContext('2d');
 
 ok(canvas.width == 50, "canvas.width == 50");
 ok(canvas.height == 30, "canvas.height == 30");
 
 
 }
 </script>
 
-<!-- [[[ test_size.attributes.type.get.html ]]] -->
-
-<p>Canvas test: size.attributes.type.get</p>
-<!-- Testing: width/height DOM/content attributes - string vs number types -->
-<canvas height="60" id="c657" width="120"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-
-function test_size_attributes_type_get() {
-
-var canvas = document.getElementById('c657');
-var ctx = canvas.getContext('2d');
-
-ok(canvas.width === 120, "canvas.width === 120");
-ok(canvas.height === 60, "canvas.height === 60");
-ok(canvas.getAttribute('width') === '120', "canvas.getAttribute('width') === '120'");
-ok(canvas.getAttribute('height') === '60', "canvas.getAttribute('height') === '60'");
-
-
-}
-</script>
-
-<!-- [[[ test_size.attributes.type.set.html ]]] -->
-
-<p>Canvas test: size.attributes.type.set</p>
-<!-- Testing: Setting width/height DOM attributes -->
-<canvas height="50" id="c658" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-
-function test_size_attributes_type_set() {
-
-var canvas = document.getElementById('c658');
-var ctx = canvas.getContext('2d');
-
-canvas.width = 120;
-canvas.height = 60;
-ok(canvas.width === 120, "canvas.width === 120");
-ok(canvas.height === 60, "canvas.height === 60");
-
-
-}
-</script>
-
 <!-- [[[ test_toDataURL.arguments.1.html ]]] -->
 
 <p>Canvas test: toDataURL.arguments.1 - bug 401795</p>
 <!-- Testing: toDataURL ignores extra arguments -->
 <canvas height="50" id="c664" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_toDataURL_arguments_1() {
@@ -20734,34 +20648,29 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_initial_reset_transform");
  }
  try {
   test_size_attributes_default();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_size_attributes_default");
  }
  try {
-  test_size_attributes();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_size_attributes");
- }
- try {
-  test_size_attributes_parse_floatsuffix();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_size_attributes_parse_floatsuffix");
+  test_size_attributes_parse_decimal();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_size_attributes_parse_decimal");
  }
  try {
   test_size_attributes_parse_junk();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_size_attributes_parse_junk");
  }
  try {
-  test_size_attributes_parse_negative();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_size_attributes_parse_negative");
+  test_size_attributes_parse_minus();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_size_attributes_parse_minus");
  }
  try {
   test_size_attributes_parse_percentsuffix();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_size_attributes_parse_percentsuffix");
  }
  try {
   test_size_attributes_parse_trailingjunk();
@@ -20774,49 +20683,44 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_size_attributes_parse_whitespace");
  }
  try {
   test_size_attributes_parse_zero();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_size_attributes_parse_zero");
  }
  try {
-  test_size_attributes_parse_zerosuffix();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_size_attributes_parse_zerosuffix");
- }
- try {
   test_size_attributes_reflect_1();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_size_attributes_reflect_1");
  }
  try {
   test_size_attributes_reflect_2();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_size_attributes_reflect_2");
  }
  try {
   test_size_attributes_removed();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_size_attributes_removed");
  }
  try {
-  test_size_attributes_setAttribute_floatsuffix();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_size_attributes_setAttribute_floatsuffix");
+  test_size_attributes_setAttribute_decimal();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_size_attributes_setAttribute_decimal");
  }
  try {
   test_size_attributes_setAttribute_junk();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_size_attributes_setAttribute_junk");
  }
  try {
-  test_size_attributes_setAttribute_negative();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_size_attributes_setAttribute_negative");
+  test_size_attributes_setAttribute_minus();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_size_attributes_setAttribute_minus");
  }
  try {
   test_size_attributes_setAttribute_percentsuffix();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_size_attributes_setAttribute_percentsuffix");
  }
  try {
   test_size_attributes_setAttribute_trailingjunk();
@@ -20829,36 +20733,21 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_size_attributes_setAttribute_whitespace");
  }
  try {
   test_size_attributes_setAttribute_zero();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_size_attributes_setAttribute_zero");
  }
  try {
-  test_size_attributes_setAttribute_zerosuffix();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_size_attributes_setAttribute_zerosuffix");
- }
- try {
   test_size_attributes_style();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_size_attributes_style");
  }
  try {
-  test_size_attributes_type_get();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_size_attributes_type_get");
- }
- try {
-  test_size_attributes_type_set();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_size_attributes_type_set");
- }
- try {
   test_toDataURL_arguments_1();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_toDataURL_arguments_1");
  }
  try {
   test_toDataURL_arguments_2();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_toDataURL_arguments_2");
