From: Ms2ger <ms2ger@gmail.com>

diff --git a/dom/base/nsGlobalWindow.cpp b/dom/base/nsGlobalWindow.cpp
--- a/dom/base/nsGlobalWindow.cpp
+++ b/dom/base/nsGlobalWindow.cpp
@@ -356,49 +356,43 @@ nsGlobalWindow::DOMMinTimeoutValue() con
     if (!mInnerWindow) {                                                      \
       NS_WARNING("No inner window available!");                               \
       return err_rval;                                                        \
     }                                                                         \
     return ((nsGlobalChromeWindow *)mInnerWindow)->method args;               \
   }                                                                           \
   PR_END_MACRO
 
-#define FORWARD_TO_OUTER_MODAL_CONTENT_WINDOW(method, args, err_rval)         \
-  PR_BEGIN_MACRO                                                              \
-  if (IsInnerWindow()) {                                                      \
-    nsGlobalWindow *outer = GetOuterWindowInternal();                         \
-    if (!outer) {                                                             \
-      NS_WARNING("No outer window available!");                               \
-      return err_rval;                                                        \
-    }                                                                         \
-    return ((nsGlobalModalWindow *)outer)->method args;                       \
-  }                                                                           \
-  PR_END_MACRO
+#define FORWARD_TO_OUTER_MODAL_CONTENT_WINDOW(method, args, err_rval)           \
+  MOZ_ASSERT(IsInnerWindow());                                                  \
+  nsGlobalWindow* outer = GetOuterWindowInternal();                             \
+  if (!outer) {                                                                 \
+    NS_WARNING("No outer window available!");                                   \
+    return err_rval;                                                            \
+  }                                                                             \
+  return static_cast<OuterModalWindow*>(outer)->method args;
 
 #define FORWARD_TO_INNER(method, args, err_rval)                              \
   PR_BEGIN_MACRO                                                              \
   if (IsOuterWindow()) {                                                      \
     if (!mInnerWindow) {                                                      \
       NS_WARNING("No inner window available!");                               \
       return err_rval;                                                        \
     }                                                                         \
     return GetCurrentInnerWindowInternal()->method args;                      \
   }                                                                           \
   PR_END_MACRO
 
-#define FORWARD_TO_INNER_MODAL_CONTENT_WINDOW(method, args, err_rval)         \
-  PR_BEGIN_MACRO                                                              \
-  if (IsOuterWindow()) {                                                      \
-    if (!mInnerWindow) {                                                      \
-      NS_WARNING("No inner window available!");                               \
-      return err_rval;                                                        \
-    }                                                                         \
-    return ((nsGlobalModalWindow*)GetCurrentInnerWindowInternal())->method args; \
-  }                                                                           \
-  PR_END_MACRO
+#define FORWARD_TO_INNER_MODAL_CONTENT_WINDOW(method, args, err_rval)           \
+  MOZ_ASSERT(IsOuterWindow());                                                  \
+  if (!mInnerWindow) {                                                          \
+    NS_WARNING("No inner window available!");                                   \
+    return err_rval;                                                            \
+  }                                                                             \
+  return static_cast<InnerModalWindow*>(mInnerWindow)->method args;
 
 #define FORWARD_TO_INNER_VOID(method, args)                                   \
   PR_BEGIN_MACRO                                                              \
   if (IsOuterWindow()) {                                                      \
     if (!mInnerWindow) {                                                      \
       NS_WARNING("No inner window available!");                               \
       return;                                                                 \
     }                                                                         \
@@ -2312,17 +2306,17 @@ nsGlobalWindow::SetNewDocument(nsIDocume
     if (aState) {
       newInnerWindow = wsh->GetInnerWindow();
       mInnerWindowHolder = wsh->GetInnerWindowHolder();
 
       NS_ASSERTION(newInnerWindow, "Got a state without inner window");
     } else if (thisChrome) {
       newInnerWindow = new nsGlobalChromeWindow(this);
     } else if (mIsModalContentWindow) {
-      newInnerWindow = new nsGlobalModalWindow(this);
+      newInnerWindow = new InnerModalWindow(this);
     } else {
       newInnerWindow = new nsGlobalWindow(this);
     }
 
     if (!aState) {
       // Freeze the outer window and null out the inner window so
       // that initializing classes on the new inner doesn't end up
       // reaching into the old inner window for classes etc.
@@ -11650,66 +11644,100 @@ nsGlobalChromeWindow::GetMessageManager(
   }
   CallQueryInterface(mMessageManager, aManager);
   return NS_OK;
 }
 
 // nsGlobalModalWindow implementation
 
 // QueryInterface implementation for nsGlobalModalWindow
-NS_IMPL_CYCLE_COLLECTION_INHERITED_1(nsGlobalModalWindow,
-                                     nsGlobalWindow,
-                                     mReturnValue)
 
 DOMCI_DATA(ModalContentWindow, nsGlobalModalWindow)
 
-NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION_INHERITED(nsGlobalModalWindow)
+NS_INTERFACE_MAP_BEGIN(nsGlobalModalWindow)
   NS_INTERFACE_MAP_ENTRY(nsIDOMModalContentWindow)
   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(ModalContentWindow)
 NS_INTERFACE_MAP_END_INHERITING(nsGlobalWindow)
 
 NS_IMPL_ADDREF_INHERITED(nsGlobalModalWindow, nsGlobalWindow)
 NS_IMPL_RELEASE_INHERITED(nsGlobalModalWindow, nsGlobalWindow)
 
 
-NS_IMETHODIMP
-nsGlobalModalWindow::GetDialogArguments(nsIVariant **aArguments)
+namespace mozilla {
+namespace dom {
+
+// InnerModalWindow
+
+NS_IMETHODIMP
+InnerModalWindow::GetDialogArguments(nsIVariant** aArguments)
 {
   FORWARD_TO_OUTER_MODAL_CONTENT_WINDOW(GetDialogArguments, (aArguments),
                                         NS_ERROR_NOT_INITIALIZED);
+}
+
+NS_IMETHODIMP
+InnerModalWindow::GetReturnValue(nsIVariant** aRetVal)
+{
+  FORWARD_TO_OUTER_MODAL_CONTENT_WINDOW(GetReturnValue, (aRetVal), NS_OK);
+}
+
+NS_IMETHODIMP
+InnerModalWindow::SetReturnValue(nsIVariant* aRetVal)
+{
+  FORWARD_TO_OUTER_MODAL_CONTENT_WINDOW(SetReturnValue, (aRetVal), NS_OK);
+}
+
+
+// OuterModalWindow
+
+NS_INTERFACE_MAP_BEGIN(OuterModalWindow)
+  NS_INTERFACE_MAP_ENTRY_CYCLE_COLLECTION(OuterModalWindow)
+NS_INTERFACE_MAP_END_INHERITING(nsGlobalModalWindow)
+
+NS_IMPL_CYCLE_COLLECTION_INHERITED_1(OuterModalWindow,
+                                     nsGlobalWindow,
+                                     mReturnValue)
+
+NS_IMETHODIMP
+OuterModalWindow::GetDialogArguments(nsIVariant** aArguments)
+{
+  MOZ_ASSERT(IsOuterWindow());
 
   // This does an internal origin check, and returns undefined if the subject
   // does not subsumes the origin of the arguments.
   return mDialogArguments->Get(nsContentUtils::GetSubjectPrincipal(), aArguments);
 }
 
 NS_IMETHODIMP
-nsGlobalModalWindow::GetReturnValue(nsIVariant **aRetVal)
-{
-  FORWARD_TO_OUTER_MODAL_CONTENT_WINDOW(GetReturnValue, (aRetVal), NS_OK);
+OuterModalWindow::GetReturnValue(nsIVariant** aRetVal)
+{
+  MOZ_ASSERT(IsOuterWindow());
 
   nsCOMPtr<nsIVariant> result;
   if (!mReturnValue) {
     nsCOMPtr<nsIVariant> variant = CreateVoidVariant();
     variant.forget(aRetVal);
     return NS_OK;
   }
   return mReturnValue->Get(nsContentUtils::GetSubjectPrincipal(), aRetVal);
 }
 
 NS_IMETHODIMP
-nsGlobalModalWindow::SetReturnValue(nsIVariant *aRetVal)
-{
-  FORWARD_TO_OUTER_MODAL_CONTENT_WINDOW(SetReturnValue, (aRetVal), NS_OK);
+OuterModalWindow::SetReturnValue(nsIVariant* aRetVal)
+{
+  MOZ_ASSERT(IsOuterWindow());
 
   mReturnValue = new DialogValueHolder(nsContentUtils::GetSubjectPrincipal(),
                                        aRetVal);
   return NS_OK;
 }
 
+} // namespace dom
+} // namespace mozilla
+
 void
 nsGlobalWindow::SetHasAudioAvailableEventListeners()
 {
   if (mDoc) {
     mDoc->NotifyAudioAvailableListener();
   }
 }
 
diff --git a/dom/base/nsGlobalWindow.h b/dom/base/nsGlobalWindow.h
--- a/dom/base/nsGlobalWindow.h
+++ b/dom/base/nsGlobalWindow.h
@@ -1369,37 +1369,64 @@ class nsGlobalModalWindow : public nsGlo
 public:
   nsGlobalModalWindow(nsGlobalWindow *aOuterWindow)
     : nsGlobalWindow(aOuterWindow)
   {
     mIsModalContentWindow = true;
   }
 
   NS_DECL_ISUPPORTS_INHERITED
+};
+
+namespace mozilla {
+namespace dom {
+
+class InnerModalWindow : public nsGlobalModalWindow
+{
+public:
+  explicit InnerModalWindow(nsGlobalWindow* aOuterWindow)
+    : nsGlobalModalWindow(aOuterWindow)
+  {
+    MOZ_ASSERT(aOuterWindow);
+  }
+
+  NS_DECL_NSIDOMMODALCONTENTWINDOW
+};
+
+class OuterModalWindow : public nsGlobalModalWindow
+{
+public:
+  OuterModalWindow()
+    : nsGlobalModalWindow(nullptr)
+  {
+  }
+
+  NS_IMETHOD QueryInterface(REFNSIID aIID, void** aInstancePtr) MOZ_OVERRIDE;
+  NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED(OuterModalWindow, nsGlobalWindow)
   NS_DECL_NSIDOMMODALCONTENTWINDOW
 
-  NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED(nsGlobalModalWindow, nsGlobalWindow)
-
-protected:
-  // For use by outer windows only.
+private:
   nsRefPtr<DialogValueHolder> mReturnValue;
 };
 
+} // namespace dom
+} // namespace mozilla
+
 /* factory function */
 inline already_AddRefed<nsGlobalWindow>
 NS_NewScriptGlobalObject(nsIDocShell* aDocShell, bool aIsChrome,
                          bool aIsModalContentWindow)
 {
   MOZ_ASSERT(aDocShell);
 
   nsRefPtr<nsGlobalWindow> global;
   if (aIsChrome) {
     global = new nsGlobalChromeWindow(nullptr);
   } else if (aIsModalContentWindow) {
-    global = new nsGlobalModalWindow(nullptr);
+    global = new mozilla::dom::OuterModalWindow();
   } else {
     global = new nsGlobalWindow(nullptr);
   }
 
   global->SetDocShell(aDocShell);
 
   return global.forget();
 }
