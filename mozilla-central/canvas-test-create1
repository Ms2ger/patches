From: Ms2ger <ms2ger@gmail.com>
Bug 665345 - Move tests for the one-argument createImageData method

Due to the previous patch, these tests were no longer in
alphabetical order.

diff --git a/content/canvas/test/test_canvas.html b/content/canvas/test/test_canvas.html
--- a/content/canvas/test/test_canvas.html
+++ b/content/canvas/test/test_canvas.html
@@ -6825,34 +6825,16 @@ ctx.fillRect(-5, -2.5, 10, 5);
 isPixel(ctx, 25,25, 0,255,0,255, 0);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
-<!-- [[[ test_2d.imageData.create2.basic.html ]]] -->
-
-<p>Canvas test: 2d.imageData.create2.basic</p>
-<!-- Testing: createImageData() exists and returns something -->
-<canvas height="50" id="c254" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-
-function test_2d_imageData_create2_basic() {
-
-var canvas = document.getElementById('c254');
-var ctx = canvas.getContext('2d');
-
-ok(ctx.createImageData(1, 1) !== null, "ctx.createImageData(1, 1) !== null");
-
-
-}
-</script>
-
 <!-- [[[ test_2d.imageData.create1.basic.html ]]] -->
 
 <p>Canvas test: 2d.imageData.create1.basic - bug 630040</p>
 <!-- Testing: createImageData(imgdata) exists and returns something -->
 <canvas height="50" id="c254a" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create1_basic() {
@@ -6861,42 +6843,16 @@ var canvas = document.getElementById('c2
 var ctx = canvas.getContext('2d');
 
 ok(ctx.createImageData(ctx.createImageData(1, 1)) != null, "ctx.createImageData(ctx.createImageData(1, 1)) != null");
 
 
 }
 </script>
 
-<!-- [[[ test_2d.imageData.create2.initial.html ]]] -->
-
-<p>Canvas test: 2d.imageData.create2.initial</p>
-<!-- Testing: createImageData() returns transparent black data of the right size -->
-<canvas height="50" id="c255" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-
-function test_2d_imageData_create2_initial() {
-
-var canvas = document.getElementById('c255');
-var ctx = canvas.getContext('2d');
-
-var imgdata = ctx.createImageData(10, 20);
-ok(imgdata.data.length == imgdata.width*imgdata.height*4, "imgdata.data.length == imgdata.width*imgdata.height*4");
-ok(imgdata.width < imgdata.height, "imgdata.width < imgdata.height");
-ok(imgdata.width > 0, "imgdata.width > 0");
-var isTransparentBlack = true;
-for (var i = 0; i < imgdata.data.length; ++i)
-    if (imgdata.data[i] !== 0)
-        isTransparentBlack = false;
-ok(isTransparentBlack, "isTransparentBlack");
-
-
-}
-</script>
-
 <!-- [[[ test_2d.imageData.create1.initial.html ]]] -->
 
 <p>Canvas test: 2d.imageData.create1.initial - bug 630040</p>
 <!-- Testing: createImageData(imgdata) returns transparent black data of the right size -->
 <canvas height="50" id="c255a" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create1_initial() {
@@ -6916,16 +6872,105 @@ for (var i = 0; i < imgdata2.data.length
     if (imgdata2.data[i] !== 0)
         isTransparentBlack = false;
 ok(isTransparentBlack, "isTransparentBlack");
 
 
 }
 </script>
 
+<!-- [[[ test_2d.imageData.create1.type.html ]]] -->
+
+<p>Canvas test: 2d.imageData.create1.type - bug 630040</p>
+<!-- Testing: createImageData(imgdata) returns an ImageData object containing a Uint8ClampedArray object -->
+<canvas height="50" id="c261a" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_imageData_create1_type() {
+
+var canvas = document.getElementById('c261a');
+var ctx = canvas.getContext('2d');
+
+ok(window.ImageData !== undefined, "window.ImageData !== undefined");
+ok(window.Uint8ClampedArray !== undefined, "window.Uint8ClampedArray !== undefined");
+window.ImageData.prototype.thisImplementsImageData = true;
+window.Uint8ClampedArray.prototype.thisImplementsUint8ClampedArray = true;
+var imgdata = ctx.createImageData(ctx.createImageData(1, 1));
+ok(imgdata.thisImplementsImageData, "imgdata.thisImplementsImageData");
+ok(imgdata.data.thisImplementsUint8ClampedArray, "imgdata.data.thisImplementsUint8ClampedArray");
+
+
+}
+</script>
+
+<!-- [[[ test_2d.imageData.create1.zero.html ]]] -->
+
+<p>Canvas test: 2d.imageData.create1.zero - bug 630040</p>
+<!-- Testing: createImageData(null) throws TypeError -->
+<canvas height="50" id="c262a" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_imageData_create1_zero() {
+
+var canvas = document.getElementById('c262a');
+var ctx = canvas.getContext('2d');
+
+var _thrown = undefined; try {
+  ctx.createImageData(null);
+} catch (e) { _thrown = e };
+ok(_thrown && _thrown.name == "TypeError", "should throw TypeError");
+
+
+}
+</script>
+
+<!-- [[[ test_2d.imageData.create2.basic.html ]]] -->
+
+<p>Canvas test: 2d.imageData.create2.basic</p>
+<!-- Testing: createImageData() exists and returns something -->
+<canvas height="50" id="c254" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_imageData_create2_basic() {
+
+var canvas = document.getElementById('c254');
+var ctx = canvas.getContext('2d');
+
+ok(ctx.createImageData(1, 1) !== null, "ctx.createImageData(1, 1) !== null");
+
+
+}
+</script>
+
+<!-- [[[ test_2d.imageData.create2.initial.html ]]] -->
+
+<p>Canvas test: 2d.imageData.create2.initial</p>
+<!-- Testing: createImageData() returns transparent black data of the right size -->
+<canvas height="50" id="c255" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_2d_imageData_create2_initial() {
+
+var canvas = document.getElementById('c255');
+var ctx = canvas.getContext('2d');
+
+var imgdata = ctx.createImageData(10, 20);
+ok(imgdata.data.length == imgdata.width*imgdata.height*4, "imgdata.data.length == imgdata.width*imgdata.height*4");
+ok(imgdata.width < imgdata.height, "imgdata.width < imgdata.height");
+ok(imgdata.width > 0, "imgdata.width > 0");
+var isTransparentBlack = true;
+for (var i = 0; i < imgdata.data.length; ++i)
+    if (imgdata.data[i] !== 0)
+        isTransparentBlack = false;
+ok(isTransparentBlack, "isTransparentBlack");
+
+
+}
+</script>
+
 <!-- [[[ test_2d.imageData.create2.large.html ]]] -->
 
 <p>Canvas test: 2d.imageData.create2.large - bug 433004</p>
 <!-- Testing: createImageData() works for sizes much larger than the canvas -->
 <canvas height="50" id="c256" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create2_large() {
@@ -7096,40 +7141,16 @@ window.Uint8ClampedArray.prototype.thisI
 var imgdata = ctx.createImageData(1, 1);
 ok(imgdata.thisImplementsImageData, "imgdata.thisImplementsImageData");
 ok(imgdata.data.thisImplementsUint8ClampedArray, "imgdata.data.thisImplementsUint8ClampedArray");
 
 
 }
 </script>
 
-<!-- [[[ test_2d.imageData.create1.type.html ]]] -->
-
-<p>Canvas test: 2d.imageData.create1.type - bug 630040</p>
-<!-- Testing: createImageData(imgdata) returns an ImageData object containing a Uint8ClampedArray object -->
-<canvas height="50" id="c261a" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-
-function test_2d_imageData_create1_type() {
-
-var canvas = document.getElementById('c261a');
-var ctx = canvas.getContext('2d');
-
-ok(window.ImageData !== undefined, "window.ImageData !== undefined");
-ok(window.Uint8ClampedArray !== undefined, "window.Uint8ClampedArray !== undefined");
-window.ImageData.prototype.thisImplementsImageData = true;
-window.Uint8ClampedArray.prototype.thisImplementsUint8ClampedArray = true;
-var imgdata = ctx.createImageData(ctx.createImageData(1, 1));
-ok(imgdata.thisImplementsImageData, "imgdata.thisImplementsImageData");
-ok(imgdata.data.thisImplementsUint8ClampedArray, "imgdata.data.thisImplementsUint8ClampedArray");
-
-
-}
-</script>
-
 <!-- [[[ test_2d.imageData.create2.zero.html ]]] -->
 
 <p>Canvas test: 2d.imageData.create2.zero</p>
 <!-- Testing: createImageData() throws INDEX_SIZE_ERR if size is zero -->
 <canvas height="50" id="c262" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create2_zero() {
@@ -7146,37 +7167,16 @@ var _thrown = undefined; try {
 var _thrown = undefined; try {
   ctx.createImageData(0, 0);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "IndexSizeError" && _thrown.code == DOMException.INDEX_SIZE_ERR, "should throw IndexSizeError");
 
 
 }
 </script>
 
-<!-- [[[ test_2d.imageData.create1.zero.html ]]] -->
-
-<p>Canvas test: 2d.imageData.create1.zero - bug 630040</p>
-<!-- Testing: createImageData(null) throws TypeError -->
-<canvas height="50" id="c262a" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-
-function test_2d_imageData_create1_zero() {
-
-var canvas = document.getElementById('c262a');
-var ctx = canvas.getContext('2d');
-
-var _thrown = undefined; try {
-  ctx.createImageData(null);
-} catch (e) { _thrown = e };
-ok(_thrown && _thrown.name == "TypeError", "should throw TypeError");
-
-
-}
-</script>
-
 <!-- [[[ test_2d.imageData.get.basic.html ]]] -->
 
 <p>Canvas test: 2d.imageData.get.basic</p>
 <!-- Testing: getImageData() exists and returns something -->
 <canvas height="50" id="c263" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_get_basic() {
@@ -20908,36 +20908,46 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_gradient_radial_transform_2");
  }
  try {
   test_2d_gradient_radial_transform_3();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_gradient_radial_transform_3");
  }
  try {
+  test_2d_imageData_create1_basic();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_imageData_create1_basic");
+ }
+ try {
+  test_2d_imageData_create1_initial();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_imageData_create1_initial");
+ }
+ try {
+  test_2d_imageData_create1_type();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_imageData_create1_type");
+ }
+ try {
+  test_2d_imageData_create1_zero();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_imageData_create1_zero");
+ }
+ try {
   test_2d_imageData_create2_basic();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_imageData_create2_basic");
  }
  try {
-  test_2d_imageData_create1_basic();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_2d_imageData_create1_basic");
- }
- try {
   test_2d_imageData_create2_initial();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_imageData_create2_initial");
  }
  try {
-  test_2d_imageData_create1_initial();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_2d_imageData_create1_initial");
- }
- try {
   test_2d_imageData_create2_large();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_imageData_create2_large");
  }
  try {
   test_2d_imageData_create2_negative();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_imageData_create2_negative");
@@ -20958,31 +20968,21 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_imageData_create2_tiny");
  }
  try {
   test_2d_imageData_create2_type();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_imageData_create2_type");
  }
  try {
-  test_2d_imageData_create1_type();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_2d_imageData_create1_type");
- }
- try {
   test_2d_imageData_create2_zero();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_imageData_create2_zero");
  }
  try {
-  test_2d_imageData_create1_zero();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_2d_imageData_create1_zero");
- }
- try {
   test_2d_imageData_get_basic();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_imageData_get_basic");
  }
  try {
   test_2d_imageData_get_clamp();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_imageData_get_clamp");
