diff --git a/xpcom/base/nsDebugImpl.cpp b/xpcom/base/nsDebugImpl.cpp
--- a/xpcom/base/nsDebugImpl.cpp
+++ b/xpcom/base/nsDebugImpl.cpp
@@ -1,9 +1,9 @@
-/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 // Chromium headers must come before Mozilla headers.
 #include "base/process_util.h"
 
 #include "nsDebugImpl.h"
@@ -227,36 +227,36 @@ static nsAssertBehavior GetAssertBehavio
 #else
   gAssertBehavior = NS_ASSERT_WARN;
 #endif
 
   const char *assertString = PR_GetEnv("XPCOM_DEBUG_BREAK");
   if (!assertString || !*assertString)
     return gAssertBehavior;
 
-   if (!strcmp(assertString, "warn"))
-     return gAssertBehavior = NS_ASSERT_WARN;
+  if (!strcmp(assertString, "warn"))
+    return gAssertBehavior = NS_ASSERT_WARN;
 
-   if (!strcmp(assertString, "suspend"))
-     return gAssertBehavior = NS_ASSERT_SUSPEND;
+  if (!strcmp(assertString, "suspend"))
+    return gAssertBehavior = NS_ASSERT_SUSPEND;
 
-   if (!strcmp(assertString, "stack"))
-     return gAssertBehavior = NS_ASSERT_STACK;
+  if (!strcmp(assertString, "stack"))
+    return gAssertBehavior = NS_ASSERT_STACK;
 
-   if (!strcmp(assertString, "abort"))
-     return gAssertBehavior = NS_ASSERT_ABORT;
+  if (!strcmp(assertString, "abort"))
+    return gAssertBehavior = NS_ASSERT_ABORT;
 
-   if (!strcmp(assertString, "trap") || !strcmp(assertString, "break"))
-     return gAssertBehavior = NS_ASSERT_TRAP;
+  if (!strcmp(assertString, "trap") || !strcmp(assertString, "break"))
+    return gAssertBehavior = NS_ASSERT_TRAP;
 
-   if (!strcmp(assertString, "stack-and-abort"))
-     return gAssertBehavior = NS_ASSERT_STACK_AND_ABORT;
+  if (!strcmp(assertString, "stack-and-abort"))
+    return gAssertBehavior = NS_ASSERT_STACK_AND_ABORT;
 
-   fprintf(stderr, "Unrecognized value of XPCOM_DEBUG_BREAK\n");
-   return gAssertBehavior;
+  fprintf(stderr, "Unrecognized value of XPCOM_DEBUG_BREAK\n");
+  return gAssertBehavior;
 }
 
 struct FixedBuffer
 {
   FixedBuffer() : curlen(0) { buffer[0] = '\0'; }
 
   char buffer[1000];
   uint32_t curlen;
