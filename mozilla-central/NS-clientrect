From: Ms2ger <ms2ger@gmail.com>

diff --git a/content/base/src/nsGenericElement.cpp b/content/base/src/nsGenericElement.cpp
--- a/content/base/src/nsGenericElement.cpp
+++ b/content/base/src/nsGenericElement.cpp
@@ -92,17 +92,18 @@
 #include "nsBindingManager.h"
 #include "nsXBLBinding.h"
 #include "nsIXBLService.h"
 #include "nsPIDOMWindow.h"
 #include "nsIBoxObject.h"
 #include "nsPIBoxObject.h"
 #include "nsIDOMNSDocument.h"
 #include "nsIDOMNSElement.h"
-#include "nsClientRect.h"
+#include "mozilla/dom/ClientRect.h"
+#include "mozilla/dom/ClientRectList.h"
 #ifdef MOZ_SVG
 #include "nsSVGUtils.h"
 #endif
 #include "nsLayoutUtils.h"
 #include "nsGkAtoms.h"
 #include "nsContentUtils.h"
 #include "nsIJSContextStack.h"
 
@@ -1722,20 +1723,17 @@ nsNSElementTearoff::GetClientWidth(PRInt
   *aClientWidth = mContent->GetClientWidth();
   return NS_OK;
 }
 
 nsresult
 nsGenericElement::GetBoundingClientRect(nsIDOMClientRect** aResult)
 {
   // Weak ref, since we addref it below
-  nsClientRect* rect = new nsClientRect();
-  if (!rect)
-    return NS_ERROR_OUT_OF_MEMORY;
-
+  ClientRect* rect = new ClientRect();
   NS_ADDREF(*aResult = rect);
   
   nsIFrame* frame = GetPrimaryFrame(Flush_Layout);
   if (!frame) {
     // display:none, perhaps? Return the empty rect
     return NS_OK;
   }
 
@@ -1751,33 +1749,31 @@ nsNSElementTearoff::GetBoundingClientRec
   return mContent->GetBoundingClientRect(aResult);
 }
 
 nsresult
 nsGenericElement::GetClientRects(nsIDOMClientRectList** aResult)
 {
   *aResult = nullptr;
 
-  nsRefPtr<nsClientRectList> rectList = new nsClientRectList();
-  if (!rectList)
-    return NS_ERROR_OUT_OF_MEMORY;
+  nsRefPtr<ClientRectList> rectList = new ClientRectList();
 
   nsIFrame* frame = GetPrimaryFrame(Flush_Layout);
   if (!frame) {
     // display:none, perhaps? Return an empty list
-    *aResult = rectList.forget().get();
+    rectList.forget(aResult);
     return NS_OK;
   }
 
   nsLayoutUtils::RectListBuilder builder(rectList);
   nsLayoutUtils::GetAllInFlowRects(frame,
           nsLayoutUtils::GetContainingBlockForClientRect(frame), &builder);
   if (NS_FAILED(builder.mRV))
     return builder.mRV;
-  *aResult = rectList.forget().get();
+  rectList.forget(aResult);
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsNSElementTearoff::GetClientRects(nsIDOMClientRectList** aResult)
 {
   return mContent->GetClientRects(aResult);
 }
diff --git a/content/base/src/nsRange.cpp b/content/base/src/nsRange.cpp
--- a/content/base/src/nsRange.cpp
+++ b/content/base/src/nsRange.cpp
@@ -53,20 +53,23 @@
 #include "nsIDocument.h"
 #include "nsIDOMText.h"
 #include "nsDOMError.h"
 #include "nsIContentIterator.h"
 #include "nsIDOMNodeList.h"
 #include "nsGkAtoms.h"
 #include "nsContentUtils.h"
 #include "nsGenericDOMDataNode.h"
-#include "nsClientRect.h"
+#include "mozilla/dom/ClientRect.h"
+#include "mozilla/dom/ClientRectList.h"
 #include "nsLayoutUtils.h"
 #include "nsTextFrame.h"
 
+using namespace mozilla::dom;
+
 nsresult NS_NewContentIterator(nsIContentIterator** aInstancePtrResult);
 nsresult NS_NewContentSubtreeIterator(nsIContentIterator** aInstancePtrResult);
 
 /******************************************************
  * stack based utilty class for managing monitor
  ******************************************************/
 
 // NS_ERROR_DOM_NOT_OBJECT_ERR is not the correct one to throw, but spec doesn't say
@@ -2248,20 +2251,17 @@ static void CollectClientRects(nsLayoutU
 }
 
 NS_IMETHODIMP
 nsRange::GetBoundingClientRect(nsIDOMClientRect** aResult)
 {
   *aResult = nullptr;
 
   // Weak ref, since we addref it below
-  nsClientRect* rect = new nsClientRect();
-  if (!rect)
-    return NS_ERROR_OUT_OF_MEMORY;
-
+  ClientRect* rect = new ClientRect();
   NS_ADDREF(*aResult = rect);
 
   if (!mStartParent)
     return NS_OK;
 
   nsLayoutUtils::RectAccumulator accumulator;
   
   CollectClientRects(&accumulator, this, mStartParent, mStartOffset, 
@@ -2276,19 +2276,17 @@ nsRange::GetBoundingClientRect(nsIDOMCli
 NS_IMETHODIMP
 nsRange::GetClientRects(nsIDOMClientRectList** aResult)
 {
   *aResult = nullptr;
 
   if (!mStartParent)
     return NS_OK;
 
-  nsRefPtr<nsClientRectList> rectList = new nsClientRectList();
-  if (!rectList)
-    return NS_ERROR_OUT_OF_MEMORY;
+  nsRefPtr<ClientRectList> rectList = new ClientRectList();
 
   nsLayoutUtils::RectListBuilder builder(rectList);
 
   CollectClientRects(&builder, this, mStartParent, mStartOffset, 
     mEndParent, mEndOffset);
 
   if (NS_FAILED(builder.mRV))
     return builder.mRV;
diff --git a/content/events/src/nsDOMNotifyPaintEvent.cpp b/content/events/src/nsDOMNotifyPaintEvent.cpp
--- a/content/events/src/nsDOMNotifyPaintEvent.cpp
+++ b/content/events/src/nsDOMNotifyPaintEvent.cpp
@@ -37,20 +37,23 @@
  * ***** END LICENSE BLOCK ***** */
 
 #ifdef MOZ_IPC
 #include "base/basictypes.h"
 #include "IPC/IPCMessageUtils.h"
 #endif
 #include "nsDOMNotifyPaintEvent.h"
 #include "nsContentUtils.h"
-#include "nsClientRect.h"
+#include "mozilla/dom/ClientRect.h"
+#include "mozilla/dom/ClientRectList.h"
 #include "nsPaintRequest.h"
 #include "nsIFrame.h"
 
+using namespace mozilla::dom;
+
 nsDOMNotifyPaintEvent::nsDOMNotifyPaintEvent(nsPresContext* aPresContext,
                                              nsEvent* aEvent,
                                              uint32_t aEventType,
                                              nsInvalidateRequestList* aInvalidateRequests)
 : nsDOMEvent(aPresContext, aEvent)
 {
   if (mEvent) {
     mEvent->message = aEventType;
@@ -85,66 +88,54 @@ nsDOMNotifyPaintEvent::GetRegion()
   }
   return r;
 }
 
 NS_IMETHODIMP
 nsDOMNotifyPaintEvent::GetBoundingClientRect(nsIDOMClientRect** aResult)
 {
   // Weak ref, since we addref it below
-  nsClientRect* rect = new nsClientRect();
-  if (!rect)
-    return NS_ERROR_OUT_OF_MEMORY;
-
+  ClientRect* rect = new ClientRect();
   NS_ADDREF(*aResult = rect);
   if (!mPresContext)
     return NS_OK;
 
   rect->SetLayoutRect(GetRegion().GetBounds());
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsDOMNotifyPaintEvent::GetClientRects(nsIDOMClientRectList** aResult)
 {
-  nsRefPtr<nsClientRectList> rectList = new nsClientRectList();
-  if (!rectList)
-    return NS_ERROR_OUT_OF_MEMORY;
+  nsRefPtr<ClientRectList> rectList = new ClientRectList();
 
   nsRegion r = GetRegion();
   nsRegionRectIterator iter(r);
   for (const nsRect* rgnRect = iter.Next(); rgnRect; rgnRect = iter.Next()) {
-    nsRefPtr<nsClientRect> rect = new nsClientRect();
-    if (!rect)
-      return NS_ERROR_OUT_OF_MEMORY;
-    
+    nsRefPtr<ClientRect> rect = new ClientRect();
     rect->SetLayoutRect(*rgnRect);
     rectList->Append(rect);
   }
 
   rectList.forget(aResult);
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsDOMNotifyPaintEvent::GetPaintRequests(nsIDOMPaintRequestList** aResult)
 {
   nsRefPtr<nsPaintRequestList> requests = new nsPaintRequestList();
-  if (!requests)
-    return NS_ERROR_OUT_OF_MEMORY;
 
   bool isTrusted = nsContentUtils::IsCallerTrustedForRead();
   for (uint32_t i = 0; i < mInvalidateRequests.Length(); ++i) {
     if (!isTrusted &&
         (mInvalidateRequests[i].mFlags & nsIFrame::INVALIDATE_CROSS_DOC))
       continue;
 
     nsRefPtr<nsPaintRequest> r = new nsPaintRequest();
-    if (!r)
-      return NS_ERROR_OUT_OF_MEMORY;
     r->SetRequest(mInvalidateRequests[i]);
     requests->Append(r);
   }
 
   requests.forget(aResult);
   return NS_OK;
 }
 
diff --git a/content/events/src/nsDOMScrollAreaEvent.cpp b/content/events/src/nsDOMScrollAreaEvent.cpp
--- a/content/events/src/nsDOMScrollAreaEvent.cpp
+++ b/content/events/src/nsDOMScrollAreaEvent.cpp
@@ -37,17 +37,16 @@
 
 #ifdef MOZ_IPC
 #include "base/basictypes.h"
 #include "IPC/IPCMessageUtils.h"
 #endif
 
 #include "nsDOMScrollAreaEvent.h"
 #include "nsGUIEvent.h"
-#include "nsClientRect.h"
 #include "nsDOMClassInfoID.h"
 #include "nsIClassInfo.h"
 #include "nsIXPCScriptable.h"
 
 nsDOMScrollAreaEvent::nsDOMScrollAreaEvent(nsPresContext *aPresContext,
                                            nsScrollAreaEvent *aEvent)
   : nsDOMUIEvent(aPresContext, aEvent)
 {
diff --git a/content/events/src/nsDOMScrollAreaEvent.h b/content/events/src/nsDOMScrollAreaEvent.h
--- a/content/events/src/nsDOMScrollAreaEvent.h
+++ b/content/events/src/nsDOMScrollAreaEvent.h
@@ -37,17 +37,17 @@
 
 #ifndef nsDOMScrollAreaEvent_h__
 #define nsDOMScrollAreaEvent_h__
 
 #include "nsIDOMScrollAreaEvent.h"
 #include "nsDOMUIEvent.h"
 
 #include "nsGUIEvent.h"
-#include "nsClientRect.h"
+#include "mozilla/dom/ClientRect.h"
 
 class nsDOMScrollAreaEvent : public nsDOMUIEvent,
                              public nsIDOMScrollAreaEvent
 {
 public:
   nsDOMScrollAreaEvent(nsPresContext *aPresContext,
                        nsScrollAreaEvent *aEvent);
   virtual ~nsDOMScrollAreaEvent();
@@ -59,12 +59,12 @@ public:
   NS_FORWARD_TO_NSDOMUIEVENT
 
 #ifdef MOZ_IPC
     virtual void Serialize(IPC::Message* aMsg, bool aSerializeInterfaceType);
     virtual bool Deserialize(const IPC::Message* aMsg, void** aIter);
 #endif
 
 protected:
-  nsClientRect mClientArea;
+  mozilla::dom::ClientRect mClientArea;
 };
 
 #endif // nsDOMScrollAreaEvent_h__
diff --git a/content/events/src/nsPaintRequest.cpp b/content/events/src/nsPaintRequest.cpp
--- a/content/events/src/nsPaintRequest.cpp
+++ b/content/events/src/nsPaintRequest.cpp
@@ -34,36 +34,36 @@
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #include "nsPaintRequest.h"
 
 #include "nsDOMClassInfoID.h"
-#include "nsClientRect.h"
+#include "mozilla/dom/ClientRect.h"
 #include "nsIFrame.h"
 
+using namespace mozilla::dom;
+
 DOMCI_DATA(PaintRequest, nsPaintRequest)
 
 NS_INTERFACE_TABLE_HEAD(nsPaintRequest)
   NS_INTERFACE_TABLE1(nsPaintRequest, nsIDOMPaintRequest)
   NS_INTERFACE_TABLE_TO_MAP_SEGUE
   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(PaintRequest)
 NS_INTERFACE_MAP_END
 
 NS_IMPL_ADDREF(nsPaintRequest)
 NS_IMPL_RELEASE(nsPaintRequest)
 
 NS_IMETHODIMP
 nsPaintRequest::GetClientRect(nsIDOMClientRect** aResult)
 {
-  nsRefPtr<nsClientRect> clientRect = new nsClientRect();
-  if (!clientRect)
-    return NS_ERROR_OUT_OF_MEMORY;
+  nsRefPtr<ClientRect> clientRect = new ClientRect();
   clientRect->SetLayoutRect(mRequest.mRect);
   clientRect.forget(aResult);
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsPaintRequest::GetReason(nsAString& aResult)
 {
diff --git a/content/events/src/nsPaintRequest.h b/content/events/src/nsPaintRequest.h
--- a/content/events/src/nsPaintRequest.h
+++ b/content/events/src/nsPaintRequest.h
@@ -37,17 +37,16 @@
  * ***** END LICENSE BLOCK ***** */
 
 #ifndef NSPAINTREQUEST_H_
 #define NSPAINTREQUEST_H_
 
 #include "nsIDOMPaintRequest.h"
 #include "nsIDOMPaintRequestList.h"
 #include "nsPresContext.h"
-#include "nsClientRect.h"
 
 class nsPaintRequest : public nsIDOMPaintRequest
 {
 public:
   NS_DECL_ISUPPORTS
   NS_DECL_NSIDOMPAINTREQUEST
 
   nsPaintRequest() { mRequest.mFlags = 0; }
@@ -78,17 +77,17 @@ public:
 
   static nsPaintRequestList* FromSupports(nsISupports* aSupports)
   {
 #ifdef DEBUG
     {
       nsCOMPtr<nsIDOMPaintRequestList> list_qi = do_QueryInterface(aSupports);
 
       // If this assertion fires the QI implementation for the object in
-      // question doesn't use the nsIDOMClientRectList pointer as the nsISupports
+      // question doesn't use the nsIDOMPaintRequestList pointer as the nsISupports
       // pointer. That must be fixed, or we'll crash...
       NS_ASSERTION(list_qi == static_cast<nsIDOMPaintRequestList*>(aSupports),
                    "Uh, fix QI!");
     }
 #endif
 
     return static_cast<nsPaintRequestList*>(aSupports);
   }
diff --git a/content/html/content/src/nsClientRect.cpp b/content/html/content/src/ClientRect.cpp
rename from content/html/content/src/nsClientRect.cpp
rename to content/html/content/src/ClientRect.cpp
--- a/content/html/content/src/nsClientRect.cpp
+++ b/content/html/content/src/ClientRect.cpp
@@ -31,117 +31,91 @@
  * use your version of this file under the terms of the MPL, indicate your
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
-#include "nsClientRect.h"
-#include "nsContentUtils.h"
+#include "mozilla/dom/ClientRect.h"
 #include "nsDOMClassInfoID.h"
 
 #include "nsPresContext.h"
 
-DOMCI_DATA(ClientRect, nsClientRect)
+DOMCI_DATA(ClientRect, mozilla::dom::ClientRect)
 
-NS_INTERFACE_TABLE_HEAD(nsClientRect)
-  NS_INTERFACE_TABLE1(nsClientRect, nsIDOMClientRect)
+namespace mozilla {
+namespace dom {
+
+NS_INTERFACE_TABLE_HEAD(ClientRect)
+  NS_INTERFACE_TABLE1(ClientRect, nsIDOMClientRect)
   NS_INTERFACE_TABLE_TO_MAP_SEGUE
   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(ClientRect)
 NS_INTERFACE_MAP_END
 
-NS_IMPL_ADDREF(nsClientRect)
-NS_IMPL_RELEASE(nsClientRect)
+NS_IMPL_ADDREF(ClientRect)
+NS_IMPL_RELEASE(ClientRect)
 
-nsClientRect::nsClientRect()
+ClientRect::ClientRect()
   : mX(0.0), mY(0.0), mWidth(0.0), mHeight(0.0)
 {
 }
 
 NS_IMETHODIMP
-nsClientRect::GetLeft(float* aResult)
+ClientRect::GetLeft(float* aResult)
 {
   *aResult = mX;
   return NS_OK;
 }
 
 NS_IMETHODIMP
-nsClientRect::GetTop(float* aResult)
+ClientRect::GetTop(float* aResult)
 {
   *aResult = mY;
   return NS_OK;
 }
 
 NS_IMETHODIMP
-nsClientRect::GetRight(float* aResult)
+ClientRect::GetRight(float* aResult)
 {
   *aResult = mX + mWidth;
   return NS_OK;
 }
 
 NS_IMETHODIMP
-nsClientRect::GetBottom(float* aResult)
+ClientRect::GetBottom(float* aResult)
 {
   *aResult = mY + mHeight;
   return NS_OK;
 }
 
 NS_IMETHODIMP
-nsClientRect::GetWidth(float* aResult)
+ClientRect::GetWidth(float* aResult)
 {
   *aResult = mWidth;
   return NS_OK;
 }
 
 NS_IMETHODIMP
-nsClientRect::GetHeight(float* aResult)
+ClientRect::GetHeight(float* aResult)
 {
   *aResult = mHeight;
   return NS_OK;
 }
 
-DOMCI_DATA(ClientRectList, nsClientRectList)
-
-NS_INTERFACE_TABLE_HEAD(nsClientRectList)
-  NS_INTERFACE_TABLE1(nsClientRectList, nsIDOMClientRectList)
-  NS_INTERFACE_TABLE_TO_MAP_SEGUE
-  NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(ClientRectList)
-NS_INTERFACE_MAP_END
-
-NS_IMPL_ADDREF(nsClientRectList)
-NS_IMPL_RELEASE(nsClientRectList)
-
-
-NS_IMETHODIMP    
-nsClientRectList::GetLength(uint32_t* aLength)
-{
-  *aLength = mArray.Count();
-  return NS_OK;
-}
-
-NS_IMETHODIMP    
-nsClientRectList::Item(uint32_t aIndex, nsIDOMClientRect** aReturn)
-{
-  NS_IF_ADDREF(*aReturn = GetItemAt(aIndex));
-  return NS_OK;
-}
-
-static double
-RoundFloat(double aValue)
-{
-  return floor(aValue + 0.5);
-}
-
 void
-nsClientRect::SetLayoutRect(const nsRect& aLayoutRect)
+ClientRect::SetLayoutRect(const nsRect& aLayoutRect)
 {
   double scale = 65536.0;
   // Round to the nearest 1/scale units. We choose scale so it can be represented
   // exactly by machine floating point.
-  double scaleInv = 1/scale;
-  double t2pScaled = scale/nsPresContext::AppUnitsPerCSSPixel();
-  double x = RoundFloat(aLayoutRect.x*t2pScaled)*scaleInv;
-  double y = RoundFloat(aLayoutRect.y*t2pScaled)*scaleInv;
-  SetRect(x, y, RoundFloat(aLayoutRect.XMost()*t2pScaled)*scaleInv - x,
-          RoundFloat(aLayoutRect.YMost()*t2pScaled)*scaleInv - y);
+  double scaleInv = 1 / scale;
+  double t2pScaled = scale / nsPresContext::AppUnitsPerCSSPixel();
+  double x = NS_round(aLayoutRect.x * t2pScaled) * scaleInv;
+  double y = NS_round(aLayoutRect.y * t2pScaled) * scaleInv;
+  SetRect(x, y,
+          NS_round(aLayoutRect.XMost() * t2pScaled) * scaleInv - x,
+          NS_round(aLayoutRect.YMost() * t2pScaled) * scaleInv - y);
 }
+
+} // namespace dom
+} // namespace mozilla
diff --git a/content/html/content/src/nsClientRect.h b/content/html/content/src/ClientRect.h
rename from content/html/content/src/nsClientRect.h
rename to content/html/content/src/ClientRect.h
--- a/content/html/content/src/nsClientRect.h
+++ b/content/html/content/src/ClientRect.h
@@ -31,76 +31,42 @@
  * use your version of this file under the terms of the MPL, indicate your
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
-#ifndef NSCLIENTRECT_H_
-#define NSCLIENTRECT_H_
+#ifndef mozilla_dom_ClientRect_h
+#define mozilla_dom_ClientRect_h
 
 #include "nsIDOMClientRect.h"
-#include "nsIDOMClientRectList.h"
-#include "nsCOMArray.h"
-#include "nsRect.h"
 #include "nsCOMPtr.h"
 
-class nsClientRect : public nsIDOMClientRect
+class nsRect;
+
+namespace mozilla {
+namespace dom {
+
+class ClientRect : public nsIDOMClientRect
 {
 public:
   NS_DECL_ISUPPORTS
 
-  nsClientRect();
+  ClientRect();
   void SetRect(float aX, float aY, float aWidth, float aHeight) {
     mX = aX; mY = aY; mWidth = aWidth; mHeight = aHeight;
   }
-  virtual ~nsClientRect() {}
+  virtual ~ClientRect() {}
   
   NS_DECL_NSIDOMCLIENTRECT
 
   void SetLayoutRect(const nsRect& aLayoutRect);
 
 protected:
   float mX, mY, mWidth, mHeight;
 };
 
-class nsClientRectList : public nsIDOMClientRectList
-{
-public:
-  nsClientRectList() {}
+} // namespace dom
+} // namespace mozilla
 
-  NS_DECL_ISUPPORTS
-
-  NS_DECL_NSIDOMCLIENTRECTLIST
-  
-  void Append(nsIDOMClientRect* aElement) { mArray.AppendObject(aElement); }
-
-  nsIDOMClientRect* GetItemAt(uint32_t aIndex)
-  {
-    return mArray.SafeObjectAt(aIndex);
-  }
-
-  static nsClientRectList* FromSupports(nsISupports* aSupports)
-  {
-#ifdef DEBUG
-    {
-      nsCOMPtr<nsIDOMClientRectList> list_qi = do_QueryInterface(aSupports);
-
-      // If this assertion fires the QI implementation for the object in
-      // question doesn't use the nsIDOMClientRectList pointer as the nsISupports
-      // pointer. That must be fixed, or we'll crash...
-      NS_ASSERTION(list_qi == static_cast<nsIDOMClientRectList*>(aSupports),
-                   "Uh, fix QI!");
-    }
-#endif
-
-    return static_cast<nsClientRectList*>(aSupports);
-  }
-
-protected:
-  virtual ~nsClientRectList() {}
-
-  nsCOMArray<nsIDOMClientRect> mArray;
-};
-
-#endif /*NSCLIENTRECT_H_*/
+#endif /* mozilla_dom_ClientRect_h */
diff --git a/content/html/content/src/nsClientRect.cpp b/content/html/content/src/ClientRectList.cpp
copy from content/html/content/src/nsClientRect.cpp
copy to content/html/content/src/ClientRectList.cpp
--- a/content/html/content/src/nsClientRect.cpp
+++ b/content/html/content/src/ClientRectList.cpp
@@ -31,117 +31,42 @@
  * use your version of this file under the terms of the MPL, indicate your
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
-#include "nsClientRect.h"
-#include "nsContentUtils.h"
-#include "nsDOMClassInfoID.h"
+#include "mozilla/dom/ClientRectList.h"
+#include "nsDOMClassInfo.h"
 
-#include "nsPresContext.h"
+DOMCI_DATA(ClientRectList, mozilla::dom::ClientRectList)
 
-DOMCI_DATA(ClientRect, nsClientRect)
+namespace mozilla {
+namespace dom {
 
-NS_INTERFACE_TABLE_HEAD(nsClientRect)
-  NS_INTERFACE_TABLE1(nsClientRect, nsIDOMClientRect)
-  NS_INTERFACE_TABLE_TO_MAP_SEGUE
-  NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(ClientRect)
-NS_INTERFACE_MAP_END
-
-NS_IMPL_ADDREF(nsClientRect)
-NS_IMPL_RELEASE(nsClientRect)
-
-nsClientRect::nsClientRect()
-  : mX(0.0), mY(0.0), mWidth(0.0), mHeight(0.0)
-{
-}
-
-NS_IMETHODIMP
-nsClientRect::GetLeft(float* aResult)
-{
-  *aResult = mX;
-  return NS_OK;
-}
-
-NS_IMETHODIMP
-nsClientRect::GetTop(float* aResult)
-{
-  *aResult = mY;
-  return NS_OK;
-}
-
-NS_IMETHODIMP
-nsClientRect::GetRight(float* aResult)
-{
-  *aResult = mX + mWidth;
-  return NS_OK;
-}
-
-NS_IMETHODIMP
-nsClientRect::GetBottom(float* aResult)
-{
-  *aResult = mY + mHeight;
-  return NS_OK;
-}
-
-NS_IMETHODIMP
-nsClientRect::GetWidth(float* aResult)
-{
-  *aResult = mWidth;
-  return NS_OK;
-}
-
-NS_IMETHODIMP
-nsClientRect::GetHeight(float* aResult)
-{
-  *aResult = mHeight;
-  return NS_OK;
-}
-
-DOMCI_DATA(ClientRectList, nsClientRectList)
-
-NS_INTERFACE_TABLE_HEAD(nsClientRectList)
-  NS_INTERFACE_TABLE1(nsClientRectList, nsIDOMClientRectList)
+NS_INTERFACE_TABLE_HEAD(ClientRectList)
+  NS_INTERFACE_TABLE1(ClientRectList, nsIDOMClientRectList)
   NS_INTERFACE_TABLE_TO_MAP_SEGUE
   NS_DOM_INTERFACE_MAP_ENTRY_CLASSINFO(ClientRectList)
 NS_INTERFACE_MAP_END
 
-NS_IMPL_ADDREF(nsClientRectList)
-NS_IMPL_RELEASE(nsClientRectList)
+NS_IMPL_ADDREF(ClientRectList)
+NS_IMPL_RELEASE(ClientRectList)
 
 
 NS_IMETHODIMP    
-nsClientRectList::GetLength(uint32_t* aLength)
+ClientRectList::GetLength(uint32_t* aLength)
 {
   *aLength = mArray.Count();
   return NS_OK;
 }
 
 NS_IMETHODIMP    
-nsClientRectList::Item(uint32_t aIndex, nsIDOMClientRect** aReturn)
+ClientRectList::Item(uint32_t aIndex, nsIDOMClientRect** aReturn)
 {
   NS_IF_ADDREF(*aReturn = GetItemAt(aIndex));
   return NS_OK;
 }
 
-static double
-RoundFloat(double aValue)
-{
-  return floor(aValue + 0.5);
-}
-
-void
-nsClientRect::SetLayoutRect(const nsRect& aLayoutRect)
-{
-  double scale = 65536.0;
-  // Round to the nearest 1/scale units. We choose scale so it can be represented
-  // exactly by machine floating point.
-  double scaleInv = 1/scale;
-  double t2pScaled = scale/nsPresContext::AppUnitsPerCSSPixel();
-  double x = RoundFloat(aLayoutRect.x*t2pScaled)*scaleInv;
-  double y = RoundFloat(aLayoutRect.y*t2pScaled)*scaleInv;
-  SetRect(x, y, RoundFloat(aLayoutRect.XMost()*t2pScaled)*scaleInv - x,
-          RoundFloat(aLayoutRect.YMost()*t2pScaled)*scaleInv - y);
-}
+} // namespace dom
+} // namespace mozilla
diff --git a/content/html/content/src/nsClientRect.h b/content/html/content/src/ClientRectList.h
copy from content/html/content/src/nsClientRect.h
copy to content/html/content/src/ClientRectList.h
--- a/content/html/content/src/nsClientRect.h
+++ b/content/html/content/src/ClientRectList.h
@@ -31,76 +31,63 @@
  * use your version of this file under the terms of the MPL, indicate your
  * decision by deleting the provisions above and replace them with the notice
  * and other provisions required by the GPL or the LGPL. If you do not delete
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
-#ifndef NSCLIENTRECT_H_
-#define NSCLIENTRECT_H_
+#ifndef mozilla_dom_ClientRectList_h
+#define mozilla_dom_ClientRectList_h
+
+#include "nsIDOMClientRectList.h"
 
 #include "nsIDOMClientRect.h"
-#include "nsIDOMClientRectList.h"
 #include "nsCOMArray.h"
-#include "nsRect.h"
 #include "nsCOMPtr.h"
 
-class nsClientRect : public nsIDOMClientRect
+namespace mozilla {
+namespace dom {
+
+class ClientRectList : public nsIDOMClientRectList
 {
 public:
-  NS_DECL_ISUPPORTS
-
-  nsClientRect();
-  void SetRect(float aX, float aY, float aWidth, float aHeight) {
-    mX = aX; mY = aY; mWidth = aWidth; mHeight = aHeight;
-  }
-  virtual ~nsClientRect() {}
-  
-  NS_DECL_NSIDOMCLIENTRECT
-
-  void SetLayoutRect(const nsRect& aLayoutRect);
-
-protected:
-  float mX, mY, mWidth, mHeight;
-};
-
-class nsClientRectList : public nsIDOMClientRectList
-{
-public:
-  nsClientRectList() {}
+  ClientRectList() {}
 
   NS_DECL_ISUPPORTS
 
   NS_DECL_NSIDOMCLIENTRECTLIST
   
   void Append(nsIDOMClientRect* aElement) { mArray.AppendObject(aElement); }
 
   nsIDOMClientRect* GetItemAt(uint32_t aIndex)
   {
     return mArray.SafeObjectAt(aIndex);
   }
 
-  static nsClientRectList* FromSupports(nsISupports* aSupports)
+  static ClientRectList* FromSupports(nsISupports* aSupports)
   {
 #ifdef DEBUG
     {
       nsCOMPtr<nsIDOMClientRectList> list_qi = do_QueryInterface(aSupports);
 
       // If this assertion fires the QI implementation for the object in
       // question doesn't use the nsIDOMClientRectList pointer as the nsISupports
       // pointer. That must be fixed, or we'll crash...
       NS_ASSERTION(list_qi == static_cast<nsIDOMClientRectList*>(aSupports),
                    "Uh, fix QI!");
     }
 #endif
 
-    return static_cast<nsClientRectList*>(aSupports);
+    return static_cast<ClientRectList*>(aSupports);
   }
 
 protected:
-  virtual ~nsClientRectList() {}
+  virtual ~ClientRectList() {}
 
   nsCOMArray<nsIDOMClientRect> mArray;
 };
 
-#endif /*NSCLIENTRECT_H_*/
+} // namespace dom
+} // namespace mozilla
+
+#endif /* mozilla_dom_ClientRectList_h */
diff --git a/content/html/content/src/Makefile.in b/content/html/content/src/Makefile.in
--- a/content/html/content/src/Makefile.in
+++ b/content/html/content/src/Makefile.in
@@ -45,27 +45,34 @@ include $(DEPTH)/config/autoconf.mk
 MODULE		= content
 LIBRARY_NAME	= gkconhtmlcon_s
 LIBXUL_LIBRARY	= 1
 FAIL_ON_WARNINGS = 1
 
 
 EXPORTS		= \
 		nsImageMapUtils.h \
-		nsClientRect.h \
 		$(NULL)
 
 ifdef MOZ_IPC
 EXPORTS        += \
                 nsHTMLDNSPrefetch.h \
                 $(NULL)
 endif
 
+EXPORTS_NAMESPACES = mozilla/dom
+
+EXPORTS_mozilla/dom = \
+  ClientRect.h \
+  ClientRectList.h \
+  $(NULL) \
+
 CPPSRCS		= \
-		nsClientRect.cpp \
+		ClientRect.cpp \
+		ClientRectList.cpp \
 		nsHTMLDNSPrefetch.cpp \
 		nsGenericHTMLElement.cpp \
 		nsFormSubmission.cpp \
 		nsImageMapUtils.cpp \
 		nsTextEditorState.cpp \
 		nsHTMLElement.cpp \
 		nsHTMLAnchorElement.cpp \
 		nsHTMLAreaElement.cpp \
diff --git a/dom/base/nsDOMClassInfo.cpp b/dom/base/nsDOMClassInfo.cpp
--- a/dom/base/nsDOMClassInfo.cpp
+++ b/dom/base/nsDOMClassInfo.cpp
@@ -113,17 +113,18 @@
 #include "nsIDOMWindowInternal.h"
 #include "nsPIDOMWindow.h"
 #include "nsIDOMJSWindow.h"
 #include "nsIDOMWindowCollection.h"
 #include "nsIDOMHistory.h"
 #include "nsIDOMMediaList.h"
 #include "nsIDOMChromeWindow.h"
 #include "nsIDOMConstructor.h"
-#include "nsClientRect.h"
+#include "mozilla/dom/ClientRect.h"
+#include "mozilla/dom/ClientRectList.h"
 
 // DOM core includes
 #include "nsDOMError.h"
 #include "nsIDOMDOMException.h"
 #include "nsIDOMNode.h"
 #include "nsIDOM3Node.h"
 #include "nsIDOM3Attr.h"
 #include "nsIDOMNodeList.h"
@@ -10169,17 +10170,17 @@ nsCSSRuleListSH::GetItemAt(nsISupports *
 }
 
 // ClientRectList scriptable helper
 
 nsISupports*
 nsClientRectListSH::GetItemAt(nsISupports *aNative, uint32_t aIndex,
                               nsWrapperCache **aCache, nsresult *aResult)
 {
-  nsClientRectList* list = nsClientRectList::FromSupports(aNative);
+  ClientRectList* list = ClientRectList::FromSupports(aNative);
 
   return list->GetItemAt(aIndex);
 }
 
 // PaintRequestList scriptable helper
 
 nsISupports*
 nsPaintRequestListSH::GetItemAt(nsISupports *aNative, uint32_t aIndex,
diff --git a/layout/base/nsLayoutUtils.cpp b/layout/base/nsLayoutUtils.cpp
--- a/layout/base/nsLayoutUtils.cpp
+++ b/layout/base/nsLayoutUtils.cpp
@@ -78,27 +78,28 @@
 #include "nsIWidget.h"
 #include "gfxMatrix.h"
 #include "gfxTypes.h"
 #include "gfxUserFontSet.h"
 #include "nsTArray.h"
 #include "nsHTMLCanvasElement.h"
 #include "nsICanvasRenderingContextInternal.h"
 #include "gfxPlatform.h"
-#include "nsClientRect.h"
+#include "mozilla/dom/ClientRect.h"
+#include "mozilla/dom/ClientRectList.h"
+#include "mozilla/dom/Element.h"
 #ifdef MOZ_MEDIA
 #include "nsHTMLVideoElement.h"
 #endif
 #include "imgIRequest.h"
 #include "imgIContainer.h"
 #include "nsIImageLoadingContent.h"
 #include "nsCOMPtr.h"
 #include "nsListControlFrame.h"
 #include "ImageLayers.h"
-#include "mozilla/dom/Element.h"
 #include "nsCanvasFrame.h"
 #include "gfxDrawable.h"
 #include "gfxUtils.h"
 #include "nsDataHashtable.h"
 
 #ifdef MOZ_SVG
 #include "nsSVGUtils.h"
 #include "nsSVGIntegrationUtils.h"
@@ -1711,26 +1712,21 @@ nsLayoutUtils::RectAccumulator::RectAccu
 void nsLayoutUtils::RectAccumulator::AddRect(const nsRect& aRect) {
   mResultRect.UnionRect(mResultRect, aRect);
   if (!mSeenFirstRect) {
     mSeenFirstRect = true;
     mFirstRect = aRect;
   }
 }
 
-nsLayoutUtils::RectListBuilder::RectListBuilder(nsClientRectList* aList)
+nsLayoutUtils::RectListBuilder::RectListBuilder(ClientRectList* aList)
   : mRectList(aList), mRV(NS_OK) {}
 
 void nsLayoutUtils::RectListBuilder::AddRect(const nsRect& aRect) {
-  nsRefPtr<nsClientRect> rect = new nsClientRect();
-  if (!rect) {
-    mRV = NS_ERROR_OUT_OF_MEMORY;
-    return;
-  }
-
+  nsRefPtr<ClientRect> rect = new ClientRect();
   rect->SetLayoutRect(aRect);
   mRectList->Append(rect);
 }
 
 nsIFrame* nsLayoutUtils::GetContainingBlockForClientRect(nsIFrame* aFrame)
 {
   // get the nearest enclosing SVG foreign object frame or the root frame
   while (aFrame->GetParent() &&
diff --git a/layout/base/nsLayoutUtils.h b/layout/base/nsLayoutUtils.h
--- a/layout/base/nsLayoutUtils.h
+++ b/layout/base/nsLayoutUtils.h
@@ -36,46 +36,50 @@
  * the provisions above, a recipient may use your version of this file under
  * the terms of any one of the MPL, the GPL or the LGPL.
  *
  * ***** END LICENSE BLOCK ***** */
 
 #ifndef nsLayoutUtils_h__
 #define nsLayoutUtils_h__
 
-class nsIFormControlFrame;
-class nsPresContext;
-class nsIContent;
-class nsIAtom;
-class nsIScrollableFrame;
-class nsIDOMEvent;
-class nsRegion;
-class nsDisplayListBuilder;
-class nsIFontMetrics;
-class nsClientRectList;
-
 #include "prtypes.h"
 #include "nsStyleContext.h"
 #include "nsAutoPtr.h"
 #include "nsStyleSet.h"
 #include "nsIView.h"
 #include "nsIFrame.h"
 #include "nsThreadUtils.h"
 #include "nsIPresShell.h"
 #include "nsIPrincipal.h"
 #include "gfxPattern.h"
 #include "imgIContainer.h"
 #include "nsCSSPseudoElements.h"
 #include "nsHTMLReflowState.h"
 #include "nsIFrameLoader.h"
 #include "Layers.h"
 
+class nsIFormControlFrame;
+class nsPresContext;
+class nsIContent;
+class nsIAtom;
+class nsIScrollableFrame;
+class nsIDOMEvent;
+class nsRegion;
+class nsDisplayListBuilder;
+class nsIFontMetrics;
 class nsBlockFrame;
 class gfxDrawable;
 
+namespace mozilla {
+namespace dom {
+class ClientRectList;
+} // namespace dom
+} // namespace mozilla
+
 /**
  * nsLayoutUtils is a namespace class used for various helper
  * functions that are useful in multiple places in layout.  The goal
  * is not to define multiple copies of the same static helper.
  */
 class nsLayoutUtils
 {
   typedef gfxPattern::GraphicsFilter GraphicsFilter;
@@ -663,20 +667,20 @@ public:
     bool mSeenFirstRect;
 
     RectAccumulator();
 
     virtual void AddRect(const nsRect& aRect);
   };
 
   struct RectListBuilder : public RectCallback {
-    nsClientRectList* mRectList;
-    nsresult          mRV;
+    mozilla::dom::ClientRectList* mRectList;
+    nsresult mRV;
 
-    RectListBuilder(nsClientRectList* aList);
+    RectListBuilder(mozilla::dom::ClientRectList* aList);
      virtual void AddRect(const nsRect& aRect);
   };
 
   static nsIFrame* GetContainingBlockForClientRect(nsIFrame* aFrame);
 
   /**
    * Collect all CSS border-boxes associated with aFrame and its
    * continuations, "drilling down" through outer table frames and
