From: Ms2ger <ms2ger@gmail.com>

diff --git a/content/xslt/src/xpath/txMozillaXPathTreeWalker.cpp b/content/xslt/src/xpath/txMozillaXPathTreeWalker.cpp
--- a/content/xslt/src/xpath/txMozillaXPathTreeWalker.cpp
+++ b/content/xslt/src/xpath/txMozillaXPathTreeWalker.cpp
@@ -682,21 +682,30 @@ txXPathNativeNode::createXPathNode(nsICo
 
     return new txXPathNode(aContent, txXPathNode::eContent, root);
 }
 
 /* static */
 txXPathNode*
 txXPathNativeNode::createXPathNode(nsIDOMNode* aNode, bool aKeepRootAlive)
 {
-    uint16_t nodeType;
-    aNode->GetNodeType(&nodeType);
+    nsCOMPtr<nsINode> node = do_QueryInterface(aNode);
+    NS_ENSURE_TRUE(node, nullptr);
+
+    return createXPathNode(*node, aKeepRootAlive);
+}
+
+/* static */
+txXPathNode*
+txXPathNativeNode::createXPathNode(nsINode& aNode, bool aKeepRootAlive)
+{
+    uint16_t nodeType = aNode.NodeType();
 
     if (nodeType == nsIDOMNode::ATTRIBUTE_NODE) {
-        nsCOMPtr<nsIAttribute> attr = do_QueryInterface(aNode);
+        nsCOMPtr<nsIAttribute> attr = do_QueryInterface(&aNode);
         NS_ASSERTION(attr, "doesn't implement nsIAttribute");
 
         nsINodeInfo *nodeInfo = attr->NodeInfo();
         nsIContent *parent = attr->GetContent();
         if (!parent) {
             return nullptr;
         }
 
@@ -710,31 +719,29 @@ txXPathNativeNode::createXPathNode(nsIDO
             }
         }
 
         NS_ERROR("Couldn't find the attribute in its parent!");
 
         return nullptr;
     }
 
-    nsCOMPtr<nsINode> node = do_QueryInterface(aNode);
+    nsINode* root = aKeepRootAlive ? &aNode : nullptr;
+
     uint32_t index;
-    nsINode* root = aKeepRootAlive ? node.get() : nullptr;
-
     if (nodeType == nsIDOMNode::DOCUMENT_NODE) {
         index = txXPathNode::eDocument;
-    }
-    else {
+    } else {
         index = txXPathNode::eContent;
         if (root) {
             root = txXPathNode::RootOf(root);
         }
     }
 
-    return new txXPathNode(node, index, root);
+    return new txXPathNode(&aNode, index, root);
 }
 
 /* static */
 txXPathNode*
 txXPathNativeNode::createXPathNode(nsIDOMDocument* aDocument)
 {
     nsCOMPtr<nsIDocument> document = do_QueryInterface(aDocument);
     return new txXPathNode(document);
diff --git a/content/xslt/src/xpath/txXPathTreeWalker.h b/content/xslt/src/xpath/txXPathTreeWalker.h
--- a/content/xslt/src/xpath/txXPathTreeWalker.h
+++ b/content/xslt/src/xpath/txXPathTreeWalker.h
@@ -112,16 +112,18 @@ public:
       nsIContent* content = aNode.Content();
       return content->IsHTML() && content->IsInHTMLDocument();
     }
 };
 
 class txXPathNativeNode
 {
 public:
+    static txXPathNode* createXPathNode(nsINode& aNode,
+                                        bool aKeepRootAlive = false);
     static txXPathNode* createXPathNode(nsIDOMNode* aNode,
                                         bool aKeepRootAlive = false);
     static txXPathNode* createXPathNode(nsIContent* aContent,
                                         bool aKeepRootAlive = false);
     static txXPathNode* createXPathNode(nsIDOMDocument* aDocument);
     static nsresult getNode(const txXPathNode& aNode, nsIDOMNode** aResult);
     static nsIContent* getContent(const txXPathNode& aNode);
     static nsIDocument* getDocument(const txXPathNode& aNode);
diff --git a/content/xslt/src/xslt/txMozillaXSLTProcessor.cpp b/content/xslt/src/xslt/txMozillaXSLTProcessor.cpp
--- a/content/xslt/src/xslt/txMozillaXSLTProcessor.cpp
+++ b/content/xslt/src/xslt/txMozillaXSLTProcessor.cpp
@@ -3,16 +3,17 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "txMozillaXSLTProcessor.h"
 #include "nsContentCID.h"
 #include "nsError.h"
 #include "nsIChannel.h"
 #include "mozilla/dom/Element.h"
+#include "mozilla/dom/DocumentFragment.h"
 #include "nsIDOMElement.h"
 #include "nsIDOMText.h"
 #include "nsIDocument.h"
 #include "nsDOMClassInfoID.h"
 #include "nsIDOMDocument.h"
 #include "nsIDOMDocumentFragment.h"
 #include "nsIDOMNodeList.h"
 #include "nsIIOService.h"
@@ -561,49 +562,59 @@ txMozillaXSLTProcessor::DoTransform()
 
     return rv;
 }
 
 NS_IMETHODIMP
 txMozillaXSLTProcessor::ImportStylesheet(nsIDOMNode *aStyle)
 {
     NS_ENSURE_TRUE(aStyle, NS_ERROR_NULL_POINTER);
-    
-    // We don't support importing multiple stylesheets yet.
-    NS_ENSURE_TRUE(!mStylesheetDocument && !mStylesheet,
-                   NS_ERROR_NOT_IMPLEMENTED);
 
     if (!nsContentUtils::CanCallerAccess(aStyle)) {
         return NS_ERROR_DOM_SECURITY_ERR;
     }
     
     nsCOMPtr<nsINode> styleNode = do_QueryInterface(aStyle);
     NS_ENSURE_TRUE(styleNode &&
                    (styleNode->IsElement() ||
                     styleNode->IsNodeOfType(nsINode::eDOCUMENT)),
                    NS_ERROR_INVALID_ARG);
 
-    nsresult rv = TX_CompileStylesheet(styleNode, this, mPrincipal,
-                                       getter_AddRefs(mStylesheet));
-    // XXX set up exception context, bug 204658
-    NS_ENSURE_SUCCESS(rv, rv);
+    ErrorResult rv;
+    ImportStylesheet(*styleNode, rv);
+    return rv.ErrorCode();
+}
 
-    if (styleNode->IsElement()) {
-        mStylesheetDocument = styleNode->OwnerDoc();
-        NS_ENSURE_TRUE(mStylesheetDocument, NS_ERROR_UNEXPECTED);
+void
+txMozillaXSLTProcessor::ImportStylesheet(nsINode& aStyle, ErrorResult& aRv)
+{
+    MOZ_ASSERT(aStyle.NodeType() == nsIDOMNode::ELEMENT_NODE ||
+               aStyle.NodeType() == nsIDOMNode::DOCUMENT_NODE);
 
-        mEmbeddedStylesheetRoot = static_cast<nsIContent*>(styleNode.get());
+    // We don't support importing multiple stylesheets yet.
+    if (mStylesheetDocument || mStylesheet) {
+        aRv.Throw(NS_ERROR_NOT_IMPLEMENTED);
+        return;
     }
-    else {
-        mStylesheetDocument = static_cast<nsIDocument*>(styleNode.get());
+
+    aRv = TX_CompileStylesheet(&aStyle, this, mPrincipal,
+                               getter_AddRefs(mStylesheet));
+    if (aRv.Failed()) {
+        // XXX set up exception context, bug 204658
+        return;
+    }
+
+    if (aStyle.IsElement()) {
+        mStylesheetDocument = aStyle.OwnerDoc();
+        mEmbeddedStylesheetRoot = static_cast<nsIContent*>(&aStyle);
+    } else {
+        mStylesheetDocument = static_cast<nsIDocument*>(&aStyle);
     }
 
     mStylesheetDocument->AddMutationObserver(this);
-
-    return NS_OK;
 }
 
 NS_IMETHODIMP
 txMozillaXSLTProcessor::TransformToDocument(nsIDOMNode *aSource,
                                             nsIDOMDocument **aResult)
 {
     NS_ENSURE_ARG(aSource);
     NS_ENSURE_ARG_POINTER(aResult);
@@ -676,56 +687,81 @@ txMozillaXSLTProcessor::TransformToDoc(n
     return rv;
 }
 
 NS_IMETHODIMP
 txMozillaXSLTProcessor::TransformToFragment(nsIDOMNode *aSource,
                                             nsIDOMDocument *aOutput,
                                             nsIDOMDocumentFragment **aResult)
 {
-    NS_ENSURE_ARG(aSource);
-    NS_ENSURE_ARG(aOutput);
     NS_ENSURE_ARG_POINTER(aResult);
-    NS_ENSURE_SUCCESS(mCompileResult, mCompileResult);
+
+    nsCOMPtr<nsINode> source = do_QueryInterface(aSource);
+    NS_ENSURE_ARG(source);
+
+    nsCOMPtr<nsIDocument> output = do_QueryInterface(aOutput);
+    NS_ENSURE_ARG(output);
 
     if (!nsContentUtils::CanCallerAccess(aSource) ||
         !nsContentUtils::CanCallerAccess(aOutput)) {
         return NS_ERROR_DOM_SECURITY_ERR;
     }
 
-    nsresult rv = ensureStylesheet();
-    NS_ENSURE_SUCCESS(rv, rv);
+    ErrorResult rv;
+    nsRefPtr<DocumentFragment> fragment =
+        TransformToFragment(*source, *output, rv);
+    fragment.forget(aResult);
+    return rv.ErrorCode();
+}
+
+already_AddRefed<DocumentFragment>
+txMozillaXSLTProcessor::TransformToFragment(nsINode& aSource,
+                                            nsIDocument& aOutput,
+                                            ErrorResult& aRv)
+{
+    if (NS_FAILED(mCompileResult)) {
+        aRv.Throw(mCompileResult);
+        return nullptr;
+    }
+
+    aRv = ensureStylesheet();
+    if (aRv.Failed()) {
+        return nullptr;
+    }
 
     nsAutoPtr<txXPathNode> sourceNode(txXPathNativeNode::createXPathNode(aSource));
     if (!sourceNode) {
-        return NS_ERROR_OUT_OF_MEMORY;
+        aRv.Throw(NS_ERROR_OUT_OF_MEMORY);
+        return nullptr;
     }
 
     txExecutionState es(mStylesheet, IsLoadDisabled());
 
     // XXX Need to add error observers
 
-    rv = aOutput->CreateDocumentFragment(aResult);
-    NS_ENSURE_SUCCESS(rv, rv);
-    txToFragmentHandlerFactory handlerFactory(*aResult);
+    nsRefPtr<DocumentFragment> fragment = aOutput.CreateDocumentFragment();
+    MOZ_ASSERT(fragment);
+
+    txToFragmentHandlerFactory handlerFactory(fragment);
     es.mOutputHandlerFactory = &handlerFactory;
 
-    rv = es.init(*sourceNode, &mVariables);
+    nsresult rv = es.init(*sourceNode, &mVariables);
 
     // Process root of XML source document
     if (NS_SUCCEEDED(rv)) {
         rv = txXSLTProcessor::execute(es);
     }
     // XXX setup exception context, bug 204658
     nsresult endRv = es.end(rv);
     if (NS_SUCCEEDED(rv)) {
       rv = endRv;
     }
 
-    return rv;
+    aRv = rv;
+    return fragment.forget();
 }
 
 NS_IMETHODIMP
 txMozillaXSLTProcessor::SetParameter(const nsAString & aNamespaceURI,
                                      const nsAString & aLocalName,
                                      nsIVariant *aValue)
 {
     NS_ENSURE_ARG(aValue);
diff --git a/content/xslt/src/xslt/txMozillaXSLTProcessor.h b/content/xslt/src/xslt/txMozillaXSLTProcessor.h
--- a/content/xslt/src/xslt/txMozillaXSLTProcessor.h
+++ b/content/xslt/src/xslt/txMozillaXSLTProcessor.h
@@ -20,16 +20,20 @@
 class nsIDOMNode;
 class nsIPrincipal;
 class nsIURI;
 class nsIXMLContentSink;
 class txStylesheet;
 class txResultRecycler;
 class txIGlobalParameter;
 
+namespace mozilla {
+class ErrorResult;
+} // namespace mozilla
+
 /* bacd8ad0-552f-11d3-a9f7-000064657374 */
 #define TRANSFORMIIX_XSLT_PROCESSOR_CID   \
 { 0x618ee71d, 0xd7a7, 0x41a1, {0xa3, 0xfb, 0xc2, 0xbe, 0xdc, 0x6a, 0x21, 0x7e} }
 
 #define TRANSFORMIIX_XSLT_PROCESSOR_CONTRACTID \
 "@mozilla.org/document-transformer;1?type=xslt"
 
 #define XSLT_MSGS_URL  "chrome://global/locale/xslt/xslt.properties"
@@ -38,16 +42,18 @@ class txIGlobalParameter;
  * txMozillaXSLTProcessor is a front-end to the XSLT Processor.
  */
 class txMozillaXSLTProcessor MOZ_FINAL : public nsIXSLTProcessor,
                                          public nsIXSLTProcessorPrivate,
                                          public nsIDocumentTransformer,
                                          public nsStubMutationObserver,
                                          public nsIJSNativeInitializer
 {
+    typedef mozilla::ErrorResult ErrorResult;
+
 public:
     /**
      * Creates a new txMozillaXSLTProcessor
      */
     txMozillaXSLTProcessor();
 
     /**
      * Default destructor for txMozillaXSLTProcessor
@@ -106,16 +112,25 @@ public:
 
     // nsIJSNativeInitializer
     NS_IMETHODIMP Initialize(nsISupports* aOwner, JSContext *cx, JSObject *obj,
                              const JS::CallArgs& aArgs);
 
     static nsresult Startup();
     static void Shutdown();
 
+    // WebIDL
+    void ImportStylesheet(nsINode& aStyle, ErrorResult& aRv);
+    already_AddRefed<mozilla::dom::DocumentFragment>
+    TransformToFragment(nsINode& aSource, nsIDocument& aOutput,
+                        ErrorResult& aRv);
+    //already_AddRefed<nsIDocument>
+    //TransformToDocument(nsINode& aSource, ErrorResult& aRv);
+
+
 private:
     nsresult DoTransform();
     void notifyError();
     nsresult ensureStylesheet();
 
     nsRefPtr<txStylesheet> mStylesheet;
     nsIDocument* mStylesheetDocument; // weak
     nsCOMPtr<nsIContent> mEmbeddedStylesheetRoot;
diff --git a/dom/webidl/WebIDL.mk b/dom/webidl/WebIDL.mk
--- a/dom/webidl/WebIDL.mk
+++ b/dom/webidl/WebIDL.mk
@@ -365,16 +365,18 @@ webidl_files = \
   XMLSerializer.webidl \
   XMLStylesheetProcessingInstruction.webidl \
   XPathEvaluator.webidl \
   XULCommandEvent.webidl \
   XULDocument.webidl \
   XULElement.webidl \
   $(NULL)
 
+# XSLTProcessor.webidl
+
 ifdef MOZ_AUDIO_CHANNEL_MANAGER
 webidl_files += \
   AudioChannelManager.webidl \
   $(NULL)
 endif
 
 ifdef MOZ_WEBGL
 webidl_files += \
diff --git a/dom/webidl/XSLTProcessor.webidl b/dom/webidl/XSLTProcessor.webidl
new file mode 100644
--- /dev/null
+++ b/dom/webidl/XSLTProcessor.webidl
@@ -0,0 +1,116 @@
+/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+interface Variant;
+
+[Constructor]
+interface XSLTProcessor {
+  /**
+   * Import the stylesheet into this XSLTProcessor for transformations.
+   *
+   * @param style The root-node of a XSLT stylesheet. This can be either
+   *              a document node or an element node. If a document node
+   *              then the document can contain either a XSLT stylesheet
+   *              or a LRE stylesheet.
+   *              If the argument is an element node it must be the
+   *              xsl:stylesheet (or xsl:transform) element of an XSLT
+   *              stylesheet.
+   */
+  [Throws]
+  void importStylesheet(Document style);
+  [Throws]
+  void importStylesheet(Element style);
+
+  /**
+   * Transforms the node source applying the stylesheet given by
+   * the importStylesheet() function. The owner document of the output node
+   * owns the returned document fragment.
+   *
+   * @param source The node to be transformed
+   * @param output This document is used to generate the output
+   * @return DocumentFragment The result of the transformation
+   */
+  [Throws]
+  DocumentFragment transformToFragment(Node source,
+                                       Document output);
+
+  /**
+   * Transforms the node source applying the stylesheet given by the
+   * importStylesheet() function.
+   *
+   * @param source The node to be transformed
+   * @return Document The result of the transformation
+   *
+   * @exception nsIXSLTException
+   */
+  [Throws]
+  Document transformToDocument(Node source);
+
+  /**
+   * Sets a parameter to be used in subsequent transformations with this
+   * XSLTProcessor. If the parameter doesn't exist in the stylesheet the
+   * parameter will be ignored.
+   *
+   * @param namespaceURI The namespaceURI of the XSLT parameter
+   * @param localName    The local name of the XSLT parameter
+   * @param value        The new value of the XSLT parameter
+   *
+   * @exception NS_ERROR_ILLEGAL_VALUE The datatype of value is
+   *                                   not supported
+   */
+  [Throws]
+  void setParameter(DOMString? namespaceURI,
+                    DOMString? localName,
+                    Variant value);
+
+  /**
+   * Gets a parameter if previously set by setParameter. Returns null
+   * otherwise.
+   *
+   * @param namespaceURI The namespaceURI of the XSLT parameter
+   * @param localName    The local name of the XSLT parameter
+   * @return nsIVariant  The value of the XSLT parameter
+   */
+  [Throws]
+  Variant getParameter(DOMString? namespaceURI,
+                       DOMString? localName);
+  /**
+   * Removes a parameter, if set. This will make the processor use the
+   * default-value for the parameter as specified in the stylesheet.
+   *
+   * @param namespaceURI The namespaceURI of the XSLT parameter
+   * @param localName    The local name of the XSLT parameter
+   */
+  [Throws]
+  void removeParameter(DOMString? namespaceURI,
+                       DOMString? localName);
+
+  /**
+   * Removes all set parameters from this XSLTProcessor. This will make
+   * the processor use the default-value for all parameters as specified in
+   * the stylesheet.
+   */
+  void clearParameters();
+
+  /**
+   * Remove all parameters and stylesheets from this XSLTProcessor.
+   */
+  void reset();
+
+  /**
+   * Disables all loading of external documents, such as from
+   * <xsl:import> and document()
+   * Defaults to off and is *not* reset by calls to reset()
+   */
+  [ChromeOnly]
+  const unsigned long DISABLE_ALL_LOADS = 1;
+
+  /**
+   * Flags for this processor. Defaults to 0. See individual flags above
+   * for documentation for effect of reset()
+   */
+  [ChromeOnly]
+  attribute unsigned long flags;
+};
