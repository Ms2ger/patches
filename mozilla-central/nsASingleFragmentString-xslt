diff --git a/content/xslt/src/base/txStringUtils.h b/content/xslt/src/base/txStringUtils.h
--- a/content/xslt/src/base/txStringUtils.h
+++ b/content/xslt/src/base/txStringUtils.h
@@ -47,7 +47,7 @@
  * Check equality between a string and an atom containing ASCII.
  */
 inline bool
-TX_StringEqualsAtom(const nsASingleFragmentString& aString, nsIAtom* aAtom)
+TX_StringEqualsAtom(const nsSubstring& aString, nsIAtom* aAtom)
 {
   return aAtom->Equals(aString);
 }
diff --git a/content/xslt/src/main/txTestExpr.cpp b/content/xslt/src/main/txTestExpr.cpp
--- a/content/xslt/src/main/txTestExpr.cpp
+++ b/content/xslt/src/main/txTestExpr.cpp
@@ -79,7 +79,7 @@
     uint32_t mOff;
 };
 
-static void doTest(const nsASingleFragmentString& aExpr)
+static void doTest(const nsSubstring& aExpr)
 {
     ParseContextImpl ct;
     nsAutoPtr<Expr> expression;
diff --git a/content/xslt/src/xpath/txExprLexer.cpp b/content/xslt/src/xpath/txExprLexer.cpp
--- a/content/xslt/src/xpath/txExprLexer.cpp
+++ b/content/xslt/src/xpath/txExprLexer.cpp
@@ -123,7 +123,7 @@
  * Parses the given string into a sequence of Tokens
  */
 nsresult
-txExprLexer::parse(const nsASingleFragmentString& aPattern)
+txExprLexer::parse(const nsSubstring& aPattern)
 {
   iterator start, end;
   start = aPattern.BeginReading(mPosition);
diff --git a/content/xslt/src/xpath/txExprLexer.h b/content/xslt/src/xpath/txExprLexer.h
--- a/content/xslt/src/xpath/txExprLexer.h
+++ b/content/xslt/src/xpath/txExprLexer.h
@@ -122,7 +122,7 @@
     /**
      * Constructors
      */
-    typedef nsASingleFragmentString::const_char_iterator iterator;
+    typedef nsSubstring::const_char_iterator iterator;
 
     Token(iterator aStart, iterator aEnd, Type aType)
         : mStart(aStart),
@@ -174,9 +174,9 @@
      * generated Tokens point to Substrings of it.
      * mPosition points to the offending location in case of an error.
      */
-    nsresult parse(const nsASingleFragmentString& aPattern);
+    nsresult parse(const nsSubstring& aPattern);
 
-    typedef nsASingleFragmentString::const_char_iterator iterator;
+    typedef nsSubstring::const_char_iterator iterator;
     iterator mPosition;
 
     /**
diff --git a/content/xslt/src/xpath/txExprParser.cpp b/content/xslt/src/xpath/txExprParser.cpp
--- a/content/xslt/src/xpath/txExprParser.cpp
+++ b/content/xslt/src/xpath/txExprParser.cpp
@@ -189,7 +189,7 @@
     txExprLexer lexer;
     nsresult rv = lexer.parse(aExpression);
     if (NS_FAILED(rv)) {
-        nsASingleFragmentString::const_char_iterator start;
+        nsSubstring::const_char_iterator start;
         aExpression.BeginReading(start);
         aContext->SetErrorOffset(lexer.mPosition - start + aSubStringPos);
         return rv;
@@ -200,7 +200,7 @@
         rv = NS_ERROR_XPATH_BINARY_EXPECTED;
     }
     if (NS_FAILED(rv)) {
-        nsASingleFragmentString::const_char_iterator start;
+        nsSubstring::const_char_iterator start;
         aExpression.BeginReading(start);
         aContext->SetErrorOffset(lexer.peek()->mStart - start + aSubStringPos);
 
diff --git a/content/xslt/src/xslt/txStylesheetCompileHandlers.cpp b/content/xslt/src/xslt/txStylesheetCompileHandlers.cpp
--- a/content/xslt/src/xslt/txStylesheetCompileHandlers.cpp
+++ b/content/xslt/src/xslt/txStylesheetCompileHandlers.cpp
@@ -1058,7 +1058,7 @@
 
     nsWhitespaceTokenizer tokenizer(attr->mValue);
     while (tokenizer.hasMoreTokens()) {
-        const nsASingleFragmentString& name = tokenizer.nextToken();
+        const nsSubstring& name = tokenizer.nextToken();
         int32_t ns = kNameSpaceID_None;
         nsCOMPtr<nsIAtom> prefix, localName;
         rv = XMLUtils::splitQName(name, getter_AddRefs(prefix),
