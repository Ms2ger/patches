diff --git a/ipc/chromium/src/base/shared_memory_posix.cc b/ipc/chromium/src/base/shared_memory_posix.cc
--- a/ipc/chromium/src/base/shared_memory_posix.cc
+++ b/ipc/chromium/src/base/shared_memory_posix.cc
@@ -142,17 +142,17 @@ bool SharedMemory::FilenameForMemoryName
 // we restart from a crash.  (That isn't a new problem, but it is a problem.)
 // In case we want to delete it later, it may be useful to save the value
 // of mem_filename after FilenameForMemoryName().
 bool SharedMemory::CreateOrOpen(const std::wstring &name,
                                 int posix_flags, size_t size) {
   DCHECK(mapped_file_ == -1);
 
   file_util::ScopedFILE file_closer;
-  FILE *fp;
+  FILE* fp = NULL;
 
   if (name == L"") {
     // It doesn't make sense to have a read-only private piece of shmem
     DCHECK(posix_flags & (O_RDWR | O_WRONLY));
 
     FilePath path;
     fp = file_util::CreateAndOpenTemporaryShmemFile(&path);
 
diff --git a/ipc/chromium/src/base/simple_thread.cc b/ipc/chromium/src/base/simple_thread.cc
--- a/ipc/chromium/src/base/simple_thread.cc
+++ b/ipc/chromium/src/base/simple_thread.cc
@@ -84,17 +84,17 @@ void DelegateSimpleThreadPool::AddWork(D
   for (int i = 0; i < repeat_count; ++i)
     delegates_.push(delegate);
   // If we were empty, signal that we have work now.
   if (!dry_.IsSignaled())
     dry_.Signal();
 }
 
 void DelegateSimpleThreadPool::Run() {
-  Delegate* work;
+  Delegate* work = NULL;
 
   while (true) {
     dry_.Wait();
     {
       AutoLock locked(lock_);
       if (!dry_.IsSignaled())
         continue;
 
diff --git a/ipc/chromium/src/chrome/common/ipc_sync_channel.cc b/ipc/chromium/src/chrome/common/ipc_sync_channel.cc
--- a/ipc/chromium/src/chrome/common/ipc_sync_channel.cc
+++ b/ipc/chromium/src/chrome/common/ipc_sync_channel.cc
@@ -86,17 +86,17 @@ class SyncChannel::ReceivedSyncMsgQueue 
       AutoLock auto_lock(message_lock_);
       task_pending_ = false;
     }
     DispatchMessages();
   }
 
   void DispatchMessages() {
     while (true) {
-      Message* message;
+      Message* message = NULL;
       scoped_refptr<SyncChannel::SyncContext> context;
       {
         AutoLock auto_lock(message_lock_);
         if (message_queue_.empty())
           break;
 
         message = message_queue_.front().message;
         context = message_queue_.front().context;
diff --git a/ipc/glue/AsyncChannel.cpp b/ipc/glue/AsyncChannel.cpp
--- a/ipc/glue/AsyncChannel.cpp
+++ b/ipc/glue/AsyncChannel.cpp
@@ -1,11 +1,10 @@
-/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- * vim: sw=4 ts=4 et :
- */
+/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/* vim: sw=4 ts=4 et : */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "mozilla/ipc/AsyncChannel.h"
 #include "mozilla/ipc/BrowserProcessSubThread.h"
 #include "mozilla/ipc/ProtocolUtils.h"
 
diff --git a/ipc/glue/Makefile.in b/ipc/glue/Makefile.in
--- a/ipc/glue/Makefile.in
+++ b/ipc/glue/Makefile.in
@@ -10,16 +10,17 @@ VPATH = @srcdir@
 include $(DEPTH)/config/autoconf.mk
 
 LOCAL_INCLUDES += -I$(topsrcdir)/toolkit/crashreporter
 
 LIBRARY_NAME = mozipc_s
 FORCE_STATIC_LIB = 1
 LIBXUL_LIBRARY = 1
 EXPORT_LIBRARY = 1
+FAIL_ON_WARNINGS := 1
 
 DEFINES += -DMOZ_CHILD_PROCESS_NAME=\"$(MOZ_CHILD_PROCESS_NAME)\"
 DEFINES += -DMOZ_CHILD_PROCESS_BUNDLE=\"$(MOZ_CHILD_PROCESS_BUNDLE)\"
 
 include $(topsrcdir)/config/config.mk
 include $(topsrcdir)/ipc/chromium/chromium-config.mk
 
 include $(topsrcdir)/config/rules.mk
diff --git a/ipc/glue/ScopedXREEmbed.h b/ipc/glue/ScopedXREEmbed.h
--- a/ipc/glue/ScopedXREEmbed.h
+++ b/ipc/glue/ScopedXREEmbed.h
@@ -25,9 +25,9 @@ public:
 private:
   bool mShouldKillEmbedding;
   nsCOMPtr<nsIFile> mAppDir;
 };
 
 } /* namespace ipc */
 } /* namespace mozilla */
 
-#endif /* __IPC_GLUE_SCOPEDXREEMBED_H__ */
\ No newline at end of file
+#endif /* __IPC_GLUE_SCOPEDXREEMBED_H__ */
