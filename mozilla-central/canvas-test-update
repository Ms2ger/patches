From: Ms2ger <ms2ger@gmail.com>

diff --git a/content/canvas/test/standalone.dat b/content/canvas/test/standalone.dat
--- a/content/canvas/test/standalone.dat
+++ b/content/canvas/test/standalone.dat
@@ -112,8 +112,105 @@ test_toDataURL.png.complexcolours.html
 test_toDataURL.png.primarycolours.html
 # Clashes
 test_2d.type.delete.html
 test_2d.type.prototype.html
 test_2d.type.replace.html
 test_type.delete.html
 test_type.prototype.html
 test_type.replace.html
+# New tests
+test_2d.drawImage.incomplete.emptysrc.html
+test_2d.drawImage.incomplete.nosrc.html
+test_2d.drawImage.incomplete.reload.html
+test_2d.drawImage.incomplete.removedsrc.html
+test_2d.fillStyle.parse.invalid.name-5.html
+test_2d.gradient.interpolate.zerosize.fill.html
+test_2d.gradient.interpolate.zerosize.fillText.html
+test_2d.gradient.interpolate.zerosize.stroke.html
+test_2d.gradient.interpolate.zerosize.strokeRect.html
+test_2d.gradient.interpolate.zerosize.strokeText.html
+test_2d.pattern.image.incomplete.emptysrc.html
+test_2d.pattern.image.incomplete.nosrc.html
+test_2d.pattern.image.incomplete.reload.html
+test_2d.pattern.image.incomplete.removedsrc.html
+test_2d.imageData.create1.this.html
+test_2d.imageData.create2.this.html
+test_2d.composite.uncovered.nocontext.copy.html
+test_2d.composite.uncovered.nocontext.destination-atop.html
+test_2d.composite.uncovered.nocontext.destination-in.html
+test_2d.composite.uncovered.nocontext.source-in.html
+test_2d.composite.uncovered.nocontext.source-out.html
+test_2d.coordinatespace.html
+test_2d.drawImage.zerocanvas.html
+test_2d.drawImage.zerosource.image.html
+test_2d.fillStyle.parse.hsl-6.html
+test_2d.fillStyle.parse.invalid.hex1.html
+test_2d.fillStyle.parse.invalid.hex2.html
+test_2d.fillStyle.parse.invalid.hex4.html
+test_2d.fillStyle.parse.invalid.hex5.html
+test_2d.fillStyle.parse.invalid.hex7.html
+test_2d.fillStyle.parse.invalid.hex8.html
+test_2d.fillStyle.parse.invalid.hsl-6.html
+test_2d.fillStyle.parse.invalid.name-4.html
+test_2d.fillStyle.parse.invalid.rgba-6.html
+test_2d.fillStyle.parse.invalid.rgba-7.html
+test_2d.fillStyle.parse.rgb-eof.html
+test_2d.fillStyle.parse.rgba-eof.html
+test_2d.fillStyle.parse.rgba-solid-3.html
+test_2d.fillStyle.parse.rgba-solid-4.html
+test_2d.gradient.object.current.html
+test_2d.imageData.get.length.html
+test_2d.line.cap.valid.html
+test_2d.line.join.valid.html
+test_2d.line.miter.valid.html
+test_2d.line.width.scaledefault.html
+test_2d.line.width.valid.html
+test_2d.path.arc.default.html
+test_2d.path.isPointInPath.transform.4.html
+test_2d.shadow.enable.blur.html
+test_2d.shadow.enable.x.html
+test_2d.shadow.enable.y.html
+test_2d.state.saverestore.font.html
+test_2d.state.saverestore.textAlign.html
+test_2d.state.saverestore.textBaseline.html
+test_2d.text.align.valid.html
+test_2d.text.baseline.valid.html
+test_2d.text.draw.fill.basic.html
+test_2d.text.draw.fill.maxWidth.large.html
+test_2d.text.draw.fill.maxWidth.negative.html
+test_2d.text.draw.fill.maxWidth.small.html
+test_2d.text.draw.fill.maxWidth.zero.html
+test_2d.text.draw.fill.rtl.html
+test_2d.text.draw.fill.unaffected.html
+test_2d.text.draw.kern.consistent.html
+test_2d.text.draw.stroke.basic.html
+test_2d.text.draw.stroke.unaffected.html
+test_2d.text.font.default.html
+test_2d.text.font.parse.basic.html
+test_2d.text.font.parse.complex.html
+test_2d.text.font.parse.invalid.html
+test_2d.text.font.parse.size.percentage.default.html
+test_2d.text.font.parse.size.percentage.html
+test_2d.text.font.parse.system.html
+test_size.attributes.idl.html
+test_size.attributes.idl.set.zero.html
+test_size.attributes.parse.em.html
+test_size.attributes.parse.empty.html
+test_size.attributes.parse.exp.html
+test_size.attributes.parse.hex.html
+test_size.attributes.parse.octal.html
+test_size.attributes.parse.onlyspace.html
+test_size.attributes.parse.plus.html
+test_size.attributes.parse.whitespace.html
+test_size.attributes.reflect.setidlzero.html
+test_size.attributes.setAttribute.em.html
+test_size.attributes.setAttribute.empty.html
+test_size.attributes.setAttribute.exp.html
+test_size.attributes.setAttribute.hex.html
+test_size.attributes.setAttribute.octal.html
+test_size.attributes.setAttribute.onlyspace.html
+test_size.attributes.setAttribute.plus.html
+test_size.attributes.setAttribute.whitespace.html
+test_toDataURL.bogustype.html
+test_toDataURL.jpeg.quality.notnumber.html
+test_toDataURL.jpeg.quality.outsiderange.html
+test_toDataURL.lowercase.unicode.html
diff --git a/content/canvas/test/test_canvas.html b/content/canvas/test/test_canvas.html
--- a/content/canvas/test/test_canvas.html
+++ b/content/canvas/test/test_canvas.html
@@ -1905,21 +1905,21 @@ todo_isPixel(ctx, 50,25, 0,255,0,255, 2)
 <canvas height="50" id="c79" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_broken() {
 
 var canvas = document.getElementById('c79');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#0f0';
+ctx.fillRect(0, 0, 100, 50);
 var img = document.getElementById('broken_1.png');
-todo(img.complete === false, "img.complete === false");
-var _thrown = undefined; try {
-  ctx.drawImage(img, 0, 0);
-} catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "InvalidStateError" && _thrown.code == DOMException.INVALID_STATE_ERR, "should throw InvalidStateError");
+ctx.drawImage(img, 0, 0);
+todo_isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 
 }
 </script>
 <img class="resource" id="broken_1.png" src="image_broken.png">
 
 <!-- [[[ test_2d.drawImage.canvas.html ]]] -->
 
@@ -2010,32 +2010,37 @@ var ctx = canvas.getContext('2d');
 ctx.drawImage(document.getElementById('green_6.png'), 10.1, 10.1, 0.1, 0.1, 0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 
 }
 </script>
 <img class="resource" id="green_6.png" src="image_green.png">
 
-<!-- [[[ test_2d.drawImage.incomplete.html ]]] -->
-
-<p>Canvas test: 2d.drawImage.incomplete</p>
+<!-- [[[ test_2d.drawImage.incomplete.immediate.html ]]] -->
+
+<p>Canvas test: 2d.drawImage.incomplete.immediate</p>
 <canvas height="50" id="c84" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
-function test_2d_drawImage_incomplete() {
+function test_2d_drawImage_incomplete_immediate() {
 
 var canvas = document.getElementById('c84');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#0f0';
+ctx.fillRect(0, 0, 100, 50);
 var img = new Image();
-todo(img.complete === false, "img.complete === false");
-var _thrown = undefined; try {
-  ctx.drawImage(img, 0, 0);
-} catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "InvalidStateError" && _thrown.code == DOMException.INVALID_STATE_ERR, "should throw InvalidStateError");
+img.src = 'image_red.png';
+// This triggers the "update the image data" algorithm.
+// The image will not go to the "completely available" state
+// until a fetch task in the networking task source is processed,
+// so the image must not be fully decodable yet:
+ctx.drawImage(img, 0, 0);
+todo_isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 
 }
 </script>
 <img class="resource" id="red_10.png" src="image_red.png">
 
 <!-- [[[ test_2d.drawImage.negativedest.html ]]] -->
 
@@ -2827,41 +2832,32 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillRect.shadow.html ]]] -->
 
 <p>Canvas test: 2d.fillRect.shadow</p>
+<!-- Testing: fillRect draws shadows -->
 <canvas height="50" id="c102" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillRect_shadow() {
 
 var canvas = document.getElementById('c102');
 var ctx = canvas.getContext('2d');
 
-ctx.fillStyle = '#0f0';
-ctx.fillRect(0, 0, 100, 50);
-
-ctx.fillStyle = '#f00';
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
+ctx.shadowColor = '#0f0';
 ctx.shadowBlur = 0;
 ctx.shadowOffsetX = 0;
 ctx.shadowOffsetY = 50;
-
-// Shadows are optional, so just test that if they apply to fill() then they apply to fillRect() too
-ctx.beginPath();
-ctx.rect(0, -50, 100, 50);
-ctx.shadowColor = '#f00';
-ctx.fill();
-
-ctx.shadowColor = '#0f0';
 ctx.fillRect(0, -50, 100, 50);
-
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillRect.transform.html ]]] -->
 
@@ -2969,17 +2965,17 @@ ok(ctx.fillStyle === '#ffaa00', "ctx.fil
 <script>
 
 function test_2d_fillStyle_get_transparent() {
 
 var canvas = document.getElementById('c108');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = 'rgba(0,0,0,0)';
-is(ctx.fillStyle, 'rgba(0, 0, 0, 0)', "ctx.fillStyle should be what we set it to");
+ok(ctx.fillStyle == 'rgba(0, 0, 0, 0)', "ctx.fillStyle == 'rgba(0, 0, 0, 0)'");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillStyle.invalidstring.html ]]] -->
 
 <p>Canvas test: 2d.fillStyle.invalidstring</p>
@@ -4724,36 +4720,36 @@ ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,12, 191,191,63,255, 10);
 isPixel(ctx, 50,25, 127,127,127,255, 5);
 isPixel(ctx, 50,37, 63,63,191,255, 10);
 
 
 }
 </script>
 
-<!-- [[[ test_2d.gradient.interpolate.zerosize.html ]]] -->
-
-<p>Canvas test: 2d.gradient.interpolate.zerosize</p>
+<!-- [[[ test_2d.gradient.interpolate.zerosize.fillRect.html ]]] -->
+
+<p>Canvas test: 2d.gradient.interpolate.zerosize.fillRect</p>
 <canvas height="50" id="c190" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
-function test_2d_gradient_interpolate_zerosize() {
+function test_2d_gradient_interpolate_zerosize_fillRect() {
 
 var canvas = document.getElementById('c190');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 var g = ctx.createLinearGradient(50, 25, 50, 25); // zero-length line (undefined direction)
 g.addColorStop(0, '#f00');
 g.addColorStop(1, '#f00');
 ctx.fillStyle = g;
 ctx.fillRect(0, 0, 100, 50);
-todo_isPixel(ctx, 40,20, 0,255,0,255, 2);
+todo_isPixel(ctx, 40,20, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.linear.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.gradient.linear.nonfinite</p>
@@ -4982,18 +4978,27 @@ function test_2d_gradient_object_invalid
 var canvas = document.getElementById('c197');
 var ctx = canvas.getContext('2d');
 
 var g = ctx.createLinearGradient(0, 0, 100, 0);
 var _thrown = undefined; try {
   g.addColorStop(0, "");
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "SyntaxError" && _thrown.code == DOMException.SYNTAX_ERR, "should throw SyntaxError");
 var _thrown = undefined; try {
+  g.addColorStop(0, 'null');
+} catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "SyntaxError" && _thrown.code == DOMException.SYNTAX_ERR, "should throw SyntaxError");
+var _thrown = undefined; try {
   g.addColorStop(0, 'undefined');
 } catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "SyntaxError" && _thrown.code == DOMException.SYNTAX_ERR, "should throw SyntaxError");
+var _thrown = undefined; try {
+  g.addColorStop(0, null);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "SyntaxError" && _thrown.code == DOMException.SYNTAX_ERR, "should throw SyntaxError");
+var _thrown = undefined; try {
+  g.addColorStop(0, undefined);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown.name == "SyntaxError" && _thrown.code == DOMException.SYNTAX_ERR, "should throw SyntaxError");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.object.invalidoffset.html ]]] -->
 
 <p>Canvas test: 2d.gradient.object.invalidoffset</p>
@@ -5810,36 +5815,39 @@ var _thrown = undefined; try {
   ctx.createImageData(10, -Infinity);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
 var _thrown = undefined; try {
   ctx.createImageData(10, NaN);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
 var _thrown = undefined; try {
   ctx.createImageData(Infinity, Infinity);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.createImageData({valueOf:function() Infinity}, 10);
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.createImageData({valueOf:function() -Infinity}, 10);
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.createImageData({valueOf:function() NaN}, 10);
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.createImageData(10, {valueOf:function() Infinity});
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.createImageData(10, {valueOf:function() -Infinity});
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.createImageData(10, {valueOf:function() NaN});
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.createImageData({valueOf:function() Infinity}, {valueOf:function() Infinity});
+var posinfobj = { valueOf: function() { return Infinity; } },
+    neginfobj = { valueOf: function() { return -Infinity; } },
+    nanobj = { valueOf: function() { return -Infinity; } };
+var _thrown = undefined; try {
+  ctx.createImageData(posinfobj, 10);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.createImageData(neginfobj, 10);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.createImageData(nanobj, 10);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.createImageData(10, posinfobj);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.createImageData(10, neginfobj);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.createImageData(10, nanobj);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.createImageData(posinfobj, posinfobj);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create2.round.html ]]] -->
 
@@ -5850,18 +5858,18 @@ var _thrown = undefined; try {
 
 function test_2d_imageData_create2_round() {
 
 var canvas = document.getElementById('c220');
 var ctx = canvas.getContext('2d');
 
 var imgdata1 = ctx.createImageData(10.01, 10.99);
 var imgdata2 = ctx.getImageData(0, 0, 10.01, 10.99);
-is(imgdata1.width, imgdata2.width, "imgdata1.width == imgdata2.width");
-is(imgdata1.height, imgdata2.height, "imgdata1.height == imgdata2.height");
+ok(imgdata1.width == imgdata2.width, "imgdata1.width == imgdata2.width");
+ok(imgdata1.height == imgdata2.height, "imgdata1.height == imgdata2.height");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create2.tiny.html ]]] -->
 
 <p>Canvas test: 2d.imageData.create2.tiny</p>
@@ -6061,84 +6069,87 @@ var _thrown = undefined; try {
   ctx.getImageData(10, Infinity, Infinity, Infinity);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
 var _thrown = undefined; try {
   ctx.getImageData(10, Infinity, 10, Infinity);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
 var _thrown = undefined; try {
   ctx.getImageData(10, 10, Infinity, Infinity);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.getImageData({valueOf:function() Infinity}, 10, 10, 10);
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.getImageData({valueOf:function() -Infinity}, 10, 10, 10);
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.getImageData({valueOf:function() NaN}, 10, 10, 10);
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.getImageData(10, {valueOf:function() Infinity}, 10, 10);
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.getImageData(10, {valueOf:function() -Infinity}, 10, 10);
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.getImageData(10, {valueOf:function() NaN}, 10, 10);
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.getImageData(10, 10, {valueOf:function() Infinity}, 10);
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.getImageData(10, 10, {valueOf:function() -Infinity}, 10);
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.getImageData(10, 10, {valueOf:function() NaN}, 10);
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.getImageData(10, 10, 10, {valueOf:function() Infinity});
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.getImageData(10, 10, 10, {valueOf:function() -Infinity});
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.getImageData(10, 10, 10, {valueOf:function() NaN});
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.getImageData({valueOf:function() Infinity}, {valueOf:function() Infinity}, 10, 10);
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.getImageData({valueOf:function() Infinity}, {valueOf:function() Infinity}, {valueOf:function() Infinity}, 10);
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.getImageData({valueOf:function() Infinity}, {valueOf:function() Infinity}, {valueOf:function() Infinity}, {valueOf:function() Infinity});
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.getImageData({valueOf:function() Infinity}, {valueOf:function() Infinity}, 10, {valueOf:function() Infinity});
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.getImageData({valueOf:function() Infinity}, 10, {valueOf:function() Infinity}, 10);
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.getImageData({valueOf:function() Infinity}, 10, {valueOf:function() Infinity}, {valueOf:function() Infinity});
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.getImageData({valueOf:function() Infinity}, 10, 10, {valueOf:function() Infinity});
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.getImageData(10, {valueOf:function() Infinity}, {valueOf:function() Infinity}, 10);
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.getImageData(10, {valueOf:function() Infinity}, {valueOf:function() Infinity}, {valueOf:function() Infinity});
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.getImageData(10, {valueOf:function() Infinity}, 10, {valueOf:function() Infinity});
-} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
-var _thrown = undefined; try {
-  ctx.getImageData(10, 10, {valueOf:function() Infinity}, {valueOf:function() Infinity});
+var posinfobj = { valueOf: function() { return Infinity; } },
+    neginfobj = { valueOf: function() { return -Infinity; } },
+    nanobj = { valueOf: function() { return -Infinity; } };
+var _thrown = undefined; try {
+  ctx.getImageData(posinfobj, 10, 10, 10);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.getImageData(neginfobj, 10, 10, 10);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.getImageData(nanobj, 10, 10, 10);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.getImageData(10, posinfobj, 10, 10);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.getImageData(10, neginfobj, 10, 10);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.getImageData(10, nanobj, 10, 10);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.getImageData(10, 10, posinfobj, 10);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.getImageData(10, 10, neginfobj, 10);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.getImageData(10, 10, nanobj, 10);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.getImageData(10, 10, 10, posinfobj);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.getImageData(10, 10, 10, neginfobj);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.getImageData(10, 10, 10, nanobj);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.getImageData(posinfobj, posinfobj, 10, 10);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.getImageData(posinfobj, posinfobj, posinfobj, 10);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.getImageData(posinfobj, posinfobj, posinfobj, posinfobj);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.getImageData(posinfobj, posinfobj, 10, posinfobj);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.getImageData(posinfobj, 10, posinfobj, 10);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.getImageData(posinfobj, 10, posinfobj, posinfobj);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.getImageData(posinfobj, 10, 10, posinfobj);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.getImageData(10, posinfobj, posinfobj, 10);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.getImageData(10, posinfobj, posinfobj, posinfobj);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.getImageData(10, posinfobj, 10, posinfobj);
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
+var _thrown = undefined; try {
+  ctx.getImageData(10, 10, posinfobj, posinfobj);
 } catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.get.nonpremul.html ]]] -->
 
@@ -6226,16 +6237,20 @@ var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#48c';
 ctx.fillRect(0, 0, 100, 50);
 var imgdata = ctx.getImageData(0, 0, 10, 10);
 ok(imgdata.data[0] === 0x44, "imgdata.data[\""+(0)+"\"] === 0x44");
 ok(imgdata.data[1] === 0x88, "imgdata.data[\""+(1)+"\"] === 0x88");
 ok(imgdata.data[2] === 0xCC, "imgdata.data[\""+(2)+"\"] === 0xCC");
 ok(imgdata.data[3] === 255, "imgdata.data[\""+(3)+"\"] === 255");
+ok(imgdata.data[4] === 0x44, "imgdata.data[\""+(4)+"\"] === 0x44");
+ok(imgdata.data[5] === 0x88, "imgdata.data[\""+(5)+"\"] === 0x88");
+ok(imgdata.data[6] === 0xCC, "imgdata.data[\""+(6)+"\"] === 0xCC");
+ok(imgdata.data[7] === 255, "imgdata.data[\""+(7)+"\"] === 255");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.get.order.rows.html ]]] -->
 
 <p>Canvas test: 2d.imageData.get.order.rows</p>
@@ -6579,19 +6594,19 @@ ok(imgdata.data[0] === 255, "imgdata.dat
 <script>
 
 function test_2d_imageData_object_ctor() {
 
 var canvas = document.getElementById('c241');
 var ctx = canvas.getContext('2d');
 
 ok(window.ImageData !== undefined, "window.ImageData !== undefined");
-try { var _thrown = false;
+var _thrown = undefined; try {
   new window.ImageData(1,1);
-} catch (e) { _thrown = true; } finally { ok(_thrown, "should throw exception"); }
+} catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.object.nan.html ]]] -->
 
 <p>Canvas test: 2d.imageData.object.nan</p>
@@ -6698,16 +6713,22 @@ ok(imgdata.data[0] === 2, "imgdata.data[
 imgdata.data[0] = 3.5;
 ok(imgdata.data[0] === 4, "imgdata.data[\""+(0)+"\"] === 4");
 imgdata.data[0] = 252.5;
 ok(imgdata.data[0] === 252, "imgdata.data[\""+(0)+"\"] === 252");
 imgdata.data[0] = 253.5;
 ok(imgdata.data[0] === 254, "imgdata.data[\""+(0)+"\"] === 254");
 imgdata.data[0] = 254.5;
 ok(imgdata.data[0] === 254, "imgdata.data[\""+(0)+"\"] === 254");
+imgdata.data[0] = 256.5;
+ok(imgdata.data[0] === 255, "imgdata.data[\""+(0)+"\"] === 255");
+imgdata.data[0] = -0.5;
+ok(imgdata.data[0] === 0, "imgdata.data[\""+(0)+"\"] === 0");
+imgdata.data[0] = -1.5;
+ok(imgdata.data[0] === 0, "imgdata.data[\""+(0)+"\"] === 0");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.object.set.html ]]] -->
 
 <p>Canvas test: 2d.imageData.object.set</p>
@@ -7427,16 +7448,17 @@ var ctx = canvas.getContext('2d');
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50)
 var imgdata = ctx.getImageData(0, 0, 100, 50);
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50)
 ctx.globalAlpha = 0.1;
 ctx.globalCompositeOperation = 'destination-atop';
 ctx.shadowColor = '#f00';
+ctx.shadowBlur = 1;
 ctx.translate(100, 50);
 ctx.scale(0.1, 0.1);
 ctx.putImageData(imgdata, 0, 0);
 isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 
 }
 </script>
@@ -9162,39 +9184,57 @@ function test_2d_path_arc_nonfinite() {
 
 var canvas = document.getElementById('c301');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.moveTo(0, 0);
 ctx.lineTo(100, 0);
-ctx.arc(Infinity, 50, 0, 2*Math.PI, true);
-ctx.arc(-Infinity, 50, 0, 2*Math.PI, true);
-ctx.arc(NaN, 50, 0, 2*Math.PI, true);
-ctx.arc(0, Infinity, 0, 2*Math.PI, true);
-ctx.arc(0, -Infinity, 0, 2*Math.PI, true);
-ctx.arc(0, NaN, 0, 2*Math.PI, true);
-ctx.arc(0, 50, Infinity, 2*Math.PI, true);
-ctx.arc(0, 50, -Infinity, 2*Math.PI, true);
-ctx.arc(0, 50, NaN, 2*Math.PI, true);
-ctx.arc(0, 50, 0, Infinity, true);
-ctx.arc(0, 50, 0, -Infinity, true);
-ctx.arc(0, 50, 0, NaN, true);
-ctx.arc(Infinity, Infinity, 0, 2*Math.PI, true);
-ctx.arc(Infinity, Infinity, Infinity, 2*Math.PI, true);
-ctx.arc(Infinity, Infinity, Infinity, Infinity, true);
-ctx.arc(Infinity, Infinity, 0, Infinity, true);
-ctx.arc(Infinity, 50, Infinity, 2*Math.PI, true);
-ctx.arc(Infinity, 50, Infinity, Infinity, true);
-ctx.arc(Infinity, 50, 0, Infinity, true);
-ctx.arc(0, Infinity, Infinity, 2*Math.PI, true);
-ctx.arc(0, Infinity, Infinity, Infinity, true);
-ctx.arc(0, Infinity, 0, Infinity, true);
-ctx.arc(0, 50, Infinity, Infinity, true);
+ctx.arc(Infinity, 0, 50, 0, 2*Math.PI, true);
+ctx.arc(-Infinity, 0, 50, 0, 2*Math.PI, true);
+ctx.arc(NaN, 0, 50, 0, 2*Math.PI, true);
+ctx.arc(0, Infinity, 50, 0, 2*Math.PI, true);
+ctx.arc(0, -Infinity, 50, 0, 2*Math.PI, true);
+ctx.arc(0, NaN, 50, 0, 2*Math.PI, true);
+ctx.arc(0, 0, Infinity, 0, 2*Math.PI, true);
+ctx.arc(0, 0, -Infinity, 0, 2*Math.PI, true);
+ctx.arc(0, 0, NaN, 0, 2*Math.PI, true);
+ctx.arc(0, 0, 50, Infinity, 2*Math.PI, true);
+ctx.arc(0, 0, 50, -Infinity, 2*Math.PI, true);
+ctx.arc(0, 0, 50, NaN, 2*Math.PI, true);
+ctx.arc(0, 0, 50, 0, Infinity, true);
+ctx.arc(0, 0, 50, 0, -Infinity, true);
+ctx.arc(0, 0, 50, 0, NaN, true);
+ctx.arc(Infinity, Infinity, 50, 0, 2*Math.PI, true);
+ctx.arc(Infinity, Infinity, Infinity, 0, 2*Math.PI, true);
+ctx.arc(Infinity, Infinity, Infinity, Infinity, 2*Math.PI, true);
+ctx.arc(Infinity, Infinity, Infinity, Infinity, Infinity, true);
+ctx.arc(Infinity, Infinity, Infinity, 0, Infinity, true);
+ctx.arc(Infinity, Infinity, 50, Infinity, 2*Math.PI, true);
+ctx.arc(Infinity, Infinity, 50, Infinity, Infinity, true);
+ctx.arc(Infinity, Infinity, 50, 0, Infinity, true);
+ctx.arc(Infinity, 0, Infinity, 0, 2*Math.PI, true);
+ctx.arc(Infinity, 0, Infinity, Infinity, 2*Math.PI, true);
+ctx.arc(Infinity, 0, Infinity, Infinity, Infinity, true);
+ctx.arc(Infinity, 0, Infinity, 0, Infinity, true);
+ctx.arc(Infinity, 0, 50, Infinity, 2*Math.PI, true);
+ctx.arc(Infinity, 0, 50, Infinity, Infinity, true);
+ctx.arc(Infinity, 0, 50, 0, Infinity, true);
+ctx.arc(0, Infinity, Infinity, 0, 2*Math.PI, true);
+ctx.arc(0, Infinity, Infinity, Infinity, 2*Math.PI, true);
+ctx.arc(0, Infinity, Infinity, Infinity, Infinity, true);
+ctx.arc(0, Infinity, Infinity, 0, Infinity, true);
+ctx.arc(0, Infinity, 50, Infinity, 2*Math.PI, true);
+ctx.arc(0, Infinity, 50, Infinity, Infinity, true);
+ctx.arc(0, Infinity, 50, 0, Infinity, true);
+ctx.arc(0, 0, Infinity, Infinity, 2*Math.PI, true);
+ctx.arc(0, 0, Infinity, Infinity, Infinity, true);
+ctx.arc(0, 0, Infinity, 0, Infinity, true);
+ctx.arc(0, 0, 50, Infinity, Infinity, true);
 ctx.lineTo(100, 50);
 ctx.lineTo(0, 50);
 ctx.fillStyle = '#0f0';
 ctx.fill();
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 isPixel(ctx, 90,45, 0,255,0,255, 0);
 
 
@@ -9213,20 +9253,17 @@ function test_2d_path_arc_scale_1() {
 var canvas = document.getElementById('c302');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.scale(2, 0.5);
 ctx.fillStyle = '#0f0';
 ctx.beginPath();
-var hypothenuse = Math.sqrt(50 * 50 + 25 * 25);
-var tolerance = 0.5;
-var radius = hypothenuse + tolerance;
-ctx.arc(25, 50, radius, 0, 2*Math.PI, false);
+ctx.arc(25, 50, 56, 0, 2*Math.PI, false);
 ctx.fill();
 ctx.fillStyle = '#f00';
 ctx.beginPath();
 ctx.moveTo(-25, 50);
 ctx.arc(-25, 50, 24, 0, 2*Math.PI, false);
 ctx.moveTo(75, 50);
 ctx.arc(75, 50, 24, 0, 2*Math.PI, false);
 ctx.moveTo(25, -25);
@@ -9301,16 +9338,17 @@ ctx.fillRect(0, 0, 100, 50);
 ctx.lineWidth = 200;
 ctx.strokeStyle = '#f00';
 ctx.beginPath();
 ctx.arc(100, 50, 25, 0, -Math.PI/2, true);
 ctx.stroke();
 ctx.beginPath();
 ctx.arc(0, 0, 25, 0, -Math.PI/2, true);
 ctx.stroke();
+todo_isPixel(ctx, 1,1, 0,255,0,255, 0);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arc.selfintersect.2.html ]]] -->
 
@@ -9705,76 +9743,81 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arcTo.collinear.2.html ]]] -->
 
 <p>Canvas test: 2d.path.arcTo.collinear.2</p>
-<!-- Testing: arcTo() with all points on a line, and P2 between P0/P1, draws an infinite line along P1..P2 -->
+<!-- Testing: arcTo() with all points on a line, and P2 between P0/P1, draws a straight line to P1 -->
 <canvas height="50" id="c319" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arcTo_collinear_2() {
 
 var canvas = document.getElementById('c319');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.lineWidth = 50;
 
 ctx.strokeStyle = '#0f0';
 ctx.beginPath();
-ctx.moveTo(1000, 25);
-ctx.arcTo(1100, 25, 1050, 25, 1);
-ctx.stroke();
-
-ctx.strokeStyle = '#f00';
-ctx.beginPath();
 ctx.moveTo(0, 25);
-ctx.arcTo(100, 25, -50, 25, 1);
-ctx.stroke();
-
-todo_isPixel(ctx, 50,25, 0,255,0,255, 0);
+ctx.arcTo(100, 25, 10, 25, 1);
+ctx.stroke();
+
+ctx.strokeStyle = '#f00';
+ctx.beginPath();
+ctx.moveTo(100, 25);
+ctx.arcTo(200, 25, 110, 25, 1);
+ctx.stroke();
+
+isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arcTo.collinear.3.html ]]] -->
 
 <p>Canvas test: 2d.path.arcTo.collinear.3</p>
-<!-- Testing: arcTo() with all points on a line, and P0 between P1/P2, draws an infinite line along P1..P2 -->
+<!-- Testing: arcTo() with all points on a line, and P0 between P1/P2, draws a straight line to P1 -->
 <canvas height="50" id="c320" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_arcTo_collinear_3() {
 
 var canvas = document.getElementById('c320');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.lineWidth = 50;
 
 ctx.strokeStyle = '#0f0';
 ctx.beginPath();
-ctx.moveTo(150, 25);
-ctx.arcTo(200, 25, 100, 25, 1);
-ctx.stroke();
-
-ctx.strokeStyle = '#f00';
-ctx.beginPath();
 ctx.moveTo(0, 25);
-ctx.arcTo(100, 25, 50, 25, 1);
-ctx.stroke();
-
-todo_isPixel(ctx, 50,25, 0,255,0,255, 0);
+ctx.arcTo(100, 25, -100, 25, 1);
+ctx.stroke();
+
+ctx.strokeStyle = '#f00';
+ctx.beginPath();
+ctx.moveTo(100, 25);
+ctx.arcTo(200, 25, 0, 25, 1);
+ctx.stroke();
+
+ctx.beginPath();
+ctx.moveTo(-100, 25);
+ctx.arcTo(0, 25, -200, 25, 1);
+ctx.stroke();
+
+isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.arcTo.ensuresubpath.1.html ]]] -->
 
 <p>Canvas test: 2d.path.arcTo.ensuresubpath.1</p>
@@ -10123,37 +10166,41 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 <canvas height="50" id="c331" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_beginPath() {
 
 var canvas = document.getElementById('c331');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#0f0';
+ctx.fillRect(0, 0, 100, 50);
 ctx.rect(0, 0, 100, 50);
 ctx.beginPath();
 ctx.fillStyle = '#f00';
 ctx.fill();
-isPixel(ctx, 50,25, 0,0,0,0, 0);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.bezierCurveTo.basic.html ]]] -->
 
 <p>Canvas test: 2d.path.bezierCurveTo.basic</p>
 <canvas height="50" id="c332" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_bezierCurveTo_basic() {
 
 var canvas = document.getElementById('c332');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 50;
 ctx.beginPath();
 ctx.moveTo(0, 25);
 ctx.bezierCurveTo(100, 25, 100, 25, 100, 25);
 ctx.stroke();
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
@@ -10319,16 +10366,18 @@ isPixel(ctx, 90,45, 0,255,0,255, 0);
 <canvas height="50" id="c336" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_bezierCurveTo_scaled() {
 
 var canvas = document.getElementById('c336');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
 ctx.scale(1000, 1000);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 0.055;
 ctx.beginPath();
 ctx.moveTo(-2, 3.1);
 ctx.bezierCurveTo(-2, -1, 2.1, -1, 2.1, 3.1);
 ctx.stroke();
 isPixel(ctx, 50,25, 0,255,0,255, 0);
@@ -10347,16 +10396,18 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 <canvas height="50" id="c337" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_bezierCurveTo_shape() {
 
 var canvas = document.getElementById('c337');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 55;
 ctx.beginPath();
 ctx.moveTo(-2000, 3100);
 ctx.bezierCurveTo(-2000, -1000, 2100, -1000, 2100, 3100);
 ctx.stroke();
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 isPixel(ctx, 1,1, 0,255,0,255, 0);
@@ -10490,17 +10541,17 @@ var canvas = document.getElementById('c3
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.fillStyle = '#0f0';
 
 ctx.beginPath();
-ctx.lineTo(0, 0);
+ctx.moveTo(0, 0);
 ctx.lineTo(0, 50);
 ctx.lineTo(100, 50);
 ctx.lineTo(100, 0);
 ctx.clip();
 
 ctx.lineTo(0, 0);
 ctx.fill();
 
@@ -10563,17 +10614,17 @@ ctx.beginPath();
 ctx.moveTo(-10, -10);
 ctx.lineTo(110, -10);
 ctx.lineTo(110, 60);
 ctx.lineTo(-10, 60);
 ctx.lineTo(-10, -10);
 ctx.clip();
 
 ctx.beginPath();
-ctx.lineTo(0, 0);
+ctx.moveTo(0, 0);
 ctx.lineTo(0, 50);
 ctx.lineTo(100, 50);
 ctx.lineTo(100, 0);
 ctx.lineTo(0, 0);
 ctx.clip();
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
@@ -10590,36 +10641,40 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 <canvas height="50" id="c345" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_closePath_empty() {
 
 var canvas = document.getElementById('c345');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#0f0';
+ctx.fillRect(0, 0, 100, 50);
 ctx.closePath();
 ctx.fillStyle = '#f00';
 ctx.fill();
-isPixel(ctx, 50,25, 0,0,0,0, 0);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.closePath.newline.html ]]] -->
 
 <p>Canvas test: 2d.path.closePath.newline</p>
 <canvas height="50" id="c346" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_closePath_newline() {
 
 var canvas = document.getElementById('c346');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 50;
 ctx.moveTo(-100, 25);
 ctx.lineTo(-100, -100);
 ctx.lineTo(200, -100);
 ctx.lineTo(200, 25);
 ctx.closePath();
 ctx.stroke();
@@ -10635,16 +10690,18 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 <canvas height="50" id="c347" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_closePath_nextpoint() {
 
 var canvas = document.getElementById('c347');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 50;
 ctx.moveTo(-100, 25);
 ctx.lineTo(-100, -1000);
 ctx.closePath();
 ctx.lineTo(1000, 25);
 ctx.stroke();
 isPixel(ctx, 50,25, 0,255,0,255, 0);
@@ -10874,24 +10931,22 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 <canvas height="50" id="c355" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_initial() {
 
 var canvas = document.getElementById('c355');
 var ctx = canvas.getContext('2d');
 
-ctx.lineTo(0, 0);
-ctx.lineTo(100, 0);
-ctx.lineTo(100, 50);
-ctx.lineTo(0, 50);
+ctx.fillStyle = '#0f0';
+ctx.fillRect(0, 0, 100, 50);
 ctx.closePath();
 ctx.fillStyle = '#f00';
 ctx.fill();
-todo_isPixel(ctx, 50,25, 0,0,0,0, 0);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.isPointInPath.arc.html ]]] -->
 
 <p>Canvas test: 2d.path.isPointInPath.arc</p>
@@ -11288,16 +11343,18 @@ ok(ctx.isPointInPath(45, 45) === true, "
 <canvas height="50" id="c371" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_lineTo_basic() {
 
 var canvas = document.getElementById('c371');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 50;
 ctx.beginPath();
 ctx.moveTo(0, 25);
 ctx.lineTo(100, 25);
 ctx.stroke();
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
@@ -11362,16 +11419,18 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 <canvas height="50" id="c374" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_lineTo_nextpoint() {
 
 var canvas = document.getElementById('c374');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 50;
 ctx.beginPath();
 ctx.moveTo(-100, -100);
 ctx.lineTo(0, 25);
 ctx.lineTo(100, 25);
 ctx.stroke();
 isPixel(ctx, 50,25, 0,255,0,255, 0);
@@ -11418,16 +11477,18 @@ isPixel(ctx, 90,45, 0,255,0,255, 0);
 <canvas height="50" id="c376" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_moveTo_basic() {
 
 var canvas = document.getElementById('c376');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
 ctx.rect(0, 0, 10, 50);
 ctx.moveTo(100, 0);
 ctx.lineTo(10, 0);
 ctx.lineTo(10, 50);
 ctx.lineTo(100, 50);
 ctx.fillStyle = '#0f0';
 ctx.fill();
 isPixel(ctx, 90,25, 0,255,0,255, 0);
@@ -11442,16 +11503,18 @@ isPixel(ctx, 90,25, 0,255,0,255, 0);
 <canvas height="50" id="c377" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_moveTo_multiple() {
 
 var canvas = document.getElementById('c377');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
 ctx.moveTo(0, 25);
 ctx.moveTo(100, 25);
 ctx.moveTo(0, 25);
 ctx.lineTo(100, 25);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 50;
 ctx.stroke();
 isPixel(ctx, 50,25, 0,255,0,255, 0);
@@ -11466,24 +11529,26 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 <canvas height="50" id="c378" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_moveTo_newsubpath() {
 
 var canvas = document.getElementById('c378');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#0f0';
+ctx.fillRect(0, 0, 100, 50);
 ctx.beginPath();
 ctx.moveTo(0, 0);
 ctx.moveTo(100, 0);
 ctx.moveTo(100, 50);
 ctx.moveTo(0, 50);
 ctx.fillStyle = '#f00';
 ctx.fill();
-isPixel(ctx, 50,25, 0,0,0,0, 0);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.moveTo.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.path.moveTo.nonfinite</p>
@@ -11521,16 +11586,18 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 <canvas height="50" id="c380" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_quadraticCurveTo_basic() {
 
 var canvas = document.getElementById('c380');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 50;
 ctx.beginPath();
 ctx.moveTo(0, 25);
 ctx.quadraticCurveTo(100, 25, 100, 25);
 ctx.stroke();
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
@@ -11644,16 +11711,18 @@ isPixel(ctx, 90,45, 0,255,0,255, 0);
 <canvas height="50" id="c384" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_quadraticCurveTo_scaled() {
 
 var canvas = document.getElementById('c384');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
 ctx.scale(1000, 1000);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 0.055;
 ctx.beginPath();
 ctx.moveTo(-1, 1.05);
 ctx.quadraticCurveTo(0, -1, 1.2, 1.05);
 ctx.stroke();
 isPixel(ctx, 50,25, 0,255,0,255, 0);
@@ -11672,16 +11741,18 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 <canvas height="50" id="c385" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_quadraticCurveTo_shape() {
 
 var canvas = document.getElementById('c385');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 55;
 ctx.beginPath();
 ctx.moveTo(-1000, 1050);
 ctx.quadraticCurveTo(0, -1000, 1200, 1050);
 ctx.stroke();
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 isPixel(ctx, 1,1, 0,255,0,255, 0);
@@ -11699,16 +11770,18 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 <canvas height="50" id="c386" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_rect_basic() {
 
 var canvas = document.getElementById('c386');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = '#0f0';
 ctx.rect(0, 0, 100, 50);
 ctx.fill();
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
@@ -11719,16 +11792,18 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 <canvas height="50" id="c387" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_rect_closed() {
 
 var canvas = document.getElementById('c387');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 200;
 ctx.lineJoin = 'miter';
 ctx.rect(100, 50, 100, 100);
 ctx.stroke();
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
@@ -11741,16 +11816,18 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 <canvas height="50" id="c388" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_rect_end_1() {
 
 var canvas = document.getElementById('c388');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 100;
 ctx.rect(200, 100, 400, 1000);
 ctx.lineTo(-2000, -1000);
 ctx.stroke();
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
@@ -11763,16 +11840,18 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 <canvas height="50" id="c389" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_rect_end_2() {
 
 var canvas = document.getElementById('c389');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 450;
 ctx.lineCap = 'round';
 ctx.lineJoin = 'bevel';
 ctx.rect(150, 150, 2000, 2000);
 ctx.lineTo(160, 160);
 ctx.stroke();
 isPixel(ctx, 1,1, 0,255,0,255, 0);
@@ -11819,24 +11898,26 @@ isPixel(ctx, 75,37, 0,255,0,255, 0);
 <canvas height="50" id="c391" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_rect_newsubpath() {
 
 var canvas = document.getElementById('c391');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#0f0';
+ctx.fillRect(0, 0, 100, 50);
 ctx.beginPath();
 ctx.strokeStyle = '#f00';
 ctx.lineWidth = 50;
 ctx.moveTo(-100, 25);
 ctx.lineTo(-50, 25);
 ctx.rect(200, 25, 1, 1);
 ctx.stroke();
-isPixel(ctx, 50,25, 0,0,0,0, 0);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.rect.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.path.rect.nonfinite</p>
@@ -11920,16 +12001,18 @@ isPixel(ctx, 75,37, 0,255,0,255, 0);
 <canvas height="50" id="c394" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_rect_zero_1() {
 
 var canvas = document.getElementById('c394');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 100;
 ctx.beginPath();
 ctx.rect(0, 50, 100, 0);
 ctx.stroke();
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
@@ -11942,16 +12025,18 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 <canvas height="50" id="c395" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_rect_zero_2() {
 
 var canvas = document.getElementById('c395');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 100;
 ctx.beginPath();
 ctx.rect(50, -100, 0, 250);
 ctx.stroke();
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
@@ -11964,16 +12049,18 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 <canvas height="50" id="c396" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_rect_zero_4() {
 
 var canvas = document.getElementById('c396');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#0f0';
 ctx.lineWidth = 50;
 ctx.rect(100, 25, 0, 0);
 ctx.lineTo(0, 25);
 ctx.stroke();
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
@@ -11986,22 +12073,24 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 <canvas height="50" id="c397" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_rect_zero_5() {
 
 var canvas = document.getElementById('c397');
 var ctx = canvas.getContext('2d');
 
+ctx.fillStyle = '#0f0';
+ctx.fillRect(0, 0, 100, 50);
 ctx.strokeStyle = '#f00';
 ctx.lineWidth = 50;
 ctx.moveTo(0, 0);
 ctx.rect(100, 25, 0, 0);
 ctx.stroke();
-isPixel(ctx, 50,25, 0,0,0,0, 0);
+isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.stroke.empty.html ]]] -->
 
 <p>Canvas test: 2d.path.stroke.empty</p>
@@ -12083,17 +12172,17 @@ ctx.lineCap = 'round';
 ctx.lineJoin = 'round';
 
 ctx.beginPath();
 ctx.moveTo(50, 25);
 ctx.arcTo(50, 25, 150, 25, 10);
 ctx.stroke();
 
 ctx.beginPath();
-ctx.moveTo(50, 25);
+ctx.moveTo(60, 25);
 ctx.arc(50, 25, 10, 0, 0, false);
 ctx.stroke();
 
 todo_isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
@@ -12114,17 +12203,17 @@ ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.strokeStyle = '#f00';
 ctx.lineWidth = 400;
 ctx.lineJoin = 'miter';
 ctx.miterLimit = 1.4;
 
 ctx.beginPath();
-ctx.moveTo(-1000, 200, 0, 0);
+ctx.moveTo(-1000, 200);
 ctx.lineTo(-100, 200);
 ctx.lineTo(-100, 200);
 ctx.lineTo(-100, 200);
 ctx.lineTo(-100, 1000);
 ctx.stroke();
 
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
@@ -12357,32 +12446,44 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.transformation.multiple.html ]]] -->
 
 <p>Canvas test: 2d.path.transformation.multiple</p>
+<!-- Testing: Transformations are applied while building paths, not when drawing -->
 <canvas height="50" id="c408" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_transformation_multiple() {
 
 var canvas = document.getElementById('c408');
 var ctx = canvas.getContext('2d');
 
-ctx.fillStyle = '#f00';
-ctx.fillRect(0, 0, 100, 50);
-
+ctx.fillStyle = '#0f0';
+ctx.fillRect(0, 0, 100, 50);
+
+ctx.fillStyle = '#f00';    
+ctx.translate(-100, 0);
 ctx.rect(0, 0, 100, 50);
 ctx.fill();
-ctx.translate(-100, 0);
-ctx.fillStyle = '#0f0';
-ctx.fill();
+ctx.translate(100, 0);
+ctx.fill();
+
+ctx.beginPath();
+ctx.strokeStyle = '#f00';
+ctx.lineWidth = 50;
+ctx.translate(0, -50);
+ctx.moveTo(0, 25);
+ctx.lineTo(100, 25);
+ctx.stroke();
+ctx.translate(0, 50);
+ctx.stroke();
 
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.pattern.basic.canvas.html ]]] -->
@@ -12465,16 +12566,17 @@ var ctx = canvas.getContext('2d');
 
 var canvas2 = document.createElement('canvas');
 canvas2.width = 100;
 canvas2.height = 50;
 var pattern = ctx.createPattern(canvas2, 'no-repeat');
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
+ctx.fillStyle = '#f00';
 ctx.fillStyle = pattern;
 ctx.fillRect(0, 0, 100, 50);
 
 isPixel(ctx, 1,1, 0,255,0,255, 0);
 isPixel(ctx, 98,1, 0,255,0,255, 0);
 isPixel(ctx, 1,48, 0,255,0,255, 0);
 isPixel(ctx, 98,48, 0,255,0,255, 0);
 
@@ -12578,42 +12680,41 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 <script>
 
 function test_2d_pattern_image_broken() {
 
 var canvas = document.getElementById('c415');
 var ctx = canvas.getContext('2d');
 
 var img = document.getElementById('broken_2.png');
-todo(img.complete === false, "img.complete === false");
-var _thrown = undefined; try {
-  ctx.createPattern(img, 'repeat');
-} catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "InvalidStateError" && _thrown.code == DOMException.INVALID_STATE_ERR, "should throw InvalidStateError");
+todo(ctx.createPattern(img, 'repeat') === null, "ctx.createPattern(img, 'repeat') === null");
 
 
 }
 </script>
 <img class="resource" id="broken_2.png" src="image_broken.png">
 
-<!-- [[[ test_2d.pattern.image.incomplete.html ]]] -->
-
-<p>Canvas test: 2d.pattern.image.incomplete</p>
+<!-- [[[ test_2d.pattern.image.incomplete.immediate.html ]]] -->
+
+<p>Canvas test: 2d.pattern.image.incomplete.immediate</p>
 <canvas height="50" id="c416" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
-function test_2d_pattern_image_incomplete() {
+function test_2d_pattern_image_incomplete_immediate() {
 
 var canvas = document.getElementById('c416');
 var ctx = canvas.getContext('2d');
 
 var img = new Image();
-todo(img.complete === false, "img.complete === false");
-var _thrown = undefined; try {
-  ctx.createPattern(img, 'repeat');
-} catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "InvalidStateError" && _thrown.code == DOMException.INVALID_STATE_ERR, "should throw InvalidStateError");
+img.src = 'image_red.png';
+// This triggers the "update the image data" algorithm.
+// The image will not go to the "completely available" state
+// until a fetch task in the networking task source is processed,
+// so the image must not be fully decodable yet:
+todo(ctx.createPattern(img, 'repeat') === null, "ctx.createPattern(img, 'repeat') === null");
 
 
 }
 </script>
 <img class="resource" id="red_15.png" src="image_red.png">
 
 <!-- [[[ test_2d.pattern.image.null.html ]]] -->
 
@@ -13178,20 +13279,20 @@ ctx.fillStyle = pattern;
 ctx.translate(0, 16);
 ctx.fillRect(0, -16, 100, 50);
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 16);
 
 isPixel(ctx, 1,1, 0,255,0,255, 0);
 isPixel(ctx, 98,1, 0,255,0,255, 0);
-isPixel(ctx, 1,48, 0,255,0,255, 0);
-isPixel(ctx, 98,48, 0,255,0,255, 0);
 isPixel(ctx, 1,25, 0,255,0,255, 0);
 isPixel(ctx, 98,25, 0,255,0,255, 0);
+isPixel(ctx, 1,48, 0,255,0,255, 0);
+isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 
 }
 </script>
 <img class="resource" id="red-16x16_1.png" src="image_red-16x16.png">
 
 <!-- [[[ test_2d.pattern.paint.repeatx.outside.html ]]] -->
 
@@ -13274,22 +13375,21 @@ var img = document.getElementById('red-1
 var pattern = ctx.createPattern(img, 'repeat-y');
 ctx.fillStyle = pattern;
 ctx.translate(48, 0);
 ctx.fillRect(-48, 0, 100, 50);
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 16, 50);
 
+isPixel(ctx, 1,1, 0,255,0,255, 0);
 isPixel(ctx, 50,1, 0,255,0,255, 0);
+isPixel(ctx, 98,1, 0,255,0,255, 0);
+isPixel(ctx, 1,48, 0,255,0,255, 0);
 isPixel(ctx, 50,48, 0,255,0,255, 0);
-
-isPixel(ctx, 1,1, 0,255,0,255, 0);
-isPixel(ctx, 98,1, 0,255,0,255, 0);
-isPixel(ctx, 1,48, 0,255,0,255, 0);
 isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 
 }
 </script>
 <img class="resource" id="red-16x16_3.png" src="image_red-16x16.png">
 
 <!-- [[[ test_2d.pattern.paint.repeaty.outside.html ]]] -->
@@ -13310,18 +13410,18 @@ var img = document.getElementById('red-1
 var pattern = ctx.createPattern(img, 'repeat-y');
 ctx.fillStyle = pattern;
 ctx.fillRect(0, 0, 100, 50);
 
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 16, 50);
 
 isPixel(ctx, 1,1, 0,255,0,255, 0);
-isPixel(ctx, 1,48, 0,255,0,255, 0);
 isPixel(ctx, 98,1, 0,255,0,255, 0);
+isPixel(ctx, 1,48, 0,255,0,255, 0);
 isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 
 }
 </script>
 <img class="resource" id="red-16x16_4.png" src="image_red-16x16.png">
 
 <!-- [[[ test_2d.pattern.repeat.case.html ]]] -->
@@ -13377,32 +13477,23 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 <canvas height="50" id="c442" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_repeat_null() {
 
 var canvas = document.getElementById('c442');
 var ctx = canvas.getContext('2d');
 
-ctx.fillStyle = '#f00';
-ctx.fillRect(0, 0, 100, 50);
-var img = document.getElementById('green-1x1_2.png');
-var pattern = ctx.createPattern(img, null);
-ctx.fillStyle = pattern;
-ctx.fillRect(0, 0, 100, 50);
-
-isPixel(ctx, 1,1, 0,255,0,255, 0);
-isPixel(ctx, 98,1, 0,255,0,255, 0);
-isPixel(ctx, 1,48, 0,255,0,255, 0);
-isPixel(ctx, 98,48, 0,255,0,255, 0);
-
-
-}
-</script>
-<img class="resource" id="green-1x1_2.png" src="image_green-1x1.png">
+var _thrown = undefined; try {
+  ctx.createPattern(canvas, null);
+} catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "SyntaxError" && _thrown.code == DOMException.SYNTAX_ERR, "should throw SyntaxError");
+
+
+}
+</script>
 
 <!-- [[[ test_2d.pattern.repeat.nullsuffix.html ]]] -->
 
 <p>Canvas test: 2d.pattern.repeat.nullsuffix</p>
 <canvas height="50" id="c443" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_pattern_repeat_nullsuffix() {
@@ -13853,17 +13944,17 @@ function test_2d_shadow_blur_high() {
 
 var canvas = document.getElementById('c461');
 var ctx = canvas.getContext('2d');
 
 ctx.fillStyle = '#ff0';
 ctx.fillRect(0, 0, 100, 50);
 ctx.shadowColor = '#00f';
 ctx.shadowOffsetY = 0;
-ctx.shadowBlur = 555.6;
+ctx.shadowBlur = 100;
 ctx.fillRect(-200, -200, 200, 400);
 
 todo(false, "test completed successfully"); // (Bug 483989)
 
 
 }
 </script>
 
@@ -15764,35 +15855,26 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 <canvas height="50" id="c527" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_shadow() {
 
 var canvas = document.getElementById('c527');
 var ctx = canvas.getContext('2d');
 
-ctx.fillStyle = '#0f0';
-ctx.fillRect(0, 0, 100, 50);
-
-ctx.fillStyle = '#f00';
+ctx.fillStyle = '#f00';
+ctx.fillRect(0, 0, 100, 50);
+ctx.fillStyle = '#f00';
+ctx.shadowColor = '#0f0';
 ctx.shadowBlur = 0;
 ctx.shadowOffsetX = 0;
 ctx.shadowOffsetY = 50;
-
-// Shadows are optional, so just test that if they apply to fill() then they apply to strokeRect() too
-ctx.beginPath();
-ctx.rect(0, -50, 100, 50);
-ctx.shadowColor = '#f00';
-ctx.fill();
-
-ctx.shadowColor = '#0f0';
 ctx.strokeStyle = '#f00';
 ctx.lineWidth = 50;
 ctx.strokeRect(0, -75, 100, 50);
-
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.transform.html ]]] -->
 
@@ -16339,16 +16421,19 @@ ctx.fillRect(0, 0, 100, 50);
 ctx.restore();
 
 ctx.save();
 ctx.translate(0, 25);
 ctx.scale(1, 0);
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.restore();
+
+canvas.toDataURL();
+
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.transformation.setTransform.multiple.html ]]] -->
 
@@ -16758,16 +16843,20 @@ ok(ctx.lineTo(0, 0) === undefined, "ctx.
 ok(ctx.quadraticCurveTo(0, 0, 0, 0) === undefined, "ctx.quadraticCurveTo(0, 0, 0, 0) === undefined");
 ok(ctx.bezierCurveTo(0, 0, 0, 0, 0, 0) === undefined, "ctx.bezierCurveTo(0, 0, 0, 0, 0, 0) === undefined");
 ok(ctx.arcTo(0, 0, 0, 0, 1) === undefined, "ctx.arcTo(0, 0, 0, 0, 1) === undefined");
 ok(ctx.rect(0, 0, 0, 0) === undefined, "ctx.rect(0, 0, 0, 0) === undefined");
 ok(ctx.arc(0, 0, 1, 0, 0, true) === undefined, "ctx.arc(0, 0, 1, 0, 0, true) === undefined");
 ok(ctx.fill() === undefined, "ctx.fill() === undefined");
 ok(ctx.stroke() === undefined, "ctx.stroke() === undefined");
 ok(ctx.clip() === undefined, "ctx.clip() === undefined");
+if (ctx.fillText) {
+    ok(ctx.fillText('test', 0, 0) === undefined, "ctx.fillText('test', 0, 0) === undefined");
+    ok(ctx.strokeText('test', 0, 0) === undefined, "ctx.strokeText('test', 0, 0) === undefined");
+}
 if (ctx.putImageData) {
     ok(ctx.putImageData(ctx.getImageData(0, 0, 1, 1), 0, 0) === undefined, "ctx.putImageData(ctx.getImageData(0, 0, 1, 1), 0, 0) === undefined");
 }
 ok(ctx.drawImage(document.getElementById('yellow_3.png'), 0, 0, 1, 1, 0, 0, 0, 0) === undefined, "ctx.drawImage(document.getElementById('yellow_3.png'), 0, 0, 1, 1, 0, 0, 0, 0) === undefined");
 ok(ctx.drawImage(canvas, 0, 0, 1, 1, 0, 0, 0, 0) === undefined, "ctx.drawImage(canvas, 0, 0, 1, 1, 0, 0, 0, 0) === undefined");
 ok(ctx.createLinearGradient(0, 0, 0, 0).addColorStop(0, 'white') === undefined, "ctx.createLinearGradient(0, 0, 0, 0).addColorStop(0, 'white') === undefined");
 
 
@@ -16783,17 +16872,17 @@ ok(ctx.createLinearGradient(0, 0, 0, 0).
 
 function test_context_arguments_missing() {
 
 var canvas = document.getElementById('c560');
 var ctx = canvas.getContext('2d');
 
 var _thrown = undefined; try {
   canvas.getContext();
-} catch (e) { _thrown = e }; todo(_thrown && _thrown.name == "NotSupportedError" && _thrown.code == DOMException.NOT_SUPPORTED_ERR, "should throw NotSupportedError");
+} catch (e) { _thrown = e }; todo(_thrown && _thrown instanceof TypeError, "should throw TypeError");
 
 
 }
 </script>
 
 <!-- [[[ test_context.casesensitive.html ]]] -->
 
 <p>Canvas test: context.casesensitive</p>
@@ -17044,16 +17133,31 @@ ctx.shadowColor = "#ff0000";
 canvas.width = 100;
 ok(ctx.shadowColor === default_val, "ctx.shadowColor === default_val");
 
 default_val = ctx.globalCompositeOperation;
 ctx.globalCompositeOperation = "copy";
 canvas.width = 100;
 ok(ctx.globalCompositeOperation === default_val, "ctx.globalCompositeOperation === default_val");
 
+default_val = ctx.font;
+ctx.font = "25px serif";
+canvas.width = 100;
+ok(ctx.font === default_val, "ctx.font === default_val");
+
+default_val = ctx.textAlign;
+ctx.textAlign = "center";
+canvas.width = 100;
+ok(ctx.textAlign === default_val, "ctx.textAlign === default_val");
+
+default_val = ctx.textBaseline;
+ctx.textBaseline = "bottom";
+canvas.width = 100;
+ok(ctx.textBaseline === default_val, "ctx.textBaseline === default_val");
+
 
 }
 </script>
 
 <!-- [[[ test_initial.reset.clip.html ]]] -->
 
 <p>Canvas test: initial.reset.clip</p>
 <!-- Testing: Resetting the canvas state resets the current clip region -->
@@ -17156,19 +17260,19 @@ isPixel(ctx, 20,20, 0,0,0,0, 0);
 <canvas height="50" id="c576" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_initial_reset_pattern() {
 
 var canvas = document.getElementById('c576');
 var ctx = canvas.getContext('2d');
 
-canvas.width = 50;
-ctx.fillStyle = '#0f0';
-ctx.fillRect(0, 0, 50, 50);
+canvas.width = 30;
+ctx.fillStyle = '#0f0';
+ctx.fillRect(0, 0, 30, 50);
 var p = ctx.createPattern(canvas, 'repeat-x');
 canvas.width = 100;
 ctx.fillStyle = '#f00';
 ctx.fillRect(0, 0, 100, 50);
 ctx.fillStyle = p;
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
@@ -17207,17 +17311,17 @@ isPixel(ctx, 20,20, 0,0,0,0, 0);
 <script>
 
 function test_initial_reset_transform() {
 
 var canvas = document.getElementById('c578');
 var ctx = canvas.getContext('2d');
 
 canvas.width = 100;
-ctx.scale(0, 0);
+ctx.scale(0.1, 0.1);
 canvas.width = 100;
 ctx.fillStyle = '#0f0';
 ctx.fillRect(0, 0, 100, 50);
 isPixel(ctx, 20,20, 0,255,0,255, 0);
 
 
 }
 </script>
@@ -17302,29 +17406,33 @@ ok(canvas.width === 300, "canvas.width =
 ok(canvas.height === 150, "canvas.height === 150");
 ok(canvas.getAttribute('width') === '-100', "canvas.getAttribute('width') === '-100'");
 ok(canvas.getAttribute('height') === '-100', "canvas.getAttribute('height') === '-100'");
 
 
 }
 </script>
 
-<!-- [[[ test_size.attributes.parse.percentsuffix.html ]]] -->
-
-<p>Canvas test: size.attributes.parse.percentsuffix</p>
+<!-- [[[ test_size.attributes.parse.percent.html ]]] -->
+
+<p>Canvas test: size.attributes.parse.percent</p>
 <!-- Testing: Parsing of non-negative integers -->
-<canvas height="50" id="c583" width="100%"><p class="fallback">FAIL (fallback content)</p></canvas>
-<script>
-
-function test_size_attributes_parse_percentsuffix() {
+<canvas height="100%" id="c583" width="100%"><p class="fallback">FAIL (fallback content)</p></canvas>
+<script>
+
+function test_size_attributes_parse_percent() {
 
 var canvas = document.getElementById('c583');
 var ctx = canvas.getContext('2d');
 
-ok(canvas.width == 100, "canvas.width == 100");
+ok(canvas.width === 100, "canvas.width === 100");
+ok(canvas.height === 100, "canvas.height === 100");
+ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "100px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"100px\"");
+ok(canvas.getAttribute('width') === '100%', "canvas.getAttribute('width') === '100%'");
+ok(canvas.getAttribute('height') === '100%', "canvas.getAttribute('height') === '100%'");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.parse.space.html ]]] -->
 
 <p>Canvas test: size.attributes.parse.space</p>
@@ -17368,25 +17476,29 @@ ok(canvas.getAttribute('height') === '10
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.parse.zero.html ]]] -->
 
 <p>Canvas test: size.attributes.parse.zero</p>
 <!-- Testing: Parsing of non-negative integers -->
-<canvas height="50" id="c586" width="0"><p class="fallback">FAIL (fallback content)</p></canvas>
+<canvas height="0" id="c586" width="0"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_parse_zero() {
 
 var canvas = document.getElementById('c586');
 var ctx = canvas.getContext('2d');
 
-ok(canvas.width == 0, "canvas.width == 0");
+ok(canvas.width === 0, "canvas.width === 0");
+ok(canvas.height === 0, "canvas.height === 0");
+ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "0px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"0px\"");
+ok(canvas.getAttribute('width') === '0', "canvas.getAttribute('width') === '0'");
+ok(canvas.getAttribute('height') === '0', "canvas.getAttribute('height') === '0'");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.reflect.setcontent.html ]]] -->
 
 <p>Canvas test: size.attributes.reflect.setcontent</p>
@@ -17396,20 +17508,20 @@ ok(canvas.width == 0, "canvas.width == 0
 
 function test_size_attributes_reflect_setcontent() {
 
 var canvas = document.getElementById('c587');
 var ctx = canvas.getContext('2d');
 
 canvas.setAttribute('width', '120');
 canvas.setAttribute('height', '60');
-ok(canvas.getAttribute('width') == '120', "canvas.getAttribute('width') == '120'");
-ok(canvas.getAttribute('height') == '60', "canvas.getAttribute('height') == '60'");
-ok(canvas.width == 120, "canvas.width == 120");
-ok(canvas.height == 60, "canvas.height == 60");
+ok(canvas.getAttribute('width') === '120', "canvas.getAttribute('width') === '120'");
+ok(canvas.getAttribute('height') === '60', "canvas.getAttribute('height') === '60'");
+ok(canvas.width === 120, "canvas.width === 120");
+ok(canvas.height === 60, "canvas.height === 60");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.reflect.setidl.html ]]] -->
 
 <p>Canvas test: size.attributes.reflect.setidl</p>
@@ -17419,20 +17531,20 @@ ok(canvas.height == 60, "canvas.height =
 
 function test_size_attributes_reflect_setidl() {
 
 var canvas = document.getElementById('c588');
 var ctx = canvas.getContext('2d');
 
 canvas.width = 120;
 canvas.height = 60;
-ok(canvas.getAttribute('width') == '120', "canvas.getAttribute('width') == '120'");
-ok(canvas.getAttribute('height') == '60', "canvas.getAttribute('height') == '60'");
-ok(canvas.width == 120, "canvas.width == 120");
-ok(canvas.height == 60, "canvas.height == 60");
+ok(canvas.getAttribute('width') === '120', "canvas.getAttribute('width') === '120'");
+ok(canvas.getAttribute('height') === '60', "canvas.getAttribute('height') === '60'");
+ok(canvas.width === 120, "canvas.width === 120");
+ok(canvas.height === 60, "canvas.height === 60");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.removed.html ]]] -->
 
 <p>Canvas test: size.attributes.removed</p>
@@ -17440,18 +17552,19 @@ ok(canvas.height == 60, "canvas.height =
 <canvas height="60" id="c589" width="120"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_size_attributes_removed() {
 
 var canvas = document.getElementById('c589');
 var ctx = canvas.getContext('2d');
 
+ok(canvas.width === 120, "canvas.width === 120");
 canvas.removeAttribute('width');
-ok(canvas.width == 300, "canvas.width == 300");
+ok(canvas.width === 300, "canvas.width === 300");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.setAttribute.decimal.html ]]] -->
 
 <p>Canvas test: size.attributes.setAttribute.decimal</p>
@@ -17517,30 +17630,35 @@ ok(canvas.width === 300, "canvas.width =
 ok(canvas.height === 150, "canvas.height === 150");
 ok(canvas.getAttribute('width') === '-100', "canvas.getAttribute('width') === '-100'");
 ok(canvas.getAttribute('height') === '-100', "canvas.getAttribute('height') === '-100'");
 
 
 }
 </script>
 
-<!-- [[[ test_size.attributes.setAttribute.percentsuffix.html ]]] -->
-
-<p>Canvas test: size.attributes.setAttribute.percentsuffix</p>
+<!-- [[[ test_size.attributes.setAttribute.percent.html ]]] -->
+
+<p>Canvas test: size.attributes.setAttribute.percent</p>
 <!-- Testing: Parsing of non-negative integers in setAttribute -->
 <canvas height="50" id="c593" width="50"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
-function test_size_attributes_setAttribute_percentsuffix() {
+function test_size_attributes_setAttribute_percent() {
 
 var canvas = document.getElementById('c593');
 var ctx = canvas.getContext('2d');
 
 canvas.setAttribute('width', '100%');
-ok(canvas.width == 100, "canvas.width == 100");
+canvas.setAttribute('height', '100%');
+ok(canvas.width === 100, "canvas.width === 100");
+ok(canvas.height === 100, "canvas.height === 100");
+ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "100px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"100px\"");
+ok(canvas.getAttribute('width') === '100%', "canvas.getAttribute('width') === '100%'");
+ok(canvas.getAttribute('height') === '100%', "canvas.getAttribute('height') === '100%'");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.setAttribute.space.html ]]] -->
 
 <p>Canvas test: size.attributes.setAttribute.space</p>
@@ -17597,17 +17715,22 @@ ok(canvas.getAttribute('height') === '10
 <script>
 
 function test_size_attributes_setAttribute_zero() {
 
 var canvas = document.getElementById('c596');
 var ctx = canvas.getContext('2d');
 
 canvas.setAttribute('width', '0');
-ok(canvas.width == 0, "canvas.width == 0");
+canvas.setAttribute('height', '0');
+ok(canvas.width === 0, "canvas.width === 0");
+ok(canvas.height === 0, "canvas.height === 0");
+ok(window.getComputedStyle(canvas, null).getPropertyValue("width") == "0px", "window.getComputedStyle(canvas, null).getPropertyValue(\"width\") == \"0px\"");
+ok(canvas.getAttribute('width') === '0', "canvas.getAttribute('width') === '0'");
+ok(canvas.getAttribute('height') === '0', "canvas.getAttribute('height') === '0'");
 
 
 }
 </script>
 
 <!-- [[[ test_size.attributes.style.html ]]] -->
 
 <p>Canvas test: size.attributes.style</p>
@@ -18275,19 +18398,19 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_drawImage_composite");
  }
  try {
   test_2d_drawImage_floatsource();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_drawImage_floatsource");
  }
  try {
-  test_2d_drawImage_incomplete();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_2d_drawImage_incomplete");
+  test_2d_drawImage_incomplete_immediate();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_drawImage_incomplete_immediate");
  }
  try {
   test_2d_drawImage_negativedest();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_drawImage_negativedest");
  }
  try {
   test_2d_drawImage_negativedir();
@@ -18805,19 +18928,19 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_gradient_interpolate_solid");
  }
  try {
   test_2d_gradient_interpolate_vertical();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_gradient_interpolate_vertical");
  }
  try {
-  test_2d_gradient_interpolate_zerosize();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_2d_gradient_interpolate_zerosize");
+  test_2d_gradient_interpolate_zerosize_fillRect();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_gradient_interpolate_zerosize_fillRect");
  }
  try {
   test_2d_gradient_linear_nonfinite();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_gradient_linear_nonfinite");
  }
  try {
   test_2d_gradient_linear_transform_1();
@@ -19935,19 +20058,19 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_2d_pattern_crosscanvas");
  }
  try {
   test_2d_pattern_image_broken();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_pattern_image_broken");
  }
  try {
-  test_2d_pattern_image_incomplete();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_2d_pattern_image_incomplete");
+  test_2d_pattern_image_incomplete_immediate();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_2d_pattern_image_incomplete_immediate");
  }
  try {
   test_2d_pattern_image_null();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_2d_pattern_image_null");
  }
  try {
   test_2d_pattern_image_string();
@@ -20770,19 +20893,19 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_size_attributes_parse_junk");
  }
  try {
   test_size_attributes_parse_minus();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_size_attributes_parse_minus");
  }
  try {
-  test_size_attributes_parse_percentsuffix();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_size_attributes_parse_percentsuffix");
+  test_size_attributes_parse_percent();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_size_attributes_parse_percent");
  }
  try {
   test_size_attributes_parse_space();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_size_attributes_parse_space");
  }
  try {
   test_size_attributes_parse_trailingjunk();
@@ -20820,19 +20943,19 @@ function runTests() {
   ok(false, "unexpected exception thrown in: test_size_attributes_setAttribute_junk");
  }
  try {
   test_size_attributes_setAttribute_minus();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_size_attributes_setAttribute_minus");
  }
  try {
-  test_size_attributes_setAttribute_percentsuffix();
- } catch (e) {
-  ok(false, "unexpected exception thrown in: test_size_attributes_setAttribute_percentsuffix");
+  test_size_attributes_setAttribute_percent();
+ } catch (e) {
+  ok(false, "unexpected exception thrown in: test_size_attributes_setAttribute_percent");
  }
  try {
   test_size_attributes_setAttribute_space();
  } catch (e) {
   ok(false, "unexpected exception thrown in: test_size_attributes_setAttribute_space");
  }
  try {
   test_size_attributes_setAttribute_trailingjunk();
