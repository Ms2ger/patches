diff --git a/layout/base/nsDocumentViewer.cpp b/layout/base/nsDocumentViewer.cpp
--- a/layout/base/nsDocumentViewer.cpp
+++ b/layout/base/nsDocumentViewer.cpp
@@ -152,7 +152,7 @@
 #include "nsISupportsPrimitives.h"
 
 // PrintOptions is now implemented by PrintSettingsService
-static const char sPrintOptionsContractID[]         = "@mozilla.org/gfx/printsettings-service;1";
+static const char sPrintOptionsContractID[] = "@mozilla.org/gfx/printsettings-service;1";
 
 // Printing Events
 #include "nsPrintPreviewListener.h"
@@ -169,7 +169,7 @@
 // Print error dialog
 #include "nsIWindowWatcher.h"
 
-// Printing 
+// Printing
 #include "nsPrintEngine.h"
 #include "nsPagePrintTimer.h"
 
@@ -236,45 +236,44 @@
 class nsDocViewerSelectionListener : public nsISelectionListener
 {
 public:
-
   // nsISupports interface...
   NS_DECL_ISUPPORTS
 
   // nsISelectionListerner interface
   NS_DECL_NSISELECTIONLISTENER
 
-                       nsDocViewerSelectionListener()
-                       : mDocViewer(NULL)
-                       , mGotSelectionState(false)
-                       , mSelectionWasCollapsed(false)
-                       {
-                       }
-
-  virtual              ~nsDocViewerSelectionListener() {}
-
-  nsresult             Init(DocumentViewerImpl *aDocViewer);
+  nsDocViewerSelectionListener()
+    : mDocViewer(nullptr)
+    , mGotSelectionState(false)
+    , mSelectionWasCollapsed(false)
+  {
+  }
+
+  virtual ~nsDocViewerSelectionListener() {}
+
+  nsresult Init(DocumentViewerImpl *aDocViewer);
 
 protected:
-
-  DocumentViewerImpl*  mDocViewer;
-  bool                 mGotSelectionState;
-  bool                 mSelectionWasCollapsed;
-
+  DocumentViewerImpl* mDocViewer;
+  bool mGotSelectionState;
+  bool mSelectionWasCollapsed;
 };
 
 
-/** editor Implementation of the FocusListener interface
+/**
+ * editor Implementation of the FocusListener interface
  */
 class nsDocViewerFocusListener : public nsIDOMFocusListener
 {
 public:
-  /** default constructor
+  /**
+   * default constructor
    */
   nsDocViewerFocusListener();
-  /** default destructor
+  /**
+   * default destructor
    */
   virtual ~nsDocViewerFocusListener();
-
 
 /*interfaces for addref and release and queryinterface*/
   NS_DECL_ISUPPORTS
@@ -284,10 +283,10 @@
   NS_IMETHOD Focus(nsIDOMEvent* aEvent);
   NS_IMETHOD Blur(nsIDOMEvent* aEvent);
 /*END implementations of focus event handler interface*/
-  nsresult             Init(DocumentViewerImpl *aDocViewer);
+  nsresult Init(DocumentViewerImpl *aDocViewer);
 
 private:
-    DocumentViewerImpl*  mDocViewer;
+  DocumentViewerImpl* mDocViewer;
 };
 
 
@@ -297,14 +296,14 @@
 #endif
 
 //-------------------------------------------------------------
-class DocumentViewerImpl : public nsIDocumentViewer,
-                           public nsIContentViewerEdit,
-                           public nsIContentViewerFile,
-                           public nsIMarkupDocumentViewer,
-                           public nsIDocumentViewerPrint
-
-#ifdef NS_PRINTING
-                           , public nsIWebBrowserPrint
+class DocumentViewerImpl : public nsIDocumentViewer
+                         , public nsIContentViewerEdit
+                         , public nsIContentViewerFile
+                         , public nsIMarkupDocumentViewer
+                         , public nsIDocumentViewerPrint
+
+#ifdef NS_PRINTING
+                         , public nsIWebBrowserPrint
 #endif
 
 {
@@ -405,8 +404,8 @@
 #ifdef NS_PRINTING
   // Called when the DocViewer is notified that the state
   // of Printing or PP has changed
-  void SetIsPrintingInDocShellTree(nsIDocShellTreeNode* aParentNode, 
-                                   bool                 aIsPrintingOrPP, 
+  void SetIsPrintingInDocShellTree(nsIDocShellTreeNode* aParentNode,
+                                   bool                 aIsPrintingOrPP,
                                    bool                 aStartAtTop);
 #endif // NS_PRINTING
 
@@ -430,15 +429,15 @@
   // class, please make the ownership explicit (pinkerton, scc).
 
   nsWeakPtr mContainer; // it owns me!
-  nsCOMPtr<nsIDeviceContext> mDeviceContext;  // We create and own this baby
+  nsCOMPtr<nsIDeviceContext> mDeviceContext; // We create and own this baby
 
   // the following six items are explicitly in this order
   // so they will be destroyed in the reverse order (pinkerton, scc)
-  nsCOMPtr<nsIDocument>    mDocument;
-  nsCOMPtr<nsIWidget>      mWindow;      // may be null
+  nsCOMPtr<nsIDocument> mDocument;
+  nsCOMPtr<nsIWidget> mWindow; // may be null
   nsCOMPtr<nsIViewManager> mViewManager;
-  nsRefPtr<nsPresContext>  mPresContext;
-  nsCOMPtr<nsIPresShell>   mPresShell;
+  nsRefPtr<nsPresContext> mPresContext;
+  nsCOMPtr<nsIPresShell> mPresShell;
 
   nsCOMPtr<nsISelectionListener> mSelectionListener;
   nsCOMPtr<nsIDOMFocusListener> mFocusListener;
@@ -453,36 +452,36 @@
 
   // mTextZoom/mPageZoom record the textzoom/pagezoom of the first (galley)
   // presshell only.
-  float mTextZoom;      // Text zoom, defaults to 1.0
+  float mTextZoom; // Text zoom, defaults to 1.0
   float mPageZoom;
 
   int16_t mNumURLStarts;
   int16_t mDestroyRefCount;    // a second "refcount" for the document viewer's "destroy"
 
-  unsigned      mStopped : 1;
-  unsigned      mLoaded : 1;
-  unsigned      mDeferredWindowClose : 1;
+  unsigned mStopped : 1;
+  unsigned mLoaded : 1;
+  unsigned mDeferredWindowClose : 1;
   // document management data
   //   these items are specific to markup documents (html and xml)
   //   may consider splitting these out into a subclass
-  unsigned      mIsSticky : 1;
-  unsigned      mInPermitUnload : 1;
-
-#ifdef NS_PRINTING
-  unsigned      mClosingWhilePrinting : 1;
+  unsigned mIsSticky : 1;
+  unsigned mInPermitUnload : 1;
+
+#ifdef NS_PRINTING
+  unsigned mClosingWhilePrinting : 1;
 
 #if NS_PRINT_PREVIEW
-  unsigned                         mPrintPreviewZoomed : 1;
+  unsigned mPrintPreviewZoomed : 1;
 
   // These data members support delayed printing when the document is loading
-  unsigned                         mPrintIsPending : 1;
-  unsigned                         mPrintDocIsFullyLoaded : 1;
-  nsCOMPtr<nsIPrintSettings>       mCachedPrintSettings;
+  unsigned mPrintIsPending : 1;
+  unsigned mPrintDocIsFullyLoaded : 1;
+  nsCOMPtr<nsIPrintSettings> mCachedPrintSettings;
   nsCOMPtr<nsIWebProgressListener> mCachedPrintWebProgressListner;
 
-  nsCOMPtr<nsPrintEngine>          mPrintEngine;
-  float                            mOriginalPrintPreviewScale;
-  float                            mPrintPreviewZoom;
+  nsCOMPtr<nsPrintEngine> mPrintEngine;
+  float mOriginalPrintPreviewScale;
+  float mPrintPreviewZoom;
 #endif // NS_PRINT_PREVIEW
 
 #ifdef NS_DEBUG
@@ -496,7 +495,7 @@
   nsCString mDefaultCharacterSet;
   nsCString mForceCharacterSet;
   nsCString mPrevDocCharacterSet;
-  
+
   bool mIsPageMode;
   bool mCallerIsClosingWindow;
   bool mInitializedForPrintPreview;
@@ -507,9 +506,9 @@
 // DocumentViewerImpl
 //------------------------------------------------------------------
 // Class IDs
-static NS_DEFINE_CID(kViewManagerCID,       NS_VIEW_MANAGER_CID);
-static NS_DEFINE_CID(kWidgetCID,            NS_CHILD_CID);
-static NS_DEFINE_CID(kDeviceContextCID,     NS_DEVICE_CONTEXT_CID);
+static NS_DEFINE_CID(kViewManagerCID, NS_VIEW_MANAGER_CID);
+static NS_DEFINE_CID(kWidgetCID, NS_CHILD_CID);
+static NS_DEFINE_CID(kDeviceContextCID, NS_DEVICE_CONTEXT_CID);
 
 //------------------------------------------------------------------
 nsresult
@@ -527,16 +526,16 @@
 
 void DocumentViewerImpl::PrepareToStartLoad()
 {
-  mStopped          = false;
-  mLoaded           = false;
+  mStopped = false;
+  mLoaded = false;
   mAttachedToParent = false;
   mDeferredWindowClose = false;
   mCallerIsClosingWindow = false;
 
 #ifdef NS_PRINTING
-  mPrintIsPending        = false;
+  mPrintIsPending = false;
   mPrintDocIsFullyLoaded = false;
-  mClosingWhilePrinting  = false;
+  mClosingWhilePrinting = false;
 
   // Make sure we have destroyed it and cleared the data member
   if (mPrintEngine) {
@@ -556,14 +555,15 @@
 
 // Note: operator new zeros our memory, so no need to init things to null.
 DocumentViewerImpl::DocumentViewerImpl()
-  : mTextZoom(1.0), mPageZoom(1.0),
-    mIsSticky(true),
-#ifdef NS_PRINT_PREVIEW
-    mPrintPreviewZoom(1.0),
-#endif
-    mHintCharsetSource(kCharsetUninitialized),
-    mInitializedForPrintPreview(false),
-    mHidden(false)
+  : mTextZoom(1.0)
+  , mPageZoom(1.0)
+  , mIsSticky(true)
+#ifdef NS_PRINT_PREVIEW
+  , mPrintPreviewZoom(1.0)
+#endif
+  , mHintCharsetSource(kCharsetUninitialized)
+  , mInitializedForPrintPreview(false)
+  , mHidden(false)
 {
   PrepareToStartLoad();
 }
@@ -572,15 +572,15 @@
 NS_IMPL_RELEASE(DocumentViewerImpl)
 
 NS_INTERFACE_MAP_BEGIN(DocumentViewerImpl)
-    NS_INTERFACE_MAP_ENTRY(nsIContentViewer)
-    NS_INTERFACE_MAP_ENTRY(nsIDocumentViewer)
-    NS_INTERFACE_MAP_ENTRY(nsIMarkupDocumentViewer)
-    NS_INTERFACE_MAP_ENTRY(nsIContentViewerFile)
-    NS_INTERFACE_MAP_ENTRY(nsIContentViewerEdit)
-    NS_INTERFACE_MAP_ENTRY(nsIDocumentViewerPrint)
-    NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIContentViewer)
-#ifdef NS_PRINTING
-    NS_INTERFACE_MAP_ENTRY(nsIWebBrowserPrint)
+  NS_INTERFACE_MAP_ENTRY(nsIContentViewer)
+  NS_INTERFACE_MAP_ENTRY(nsIDocumentViewer)
+  NS_INTERFACE_MAP_ENTRY(nsIMarkupDocumentViewer)
+  NS_INTERFACE_MAP_ENTRY(nsIContentViewerFile)
+  NS_INTERFACE_MAP_ENTRY(nsIContentViewerEdit)
+  NS_INTERFACE_MAP_ENTRY(nsIDocumentViewerPrint)
+  NS_INTERFACE_MAP_ENTRY_AMBIGUOUS(nsISupports, nsIContentViewer)
+#ifdef NS_PRINTING
+  NS_INTERFACE_MAP_ENTRY(nsIWebBrowserPrint)
 #endif
 NS_INTERFACE_MAP_END
 
@@ -876,7 +876,7 @@
       }
       NS_ENSURE_TRUE(mPresContext, NS_ERROR_OUT_OF_MEMORY);
 
-      nsresult rv = mPresContext->Init(mDeviceContext); 
+      nsresult rv = mPresContext->Init(mDeviceContext);
       if (NS_FAILED(rv)) {
         mPresContext = nullptr;
         return rv;
@@ -1094,10 +1094,10 @@
 #ifdef NS_PRINTING
   // Check to see if someone tried to print during the load
   if (mPrintIsPending) {
-    mPrintIsPending        = false;
+    mPrintIsPending = false;
     mPrintDocIsFullyLoaded = true;
     Print(mCachedPrintSettings, mCachedPrintWebProgressListner);
-    mCachedPrintSettings           = nullptr;
+    mCachedPrintSettings = nullptr;
     mCachedPrintWebProgressListner = nullptr;
   }
 #endif
@@ -1200,7 +1200,7 @@
         msg = preMsg + NS_LITERAL_STRING("\n\n") +
               StringHead(text, len) +
               NS_LITERAL_STRING("\n\n") + postMsg;
-      } 
+      }
 
       // This doesn't pass a title, which makes the title be
       // "Confirm", is that ok, or do we want a localizable title for
@@ -1382,7 +1382,7 @@
       AttachContainerRecurse(nsCOMPtr<nsIDocShell>(do_QueryInterface(item)));
     }
   }
-  
+
   SyncParentSubDocMap();
 
   if (mFocusListener && mDocument) {
@@ -1569,7 +1569,7 @@
   NS_ASSERTION(mDocument, "No document in Destroy()!");
 
 #ifdef NS_PRINTING
-  // Here is where we check to see if the document was still being prepared 
+  // Here is where we check to see if the document was still being prepared
   // for printing when it was asked to be destroy from someone externally
   // This usually happens if the document is unloaded while the user is in the
   // Print Dialog
@@ -2074,7 +2074,7 @@
 
   // Clear weak refs
   mPresContext->SetContainer(nullptr);
-  mPresContext->SetLinkHandler(nullptr);                             
+  mPresContext->SetLinkHandler(nullptr);
 
   mPresContext   = nullptr;
   mViewManager   = nullptr;
@@ -2151,9 +2151,9 @@
   }
 
   styleSet->BeginUpdate();
-  
+
   // The document will fill in the document sheets when we create the presshell
-  
+
   // Handle the user sheets.
 #ifdef DEBUG
   nsCOMPtr<nsISupports> debugDocContainer = aDocument->GetContainer();
@@ -2386,7 +2386,7 @@
   if (pwin) {
     containerElement = do_QueryInterface(pwin->GetFrameElementInternal());
   }
-        
+
   if (mParentWidget) {
     containerView = nsIView::GetViewFor(mParentWidget);
   } else {
@@ -2462,7 +2462,7 @@
   NS_PRECONDITION(!mPresShell && !mWindow,
                   "This will screw up our existing presentation");
   NS_PRECONDITION(mDocument, "Gotta have a document here");
-  
+
   nsIDocument* doc = mDocument->GetDisplayDocument();
   if (doc) {
     NS_ASSERTION(!aContainerView, "External resource document embedded somewhere?");
@@ -2476,7 +2476,7 @@
       }
     }
   }
-  
+
   // Create a device context even if we already have one, since our widget
   // might have changed.
   mDeviceContext = do_CreateInstance(kDeviceContextCID);
@@ -2525,7 +2525,9 @@
 
   // use nsCopySupport::GetSelectionForCopy() ?
   rv = GetDocumentSelection(getter_AddRefs(selection));
-  if (NS_FAILED(rv)) return rv;
+  if (NS_FAILED(rv)) {
+    return rv;
+  }
 
   return selection->CollapseToStart();
 }
@@ -2540,30 +2542,34 @@
 
   // use nsCopySupport::GetSelectionForCopy() ?
   rv = GetDocumentSelection(getter_AddRefs(selection));
-  if (NS_FAILED(rv)) return rv;
+  if (NS_FAILED(rv)) {
+    return rv;
+  }
 
   nsCOMPtr<nsIDOMHTMLDocument> htmldoc = do_QueryInterface(mDocument);
   nsCOMPtr<nsIDOMNode> bodyNode;
 
-  if (htmldoc)
-  {
+  if (htmldoc) {
     nsCOMPtr<nsIDOMHTMLElement>bodyElement;
     rv = htmldoc->GetBody(getter_AddRefs(bodyElement));
-    if (NS_FAILED(rv) || !bodyElement) return rv;
+    if (NS_FAILED(rv) || !bodyElement) {
+      return rv;
+    }
 
     bodyNode = do_QueryInterface(bodyElement);
-  }
-  else if (mDocument)
-  {
+  } else if (mDocument) {
     bodyNode = do_QueryInterface(mDocument->GetRootElement());
   }
-  if (!bodyNode) return NS_ERROR_FAILURE;
+  if (!bodyNode) {
+    return NS_ERROR_FAILURE;
+  }
 
   rv = selection->RemoveAllRanges();
-  if (NS_FAILED(rv)) return rv;
-
-  rv = selection->SelectAllChildren(bodyNode);
-  return rv;
+  if (NS_FAILED(rv)) {
+    return rv;
+  }
+
+  return selection->SelectAllChildren(bodyNode);
 }
 
 NS_IMETHODIMP DocumentViewerImpl::CopySelection()
@@ -2623,7 +2629,7 @@
   if (selectionOnly) {
     nsCopySupport::GetSelectionForCopy(mDocument, getter_AddRefs(sel));
     NS_ENSURE_TRUE(sel, NS_ERROR_FAILURE);
-  
+
     bool isCollapsed;
     sel->GetIsCollapsed(&isCollapsed);
     if (isCollapsed)
@@ -2657,8 +2663,8 @@
  *	@update 01/24/00 dwc
  */
 NS_IMETHODIMP
-DocumentViewerImpl::Print(bool              aSilent,
-                          FILE *            aDebugFile,
+DocumentViewerImpl::Print(bool aSilent,
+                          FILE* aDebugFile,
                           nsIPrintSettings* aPrintSettings)
 {
 #ifdef NS_PRINTING
@@ -2671,16 +2677,22 @@
   // if they don't pass in a PrintSettings, then make one
   // it will have all the default values
   printSettings = aPrintSettings;
-  nsCOMPtr<nsIPrintOptions> printOptions = do_GetService(sPrintOptionsContractID, &rv);
+  nsCOMPtr<nsIPrintOptions> printOptions =
+    do_GetService(sPrintOptionsContractID, &rv);
   if (NS_SUCCEEDED(rv)) {
     // if they don't pass in a PrintSettings, then make one
     if (printSettings == nullptr) {
       printOptions->CreatePrintSettings(getter_AddRefs(printSettings));
     }
-    NS_ASSERTION(printSettings, "You can't PrintPreview without a PrintSettings!");
-  }
-  if (printSettings) printSettings->SetPrintSilent(aSilent);
-  if (printSettings) printSettings->SetShowPrintProgress(false);
+    NS_ASSERTION(printSettings,
+                 "You can't PrintPreview without a PrintSettings!");
+  }
+  if (printSettings) {
+    printSettings->SetPrintSilent(aSilent);
+  }
+  if (printSettings) {
+    printSettings->SetShowPrintProgress(false);
+  }
 #endif
 
 
@@ -2691,8 +2703,10 @@
 }
 
 /* [noscript] void printWithParent (in nsIDOMWindowInternal aParentWin, in nsIPrintSettings aThePrintSettings, in nsIWebProgressListener aWPListener); */
-NS_IMETHODIMP 
-DocumentViewerImpl::PrintWithParent(nsIDOMWindowInternal *aParentWin, nsIPrintSettings *aThePrintSettings, nsIWebProgressListener *aWPListener)
+NS_IMETHODIMP
+DocumentViewerImpl::PrintWithParent(nsIDOMWindowInternal* aParentWin,
+                                    nsIPrintSettings* aThePrintSettings,
+                                    nsIWebProgressListener* aWPListener)
 {
 #ifdef NS_PRINTING
   return Print(aThePrintSettings, aWPListener);
@@ -2718,23 +2732,24 @@
 
 NS_IMETHODIMP DocumentViewerImpl::ScrollToNode(nsIDOMNode* aNode)
 {
-   NS_ENSURE_ARG(aNode);
-   NS_ENSURE_TRUE(mDocument, NS_ERROR_NOT_AVAILABLE);
-   nsCOMPtr<nsIPresShell> presShell;
-   NS_ENSURE_SUCCESS(GetPresShell(getter_AddRefs(presShell)), NS_ERROR_FAILURE);
-
-   // Get the nsIContent interface, because that's what we need to
-   // get the primary frame
-
-   nsCOMPtr<nsIContent> content(do_QueryInterface(aNode));
-   NS_ENSURE_TRUE(content, NS_ERROR_FAILURE);
-
-   // Tell the PresShell to scroll to the primary frame of the content.
-   NS_ENSURE_SUCCESS(presShell->ScrollContentIntoView(content,
-                                                      NS_PRESSHELL_SCROLL_TOP,
-                                                      NS_PRESSHELL_SCROLL_ANYWHERE),
-                     NS_ERROR_FAILURE);
-   return NS_OK;
+  NS_ENSURE_ARG(aNode);
+  NS_ENSURE_TRUE(mDocument, NS_ERROR_NOT_AVAILABLE);
+  nsCOMPtr<nsIPresShell> presShell;
+  NS_ENSURE_SUCCESS(GetPresShell(getter_AddRefs(presShell)), NS_ERROR_FAILURE);
+
+  // Get the nsIContent interface, because that's what we need to
+  // get the primary frame
+
+  nsCOMPtr<nsIContent> content(do_QueryInterface(aNode));
+  NS_ENSURE_TRUE(content, NS_ERROR_FAILURE);
+
+  // Tell the PresShell to scroll to the primary frame of the content.
+  NS_ENSURE_SUCCESS(
+    presShell->ScrollContentIntoView(content,
+                                     NS_PRESSHELL_SCROLL_TOP,
+                                     NS_PRESSHELL_SCROLL_ANYWHERE),
+    NS_ERROR_FAILURE);
+  return NS_OK;
 }
 
 void
@@ -2829,7 +2844,7 @@
   mTextZoom = aTextZoom;
 
   nsIViewManager::UpdateViewBatch batch(GetViewManager());
-      
+
   // Set the text zoom on all children of mContainer (even if our zoom didn't
   // change, our children's zoom may be different, though it would be unusual).
   // Do this first, in case kids are auto-sizing and post reflow commands on
@@ -2847,7 +2862,7 @@
   mDocument->EnumerateExternalResources(SetExtResourceTextZoom, &ZoomInfo);
 
   batch.EndUpdateViewBatch(NS_VMREFRESH_NO_SYNC);
-  
+
   return NS_OK;
 }
 
@@ -2934,7 +2949,7 @@
 static void
 SetChildAuthorStyleDisabled(nsIMarkupDocumentViewer* aChild, void* aClosure)
 {
-  bool styleDisabled  = *static_cast<bool*>(aClosure);
+  bool styleDisabled = *static_cast<bool*>(aClosure);
   aChild->SetAuthorStyleDisabled(styleDisabled);
 }
 
@@ -2963,8 +2978,7 @@
 NS_IMETHODIMP
 DocumentViewerImpl::GetDefaultCharacterSet(nsACString& aDefaultCharacterSet)
 {
-  if (mDefaultCharacterSet.IsEmpty())
-  {
+  if (mDefaultCharacterSet.IsEmpty()) {
     const nsAdoptingString& defCharset =
       nsContentUtils::GetLocalizedStringPref("intl.charset.default");
 
@@ -2996,7 +3010,8 @@
 // XXX: SEMANTIC CHANGE!
 //      returns a copy of the string.  Caller is responsible for freeing result
 //      using Recycle(aForceCharacterSet)
-NS_IMETHODIMP DocumentViewerImpl::GetForceCharacterSet(nsACString& aForceCharacterSet)
+NS_IMETHODIMP
+DocumentViewerImpl::GetForceCharacterSet(nsACString& aForceCharacterSet)
 {
   aForceCharacterSet = mForceCharacterSet;
   return NS_OK;
@@ -3021,7 +3036,8 @@
 // XXX: SEMANTIC CHANGE!
 //      returns a copy of the string.  Caller is responsible for freeing result
 //      using Recycle(aHintCharacterSet)
-NS_IMETHODIMP DocumentViewerImpl::GetHintCharacterSet(nsACString& aHintCharacterSet)
+NS_IMETHODIMP
+DocumentViewerImpl::GetHintCharacterSet(nsACString& aHintCharacterSet)
 {
 
   if(kCharsetUninitialized == mHintCharsetSource) {
@@ -3061,7 +3077,7 @@
 NS_IMETHODIMP
 DocumentViewerImpl::SetPrevDocCharacterSet(const nsACString& aPrevDocCharacterSet)
 {
-  mPrevDocCharacterSet = aPrevDocCharacterSet;  
+  mPrevDocCharacterSet = aPrevDocCharacterSet;
   CallChildren(SetChildPrevDocCharacterSet, (void*) &aPrevDocCharacterSet);
   return NS_OK;
 }
@@ -3079,7 +3095,7 @@
   mHintCharsetSource = aHintCharacterSetSource;
   // now set the hint char set source on all children of mContainer
   CallChildren(SetChildHintCharacterSetSource,
-                      (void*) aHintCharacterSetSource);
+               (void*) aHintCharacterSetSource);
   return NS_OK;
 }
 
@@ -3239,7 +3255,7 @@
    // Skip doing this on docshell-less documents for now
    nsCOMPtr<nsIDocShellTreeItem> docShellAsItem(do_QueryReferent(mContainer));
    NS_ENSURE_TRUE(docShellAsItem, NS_ERROR_NOT_AVAILABLE);
-   
+
    nsCOMPtr<nsIDocShellTreeItem> docShellParent;
    docShellAsItem->GetSameTypeParent(getter_AddRefs(docShellParent));
 
@@ -3269,44 +3285,45 @@
   nsresult rv = presShell->ResizeReflow(prefWidth, NS_UNCONSTRAINEDSIZE);
   NS_ENSURE_SUCCESS(rv, rv);
 
-   nsRefPtr<nsPresContext> presContext;
-   GetPresContext(getter_AddRefs(presContext));
-   NS_ENSURE_TRUE(presContext, NS_ERROR_FAILURE);
-
-   int32_t width, height;
-
-   // so how big is it?
-   nsRect shellArea = presContext->GetVisibleArea();
-   // Protect against bogus returns here
-   NS_ENSURE_TRUE(shellArea.width != NS_UNCONSTRAINEDSIZE &&
-                  shellArea.height != NS_UNCONSTRAINEDSIZE,
-                  NS_ERROR_FAILURE);
-   width = presContext->AppUnitsToDevPixels(shellArea.width);
-   height = presContext->AppUnitsToDevPixels(shellArea.height);
-
-   nsCOMPtr<nsIDocShellTreeOwner> treeOwner;
-   docShellAsItem->GetTreeOwner(getter_AddRefs(treeOwner));
-   NS_ENSURE_TRUE(treeOwner, NS_ERROR_FAILURE);
-
-   /* presContext's size was calculated in app units and has already been
-      rounded to the equivalent pixels (so the width/height calculation
-      we just performed was probably exact, though it was based on
-      values already rounded during ResizeReflow). In a surprising
-      number of instances, this rounding makes a window which for want
-      of one extra pixel's width ends up wrapping the longest line of
-      text during actual window layout. This makes the window too short,
-      generally clipping the OK/Cancel buttons. Here we add one pixel
-      to the calculated width, to circumvent this problem. */
-   NS_ENSURE_SUCCESS(treeOwner->SizeShellTo(docShellAsItem, width+1, height),
-      NS_ERROR_FAILURE);
-
-   return NS_OK;
+  nsRefPtr<nsPresContext> presContext;
+  GetPresContext(getter_AddRefs(presContext));
+  NS_ENSURE_TRUE(presContext, NS_ERROR_FAILURE);
+
+  int32_t width, height;
+
+  // so how big is it?
+  nsRect shellArea = presContext->GetVisibleArea();
+  // Protect against bogus returns here
+  NS_ENSURE_TRUE(shellArea.width != NS_UNCONSTRAINEDSIZE &&
+                 shellArea.height != NS_UNCONSTRAINEDSIZE,
+                 NS_ERROR_FAILURE);
+  width = presContext->AppUnitsToDevPixels(shellArea.width);
+  height = presContext->AppUnitsToDevPixels(shellArea.height);
+
+  nsCOMPtr<nsIDocShellTreeOwner> treeOwner;
+  docShellAsItem->GetTreeOwner(getter_AddRefs(treeOwner));
+  NS_ENSURE_TRUE(treeOwner, NS_ERROR_FAILURE);
+
+  /* presContext's size was calculated in app units and has already been
+     rounded to the equivalent pixels (so the width/height calculation
+     we just performed was probably exact, though it was based on
+     values already rounded during ResizeReflow). In a surprising
+     number of instances, this rounding makes a window which for want
+     of one extra pixel's width ends up wrapping the longest line of
+     text during actual window layout. This makes the window too short,
+     generally clipping the OK/Cancel buttons. Here we add one pixel
+     to the calculated width, to circumvent this problem. */
+  NS_ENSURE_SUCCESS(treeOwner->SizeShellTo(docShellAsItem, width+1, height),
+                    NS_ERROR_FAILURE);
+
+  return NS_OK;
 }
 
 
 NS_IMPL_ISUPPORTS1(nsDocViewerSelectionListener, nsISelectionListener)
 
-nsresult nsDocViewerSelectionListener::Init(DocumentViewerImpl *aDocViewer)
+nsresult
+nsDocViewerSelectionListener::Init(DocumentViewerImpl *aDocViewer)
 {
   mDocViewer = aDocViewer;
   return NS_OK;
@@ -3360,7 +3377,6 @@
 
   // find out if we have a link in our ancestry
   while (node) {
-
     // are we an anchor?
     nsCOMPtr<nsIDOMHTMLAnchorElement> anchor(do_QueryInterface(node));
     nsCOMPtr<nsIDOMHTMLAreaElement> area;
@@ -3376,7 +3392,10 @@
           // XLink?
           nsCOMPtr<nsIDOMElement> element(do_QueryInterface(node));
           if (element) {
-            element->GetAttributeNS(NS_LITERAL_STRING("http://www.w3.org/1999/xlink"),NS_LITERAL_STRING("type"),xlinkType);
+            element->GetAttributeNS(
+              NS_LITERAL_STRING("http://www.w3.org/1999/xlink"),
+              NS_LITERAL_STRING("type"),
+              xlinkType);
           }
         }
       }
@@ -3443,7 +3462,9 @@
   // get the popup link
   nsCOMPtr<nsIDOMNode> node;
   nsresult rv = GetPopupLinkNode(getter_AddRefs(node));
-  if (NS_FAILED(rv)) return rv;
+  if (NS_FAILED(rv)) {
+    return rv;
+  }
   NS_ENSURE_TRUE(node, NS_ERROR_FAILURE);
 
   // if we made it here, we're in a link
@@ -3465,7 +3486,9 @@
   // get the popup image
   nsCOMPtr<nsIImageLoadingContent> node;
   nsresult rv = GetPopupImageNode(getter_AddRefs(node));
-  if (NS_FAILED(rv)) return rv;
+  if (NS_FAILED(rv)) {
+    return rv;
+  }
   NS_ENSURE_TRUE(node, NS_ERROR_FAILURE);
 
   // if we made it here, we're in an image
@@ -3480,20 +3503,25 @@
   // get the selection state
   nsCOMPtr<nsISelection> selection;
   nsresult rv = mDocViewer->GetDocumentSelection(getter_AddRefs(selection));
-  if (NS_FAILED(rv)) return rv;
+  if (NS_FAILED(rv)) {
+    return rv;
+  }
 
   bool selectionCollapsed;
   selection->GetIsCollapsed(&selectionCollapsed);
   // we only call UpdateCommands when the selection changes from collapsed
   // to non-collapsed or vice versa. We might need another update string
   // for simple selection changes, but that would be expenseive.
-  if (!mGotSelectionState || mSelectionWasCollapsed != selectionCollapsed)
-  {
+  if (!mGotSelectionState || mSelectionWasCollapsed != selectionCollapsed) {
     nsIDocument* theDoc = mDocViewer->GetDocument();
-    if (!theDoc) return NS_ERROR_FAILURE;
+    if (!theDoc) {
+      return NS_ERROR_FAILURE;
+    }
 
     nsPIDOMWindow *domWindow = theDoc->GetWindow();
-    if (!domWindow) return NS_ERROR_FAILURE;
+    if (!domWindow) {
+      return NS_ERROR_FAILURE;
+    }
 
     domWindow->UpdateCommands(NS_LITERAL_STRING("select"));
     mGotSelectionState = true;
@@ -3509,11 +3537,13 @@
                    nsIDOMEventListener)
 
 nsDocViewerFocusListener::nsDocViewerFocusListener()
-:mDocViewer(nullptr)
-{
-}
-
-nsDocViewerFocusListener::~nsDocViewerFocusListener(){}
+  : mDocViewer(nullptr)
+{
+}
+
+nsDocViewerFocusListener::~nsDocViewerFocusListener()
+{
+}
 
 nsresult
 nsDocViewerFocusListener::HandleEvent(nsIDOMEvent* aEvent)
@@ -3525,25 +3555,29 @@
 nsDocViewerFocusListener::Focus(nsIDOMEvent* aEvent)
 {
   nsCOMPtr<nsIPresShell> shell;
-  if(!mDocViewer)
-    return NS_ERROR_FAILURE;
-
-  nsresult result = mDocViewer->GetPresShell(getter_AddRefs(shell));
-  if(NS_FAILED(result) || !shell)
-    return result?result:NS_ERROR_FAILURE;
+  if (!mDocViewer) {
+    return NS_ERROR_FAILURE;
+  }
+
+  nsresult rv = mDocViewer->GetPresShell(getter_AddRefs(shell));
+  if (NS_FAILED(rv)) {
+    return rv;
+  }
+  if (!shell) {
+    return NS_ERROR_FAILURE;
+  }
   nsCOMPtr<nsISelectionController> selCon;
   selCon = do_QueryInterface(shell);
   int16_t selectionStatus;
   selCon->GetDisplaySelection(&selectionStatus);
 
   // If selection was disabled, re-enable it.
-  if(selectionStatus == nsISelectionController::SELECTION_DISABLED ||
-     selectionStatus == nsISelectionController::SELECTION_HIDDEN)
-  {
+  if (selectionStatus == nsISelectionController::SELECTION_DISABLED ||
+      selectionStatus == nsISelectionController::SELECTION_HIDDEN) {
     selCon->SetDisplaySelection(nsISelectionController::SELECTION_ON);
     selCon->RepaintSelection(nsISelectionController::SELECTION_NORMAL);
   }
-  return result;
+  return rv;
 }
 
 NS_IMETHODIMP
@@ -3553,22 +3587,25 @@
   if(!mDocViewer)
     return NS_ERROR_FAILURE;
 
-  nsresult result = mDocViewer->GetPresShell(getter_AddRefs(shell));
-  if(NS_FAILED(result) || !shell)
-    return result?result:NS_ERROR_FAILURE;
+  nsresult rv = mDocViewer->GetPresShell(getter_AddRefs(shell));
+  if (NS_FAILED(rv)) {
+    return rv;
+  }
+  if (!shell) {
+    return NS_ERROR_FAILURE;
+  }
   nsCOMPtr<nsISelectionController> selCon;
   selCon = do_QueryInterface(shell);
   int16_t selectionStatus;
   selCon->GetDisplaySelection(&selectionStatus);
 
   // If selection was on, disable it.
-  if(selectionStatus == nsISelectionController::SELECTION_ON ||
-     selectionStatus == nsISelectionController::SELECTION_ATTENTION)
-  {
+  if (selectionStatus == nsISelectionController::SELECTION_ON ||
+      selectionStatus == nsISelectionController::SELECTION_ATTENTION) {
     selCon->SetDisplaySelection(nsISelectionController::SELECTION_DISABLED);
     selCon->RepaintSelection(nsISelectionController::SELECTION_NORMAL);
   }
-  return result;
+  return rv;
 }
 
 
@@ -3586,7 +3623,7 @@
 #ifdef NS_PRINTING
 
 NS_IMETHODIMP
-DocumentViewerImpl::Print(nsIPrintSettings*       aPrintSettings,
+DocumentViewerImpl::Print(nsIPrintSettings* aPrintSettings,
                           nsIWebProgressListener* aWebProgressListener)
 {
 
@@ -3612,12 +3649,13 @@
   // Indicate there is a print pending and cache the args for later
   uint32_t busyFlags = nsIDocShell::BUSY_FLAGS_NONE;
   if ((NS_FAILED(docShell->GetBusyFlags(&busyFlags)) ||
-       (busyFlags != nsIDocShell::BUSY_FLAGS_NONE && busyFlags & nsIDocShell::BUSY_FLAGS_PAGE_LOADING)) && 
+       (busyFlags != nsIDocShell::BUSY_FLAGS_NONE &&
+        busyFlags & nsIDocShell::BUSY_FLAGS_PAGE_LOADING)) &&
       !mPrintDocIsFullyLoaded) {
     if (!mPrintIsPending) {
-      mCachedPrintSettings           = aPrintSettings;
+      mCachedPrintSettings = aPrintSettings;
       mCachedPrintWebProgressListner = aWebProgressListener;
-      mPrintIsPending                = true;
+      mPrintIsPending = true;
     }
     PR_PL(("Printing Stopped - document is still busy!"));
     return NS_ERROR_GFX_PRINTER_DOC_IS_BUSY;
@@ -3653,7 +3691,7 @@
     mPrintEngine = new nsPrintEngine();
     NS_ENSURE_TRUE(mPrintEngine, NS_ERROR_OUT_OF_MEMORY);
 
-    rv = mPrintEngine->Initialize(this, docShell, mDocument, 
+    rv = mPrintEngine->Initialize(this, docShell, mDocument,
                                   float(mDeviceContext->AppUnitsPerInch()) /
                                   float(mDeviceContext->AppUnitsPerDevPixel()) /
                                   mPageZoom,
@@ -3679,8 +3717,8 @@
 }
 
 NS_IMETHODIMP
-DocumentViewerImpl::PrintPreview(nsIPrintSettings* aPrintSettings, 
-                                 nsIDOMWindow *aChildDOMWin, 
+DocumentViewerImpl::PrintPreview(nsIPrintSettings* aPrintSettings,
+                                 nsIDOMWindow *aChildDOMWin,
                                  nsIWebProgressListener* aWebProgressListener)
 {
 #if defined(NS_PRINTING) && defined(NS_PRINT_PREVIEW)
@@ -3707,7 +3745,7 @@
 
   nsCOMPtr<nsIDocShell> docShell(do_QueryReferent(mContainer));
   NS_ASSERTION(docShell, "This has to be a docshell");
-  if (!docShell ||! mDeviceContext || !mParentWidget) {
+  if (!docShell || !mDeviceContext || !mParentWidget) {
     PR_PL(("Can't Print Preview without device context, docshell etc"));
     return NS_ERROR_FAILURE;
   }
@@ -3739,7 +3777,9 @@
     }
   }
 
-  rv = mPrintEngine->PrintPreview(aPrintSettings, aChildDOMWin, aWebProgressListener);
+  rv = mPrintEngine->PrintPreview(aPrintSettings,
+                                  aChildDOMWin,
+                                  aWebProgressListener);
   mPrintPreviewZoomed = false;
   if (NS_FAILED(rv)) {
     OnDonePrinting();
@@ -3765,15 +3805,16 @@
 
   // Check to see if we can short circut scrolling to the top
   if (aType == nsIWebBrowserPrint::PRINTPREVIEW_HOME ||
-      (aType == nsIWebBrowserPrint::PRINTPREVIEW_GOTO_PAGENUM && aPageNum == 1)) {
+      (aType == nsIWebBrowserPrint::PRINTPREVIEW_GOTO_PAGENUM &&
+       aPageNum == 1)) {
     sf->ScrollTo(nsPoint(0, 0), nsIScrollableFrame::INSTANT);
     return NS_OK;
   }
 
   // Finds the SimplePageSequencer frame
   // in PP mPrtPreview->mPrintObject->mSeqFrame is null
-  nsIFrame* seqFrame  = nullptr;
-  int32_t   pageCount = 0;
+  nsIFrame* seqFrame = nullptr;
+  int32_t pageCount = 0;
   if (NS_FAILED(mPrintEngine->GetSeqFrameAndCountPages(seqFrame, pageCount))) {
     return NS_ERROR_FAILURE;
   }
@@ -3781,13 +3822,13 @@
   // Figure where we are currently scrolled to
   nsPoint pt = sf->GetScrollPosition();
 
-  int32_t    pageNum = 1;
-  nsIFrame * fndPageFrame  = nullptr;
-  nsIFrame * currentPage   = nullptr;
+  int32_t pageNum = 1;
+  nsIFrame* fndPageFrame = nullptr;
+  nsIFrame* currentPage = nullptr;
 
   // If it is "End" then just do a "goto" to the last page
   if (aType == nsIWebBrowserPrint::PRINTPREVIEW_END) {
-    aType    = nsIWebBrowserPrint::PRINTPREVIEW_GOTO_PAGENUM;
+    aType = nsIWebBrowserPrint::PRINTPREVIEW_GOTO_PAGENUM;
     aPageNum = pageCount;
   }
 
@@ -3837,7 +3878,7 @@
 
   if (fndPageFrame) {
     nscoord deadSpaceGapTwips = 0;
-    nsIPageSequenceFrame * sqf = do_QueryFrame(seqFrame);
+    nsIPageSequenceFrame* sqf = do_QueryFrame(seqFrame);
     if (sqf) {
       sqf->GetDeadSpaceValue(&deadSpaceGapTwips);
     }
@@ -3845,11 +3886,11 @@
     // To compute deadSpaceGap, use the same presContext as was used
     // to layout the seqFrame. (That presContext may have different
     // TwipsToAppUnits conversion from this->mPresContext)
-    nscoord deadSpaceGap = 
+    nscoord deadSpaceGap =
       seqFrame->PresContext()->TwipsToAppUnits(deadSpaceGapTwips);
 
-    nscoord newYPosn = 
-      nscoord(mPrintEngine->GetPrintPreviewScale() * 
+    nscoord newYPosn =
+      nscoord(mPrintEngine->GetPrintPreviewScale() *
               float(fndPageFrame->GetPosition().y - deadSpaceGap));
     sf->ScrollTo(nsPoint(pt.x, newYPosn), nsIScrollableFrame::INSTANT);
   }
@@ -3859,7 +3900,7 @@
 
 /* readonly attribute nsIPrintSettings globalPrintSettings; */
 NS_IMETHODIMP
-DocumentViewerImpl::GetGlobalPrintSettings(nsIPrintSettings * *aGlobalPrintSettings)
+DocumentViewerImpl::GetGlobalPrintSettings(nsIPrintSettings** aGlobalPrintSettings)
 {
   return nsPrintEngine::GetGlobalPrintSettings(aGlobalPrintSettings);
 }
@@ -3867,22 +3908,22 @@
 /* readonly attribute boolean doingPrint; */
 // XXX This always returns false for subdocuments
 NS_IMETHODIMP
-DocumentViewerImpl::GetDoingPrint(bool *aDoingPrint)
+DocumentViewerImpl::GetDoingPrint(bool* aDoingPrint)
 {
   NS_ENSURE_ARG_POINTER(aDoingPrint);
-  
+
   *aDoingPrint = false;
   if (mPrintEngine) {
     // XXX shouldn't this be GetDoingPrint() ?
     return mPrintEngine->GetDoingPrintPreview(aDoingPrint);
-  } 
+  }
   return NS_OK;
 }
 
 /* readonly attribute boolean doingPrintPreview; */
 // XXX This always returns false for subdocuments
 NS_IMETHODIMP
-DocumentViewerImpl::GetDoingPrintPreview(bool *aDoingPrintPreview)
+DocumentViewerImpl::GetDoingPrintPreview(bool* aDoingPrintPreview)
 {
   NS_ENSURE_ARG_POINTER(aDoingPrintPreview);
 
@@ -3895,7 +3936,7 @@
 
 /* readonly attribute nsIPrintSettings currentPrintSettings; */
 NS_IMETHODIMP
-DocumentViewerImpl::GetCurrentPrintSettings(nsIPrintSettings * *aCurrentPrintSettings)
+DocumentViewerImpl::GetCurrentPrintSettings(nsIPrintSettings** aCurrentPrintSettings)
 {
   NS_ENSURE_ARG_POINTER(aCurrentPrintSettings);
 
@@ -3907,8 +3948,8 @@
 
 
 /* readonly attribute nsIDOMWindow currentChildDOMWindow; */
-NS_IMETHODIMP 
-DocumentViewerImpl::GetCurrentChildDOMWindow(nsIDOMWindow * *aCurrentChildDOMWindow)
+NS_IMETHODIMP
+DocumentViewerImpl::GetCurrentChildDOMWindow(nsIDOMWindow** aCurrentChildDOMWindow)
 {
   NS_ENSURE_ARG_POINTER(aCurrentChildDOMWindow);
   *aCurrentChildDOMWindow = nullptr;
@@ -3957,8 +3998,8 @@
 }
 
 /* readonly attribute boolean isFramesetFrameSelected; */
-NS_IMETHODIMP 
-DocumentViewerImpl::GetIsFramesetFrameSelected(bool *aIsFramesetFrameSelected)
+NS_IMETHODIMP
+DocumentViewerImpl::GetIsFramesetFrameSelected(bool* aIsFramesetFrameSelected)
 {
 #ifdef NS_PRINTING
   *aIsFramesetFrameSelected = false;
@@ -3972,7 +4013,7 @@
 
 /* readonly attribute long printPreviewNumPages; */
 NS_IMETHODIMP
-DocumentViewerImpl::GetPrintPreviewNumPages(int32_t *aPrintPreviewNumPages)
+DocumentViewerImpl::GetPrintPreviewNumPages(int32_t* aPrintPreviewNumPages)
 {
 #ifdef NS_PRINTING
   NS_ENSURE_ARG_POINTER(aPrintPreviewNumPages);
@@ -3986,7 +4027,7 @@
 
 /* readonly attribute boolean isFramesetDocument; */
 NS_IMETHODIMP
-DocumentViewerImpl::GetIsFramesetDocument(bool *aIsFramesetDocument)
+DocumentViewerImpl::GetIsFramesetDocument(bool* aIsFramesetDocument)
 {
 #ifdef NS_PRINTING
   *aIsFramesetDocument = false;
@@ -3999,8 +4040,8 @@
 }
 
 /* readonly attribute boolean isIFrameSelected; */
-NS_IMETHODIMP 
-DocumentViewerImpl::GetIsIFrameSelected(bool *aIsIFrameSelected)
+NS_IMETHODIMP
+DocumentViewerImpl::GetIsIFrameSelected(bool* aIsIFrameSelected)
 {
 #ifdef NS_PRINTING
   *aIsIFrameSelected = false;
@@ -4013,8 +4054,8 @@
 }
 
 /* readonly attribute boolean isRangeSelection; */
-NS_IMETHODIMP 
-DocumentViewerImpl::GetIsRangeSelection(bool *aIsRangeSelection)
+NS_IMETHODIMP
+DocumentViewerImpl::GetIsRangeSelection(bool* aIsRangeSelection)
 {
 #ifdef NS_PRINTING
   *aIsRangeSelection = false;
@@ -4032,9 +4073,9 @@
 
 //----------------------------------------------------------------------------------
 // Walks the document tree and tells each DocShell whether Printing/PP is happening
-void 
-DocumentViewerImpl::SetIsPrintingInDocShellTree(nsIDocShellTreeNode* aParentNode, 
-                                                bool                 aIsPrintingOrPP, 
+void
+DocumentViewerImpl::SetIsPrintingInDocShellTree(nsIDocShellTreeNode* aParentNode,
+                                                bool                 aIsPrintingOrPP,
                                                 bool                 aStartAtTop)
 {
   NS_ASSERTION(aParentNode, "Parent can't be NULL!");
@@ -4086,7 +4127,7 @@
     return mPrintEngine->GetIsPrinting();
   }
 #endif
-  return false; 
+  return false;
 }
 
 //------------------------------------------------------------
@@ -4121,7 +4162,7 @@
     return mPrintEngine->GetIsPrintPreview();
   }
 #endif
-  return false; 
+  return false;
 }
 
 //------------------------------------------------------------
@@ -4202,15 +4243,16 @@
   aDocShell->GetDocShellEnumerator(nsIDocShellTreeItem::typeContent,
                                    nsIDocShell::ENUMERATE_FORWARDS,
                                    getter_AddRefs(docShellEnumerator));
-  
+
   nsCOMPtr<nsISupports> currentContainer;
   bool hasMoreDocShells;
-  while (NS_SUCCEEDED(docShellEnumerator->HasMoreElements(&hasMoreDocShells))
-         && hasMoreDocShells) {
+  while (NS_SUCCEEDED(docShellEnumerator->HasMoreElements(&hasMoreDocShells)) &&
+         hasMoreDocShells) {
     docShellEnumerator->GetNext(getter_AddRefs(currentContainer));
     nsCOMPtr<nsIDOMWindow> win = do_GetInterface(currentContainer);
-    if (win)
+    if (win) {
       fm->ClearFocus(win);
+    }
   }
 }
 
@@ -4218,16 +4260,16 @@
 // This called ONLY when printing has completed and the DV
 // is being notified that it should get rid of the PrintEngine.
 //
-// BUT, if we are in Print Preview then we want to ignore the 
+// BUT, if we are in Print Preview then we want to ignore the
 // notification (we do not get rid of the PrintEngine)
-// 
-// One small caveat: 
+//
+// One small caveat:
 //   This IS called from two places in this module for cleaning
-//   up when an error occurred during the start up printing 
+//   up when an error occurred during the start up printing
 //   and print preview
 //
 void
-DocumentViewerImpl::OnDonePrinting() 
+DocumentViewerImpl::OnDonePrinting()
 {
 #if defined(NS_PRINTING) && defined(NS_PRINT_PREVIEW)
   if (mPrintEngine) {
@@ -4238,7 +4280,7 @@
       mPrintEngine = nullptr;
     }
 
-    // We are done printing, now cleanup 
+    // We are done printing, now cleanup
     if (mDeferredWindowClose) {
       mDeferredWindowClose = false;
       nsCOMPtr<nsISupports> container = do_QueryReferent(mContainer);
@@ -4257,7 +4299,9 @@
 #endif // NS_PRINTING && NS_PRINT_PREVIEW
 }
 
-NS_IMETHODIMP DocumentViewerImpl::SetPageMode(bool aPageMode, nsIPrintSettings* aPrintSettings)
+NS_IMETHODIMP
+DocumentViewerImpl::SetPageMode(bool aPageMode,
+                                nsIPrintSettings* aPrintSettings)
 {
   // XXX Page mode is only partially working; it's currently used for
   // reftests that require a paginated context
@@ -4279,7 +4323,7 @@
 
   NS_ENSURE_STATE(mDocument);
   if (aPageMode)
-  {    
+  {
     mPresContext = CreatePresContext(mDocument,
         nsPresContext::eContext_PageLayout, FindContainerView());
     NS_ENSURE_TRUE(mPresContext, NS_ERROR_OUT_OF_MEMORY);
@@ -4295,7 +4339,7 @@
 }
 
 NS_IMETHODIMP
-DocumentViewerImpl::GetHistoryEntry(nsISHEntry **aHistoryEntry)
+DocumentViewerImpl::GetHistoryEntry(nsISHEntry** aHistoryEntry)
 {
   NS_IF_ADDREF(*aHistoryEntry = mSHEntry);
   return NS_OK;
