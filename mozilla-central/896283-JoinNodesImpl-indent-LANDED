From: Ms2ger <ms2ger@gmail.com>
Bug 896283 - Part b: Reindent nsEditor::JoinNodesImpl; r=ehsan

diff --git a/editor/libeditor/base/nsEditor.cpp b/editor/libeditor/base/nsEditor.cpp
--- a/editor/libeditor/base/nsEditor.cpp
+++ b/editor/libeditor/base/nsEditor.cpp
@@ -2838,160 +2838,157 @@ nsEditor::SplitNodeImpl(nsIDOMNode * aEx
   return result;
 }
 
 nsresult
 nsEditor::JoinNodesImpl(nsIDOMNode * aNodeToKeep,
                         nsIDOMNode * aNodeToJoin,
                         nsIDOMNode * aParent)
 {
-  NS_ASSERTION(aNodeToKeep && aNodeToJoin && aParent, "null arg");
-  nsresult result = NS_OK;
-  if (aNodeToKeep && aNodeToJoin && aParent)
+  MOZ_ASSERT(aNodeToKeep);
+  MOZ_ASSERT(aNodeToJoin);
+  MOZ_ASSERT(aParent);
+
+  // get selection
+  nsCOMPtr<nsISelection> selection;
+  GetSelection(getter_AddRefs(selection));
+  NS_ENSURE_TRUE(selection, NS_ERROR_NULL_POINTER);
+
+  // remember some selection points
+  nsCOMPtr<nsIDOMNode> selStartNode, selEndNode;
+  int32_t selStartOffset, selEndOffset, joinOffset, keepOffset;
+  nsresult result = GetStartNodeAndOffset(selection, getter_AddRefs(selStartNode), &selStartOffset);
+  if (NS_FAILED(result)) selStartNode = nullptr;
+  result = GetEndNodeAndOffset(selection, getter_AddRefs(selEndNode), &selEndOffset);
+  // Joe or Kin should comment here on why the following line is not a copy/paste error
+  if (NS_FAILED(result)) selStartNode = nullptr;
+
+  nsCOMPtr<nsIDOMNode> leftNode = aNodeToJoin;
+
+  uint32_t firstNodeLength;
+  result = GetLengthOfDOMNode(leftNode, firstNodeLength);
+  NS_ENSURE_SUCCESS(result, result);
+  nsCOMPtr<nsIDOMNode> parent = GetNodeLocation(aNodeToJoin, &joinOffset);
+  parent = GetNodeLocation(aNodeToKeep, &keepOffset);
+
+  // if selection endpoint is between the nodes, remember it as being
+  // in the one that is going away instead.  This simplifies later selection
+  // adjustment logic at end of this method.
+  if (selStartNode)
   {
-    // get selection
-    nsCOMPtr<nsISelection> selection;
-    GetSelection(getter_AddRefs(selection));
-    NS_ENSURE_TRUE(selection, NS_ERROR_NULL_POINTER);
-
-    // remember some selection points
-    nsCOMPtr<nsIDOMNode> selStartNode, selEndNode;
-    int32_t selStartOffset, selEndOffset, joinOffset, keepOffset;
-    result = GetStartNodeAndOffset(selection, getter_AddRefs(selStartNode), &selStartOffset);
-    if (NS_FAILED(result)) selStartNode = nullptr;
-    result = GetEndNodeAndOffset(selection, getter_AddRefs(selEndNode), &selEndOffset);
-    // Joe or Kin should comment here on why the following line is not a copy/paste error
-    if (NS_FAILED(result)) selStartNode = nullptr;
-
-    nsCOMPtr<nsIDOMNode> leftNode = aNodeToJoin;
-
-    uint32_t firstNodeLength;
-    result = GetLengthOfDOMNode(leftNode, firstNodeLength);
-    NS_ENSURE_SUCCESS(result, result);
-    nsCOMPtr<nsIDOMNode> parent = GetNodeLocation(aNodeToJoin, &joinOffset);
-    parent = GetNodeLocation(aNodeToKeep, &keepOffset);
-    
-    // if selection endpoint is between the nodes, remember it as being
-    // in the one that is going away instead.  This simplifies later selection
-    // adjustment logic at end of this method.
-    if (selStartNode)
+    if (selStartNode == parent)
     {
-      if (selStartNode == parent)
+      if ((selStartOffset > joinOffset) && (selStartOffset <= keepOffset))
       {
-        if ((selStartOffset > joinOffset) && (selStartOffset <= keepOffset))
-        {
-          selStartNode = aNodeToJoin;
-          selStartOffset = firstNodeLength;
-        }
-      }
-      if (selEndNode == parent)
-      {
-        if ((selEndOffset > joinOffset) && (selEndOffset <= keepOffset))
-        {
-          selEndNode = aNodeToJoin;
-          selEndOffset = firstNodeLength;
-        }
+        selStartNode = aNodeToJoin;
+        selStartOffset = firstNodeLength;
       }
     }
-    // ok, ready to do join now.
-    // if it's a text node, just shuffle around some text
-    nsCOMPtr<nsIDOMCharacterData> keepNodeAsText( do_QueryInterface(aNodeToKeep) );
-    nsCOMPtr<nsIDOMCharacterData> joinNodeAsText( do_QueryInterface(aNodeToJoin) );
-    if (keepNodeAsText && joinNodeAsText)
+    if (selEndNode == parent)
     {
-      nsAutoString rightText;
-      nsAutoString leftText;
-      keepNodeAsText->GetData(rightText);
-      joinNodeAsText->GetData(leftText);
-      leftText += rightText;
-      keepNodeAsText->SetData(leftText);          
-    }
-    else
-    {  // otherwise it's an interior node, so shuffle around the children
-      nsCOMPtr<nsIDOMNodeList> childNodes;
-      result = aNodeToJoin->GetChildNodes(getter_AddRefs(childNodes));
-      if ((NS_SUCCEEDED(result)) && (childNodes))
+      if ((selEndOffset > joinOffset) && (selEndOffset <= keepOffset))
       {
-        int32_t i;  // must be signed int!
-        uint32_t childCount=0;
-        nsCOMPtr<nsIDOMNode> firstNode;
-        childNodes->GetLength(&childCount);
-        // remember the first child in aNodeToKeep, we'll insert all the children of aNodeToJoin in front of it
-        result = aNodeToKeep->GetFirstChild(getter_AddRefs(firstNode));
-        // GetFirstChild returns nullptr firstNode if aNodeToKeep has no children, that's ok.
-        nsCOMPtr<nsIDOMNode> resultNode;
-        // have to go through the list backwards to keep deletes from interfering with iteration
-        nsCOMPtr<nsIDOMNode> previousChild;
-        for (i=childCount-1; ((NS_SUCCEEDED(result)) && (0<=i)); i--)
-        {
-          nsCOMPtr<nsIDOMNode> childNode;
-          result = childNodes->Item(i, getter_AddRefs(childNode));
-          if ((NS_SUCCEEDED(result)) && (childNode))
-          {
-            // prepend children of aNodeToJoin
-            result = aNodeToKeep->InsertBefore(childNode, firstNode, getter_AddRefs(resultNode));
-            firstNode = do_QueryInterface(childNode);
-          }
-        }
-      }
-      else if (!childNodes) {
-        result = NS_ERROR_NULL_POINTER;
-      }
-    }
-    if (NS_SUCCEEDED(result))
-    { // delete the extra node
-      nsCOMPtr<nsIDOMNode> resultNode;
-      result = aParent->RemoveChild(aNodeToJoin, getter_AddRefs(resultNode));
-      
-      if (GetShouldTxnSetSelection())
-      {
-        // editor wants us to set selection at join point
-        selection->Collapse(aNodeToKeep, firstNodeLength);
-      }
-      else if (selStartNode)
-      {
-        // and adjust the selection if needed
-        // HACK: this is overly simplified - multi-range selections need more work than this
-        bool bNeedToAdjust = false;
-        
-        // check to see if we joined nodes where selection starts
-        if (selStartNode.get() == aNodeToJoin)
-        {
-          bNeedToAdjust = true;
-          selStartNode = aNodeToKeep;
-        }
-        else if (selStartNode.get() == aNodeToKeep)
-        {
-          bNeedToAdjust = true;
-          selStartOffset += firstNodeLength;
-        }
-                
-        // check to see if we joined nodes where selection ends
-        if (selEndNode.get() == aNodeToJoin)
-        {
-          bNeedToAdjust = true;
-          selEndNode = aNodeToKeep;
-        }
-        else if (selEndNode.get() == aNodeToKeep)
-        {
-          bNeedToAdjust = true;
-          selEndOffset += firstNodeLength;
-        }
-        
-        // adjust selection if needed
-        if (bNeedToAdjust)
-        {
-          selection->Collapse(selStartNode,selStartOffset);
-          selection->Extend(selEndNode,selEndOffset);          
-        }
+        selEndNode = aNodeToJoin;
+        selEndOffset = firstNodeLength;
       }
     }
   }
+  // ok, ready to do join now.
+  // if it's a text node, just shuffle around some text
+  nsCOMPtr<nsIDOMCharacterData> keepNodeAsText( do_QueryInterface(aNodeToKeep) );
+  nsCOMPtr<nsIDOMCharacterData> joinNodeAsText( do_QueryInterface(aNodeToJoin) );
+  if (keepNodeAsText && joinNodeAsText)
+  {
+    nsAutoString rightText;
+    nsAutoString leftText;
+    keepNodeAsText->GetData(rightText);
+    joinNodeAsText->GetData(leftText);
+    leftText += rightText;
+    keepNodeAsText->SetData(leftText);
+  }
   else
-    result = NS_ERROR_INVALID_ARG;
+  {  // otherwise it's an interior node, so shuffle around the children
+    nsCOMPtr<nsIDOMNodeList> childNodes;
+    result = aNodeToJoin->GetChildNodes(getter_AddRefs(childNodes));
+    NS_ENSURE_TRUE(childNodes, NS_ERROR_NULL_POINTER);
+    NS_ENSURE_SUCCESS(result, result);
+
+    int32_t i;  // must be signed int!
+    uint32_t childCount=0;
+    nsCOMPtr<nsIDOMNode> firstNode;
+    childNodes->GetLength(&childCount);
+    // remember the first child in aNodeToKeep, we'll insert all the children of aNodeToJoin in front of it
+    result = aNodeToKeep->GetFirstChild(getter_AddRefs(firstNode));
+    NS_ENSURE_SUCCESS(result, result);
+
+    // GetFirstChild returns nullptr firstNode if aNodeToKeep has no children, that's ok.
+    nsCOMPtr<nsIDOMNode> resultNode;
+    // have to go through the list backwards to keep deletes from interfering with iteration
+    nsCOMPtr<nsIDOMNode> previousChild;
+    for (i = childCount - 1; i >= 0; i--)
+    {
+      nsCOMPtr<nsIDOMNode> childNode;
+      result = childNodes->Item(i, getter_AddRefs(childNode));
+      NS_ENSURE_SUCCESS(result, result);
+
+      if (childNode) {
+        // prepend children of aNodeToJoin
+        result = aNodeToKeep->InsertBefore(childNode, firstNode, getter_AddRefs(resultNode));
+        NS_ENSURE_SUCCESS(result, result);
+        firstNode = do_QueryInterface(childNode);
+      }
+    }
+  }
+
+  // delete the extra node
+  nsCOMPtr<nsIDOMNode> resultNode;
+  result = aParent->RemoveChild(aNodeToJoin, getter_AddRefs(resultNode));
+
+  if (GetShouldTxnSetSelection())
+  {
+    // editor wants us to set selection at join point
+    selection->Collapse(aNodeToKeep, firstNodeLength);
+  }
+  else if (selStartNode)
+  {
+    // and adjust the selection if needed
+    // HACK: this is overly simplified - multi-range selections need more work than this
+    bool bNeedToAdjust = false;
+
+    // check to see if we joined nodes where selection starts
+    if (selStartNode.get() == aNodeToJoin)
+    {
+      bNeedToAdjust = true;
+      selStartNode = aNodeToKeep;
+    }
+    else if (selStartNode.get() == aNodeToKeep)
+    {
+      bNeedToAdjust = true;
+      selStartOffset += firstNodeLength;
+    }
+
+    // check to see if we joined nodes where selection ends
+    if (selEndNode.get() == aNodeToJoin)
+    {
+      bNeedToAdjust = true;
+      selEndNode = aNodeToKeep;
+    }
+    else if (selEndNode.get() == aNodeToKeep)
+    {
+      bNeedToAdjust = true;
+      selEndOffset += firstNodeLength;
+    }
+
+    // adjust selection if needed
+    if (bNeedToAdjust)
+    {
+      selection->Collapse(selStartNode,selStartOffset);
+      selection->Extend(selEndNode,selEndOffset);
+    }
+  }
 
   return result;
 }
 
 
 int32_t
 nsEditor::GetChildOffset(nsIDOMNode* aChild, nsIDOMNode* aParent)
 {
