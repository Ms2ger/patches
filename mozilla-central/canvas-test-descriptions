diff --git a/content/canvas/test/test_canvas.html b/content/canvas/test/test_canvas.html
--- a/content/canvas/test/test_canvas.html
+++ b/content/canvas/test/test_canvas.html
@@ -48,16 +48,17 @@ ok(ctx.canvas === canvas, "ctx.canvas ==
 
 
 }
 </script>
 
 <!-- [[[ test_2d.clearRect.basic.html ]]] -->
 
 <p>Canvas test: 2d.clearRect.basic</p>
+<!-- Testing: clearRect clears to transparent black -->
 <canvas height="50" id="c3" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_clearRect_basic() {
 
 var canvas = document.getElementById('c3');
 var ctx = canvas.getContext('2d');
 
@@ -68,16 +69,17 @@ isPixel(ctx, 50,25, 0,0,0,0, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.clearRect.clip.html ]]] -->
 
 <p>Canvas test: 2d.clearRect.clip</p>
+<!-- Testing: clearRect is affected by clipping regions -->
 <canvas height="50" id="c4" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_clearRect_clip() {
 
 var canvas = document.getElementById('c4');
 var ctx = canvas.getContext('2d');
 
@@ -97,16 +99,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.clearRect.globalalpha.html ]]] -->
 
 <p>Canvas test: 2d.clearRect.globalalpha</p>
+<!-- Testing: clearRect is not affected by globalAlpha -->
 <canvas height="50" id="c5" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_clearRect_globalalpha() {
 
 var canvas = document.getElementById('c5');
 var ctx = canvas.getContext('2d');
 
@@ -118,16 +121,17 @@ isPixel(ctx, 50,25, 0,0,0,0, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.clearRect.globalcomposite.html ]]] -->
 
 <p>Canvas test: 2d.clearRect.globalcomposite</p>
+<!-- Testing: clearRect is not affected by globalCompositeOperation -->
 <canvas height="50" id="c6" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_clearRect_globalcomposite() {
 
 var canvas = document.getElementById('c6');
 var ctx = canvas.getContext('2d');
 
@@ -139,16 +143,17 @@ isPixel(ctx, 50,25, 0,0,0,0, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.clearRect.negative.html ]]] -->
 
 <p>Canvas test: 2d.clearRect.negative</p>
+<!-- Testing: clearRect of negative sizes works -->
 <canvas height="50" id="c7" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_clearRect_negative() {
 
 var canvas = document.getElementById('c7');
 var ctx = canvas.getContext('2d');
 
@@ -210,16 +215,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.clearRect.path.html ]]] -->
 
 <p>Canvas test: 2d.clearRect.path</p>
+<!-- Testing: clearRect does not affect the current path -->
 <canvas height="50" id="c9" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_clearRect_path() {
 
 var canvas = document.getElementById('c9');
 var ctx = canvas.getContext('2d');
 
@@ -232,16 +238,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.clearRect.shadow.html ]]] -->
 
 <p>Canvas test: 2d.clearRect.shadow</p>
+<!-- Testing: clearRect does not draw shadows -->
 <canvas height="50" id="c10" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_clearRect_shadow() {
 
 var canvas = document.getElementById('c10');
 var ctx = canvas.getContext('2d');
 
@@ -256,16 +263,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.clearRect.transform.html ]]] -->
 
 <p>Canvas test: 2d.clearRect.transform</p>
+<!-- Testing: clearRect is affected by transforms -->
 <canvas height="50" id="c11" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_clearRect_transform() {
 
 var canvas = document.getElementById('c11');
 var ctx = canvas.getContext('2d');
 
@@ -278,16 +286,17 @@ isPixel(ctx, 50,25, 0,0,0,0, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.clearRect.zero.html ]]] -->
 
 <p>Canvas test: 2d.clearRect.zero</p>
+<!-- Testing: clearRect of zero pixels has no effect -->
 <canvas height="50" id="c12" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_clearRect_zero() {
 
 var canvas = document.getElementById('c12');
 var ctx = canvas.getContext('2d');
 
@@ -710,17 +719,17 @@ ctx.drawImage(canvas2, 0, 0);
 isPixel(ctx, 50,25, 2,253,0,255, 2);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.composite.globalAlpha.canvaspattern.html ]]] -->
 
-<p>Canvas test: 2d.composite.globalAlpha.canvaspattern - bug 401790</p>
+<p>Canvas test: 2d.composite.globalAlpha.canvaspattern</p>
 <canvas height="50" id="c36" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_composite_globalAlpha_canvaspattern() {
 
 var canvas = document.getElementById('c36');
 var ctx = canvas.getContext('2d');
 
@@ -800,17 +809,17 @@ isPixel(ctx, 50,25, 2,253,0,255, 2);
 
 
 }
 </script>
 <img class="resource" id="red_1.png" src="image_red.png">
 
 <!-- [[[ test_2d.composite.globalAlpha.imagepattern.html ]]] -->
 
-<p>Canvas test: 2d.composite.globalAlpha.imagepattern - bug 401790</p>
+<p>Canvas test: 2d.composite.globalAlpha.imagepattern</p>
 <canvas height="50" id="c40" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_composite_globalAlpha_imagepattern() {
 
 var canvas = document.getElementById('c40');
 var ctx = canvas.getContext('2d');
 
@@ -2025,16 +2034,17 @@ var _thrown = undefined; try {
 
 
 }
 </script>
 
 <!-- [[[ test_2d.drawImage.negativedest.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.negativedest</p>
+<!-- Testing: Negative destination width/height represents the correct rectangle -->
 <canvas height="50" id="c117" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_negativedest() {
 
 var canvas = document.getElementById('c117');
 var ctx = canvas.getContext('2d');
 
@@ -2104,16 +2114,17 @@ todo(!_thrown_outer, 'should not throw e
 
 }
 </script>
 <img class="resource" id="ggrr-256x256_0.png" src="image_ggrr-256x256.png">
 
 <!-- [[[ test_2d.drawImage.negativesource.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.negativesource</p>
+<!-- Testing: Negative source width/height represents the correct rectangle -->
 <canvas height="50" id="c118" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_negativesource() {
 
 var canvas = document.getElementById('c118');
 var ctx = canvas.getContext('2d');
 
@@ -2530,17 +2541,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 
 }
 </script>
 <img class="resource" id="red_12.png" src="image_red.png">
 
 <!-- [[[ test_2d.drawImage.self.1.html ]]] -->
 
-<p>Canvas test: 2d.drawImage.self.1 - bug 433235</p>
+<p>Canvas test: 2d.drawImage.self.1</p>
 <canvas height="50" id="c124" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_self_1() {
 
 var canvas = document.getElementById('c124');
 var ctx = canvas.getContext('2d');
 
@@ -2556,17 +2567,17 @@ isPixel(ctx, 0,49, 0,255,0,255, 2);
 isPixel(ctx, 99,49, 0,255,0,255, 2);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.drawImage.self.2.html ]]] -->
 
-<p>Canvas test: 2d.drawImage.self.2 - bug 433235</p>
+<p>Canvas test: 2d.drawImage.self.2</p>
 <canvas height="50" id="c125" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_self_2() {
 
 var canvas = document.getElementById('c125');
 var ctx = canvas.getContext('2d');
 
@@ -2607,16 +2618,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 }
 </script>
 <img class="resource" id="red_13.png" src="image_red.png">
 
 <!-- [[[ test_2d.drawImage.wrongtype.html ]]] -->
 
 <p>Canvas test: 2d.drawImage.wrongtype</p>
+<!-- Testing: Incorrect image types in drawImage do not match any defined overloads, so WebIDL throws a TypeError -->
 <canvas height="50" id="c127" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_drawImage_wrongtype() {
 
 var canvas = document.getElementById('c127');
 var ctx = canvas.getContext('2d');
 
@@ -2665,16 +2677,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 }
 </script>
 <img class="resource" id="red_14.png" src="image_red.png">
 
 <!-- [[[ test_2d.fillRect.basic.html ]]] -->
 
 <p>Canvas test: 2d.fillRect.basic</p>
+<!-- Testing: fillRect works -->
 <canvas height="50" id="c129" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillRect_basic() {
 
 var canvas = document.getElementById('c129');
 var ctx = canvas.getContext('2d');
 
@@ -2684,16 +2697,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillRect.clip.html ]]] -->
 
 <p>Canvas test: 2d.fillRect.clip</p>
+<!-- Testing: fillRect is affected by clipping regions -->
 <canvas height="50" id="c130" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillRect_clip() {
 
 var canvas = document.getElementById('c130');
 var ctx = canvas.getContext('2d');
 
@@ -2714,16 +2728,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillRect.negative.html ]]] -->
 
 <p>Canvas test: 2d.fillRect.negative</p>
+<!-- Testing: fillRect of negative sizes works -->
 <canvas height="50" id="c131" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillRect_negative() {
 
 var canvas = document.getElementById('c131');
 var ctx = canvas.getContext('2d');
 
@@ -2787,16 +2802,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillRect.path.html ]]] -->
 
 <p>Canvas test: 2d.fillRect.path</p>
+<!-- Testing: fillRect does not affect the current path -->
 <canvas height="50" id="c133" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillRect_path() {
 
 var canvas = document.getElementById('c133');
 var ctx = canvas.getContext('2d');
 
@@ -2844,16 +2860,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillRect.transform.html ]]] -->
 
 <p>Canvas test: 2d.fillRect.transform</p>
+<!-- Testing: fillRect is affected by transforms -->
 <canvas height="50" id="c135" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillRect_transform() {
 
 var canvas = document.getElementById('c135');
 var ctx = canvas.getContext('2d');
 
@@ -2865,16 +2882,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.fillRect.zero.html ]]] -->
 
 <p>Canvas test: 2d.fillRect.zero</p>
+<!-- Testing: fillRect of zero pixels has no effect -->
 <canvas height="50" id="c136" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_fillRect_zero() {
 
 var canvas = document.getElementById('c136');
 var ctx = canvas.getContext('2d');
 
@@ -4733,17 +4751,17 @@ todo_isPixel(ctx, 40,20, 0,255,0,255, 2)
 
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.linear.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.gradient.linear.nonfinite</p>
-<!-- Testing: createLinearGradient() throws NOT_SUPPORTED_ERR if arguments are not finite -->
+<!-- Testing: createLinearGradient() throws TypeError if arguments are not finite -->
 <canvas height="50" id="c220" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_linear_nonfinite() {
 
 var canvas = document.getElementById('c220');
 var ctx = canvas.getContext('2d');
 
@@ -5245,17 +5263,17 @@ var _thrown = undefined; try {
 
 
 }
 </script>
 
 <!-- [[[ test_2d.gradient.radial.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.gradient.radial.nonfinite</p>
-<!-- Testing: createRadialGradient() throws NOT_SUPPORTED_ERR if arguments are not finite -->
+<!-- Testing: createRadialGradient() throws TypeError if arguments are not finite -->
 <canvas height="50" id="c244" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_gradient_radial_nonfinite() {
 
 var canvas = document.getElementById('c244');
 var ctx = canvas.getContext('2d');
 
@@ -5575,17 +5593,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create1.basic.html ]]] -->
 
-<p>Canvas test: 2d.imageData.create1.basic - bug 630040</p>
+<p>Canvas test: 2d.imageData.create1.basic</p>
 <!-- Testing: createImageData(imgdata) exists and returns something -->
 <canvas height="50" id="c254a" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create1_basic() {
 
 var canvas = document.getElementById('c254a');
 var ctx = canvas.getContext('2d');
@@ -5593,17 +5611,17 @@ var ctx = canvas.getContext('2d');
 ok(ctx.createImageData(ctx.createImageData(1, 1)) !== null, "ctx.createImageData(ctx.createImageData(1, 1)) !== null");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create1.initial.html ]]] -->
 
-<p>Canvas test: 2d.imageData.create1.initial - bug 630040</p>
+<p>Canvas test: 2d.imageData.create1.initial</p>
 <!-- Testing: createImageData(imgdata) returns transparent black data of the right size -->
 <canvas height="50" id="c255a" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create1_initial() {
 
 var canvas = document.getElementById('c255a');
 var ctx = canvas.getContext('2d');
@@ -5622,17 +5640,17 @@ for (var i = 0; i < imgdata2.data.length
 ok(isTransparentBlack, "isTransparentBlack");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create1.type.html ]]] -->
 
-<p>Canvas test: 2d.imageData.create1.type - bug 630040</p>
+<p>Canvas test: 2d.imageData.create1.type</p>
 <!-- Testing: createImageData(imgdata) returns an ImageData object containing a Uint8ClampedArray object -->
 <canvas height="50" id="c261a" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create1_type() {
 
 var canvas = document.getElementById('c261a');
 var ctx = canvas.getContext('2d');
@@ -5646,17 +5664,17 @@ ok(imgdata.thisImplementsImageData, "img
 ok(imgdata.data.thisImplementsUint8ClampedArray, "imgdata.data.thisImplementsUint8ClampedArray");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create1.zero.html ]]] -->
 
-<p>Canvas test: 2d.imageData.create1.zero - bug 630040</p>
+<p>Canvas test: 2d.imageData.create1.zero</p>
 <!-- Testing: createImageData(null) throws TypeError -->
 <canvas height="50" id="c262a" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create1_zero() {
 
 var canvas = document.getElementById('c262a');
 var ctx = canvas.getContext('2d');
@@ -5667,17 +5685,17 @@ var _thrown = undefined; try {
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create2.basic.html ]]] -->
 
 <p>Canvas test: 2d.imageData.create2.basic</p>
-<!-- Testing: createImageData() exists and returns something -->
+<!-- Testing: createImageData(sw, sh) exists and returns something -->
 <canvas height="50" id="c254" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create2_basic() {
 
 var canvas = document.getElementById('c254');
 var ctx = canvas.getContext('2d');
 
@@ -5685,17 +5703,17 @@ ok(ctx.createImageData(1, 1) !== null, "
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create2.initial.html ]]] -->
 
 <p>Canvas test: 2d.imageData.create2.initial</p>
-<!-- Testing: createImageData() returns transparent black data of the right size -->
+<!-- Testing: createImageData(sw, sh) returns transparent black data of the right size -->
 <canvas height="50" id="c255" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create2_initial() {
 
 var canvas = document.getElementById('c255');
 var ctx = canvas.getContext('2d');
 
@@ -5710,18 +5728,18 @@ for (var i = 0; i < imgdata.data.length;
 ok(isTransparentBlack, "isTransparentBlack");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create2.large.html ]]] -->
 
-<p>Canvas test: 2d.imageData.create2.large - bug 433004</p>
-<!-- Testing: createImageData() works for sizes much larger than the canvas -->
+<p>Canvas test: 2d.imageData.create2.large</p>
+<!-- Testing: createImageData(sw, sh) works for sizes much larger than the canvas -->
 <canvas height="50" id="c256" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create2_large() {
 
 var canvas = document.getElementById('c256');
 var ctx = canvas.getContext('2d');
 
@@ -5736,18 +5754,18 @@ for (var i = 0; i < imgdata.data.length;
 ok(isTransparentBlack, "isTransparentBlack");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create2.negative.html ]]] -->
 
-<p>Canvas test: 2d.imageData.create2.negative - bug 433004</p>
-<!-- Testing: createImageData() takes the absolute magnitude of the size arguments -->
+<p>Canvas test: 2d.imageData.create2.negative</p>
+<!-- Testing: createImageData(sw, sh) takes the absolute magnitude of the size arguments -->
 <canvas height="50" id="c257" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create2_negative() {
 
 var canvas = document.getElementById('c257');
 var ctx = canvas.getContext('2d');
 
@@ -5760,18 +5778,18 @@ ok(imgdata2.data.length == imgdata3.data
 ok(imgdata3.data.length == imgdata4.data.length, "imgdata3.data.length == imgdata4.data.length");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create2.nonfinite.html ]]] -->
 
-<p>Canvas test: 2d.imageData.create2.nonfinite - bug 433004</p>
-<!-- Testing: createImageData() throws NOT_SUPPORTED_ERR if arguments are not finite -->
+<p>Canvas test: 2d.imageData.create2.nonfinite</p>
+<!-- Testing: createImageData() throws TypeError if arguments are not finite -->
 <canvas height="50" id="c258" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create2_nonfinite() {
 
 var canvas = document.getElementById('c258');
 var ctx = canvas.getContext('2d');
 
@@ -5841,17 +5859,17 @@ is(imgdata1.height, imgdata2.height, "im
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create2.tiny.html ]]] -->
 
 <p>Canvas test: 2d.imageData.create2.tiny</p>
-<!-- Testing: createImageData() works for sizes smaller than one pixel -->
+<!-- Testing: createImageData(sw, sh) works for sizes smaller than one pixel -->
 <canvas height="50" id="c260" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create2_tiny() {
 
 var canvas = document.getElementById('c260');
 var ctx = canvas.getContext('2d');
 
@@ -5866,18 +5884,18 @@ for (var i = 0; i < imgdata.data.length;
 ok(isTransparentBlack, "isTransparentBlack");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create2.type.html ]]] -->
 
-<p>Canvas test: 2d.imageData.create2.type - bug 433004</p>
-<!-- Testing: createImageData() returns an ImageData object containing a Uint8ClampedArray object -->
+<p>Canvas test: 2d.imageData.create2.type</p>
+<!-- Testing: createImageData(sw, sh) returns an ImageData object containing a Uint8ClampedArray object -->
 <canvas height="50" id="c261" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create2_type() {
 
 var canvas = document.getElementById('c261');
 var ctx = canvas.getContext('2d');
 
@@ -5891,17 +5909,17 @@ ok(imgdata.data.thisImplementsUint8Clamp
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.create2.zero.html ]]] -->
 
 <p>Canvas test: 2d.imageData.create2.zero</p>
-<!-- Testing: createImageData() throws INDEX_SIZE_ERR if size is zero -->
+<!-- Testing: createImageData(sw, sh) throws INDEX_SIZE_ERR if size is zero -->
 <canvas height="50" id="c262" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_create2_zero() {
 
 var canvas = document.getElementById('c262');
 var ctx = canvas.getContext('2d');
 
@@ -5964,17 +5982,17 @@ ok(imgdata2.data[2] === 255, "imgdata2.d
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.get.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.imageData.get.nonfinite</p>
-<!-- Testing: getImageData() throws NOT_SUPPORTED_ERR if arguments are not finite -->
+<!-- Testing: getImageData() throws TypeError if arguments are not finite -->
 <canvas height="50" id="c265" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_get_nonfinite() {
 
 var canvas = document.getElementById('c265');
 var ctx = canvas.getContext('2d');
 
@@ -6265,17 +6283,17 @@ ok(imgdata2.data[0] === 255, "imgdata2.d
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.get.source.negative.html ]]] -->
 
 <p>Canvas test: 2d.imageData.get.source.negative</p>
-<!-- Testing: getImageData() works with negative width and height -->
+<!-- Testing: getImageData() works with negative width and height, and returns top-to-bottom left-to-right -->
 <canvas height="50" id="c272" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_get_source_negative() {
 
 var canvas = document.getElementById('c272');
 var ctx = canvas.getContext('2d');
 
@@ -6647,17 +6665,17 @@ ok(imgdata.data[3] === 0, "imgdata.data[
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.object.round.html ]]] -->
 
 <p>Canvas test: 2d.imageData.object.round</p>
-<!-- Testing: ImageData.data rounds numbers with convertToIntegerTiesToEven -->
+<!-- Testing: ImageData.data rounds numbers with round-to-zero -->
 <canvas height="50" id="c284" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_object_round() {
 
 var canvas = document.getElementById('c284');
 var ctx = canvas.getContext('2d');
 
@@ -6804,17 +6822,17 @@ ctx.putImageData(imgdata, 0, 0);
 isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.put.clip.html ]]] -->
 
-<p>Canvas test: 2d.imageData.put.clip - bug 433397</p>
+<p>Canvas test: 2d.imageData.put.clip</p>
 <!-- Testing: putImageData() is not affected by clipping regions -->
 <canvas height="50" id="c290" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_put_clip() {
 
 var canvas = document.getElementById('c290');
 var ctx = canvas.getContext('2d');
@@ -6832,17 +6850,17 @@ isPixel(ctx, 25,25, 0,255,0,255, 2);
 isPixel(ctx, 75,25, 0,255,0,255, 2);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.put.created.html ]]] -->
 
-<p>Canvas test: 2d.imageData.put.created - bug 433004</p>
+<p>Canvas test: 2d.imageData.put.created</p>
 <!-- Testing: putImageData() puts image data from createImageData() onto the canvas -->
 <canvas height="50" id="c291" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_put_created() {
 
 var canvas = document.getElementById('c291');
 var ctx = canvas.getContext('2d');
@@ -7082,17 +7100,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.put.nonfinite.html ]]] -->
 
 <p>Canvas test: 2d.imageData.put.nonfinite</p>
-<!-- Testing: putImageData() throws NOT_SUPPORTED_ERR if arguments are not finite -->
+<!-- Testing: putImageData() throws TypeError if arguments are not finite -->
 <canvas height="50" id="c299" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_put_nonfinite() {
 
 var canvas = document.getElementById('c299');
 var ctx = canvas.getContext('2d');
 
@@ -7345,18 +7363,18 @@ var _thrown = undefined; try {
 } catch (e) { _thrown = e }; ok(_thrown && _thrown instanceof TypeError, "should throw TypeError");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.imageData.put.null.html ]]] -->
 
-<p>Canvas test: 2d.imageData.put.null - bug 421715</p>
-<!-- Testing: putImageData() with null imagedata throws TYPE_MISMATCH_ERR -->
+<p>Canvas test: 2d.imageData.put.null</p>
+<!-- Testing: putImageData() with null imagedata throws TypeError -->
 <canvas height="50" id="c300" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_imageData_put_null() {
 
 var canvas = document.getElementById('c300');
 var ctx = canvas.getContext('2d');
 
@@ -8220,17 +8238,17 @@ ctx.miterLimit = NaN;
 ok(ctx.miterLimit === 1.5, "ctx.miterLimit === 1.5");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.line.miter.lineedge.html ]]] -->
 
-<p>Canvas test: 2d.line.miter.lineedge - bug 401791</p>
+<p>Canvas test: 2d.line.miter.lineedge</p>
 <!-- Testing: Miter joins are not drawn when the miter limit is exceeded at the corners of a zero-height rectangle -->
 <canvas height="50" id="c323" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_miter_lineedge() {
 
 var canvas = document.getElementById('c323');
 var ctx = canvas.getContext('2d');
@@ -8295,17 +8313,17 @@ isPixel(ctx, 48,48, 0,255,0,255, 0);
 isPixel(ctx, 1,48, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.line.miter.rightangle.html ]]] -->
 
-<p>Canvas test: 2d.line.miter.rightangle - bug 401791</p>
+<p>Canvas test: 2d.line.miter.rightangle</p>
 <!-- Testing: Miter joins are not drawn when the miter limit is exceeded, on exact right angles -->
 <canvas height="50" id="c325" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_line_miter_rightangle() {
 
 var canvas = document.getElementById('c325');
 var ctx = canvas.getContext('2d');
@@ -11124,17 +11142,17 @@ ok(ctx.isPointInPath(30, 10) === true, "
 ok(ctx.isPointInPath(50, 10) === true, "ctx.isPointInPath(50, 10) === true");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.isPointInPath.transform.1.html ]]] -->
 
-<p>Canvas test: 2d.path.isPointInPath.transform.1 - bug 405300</p>
+<p>Canvas test: 2d.path.isPointInPath.transform.1</p>
 <!-- Testing: isPointInPath() handles transformations correctly -->
 <canvas height="50" id="c409" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_isPointInPath_transform_1() {
 
 var canvas = document.getElementById('c409');
 var ctx = canvas.getContext('2d');
@@ -11149,17 +11167,17 @@ ok(ctx.isPointInPath(69, 10) === true, "
 ok(ctx.isPointInPath(71, 10) === false, "ctx.isPointInPath(71, 10) === false");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.isPointInPath.transform.2.html ]]] -->
 
-<p>Canvas test: 2d.path.isPointInPath.transform.2 - bug 405300</p>
+<p>Canvas test: 2d.path.isPointInPath.transform.2</p>
 <!-- Testing: isPointInPath() handles transformations correctly -->
 <canvas height="50" id="c410" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_isPointInPath_transform_2() {
 
 var canvas = document.getElementById('c410');
 var ctx = canvas.getContext('2d');
@@ -11174,17 +11192,17 @@ ok(ctx.isPointInPath(69, 10) === true, "
 ok(ctx.isPointInPath(71, 10) === false, "ctx.isPointInPath(71, 10) === false");
 
 
 }
 </script>
 
 <!-- [[[ test_2d.path.isPointInPath.transform.3.html ]]] -->
 
-<p>Canvas test: 2d.path.isPointInPath.transform.3 - bug 405300</p>
+<p>Canvas test: 2d.path.isPointInPath.transform.3</p>
 <!-- Testing: isPointInPath() handles transformations correctly -->
 <canvas height="50" id="c411" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_path_isPointInPath_transform_3() {
 
 var canvas = document.getElementById('c411');
 var ctx = canvas.getContext('2d');
@@ -13457,16 +13475,17 @@ todo(false, "test completed successfully
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.alpha.1.html ]]] -->
 
 <p>Canvas test: 2d.shadow.alpha.1</p>
+<!-- Testing: Shadow colour alpha components are used -->
 <canvas height="50" id="c499" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_alpha_1() {
 
 var canvas = document.getElementById('c499');
 var ctx = canvas.getContext('2d');
 
@@ -13480,16 +13499,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 4);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.alpha.2.html ]]] -->
 
 <p>Canvas test: 2d.shadow.alpha.2</p>
+<!-- Testing: Shadow colour alpha components are used -->
 <canvas height="50" id="c500" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_alpha_2() {
 
 var canvas = document.getElementById('c500');
 var ctx = canvas.getContext('2d');
 
@@ -13503,16 +13523,17 @@ isPixel(ctx, 50,25, 127,0,127,255, 2);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.alpha.3.html ]]] -->
 
 <p>Canvas test: 2d.shadow.alpha.3</p>
+<!-- Testing: Shadows are affected by globalAlpha -->
 <canvas height="50" id="c501" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_alpha_3() {
 
 var canvas = document.getElementById('c501');
 var ctx = canvas.getContext('2d');
 
@@ -13528,16 +13549,17 @@ isPixel(ctx, 50,25, 127,0,127,255, 2);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.alpha.4.html ]]] -->
 
 <p>Canvas test: 2d.shadow.alpha.4</p>
+<!-- Testing: Shadows with alpha components are correctly affected by globalAlpha -->
 <canvas height="50" id="c502" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_alpha_4() {
 
 var canvas = document.getElementById('c502');
 var ctx = canvas.getContext('2d');
 
@@ -13553,16 +13575,17 @@ isPixel(ctx, 50,25, 127,0,127,255, 2);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.alpha.5.html ]]] -->
 
 <p>Canvas test: 2d.shadow.alpha.5</p>
+<!-- Testing: Shadows of shapes with alpha components are drawn correctly -->
 <canvas height="50" id="c503" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_alpha_5() {
 
 var canvas = document.getElementById('c503');
 var ctx = canvas.getContext('2d');
 
@@ -13815,16 +13838,17 @@ ok(ctx.shadowOffsetY === 1e6, "ctx.shado
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.blur.high.html ]]] -->
 
 <p>Canvas test: 2d.shadow.blur.high</p>
+<!-- Testing: Shadows look correct for large blurs -->
 <canvas height="50" id="c512" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_blur_high() {
 
 var canvas = document.getElementById('c512');
 var ctx = canvas.getContext('2d');
 
@@ -13839,16 +13863,17 @@ todo(false, "test completed successfully
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.blur.low.html ]]] -->
 
 <p>Canvas test: 2d.shadow.blur.low</p>
+<!-- Testing: Shadows look correct for small blurs -->
 <canvas height="50" id="c513" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_blur_low() {
 
 var canvas = document.getElementById('c513');
 var ctx = canvas.getContext('2d');
 
@@ -13870,16 +13895,17 @@ todo(false, "test completed successfully
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.canvas.alpha.html ]]] -->
 
 <p>Canvas test: 2d.shadow.canvas.alpha</p>
+<!-- Testing: Shadows are drawn correctly for partially-transparent canvases -->
 <canvas height="50" id="c514" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_canvas_alpha() {
 
 var canvas = document.getElementById('c514');
 var ctx = canvas.getContext('2d');
 
@@ -13901,16 +13927,17 @@ isPixel(ctx, 50,25, 127,0,127,255, 2);
 
 }
 </script>
 <img class="resource" id="transparent50_1.png" src="image_transparent50.png">
 
 <!-- [[[ test_2d.shadow.canvas.basic.html ]]] -->
 
 <p>Canvas test: 2d.shadow.canvas.basic</p>
+<!-- Testing: Shadows are drawn for canvases -->
 <canvas height="50" id="c515" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_canvas_basic() {
 
 var canvas = document.getElementById('c515');
 var ctx = canvas.getContext('2d');
 
@@ -13931,16 +13958,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.canvas.transparent.1.html ]]] -->
 
 <p>Canvas test: 2d.shadow.canvas.transparent.1</p>
+<!-- Testing: Shadows are not drawn for transparent canvases -->
 <canvas height="50" id="c516" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_canvas_transparent_1() {
 
 var canvas = document.getElementById('c516');
 var ctx = canvas.getContext('2d');
 
@@ -13959,16 +13987,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.canvas.transparent.2.html ]]] -->
 
 <p>Canvas test: 2d.shadow.canvas.transparent.2</p>
+<!-- Testing: Shadows are not drawn for transparent parts of canvases -->
 <canvas height="50" id="c517" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_canvas_transparent_2() {
 
 var canvas = document.getElementById('c517');
 var ctx = canvas.getContext('2d');
 
@@ -13995,16 +14024,17 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.clip.1.html ]]] -->
 
 <p>Canvas test: 2d.shadow.clip.1</p>
+<!-- Testing: Shadows of clipped shapes are still drawn within the clipping region -->
 <canvas height="50" id="c518" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_clip_1() {
 
 var canvas = document.getElementById('c518');
 var ctx = canvas.getContext('2d');
 
@@ -14027,16 +14057,17 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.clip.2.html ]]] -->
 
 <p>Canvas test: 2d.shadow.clip.2</p>
+<!-- Testing: Shadows are not drawn outside the clipping region -->
 <canvas height="50" id="c519" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_clip_2() {
 
 var canvas = document.getElementById('c519');
 var ctx = canvas.getContext('2d');
 
@@ -14059,16 +14090,17 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.clip.3.html ]]] -->
 
 <p>Canvas test: 2d.shadow.clip.3</p>
+<!-- Testing: Shadows of clipped shapes are still drawn within the clipping region -->
 <canvas height="50" id="c520" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_clip_3() {
 
 var canvas = document.getElementById('c520');
 var ctx = canvas.getContext('2d');
 
@@ -14092,16 +14124,17 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.composite.1.html ]]] -->
 
 <p>Canvas test: 2d.shadow.composite.1</p>
+<!-- Testing: Shadows are drawn using globalCompositeOperation -->
 <canvas height="50" id="c521" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_composite_1() {
 
 var canvas = document.getElementById('c521');
 var ctx = canvas.getContext('2d');
 
@@ -14117,16 +14150,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 2);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.composite.2.html ]]] -->
 
 <p>Canvas test: 2d.shadow.composite.2</p>
+<!-- Testing: Shadows are drawn using globalCompositeOperation -->
 <canvas height="50" id="c522" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_composite_2() {
 
 var canvas = document.getElementById('c522');
 var ctx = canvas.getContext('2d');
 
@@ -14185,16 +14219,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.gradient.alpha.html ]]] -->
 
 <p>Canvas test: 2d.shadow.gradient.alpha</p>
+<!-- Testing: Shadows are drawn correctly for partially-transparent gradient fills -->
 <canvas height="50" id="c525" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_gradient_alpha() {
 
 var canvas = document.getElementById('c525');
 var ctx = canvas.getContext('2d');
 
@@ -14212,16 +14247,17 @@ isPixel(ctx, 50,25, 127,0,127,255, 2);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.gradient.basic.html ]]] -->
 
 <p>Canvas test: 2d.shadow.gradient.basic</p>
+<!-- Testing: Shadows are drawn for gradient fills -->
 <canvas height="50" id="c526" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_gradient_basic() {
 
 var canvas = document.getElementById('c526');
 var ctx = canvas.getContext('2d');
 
@@ -14239,16 +14275,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.gradient.transparent.1.html ]]] -->
 
 <p>Canvas test: 2d.shadow.gradient.transparent.1</p>
+<!-- Testing: Shadows are not drawn for transparent gradient fills -->
 <canvas height="50" id="c527" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_gradient_transparent_1() {
 
 var canvas = document.getElementById('c527');
 var ctx = canvas.getContext('2d');
 
@@ -14266,16 +14303,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.gradient.transparent.2.html ]]] -->
 
 <p>Canvas test: 2d.shadow.gradient.transparent.2</p>
+<!-- Testing: Shadows are not drawn for transparent parts of gradient fills -->
 <canvas height="50" id="c528" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_gradient_transparent_2() {
 
 var canvas = document.getElementById('c528');
 var ctx = canvas.getContext('2d');
 
@@ -14299,16 +14337,17 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.image.alpha.html ]]] -->
 
 <p>Canvas test: 2d.shadow.image.alpha</p>
+<!-- Testing: Shadows are drawn correctly for partially-transparent images -->
 <canvas height="50" id="c529" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_image_alpha() {
 
 var canvas = document.getElementById('c529');
 var ctx = canvas.getContext('2d');
 
@@ -14323,16 +14362,17 @@ isPixel(ctx, 50,25, 127,0,127,255, 2);
 
 }
 </script>
 <img class="resource" id="transparent50_2.png" src="image_transparent50.png">
 
 <!-- [[[ test_2d.shadow.image.basic.html ]]] -->
 
 <p>Canvas test: 2d.shadow.image.basic</p>
+<!-- Testing: Shadows are drawn for images -->
 <canvas height="50" id="c530" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_image_basic() {
 
 var canvas = document.getElementById('c530');
 var ctx = canvas.getContext('2d');
 
@@ -14347,16 +14387,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 <img class="resource" id="red_17.png" src="image_red.png">
 
 <!-- [[[ test_2d.shadow.image.scale.html ]]] -->
 
 <p>Canvas test: 2d.shadow.image.scale</p>
+<!-- Testing: Shadows are drawn correctly for scaled images -->
 <canvas height="50" id="c531" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_image_scale() {
 
 var canvas = document.getElementById('c531');
 var ctx = canvas.getContext('2d');
 
@@ -14373,16 +14414,17 @@ isPixel(ctx, 75,25, 0,255,0,255, 2);
 
 }
 </script>
 <img class="resource" id="redtransparent_2.png" src="image_redtransparent.png">
 
 <!-- [[[ test_2d.shadow.image.section.html ]]] -->
 
 <p>Canvas test: 2d.shadow.image.section</p>
+<!-- Testing: Shadows are not drawn for areas outside image source rectangles -->
 <canvas height="50" id="c532" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_image_section() {
 
 var canvas = document.getElementById('c532');
 var ctx = canvas.getContext('2d');
 
@@ -14399,16 +14441,17 @@ isPixel(ctx, 75,25, 0,255,0,255, 2);
 
 }
 </script>
 <img class="resource" id="redtransparent_3.png" src="image_redtransparent.png">
 
 <!-- [[[ test_2d.shadow.image.transparent.1.html ]]] -->
 
 <p>Canvas test: 2d.shadow.image.transparent.1</p>
+<!-- Testing: Shadows are not drawn for transparent images -->
 <canvas height="50" id="c533" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_image_transparent_1() {
 
 var canvas = document.getElementById('c533');
 var ctx = canvas.getContext('2d');
 
@@ -14423,16 +14466,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 <img class="resource" id="transparent_1.png" src="image_transparent.png">
 
 <!-- [[[ test_2d.shadow.image.transparent.2.html ]]] -->
 
 <p>Canvas test: 2d.shadow.image.transparent.2</p>
+<!-- Testing: Shadows are not drawn for transparent parts of images -->
 <canvas height="50" id="c534" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_image_transparent_2() {
 
 var canvas = document.getElementById('c534');
 var ctx = canvas.getContext('2d');
 
@@ -14453,16 +14497,17 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 }
 </script>
 <img class="resource" id="redtransparent_4.png" src="image_redtransparent.png">
 
 <!-- [[[ test_2d.shadow.offset.negativeX.html ]]] -->
 
 <p>Canvas test: 2d.shadow.offset.negativeX</p>
+<!-- Testing: Shadows can be offset with negative x -->
 <canvas height="50" id="c535" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_offset_negativeX() {
 
 var canvas = document.getElementById('c535');
 var ctx = canvas.getContext('2d');
 
@@ -14477,16 +14522,17 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.offset.negativeY.html ]]] -->
 
 <p>Canvas test: 2d.shadow.offset.negativeY</p>
+<!-- Testing: Shadows can be offset with negative y -->
 <canvas height="50" id="c536" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_offset_negativeY() {
 
 var canvas = document.getElementById('c536');
 var ctx = canvas.getContext('2d');
 
@@ -14501,16 +14547,17 @@ isPixel(ctx, 50,37, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.offset.positiveX.html ]]] -->
 
 <p>Canvas test: 2d.shadow.offset.positiveX</p>
+<!-- Testing: Shadows can be offset with positive x -->
 <canvas height="50" id="c537" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_offset_positiveX() {
 
 var canvas = document.getElementById('c537');
 var ctx = canvas.getContext('2d');
 
@@ -14525,16 +14572,17 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.offset.positiveY.html ]]] -->
 
 <p>Canvas test: 2d.shadow.offset.positiveY</p>
+<!-- Testing: Shadows can be offset with positive y -->
 <canvas height="50" id="c538" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_offset_positiveY() {
 
 var canvas = document.getElementById('c538');
 var ctx = canvas.getContext('2d');
 
@@ -14549,16 +14597,17 @@ isPixel(ctx, 50,37, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.outside.html ]]] -->
 
 <p>Canvas test: 2d.shadow.outside</p>
+<!-- Testing: Shadows of shapes outside the visible area can be offset onto the visible area -->
 <canvas height="50" id="c539" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_outside() {
 
 var canvas = document.getElementById('c539');
 var ctx = canvas.getContext('2d');
 
@@ -14581,16 +14630,17 @@ isPixel(ctx, 50,37, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.pattern.alpha.html ]]] -->
 
 <p>Canvas test: 2d.shadow.pattern.alpha</p>
+<!-- Testing: Shadows are drawn correctly for partially-transparent fill patterns -->
 <canvas height="50" id="c540" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_pattern_alpha() {
 
 var canvas = document.getElementById('c540');
 var ctx = canvas.getContext('2d');
 
@@ -14607,16 +14657,17 @@ isPixel(ctx, 50,25, 127,0,127,255, 2);
 
 }
 </script>
 <img class="resource" id="transparent50_3.png" src="image_transparent50.png">
 
 <!-- [[[ test_2d.shadow.pattern.basic.html ]]] -->
 
 <p>Canvas test: 2d.shadow.pattern.basic</p>
+<!-- Testing: Shadows are drawn for fill patterns -->
 <canvas height="50" id="c541" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_pattern_basic() {
 
 var canvas = document.getElementById('c541');
 var ctx = canvas.getContext('2d');
 
@@ -14633,16 +14684,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 <img class="resource" id="red_18.png" src="image_red.png">
 
 <!-- [[[ test_2d.shadow.pattern.transparent.1.html ]]] -->
 
 <p>Canvas test: 2d.shadow.pattern.transparent.1</p>
+<!-- Testing: Shadows are not drawn for transparent fill patterns -->
 <canvas height="50" id="c542" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_pattern_transparent_1() {
 
 var canvas = document.getElementById('c542');
 var ctx = canvas.getContext('2d');
 
@@ -14659,16 +14711,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 }
 </script>
 <img class="resource" id="transparent_2.png" src="image_transparent.png">
 
 <!-- [[[ test_2d.shadow.pattern.transparent.2.html ]]] -->
 
 <p>Canvas test: 2d.shadow.pattern.transparent.2</p>
+<!-- Testing: Shadows are not drawn for transparent parts of fill patterns -->
 <canvas height="50" id="c543" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_pattern_transparent_2() {
 
 var canvas = document.getElementById('c543');
 var ctx = canvas.getContext('2d');
 
@@ -14689,16 +14742,17 @@ isPixel(ctx, 75,25, 0,255,0,255, 0);
 
 }
 </script>
 <img class="resource" id="redtransparent_5.png" src="image_redtransparent.png">
 
 <!-- [[[ test_2d.shadow.stroke.basic.html ]]] -->
 
 <p>Canvas test: 2d.shadow.stroke.basic</p>
+<!-- Testing: Shadows are drawn for strokes -->
 <canvas height="50" id="c544" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_stroke_basic() {
 
 var canvas = document.getElementById('c544');
 var ctx = canvas.getContext('2d');
 
@@ -14719,16 +14773,17 @@ isPixel(ctx, 98,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.stroke.cap.1.html ]]] -->
 
 <p>Canvas test: 2d.shadow.stroke.cap.1</p>
+<!-- Testing: Shadows are not drawn for areas outside stroke caps -->
 <canvas height="50" id="c545" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_stroke_cap_1() {
 
 var canvas = document.getElementById('c545');
 var ctx = canvas.getContext('2d');
 
@@ -14752,16 +14807,17 @@ isPixel(ctx, 98,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.stroke.cap.2.html ]]] -->
 
 <p>Canvas test: 2d.shadow.stroke.cap.2</p>
+<!-- Testing: Shadows are drawn for stroke caps -->
 <canvas height="50" id="c546" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_stroke_cap_2() {
 
 var canvas = document.getElementById('c546');
 var ctx = canvas.getContext('2d');
 
@@ -14783,16 +14839,17 @@ isPixel(ctx, 98,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.stroke.join.1.html ]]] -->
 
 <p>Canvas test: 2d.shadow.stroke.join.1</p>
+<!-- Testing: Shadows are not drawn for areas outside stroke joins -->
 <canvas height="50" id="c547" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_stroke_join_1() {
 
 var canvas = document.getElementById('c547');
 var ctx = canvas.getContext('2d');
 
@@ -14816,16 +14873,17 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.stroke.join.2.html ]]] -->
 
 <p>Canvas test: 2d.shadow.stroke.join.2</p>
+<!-- Testing: Shadows are drawn for stroke joins -->
 <canvas height="50" id="c548" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_stroke_join_2() {
 
 var canvas = document.getElementById('c548');
 var ctx = canvas.getContext('2d');
 
@@ -14851,16 +14909,17 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.stroke.join.3.html ]]] -->
 
 <p>Canvas test: 2d.shadow.stroke.join.3</p>
+<!-- Testing: Shadows are drawn for stroke joins respecting miter limit -->
 <canvas height="50" id="c549" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_stroke_join_3() {
 
 var canvas = document.getElementById('c549');
 var ctx = canvas.getContext('2d');
 
@@ -14885,16 +14944,17 @@ isPixel(ctx, 98,48, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.transform.1.html ]]] -->
 
 <p>Canvas test: 2d.shadow.transform.1</p>
+<!-- Testing: Shadows take account of transformations -->
 <canvas height="50" id="c550" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_transform_1() {
 
 var canvas = document.getElementById('c550');
 var ctx = canvas.getContext('2d');
 
@@ -14909,16 +14969,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.shadow.transform.2.html ]]] -->
 
 <p>Canvas test: 2d.shadow.transform.2</p>
+<!-- Testing: Shadow offsets are not affected by transformations -->
 <canvas height="50" id="c551" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_shadow_transform_2() {
 
 var canvas = document.getElementById('c551');
 var ctx = canvas.getContext('2d');
 
@@ -15471,17 +15532,17 @@ ctx.fillRect(-200, 0, 100, 50);
 isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.state.saverestore.underflow.html ]]] -->
 
-<p>Canvas test: 2d.state.saverestore.underflow - bug 296821</p>
+<p>Canvas test: 2d.state.saverestore.underflow</p>
 <!-- Testing: restore() with an empty stack has no effect -->
 <canvas height="50" id="c570" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_state_saverestore_underflow() {
 
 var canvas = document.getElementById('c570');
 var ctx = canvas.getContext('2d');
@@ -15494,16 +15555,17 @@ ok(ctx.lineWidth == 0.5, "ctx.lineWidth 
 
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.basic.html ]]] -->
 
 <p>Canvas test: 2d.strokeRect.basic</p>
+<!-- Testing: strokeRect works -->
 <canvas height="50" id="c571" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_basic() {
 
 var canvas = document.getElementById('c571');
 var ctx = canvas.getContext('2d');
 
@@ -15514,16 +15576,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.clip.html ]]] -->
 
 <p>Canvas test: 2d.strokeRect.clip</p>
+<!-- Testing: strokeRect is affected by clipping regions -->
 <canvas height="50" id="c572" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_clip() {
 
 var canvas = document.getElementById('c572');
 var ctx = canvas.getContext('2d');
 
@@ -15545,16 +15608,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.globalalpha.html ]]] -->
 
 <p>Canvas test: 2d.strokeRect.globalalpha</p>
+<!-- Testing: strokeRect is affected by globalAlpha -->
 <canvas height="50" id="c573" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_globalalpha() {
 
 var canvas = document.getElementById('c573');
 var ctx = canvas.getContext('2d');
 
@@ -15566,16 +15630,17 @@ isPixel(ctx, 50,25, 0,0,0,0, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.globalcomposite.html ]]] -->
 
 <p>Canvas test: 2d.strokeRect.globalcomposite</p>
+<!-- Testing: strokeRect is not affected by globalCompositeOperation -->
 <canvas height="50" id="c574" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_globalcomposite() {
 
 var canvas = document.getElementById('c574');
 var ctx = canvas.getContext('2d');
 
@@ -15587,16 +15652,17 @@ isPixel(ctx, 50,25, 0,0,0,0, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.negative.html ]]] -->
 
 <p>Canvas test: 2d.strokeRect.negative</p>
+<!-- Testing: strokeRect of negative sizes works -->
 <canvas height="50" id="c575" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_negative() {
 
 var canvas = document.getElementById('c575');
 var ctx = canvas.getContext('2d');
 
@@ -15662,16 +15728,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.path.html ]]] -->
 
 <p>Canvas test: 2d.strokeRect.path</p>
+<!-- Testing: strokeRect does not affect the current path -->
 <canvas height="50" id="c577" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_path() {
 
 var canvas = document.getElementById('c577');
 var ctx = canvas.getContext('2d');
 
@@ -15686,16 +15753,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.shadow.html ]]] -->
 
 <p>Canvas test: 2d.strokeRect.shadow</p>
+<!-- Testing: strokeRect draws shadows -->
 <canvas height="50" id="c578" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_shadow() {
 
 var canvas = document.getElementById('c578');
 var ctx = canvas.getContext('2d');
 
@@ -15722,16 +15790,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.transform.html ]]] -->
 
 <p>Canvas test: 2d.strokeRect.transform</p>
+<!-- Testing: fillRect is affected by transforms -->
 <canvas height="50" id="c579" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_transform() {
 
 var canvas = document.getElementById('c579');
 var ctx = canvas.getContext('2d');
 
@@ -15744,16 +15813,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.zero.2.html ]]] -->
 
 <p>Canvas test: 2d.strokeRect.zero.2</p>
+<!-- Testing: strokeRect of 0x0 pixels draws nothing, including caps and joins -->
 <canvas height="50" id="c581" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_zero_2() {
 
 var canvas = document.getElementById('c581');
 var ctx = canvas.getContext('2d');
 
@@ -15766,16 +15836,17 @@ isPixel(ctx, 50,25, 0,0,0,0, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.zero.3.html ]]] -->
 
 <p>Canvas test: 2d.strokeRect.zero.3</p>
+<!-- Testing: strokeRect of Nx0 pixels draws a straight line -->
 <canvas height="50" id="c582" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_zero_3() {
 
 var canvas = document.getElementById('c582');
 var ctx = canvas.getContext('2d');
 
@@ -15786,16 +15857,17 @@ isPixel(ctx, 50,25, 0,255,0,255, 0);
 
 
 }
 </script>
 
 <!-- [[[ test_2d.strokeRect.zero.4.html ]]] -->
 
 <p>Canvas test: 2d.strokeRect.zero.4</p>
+<!-- Testing: strokeRect of Nx0 pixels draws a closed line with no caps -->
 <canvas height="50" id="c583" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_2d_strokeRect_zero_4() {
 
 var canvas = document.getElementById('c583');
 var ctx = canvas.getContext('2d');
 
@@ -17550,17 +17622,17 @@ ok(canvas.width == 50, "canvas.width == 
 ok(canvas.height == 30, "canvas.height == 30");
 
 
 }
 </script>
 
 <!-- [[[ test_toDataURL.arguments.1.html ]]] -->
 
-<p>Canvas test: toDataURL.arguments.1 - bug 401795</p>
+<p>Canvas test: toDataURL.arguments.1</p>
 <!-- Testing: toDataURL ignores extra arguments -->
 <canvas height="50" id="c664" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_toDataURL_arguments_1() {
 
 var canvas = document.getElementById('c664');
 var ctx = canvas.getContext('2d');
@@ -17569,17 +17641,17 @@ var data = canvas.toDataURL('image/png',
 ok(data.match(/^data:image\/png[;,]/), "data.match(/^data:image\\/png[;,]/)");
 
 
 }
 </script>
 
 <!-- [[[ test_toDataURL.arguments.2.html ]]] -->
 
-<p>Canvas test: toDataURL.arguments.2 - bug 401795</p>
+<p>Canvas test: toDataURL.arguments.2</p>
 <!-- Testing: toDataURL ignores extra arguments -->
 <canvas height="50" id="c665" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_toDataURL_arguments_2() {
 
 var canvas = document.getElementById('c665');
 var ctx = canvas.getContext('2d');
@@ -17588,17 +17660,17 @@ var data = canvas.toDataURL('image/png',
 ok(data.match(/^data:image\/png[;,]/), "data.match(/^data:image\\/png[;,]/)");
 
 
 }
 </script>
 
 <!-- [[[ test_toDataURL.arguments.3.html ]]] -->
 
-<p>Canvas test: toDataURL.arguments.3 - bug 401795</p>
+<p>Canvas test: toDataURL.arguments.3</p>
 <!-- Testing: toDataURL ignores extra arguments -->
 <canvas height="50" id="c666" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_toDataURL_arguments_3() {
 
 var canvas = document.getElementById('c666');
 var ctx = canvas.getContext('2d');
@@ -17692,17 +17764,17 @@ var data = canvas.toDataURL('image/png')
 ok(data.match(/^data:image\/png[;,]/), "data.match(/^data:image\\/png[;,]/)");
 
 
 }
 </script>
 
 <!-- [[[ test_toDataURL.unrecognised.html ]]] -->
 
-<p>Canvas test: toDataURL.unrecognised - bug 401795</p>
+<p>Canvas test: toDataURL.unrecognised</p>
 <!-- Testing: toDataURL with an unhandled type returns a PNG -->
 <canvas height="50" id="c673" width="100"><p class="fallback">FAIL (fallback content)</p></canvas>
 <script>
 
 function test_toDataURL_unrecognised() {
 
 var canvas = document.getElementById('c673');
 var ctx = canvas.getContext('2d');
