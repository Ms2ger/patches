From: Ms2ger <ms2ger@gmail.com>

diff --git a/layout/forms/nsListControlFrame.cpp b/layout/forms/nsListControlFrame.cpp
--- a/layout/forms/nsListControlFrame.cpp
+++ b/layout/forms/nsListControlFrame.cpp
@@ -8,17 +8,17 @@
 #include "nsReadableUtils.h"
 #include "nsUnicharUtils.h"
 #include "nsListControlFrame.h"
 #include "nsFormControlFrame.h" // for COMPARE macro
 #include "nsGkAtoms.h"
 #include "nsIFormControl.h"
 #include "nsIDocument.h"
 #include "nsIDOMHTMLCollection.h"
-#include "nsIDOMHTMLOptionsCollection.h"
+#include "mozilla/dom/HTMLOptionsCollection.h"
 #include "nsIDOMHTMLSelectElement.h"
 #include "nsIDOMHTMLOptionElement.h"
 #include "nsComboboxControlFrame.h"
 #include "nsViewManager.h"
 #include "nsIDOMHTMLOptGroupElement.h"
 #include "nsWidgetsCID.h"
 #include "nsIPresShell.h"
 #include "nsHTMLParts.h"
@@ -712,27 +712,24 @@ nsListControlFrame::InitSelectionRange(i
   // clicked >= selectedIndex, return selectedIndex.
   //
   // This makes it so that shift click works properly when you first click
   // in a multiple select.
   //
   int32_t selectedIndex = GetSelectedIndex();
   if (selectedIndex >= 0) {
     // Get the end of the contiguous selection
-    nsCOMPtr<nsIDOMHTMLOptionsCollection> options = GetOptions(mContent);
+    nsRefPtr<dom::HTMLOptionsCollection> options = GetOptions();
     NS_ASSERTION(options, "Collection of options is null!");
-    uint32_t numOptions;
-    options->GetLength(&numOptions);
+    uint32_t numOptions = options->Length();
+    // Push i to one past the last selected index in the group
     uint32_t i;
-    // Push i to one past the last selected index in the group
-    for (i=selectedIndex+1; i < numOptions; i++) {
-      bool selected;
-      nsCOMPtr<nsIDOMHTMLOptionElement> option = GetOption(options, i);
-      option->GetSelected(&selected);
-      if (!selected) {
+    for (i = selectedIndex + 1; i < numOptions; i++) {
+      dom::HTMLOptionElement* option = options->ItemAsOption(i);
+      if (!option->Selected()) {
         break;
       }
     }
 
     if (aClickedIndex < selectedIndex) {
       // User clicked before selection, so start selection at end of
       // contiguous selection
       mStartSelectionIndex = i-1;
@@ -964,30 +961,16 @@ nsListControlFrame::SetInitialChildList(
       mHasBeenInitialized = true;
     }
   }*/
 
   return rv;
 }
 
 //---------------------------------------------------------
-nsresult
-nsListControlFrame::GetSizeAttribute(uint32_t *aSize) {
-  nsresult rv = NS_OK;
-  nsIDOMHTMLSelectElement* selectElement;
-  rv = mContent->QueryInterface(NS_GET_IID(nsIDOMHTMLSelectElement),(void**) &selectElement);
-  if (mContent && NS_SUCCEEDED(rv)) {
-    rv = selectElement->GetSize(aSize);
-    NS_RELEASE(selectElement);
-  }
-  return rv;
-}
-
-
-//---------------------------------------------------------
 void
 nsListControlFrame::Init(nsIContent*     aContent,
                          nsIFrame*       aParent,
                          nsIFrame*       aPrevInFlow)
 {
   nsHTMLScrollFrame::Init(aContent, aParent, aPrevInFlow);
 
   // we shouldn't have to unregister this listener because when
@@ -1010,91 +993,42 @@ nsListControlFrame::Init(nsIContent*    
 
   mLastDropdownBackstopColor = PresContext()->DefaultBackgroundColor();
 
   if (IsInDropDownMode()) {
     AddStateBits(NS_FRAME_IN_POPUP);
   }
 }
 
-already_AddRefed<nsIContent> 
-nsListControlFrame::GetOptionAsContent(nsIDOMHTMLOptionsCollection* aCollection, int32_t aIndex) 
+dom::HTMLOptionsCollection*
+nsListControlFrame::GetOptions() const
 {
-  nsCOMPtr<nsIDOMHTMLOptionElement> optionElement = GetOption(aCollection,
-                                                              aIndex);
-
-  NS_ASSERTION(optionElement != nullptr, "could not get option element by index!");
-
-  nsCOMPtr<nsIContent> content = do_QueryInterface(optionElement);
-  return content.forget();
+  if (!mContent || !mContent->IsHTML(nsGkAtoms::select)) {
+    return nullptr;
+  }
+  return static_cast<dom::HTMLSelectElement*>(mContent)->Options();
 }
 
-already_AddRefed<nsIContent> 
-nsListControlFrame::GetOptionContent(int32_t aIndex) const
-  
+dom::HTMLOptionElement*
+nsListControlFrame::GetOption(uint32_t aIndex) const
 {
-  nsCOMPtr<nsIDOMHTMLOptionsCollection> options = GetOptions(mContent);
-  NS_ASSERTION(options.get() != nullptr, "Collection of options is null!");
-
-  if (options) {
-    return GetOptionAsContent(options, aIndex);
-  } 
-  return nullptr;
+  dom::HTMLOptionsCollection* options = GetOptions();
+  if (!options) {
+    return nullptr;
+  }
+  return options->ItemAsOption(aIndex);
 }
 
-already_AddRefed<nsIDOMHTMLOptionsCollection>
-nsListControlFrame::GetOptions(nsIContent * aContent)
-{
-  nsCOMPtr<nsIDOMHTMLOptionsCollection> options;
-  nsCOMPtr<nsIDOMHTMLSelectElement> selectElement = do_QueryInterface(aContent);
-  if (selectElement) {
-    selectElement->GetOptions(getter_AddRefs(options));
-  }
-
-  return options.forget();
-}
-
-already_AddRefed<nsIDOMHTMLOptionElement>
-nsListControlFrame::GetOption(nsIDOMHTMLOptionsCollection* aCollection,
-                              int32_t aIndex)
-{
-  nsCOMPtr<nsIDOMNode> node;
-  if (NS_SUCCEEDED(aCollection->Item(aIndex, getter_AddRefs(node)))) {
-    NS_ASSERTION(node,
-                 "Item was successful, but node from collection was null!");
-    if (node) {
-      nsCOMPtr<nsIDOMHTMLOptionElement> option = do_QueryInterface(node);
-
-      return option.forget();
-    }
-  } else {
-    NS_ERROR("Couldn't get option by index from collection!");
-  }
-  return nullptr;
-}
-
-bool 
-nsListControlFrame::IsContentSelected(nsIContent* aContent) const
-{
-  bool isSelected = false;
-
-  nsCOMPtr<nsIDOMHTMLOptionElement> optEl = do_QueryInterface(aContent);
-  if (optEl)
-    optEl->GetSelected(&isSelected);
-
-  return isSelected;
-}
-
-bool 
+bool
 nsListControlFrame::IsContentSelectedByIndex(int32_t aIndex) const 
 {
-  nsCOMPtr<nsIContent> content = GetOptionContent(aIndex);
-  NS_ASSERTION(content, "Failed to retrieve option content");
+  dom::HTMLOptionElement* option = GetOption(aIndex);
+  NS_ENSURE_TRUE(option, false);
 
-  return IsContentSelected(content);
+  return option->Selected();
 }
 
 NS_IMETHODIMP
 nsListControlFrame::OnOptionSelected(int32_t aIndex, bool aSelected)
 {
   if (aSelected) {
     ScrollToIndex(aIndex);
   }
@@ -1162,51 +1096,20 @@ nsListControlFrame::SetComboboxFrame(nsI
   if (nullptr != aComboboxFrame) {
     mComboboxFrame = do_QueryFrame(aComboboxFrame);
   }
 }
 
 void
 nsListControlFrame::GetOptionText(int32_t aIndex, nsAString & aStr)
 {
-  aStr.SetLength(0);
-  nsCOMPtr<nsIDOMHTMLOptionsCollection> options = GetOptions(mContent);
-
-  if (options) {
-    uint32_t numOptions;
-    options->GetLength(&numOptions);
-
-    if (numOptions != 0) {
-      nsCOMPtr<nsIDOMHTMLOptionElement> optionElement =
-        GetOption(options, aIndex);
-      if (optionElement) {
-#if 0 // This is for turning off labels Bug 4050
-        nsAutoString text;
-        optionElement->GetLabel(text);
-        // the return value is always NS_OK from DOMElements
-        // it is meaningless to check for it
-        if (!text.IsEmpty()) { 
-          nsAutoString compressText = text;
-          compressText.CompressWhitespace(true, true);
-          if (!compressText.IsEmpty()) {
-            text = compressText;
-          }
-        }
-
-        if (text.IsEmpty()) {
-          // the return value is always NS_OK from DOMElements
-          // it is meaningless to check for it
-          optionElement->GetText(text);
-        }          
-        aStr = text;
-#else
-        optionElement->GetText(aStr);
-#endif
-      }
-    }
+  aStr.Truncate();
+  dom::HTMLOptionElement* optionElement = GetOption(aIndex);
+  if (optionElement) {
+    optionElement->GetText(aStr);
   }
 }
 
 int32_t
 nsListControlFrame::GetSelectedIndex()
 {
   int32_t aIndex;
   
@@ -1220,17 +1123,18 @@ already_AddRefed<nsIContent>
 nsListControlFrame::GetCurrentOption()
 {
   // The mEndSelectionIndex is what is currently being selected. Use
   // the selected index if this is kNothingSelected.
   int32_t focusedIndex = (mEndSelectionIndex == kNothingSelected) ?
     GetSelectedIndex() : mEndSelectionIndex;
 
   if (focusedIndex != kNothingSelected) {
-    return GetOptionContent(focusedIndex);
+    nsCOMPtr<nsIContent> content = GetOption(focusedIndex);
+    return content.forget();
   }
 
   nsRefPtr<dom::HTMLSelectElement> selectElement =
     dom::HTMLSelectElement::FromContent(mContent);
   NS_ASSERTION(selectElement, "Can't be null");
 
   // There is no a selected item return the first non-disabled item and skip all
   // the option group elements.
@@ -1269,28 +1173,22 @@ bool
 nsListControlFrame::IsInDropDownMode() const
 {
   return (mComboboxFrame != nullptr);
 }
 
 uint32_t
 nsListControlFrame::GetNumberOfOptions()
 {
-  if (!mContent) {
-    return 0;
-  }
-
-  nsCOMPtr<nsIDOMHTMLOptionsCollection> options = GetOptions(mContent);
+  dom::HTMLOptionsCollection* options = GetOptions();
   if (!options) {
     return 0;
   }
 
-  uint32_t length = 0;
-  options->GetLength(&length);
-  return length;
+  return options->Length();
 }
 
 //----------------------------------------------------------------------
 // nsISelectControlFrame
 //----------------------------------------------------------------------
 bool nsListControlFrame::CheckIfAllFramesHere()
 {
   // Get the number of optgroups and options
@@ -1419,39 +1317,26 @@ nsListControlFrame::SetOptionsSelectedFr
                                              &wasChanged);
   NS_ASSERTION(NS_SUCCEEDED(rv), "SetSelected failed");
   return wasChanged;
 }
 
 bool
 nsListControlFrame::ToggleOptionSelectedFromFrame(int32_t aIndex)
 {
-  nsCOMPtr<nsIDOMHTMLOptionsCollection> options = GetOptions(mContent);
-  NS_ASSERTION(options, "No options");
-  if (!options) {
-    return false;
-  }
-  nsCOMPtr<nsIDOMHTMLOptionElement> option = GetOption(options, aIndex);
-  NS_ASSERTION(option, "No option");
-  if (!option) {
-    return false;
-  }
+  nsRefPtr<dom::HTMLOptionElement> option = GetOption(aIndex);
+  NS_ENSURE_TRUE(option, false);
 
-  bool value = false;
-#ifdef DEBUG
-  nsresult rv =
-#endif
-    option->GetSelected(&value);
+  bool value = option->Selected();
 
-  NS_ASSERTION(NS_SUCCEEDED(rv), "GetSelected failed");
   nsRefPtr<dom::HTMLSelectElement> selectElement =
     dom::HTMLSelectElement::FromContent(mContent);
   bool wasChanged = false;
 #ifdef DEBUG
-  rv =
+  nsresult rv =
 #endif
     selectElement->SetOptionsSelectedByIndex(aIndex,
                                              aIndex,
                                              !value,
                                              false,
                                              false,
                                              true,
                                              &wasChanged);
@@ -1716,18 +1601,23 @@ nsListControlFrame::CalcFallbackRowHeigh
 
 nscoord
 nsListControlFrame::CalcIntrinsicHeight(nscoord aHeightOfARow,
                                         int32_t aNumberOfOptions)
 {
   NS_PRECONDITION(!IsInDropDownMode(),
                   "Shouldn't be in dropdown mode when we call this");
 
-  mNumDisplayRows = 1;
-  GetSizeAttribute(&mNumDisplayRows);
+  dom::HTMLSelectElement* select =
+    dom::HTMLSelectElement::FromContentOrNull(mContent);
+  if (select) {
+    mNumDisplayRows = select->Size();
+  } else {
+    mNumDisplayRows = 1;
+  }
 
   if (mNumDisplayRows < 1) {
     mNumDisplayRows = 4;
   }
 
   return mNumDisplayRows * aHeightOfARow;
 }
 
@@ -1901,29 +1791,29 @@ nsListControlFrame::GetIndexFromDOMEvent
   int32_t numOptions = GetNumberOfOptions();
   if (numOptions < 1)
     return NS_ERROR_FAILURE;
 
   nsPoint pt = nsLayoutUtils::GetDOMEventCoordinatesRelativeTo(aMouseEvent, this);
 
   // If the event coordinate is above the first option frame, then target the
   // first option frame
-  nsCOMPtr<nsIContent> firstOption = GetOptionContent(0);
+  nsCOMPtr<nsIContent> firstOption = GetOption(0);
   NS_ASSERTION(firstOption, "Can't find first option that's supposed to be there");
   nsIFrame* optionFrame = firstOption->GetPrimaryFrame();
   if (optionFrame) {
     nsPoint ptInOptionFrame = pt - optionFrame->GetOffsetTo(this);
     if (ptInOptionFrame.y < 0 && ptInOptionFrame.x >= 0 &&
         ptInOptionFrame.x < optionFrame->GetSize().width) {
       aCurIndex = 0;
       return NS_OK;
     }
   }
 
-  nsCOMPtr<nsIContent> lastOption = GetOptionContent(numOptions - 1);
+  nsCOMPtr<nsIContent> lastOption = GetOption(numOptions - 1);
   // If the event coordinate is below the last option frame, then target the
   // last option frame
   NS_ASSERTION(lastOption, "Can't find last option that's supposed to be there");
   optionFrame = lastOption->GetPrimaryFrame();
   if (optionFrame) {
     nsPoint ptInOptionFrame = pt - optionFrame->GetOffsetTo(this);
     if (ptInOptionFrame.y >= optionFrame->GetSize().height && ptInOptionFrame.x >= 0 &&
         ptInOptionFrame.x < optionFrame->GetSize().width) {
@@ -2061,23 +1951,22 @@ nsListControlFrame::DragMove(nsIDOMEvent
 //----------------------------------------------------------------------
 nsresult
 nsListControlFrame::ScrollToIndex(int32_t aIndex)
 {
   if (aIndex < 0) {
     // XXX shouldn't we just do nothing if we're asked to scroll to
     // kNothingSelected?
     return ScrollToFrame(nullptr);
-  } else {
-    nsCOMPtr<nsIContent> content = GetOptionContent(aIndex);
-    if (content) {
-      return ScrollToFrame(content);
-    }
   }
 
+  nsCOMPtr<nsIContent> content = GetOption(aIndex);
+  if (content) {
+    return ScrollToFrame(content);
+  }
   return NS_ERROR_FAILURE;
 }
 
 nsresult
 nsListControlFrame::ScrollToFrame(nsIContent* aOptElement)
 {
   // if null is passed in we scroll to 0,0
   if (nullptr == aOptElement) {
@@ -2264,21 +2153,20 @@ nsListControlFrame::KeyPress(nsIDOMEvent
   bool isShift   = false;
   keyEvent->GetCtrlKey(&isControl);
   if (!isControl) {
     keyEvent->GetMetaKey(&isControl);
   }
   keyEvent->GetShiftKey(&isShift);
 
   // now make sure there are options or we are wasting our time
-  nsCOMPtr<nsIDOMHTMLOptionsCollection> options = GetOptions(mContent);
+  nsRefPtr<dom::HTMLOptionsCollection> options = GetOptions();
   NS_ENSURE_TRUE(options, NS_ERROR_FAILURE);
 
-  uint32_t numOptions = 0;
-  options->GetLength(&numOptions);
+  uint32_t numOptions = options->Length();
 
   // Whether we did an incremental search or another action
   bool didIncrementalSearch = false;
   
   // this is the new index to set
   // DOM_VK_RETURN & DOM_VK_ESCAPE will not set this
   int32_t newIndex = kNothingSelected;
 
@@ -2433,17 +2321,18 @@ nsListControlFrame::KeyPress(nsIDOMEvent
       if (startIndex == kNothingSelected) {
         startIndex = 0;
       } else if (stringLength == 1) {
         startIndex++;
       }
 
       for (uint32_t i = 0; i < numOptions; ++i) {
         uint32_t index = (i + startIndex) % numOptions;
-        nsCOMPtr<nsIDOMHTMLOptionElement> optionElement = GetOption(options, index);
+        nsRefPtr<dom::HTMLOptionElement> optionElement =
+          options->ItemAsOption(index);
         if (!optionElement) {
           continue;
         }
 
         nsAutoString text;
         if (NS_FAILED(optionElement->GetText(text)) ||
             !StringBeginsWith(nsContentUtils::TrimWhitespace<nsContentUtils::IsHTMLWhitespaceOrNBSP>(text, false),
                               incrementalString,
diff --git a/layout/forms/nsListControlFrame.h b/layout/forms/nsListControlFrame.h
--- a/layout/forms/nsListControlFrame.h
+++ b/layout/forms/nsListControlFrame.h
@@ -20,23 +20,27 @@
 #include "nsGfxScrollFrame.h"
 #include "nsIFormControlFrame.h"
 #include "nsIListControlFrame.h"
 #include "nsISelectControlFrame.h"
 #include "nsIDOMEventListener.h"
 #include "nsAutoPtr.h"
 #include "nsSelectsAreaFrame.h"
 
+class nsIComboboxControlFrame;
 class nsIContent;
-class nsIDOMHTMLSelectElement;
-class nsIDOMHTMLOptionsCollection;
-class nsIDOMHTMLOptionElement;
-class nsIComboboxControlFrame;
+class nsListEventListener;
 class nsPresContext;
-class nsListEventListener;
+
+namespace mozilla {
+namespace dom {
+class HTMLOptionElement;
+class HTMLOptionsCollection;
+} // namespace dom
+} // namespace mozilla
 
 /**
  * Frame-based listbox.
  */
 
 class nsListControlFrame : public nsHTMLScrollFrame,
                            public nsIFormControlFrame, 
                            public nsIListControlFrame,
@@ -158,34 +162,20 @@ public:
   // mouse event listeners (both )
   nsresult MouseDown(nsIDOMEvent* aMouseEvent); // might destroy |this|
   nsresult MouseUp(nsIDOMEvent* aMouseEvent);   // might destroy |this|
   nsresult MouseMove(nsIDOMEvent* aMouseEvent);
   nsresult DragMove(nsIDOMEvent* aMouseEvent);
   nsresult KeyPress(nsIDOMEvent* aKeyEvent);    // might destroy |this|
 
   /**
-   * Returns the options collection for aContent, if any.
+   * Returns the options collection for mContent, if any.
    */
-  static already_AddRefed<nsIDOMHTMLOptionsCollection>
-    GetOptions(nsIContent * aContent);
-
-  /**
-   * Returns the nsIDOMHTMLOptionElement for a given index 
-   * in the select's collection.
-   */
-  static already_AddRefed<nsIDOMHTMLOptionElement>
-    GetOption(nsIDOMHTMLOptionsCollection* aOptions, int32_t aIndex);
-
-  /**
-   * Returns the nsIContent object in the collection 
-   * for a given index.
-   */
-  static already_AddRefed<nsIContent>
-    GetOptionAsContent(nsIDOMHTMLOptionsCollection* aCollection,int32_t aIndex);
+  mozilla::dom::HTMLOptionsCollection* GetOptions() const;
+  mozilla::dom::HTMLOptionElement* GetOption(uint32_t aIndex) const;
 
   static void ComboboxFocusSet();
 
   // Helper
   bool IsFocused() { return this == mFocused; }
 
   /**
    * Function to paint the focus rect when our nsSelectsAreaFrame is painting.
@@ -304,41 +294,27 @@ protected:
    * those values as determined by the original HTML
    */
   virtual void ResetList(bool aAllowScrolling);
 
   nsListControlFrame(nsIPresShell* aShell, nsIDocument* aDocument, nsStyleContext* aContext);
   virtual ~nsListControlFrame();
 
   // Utility methods
-  nsresult GetSizeAttribute(uint32_t *aSize);
   nsIContent* GetOptionFromContent(nsIContent *aContent);
 
   /**
    * Sets the mSelectedIndex and mOldSelectedIndex from figuring out what 
    * item was selected using content
    * @param aPoint the event point, in listcontrolframe coordinates
    * @return NS_OK if it successfully found the selection
    */
   nsresult GetIndexFromDOMEvent(nsIDOMEvent* aMouseEvent, int32_t& aCurIndex);
 
   /**
-   * For a given index it returns the nsIContent object 
-   * from the select.
-   */
-  already_AddRefed<nsIContent> GetOptionContent(int32_t aIndex) const;
-
-  /** 
-   * For a given piece of content, it determines whether the 
-   * content (an option) is selected or not.
-   * @return true if it is, false if it is NOT.
-   */
-  bool     IsContentSelected(nsIContent* aContent) const;
-
-  /**
    * For a given index is return whether the content is selected.
    */
   bool     IsContentSelectedByIndex(int32_t aIndex) const;
 
   bool     CheckIfAllFramesHere();
   int32_t  GetIndexFromContent(nsIContent *aContent);
   bool     IsLeftButton(nsIDOMEvent* aMouseEvent);
 
