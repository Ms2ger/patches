From: Ms2ger <ms2ger@gmail.com>
Bug 896283 - Part c: Use nsINode in nsEditor::JoinNodesImpl; r=ehsan

diff --git a/editor/libeditor/base/JoinElementTxn.cpp b/editor/libeditor/base/JoinElementTxn.cpp
--- a/editor/libeditor/base/JoinElementTxn.cpp
+++ b/editor/libeditor/base/JoinElementTxn.cpp
@@ -62,43 +62,35 @@ NS_IMETHODIMP JoinElementTxn::DoTransact
            static_cast<void*>(mLeftNode.get()),
            static_cast<void*>(mRightNode.get()));
   }
 #endif
 
   NS_PRECONDITION((mEditor && mLeftNode && mRightNode), "null arg");
   if (!mEditor || !mLeftNode || !mRightNode) { return NS_ERROR_NOT_INITIALIZED; }
 
-  nsCOMPtr<nsINode> leftNode = do_QueryInterface(mLeftNode);
-  NS_ENSURE_STATE(leftNode);
-
-  nsCOMPtr<nsINode> rightNode = do_QueryInterface(mRightNode);
-  NS_ENSURE_STATE(rightNode);
-
   // get the parent node
-  nsCOMPtr<nsINode> leftParent = leftNode->GetParentNode();
+  nsCOMPtr<nsINode> leftParent = mLeftNode->GetParentNode();
   NS_ENSURE_TRUE(leftParent, NS_ERROR_NULL_POINTER);
 
   // verify that mLeftNode and mRightNode have the same parent
-  nsCOMPtr<nsINode> rightParent = rightNode->GetParentNode();
+  nsCOMPtr<nsINode> rightParent = mRightNode->GetParentNode();
   NS_ENSURE_TRUE(rightParent, NS_ERROR_NULL_POINTER);
 
   if (leftParent != rightParent) {
     NS_ASSERTION(false, "2 nodes do not have same parent");
     return NS_ERROR_INVALID_ARG;
   }
 
   // set this instance mParent. 
   // Other methods will see a non-null mParent and know all is well
   mParent = leftParent;
-  mOffset = leftNode->Length();
+  mOffset = mLeftNode->Length();
 
-  nsresult rv = mEditor->JoinNodesImpl(mRightNode->AsDOMNode(),
-                                       mLeftNode->AsDOMNode(),
-                                       mParent->AsDOMNode());
+  nsresult rv = mEditor->JoinNodesImpl(mRightNode, mLeftNode, mParent);
 
 #ifdef DEBUG
   if (NS_SUCCEEDED(rv) && gNoisy) {
     printf("  left node = %p removed\n", static_cast<void*>(mLeftNode.get()));
   }
 #endif
 
   return rv;
diff --git a/editor/libeditor/base/SplitElementTxn.cpp b/editor/libeditor/base/SplitElementTxn.cpp
--- a/editor/libeditor/base/SplitElementTxn.cpp
+++ b/editor/libeditor/base/SplitElementTxn.cpp
@@ -124,38 +124,37 @@ NS_IMETHODIMP SplitElementTxn::UndoTrans
 #endif
 
   NS_ASSERTION(mEditor && mExistingRightNode && mNewLeftNode && mParent, "bad state");
   if (!mEditor || !mExistingRightNode || !mNewLeftNode || !mParent) {
     return NS_ERROR_NOT_INITIALIZED;
   }
 
   // this assumes Do inserted the new node in front of the prior existing node
-  nsresult result = mEditor->JoinNodesImpl(mExistingRightNode->AsDOMNode(),
-                                           mNewLeftNode->AsDOMNode(),
-                                           mParent->AsDOMNode());
+  nsresult rv = mEditor->JoinNodesImpl(mExistingRightNode, mNewLeftNode,
+                                       mParent);
 #ifdef DEBUG
   if (gNoisy) 
   { 
     printf("** after join left child node %p into right node %p\n",
            static_cast<void*>(mNewLeftNode.get()),
            static_cast<void*>(mExistingRightNode.get()));
     if (gNoisy) {mEditor->DebugDumpContent(); } // DEBUG
   }
-  if (NS_SUCCEEDED(result))
+  if (NS_SUCCEEDED(rv))
   {
     if (gNoisy)
     {
       printf("  left node = %p removed\n",
              static_cast<void*>(mNewLeftNode.get()));
     }
   }
 #endif
 
-  return result;
+  return rv;
 }
 
 /* redo cannot simply resplit the right node, because subsequent transactions
  * on the redo stack may depend on the left node existing in its previous state.
  */
 NS_IMETHODIMP SplitElementTxn::RedoTransaction(void)
 {
   NS_ASSERTION(mEditor && mExistingRightNode && mNewLeftNode && mParent, "bad state");
diff --git a/editor/libeditor/base/nsEditor.cpp b/editor/libeditor/base/nsEditor.cpp
--- a/editor/libeditor/base/nsEditor.cpp
+++ b/editor/libeditor/base/nsEditor.cpp
@@ -2834,163 +2834,137 @@ nsEditor::SplitNodeImpl(nsIDOMNode * aEx
   }
   else
     result = NS_ERROR_INVALID_ARG;
 
   return result;
 }
 
 nsresult
-nsEditor::JoinNodesImpl(nsIDOMNode * aNodeToKeep,
-                        nsIDOMNode * aNodeToJoin,
-                        nsIDOMNode * aParent)
+nsEditor::JoinNodesImpl(nsINode* aNodeToKeep,
+                        nsINode* aNodeToJoin,
+                        nsINode* aParent)
 {
   MOZ_ASSERT(aNodeToKeep);
   MOZ_ASSERT(aNodeToJoin);
   MOZ_ASSERT(aParent);
 
-  // get selection
-  nsCOMPtr<nsISelection> selection;
-  GetSelection(getter_AddRefs(selection));
+  nsRefPtr<Selection> selection = GetSelection();
   NS_ENSURE_TRUE(selection, NS_ERROR_NULL_POINTER);
 
   // remember some selection points
-  nsCOMPtr<nsIDOMNode> selStartNode, selEndNode;
-  int32_t selStartOffset, selEndOffset, joinOffset, keepOffset;
+  nsCOMPtr<nsINode> selStartNode;
+  int32_t selStartOffset;
   nsresult result = GetStartNodeAndOffset(selection, getter_AddRefs(selStartNode), &selStartOffset);
-  if (NS_FAILED(result)) selStartNode = nullptr;
+  if (NS_FAILED(result)) {
+    selStartNode = nullptr;
+  }
+
+  nsCOMPtr<nsINode> selEndNode;
+  int32_t selEndOffset;
   result = GetEndNodeAndOffset(selection, getter_AddRefs(selEndNode), &selEndOffset);
   // Joe or Kin should comment here on why the following line is not a copy/paste error
-  if (NS_FAILED(result)) selStartNode = nullptr;
-
-  nsCOMPtr<nsIDOMNode> leftNode = aNodeToJoin;
-
-  uint32_t firstNodeLength;
-  result = GetLengthOfDOMNode(leftNode, firstNodeLength);
-  NS_ENSURE_SUCCESS(result, result);
-  nsCOMPtr<nsIDOMNode> parent = GetNodeLocation(aNodeToJoin, &joinOffset);
-  parent = GetNodeLocation(aNodeToKeep, &keepOffset);
+  if (NS_FAILED(result)) {
+    selStartNode = nullptr;
+  }
+
+  uint32_t firstNodeLength = aNodeToJoin->Length();
+
+  int32_t joinOffset;
+  GetNodeLocation(aNodeToJoin, &joinOffset);
+  int32_t keepOffset;
+  nsINode* parent = GetNodeLocation(aNodeToKeep, &keepOffset);
 
   // if selection endpoint is between the nodes, remember it as being
   // in the one that is going away instead.  This simplifies later selection
   // adjustment logic at end of this method.
-  if (selStartNode)
-  {
-    if (selStartNode == parent)
-    {
-      if ((selStartOffset > joinOffset) && (selStartOffset <= keepOffset))
-      {
-        selStartNode = aNodeToJoin;
-        selStartOffset = firstNodeLength;
-      }
+  if (selStartNode) {
+    if (selStartNode == parent &&
+        joinOffset < selStartOffset && selStartOffset <= keepOffset) {
+      selStartNode = aNodeToJoin;
+      selStartOffset = firstNodeLength;
     }
-    if (selEndNode == parent)
-    {
-      if ((selEndOffset > joinOffset) && (selEndOffset <= keepOffset))
-      {
-        selEndNode = aNodeToJoin;
-        selEndOffset = firstNodeLength;
-      }
+    if (selEndNode == parent &&
+        joinOffset < selEndOffset && selEndOffset <= keepOffset) {
+      selEndNode = aNodeToJoin;
+      selEndOffset = firstNodeLength;
     }
   }
+
   // ok, ready to do join now.
   // if it's a text node, just shuffle around some text
   nsCOMPtr<nsIDOMCharacterData> keepNodeAsText( do_QueryInterface(aNodeToKeep) );
   nsCOMPtr<nsIDOMCharacterData> joinNodeAsText( do_QueryInterface(aNodeToJoin) );
-  if (keepNodeAsText && joinNodeAsText)
-  {
+  if (keepNodeAsText && joinNodeAsText) {
     nsAutoString rightText;
     nsAutoString leftText;
     keepNodeAsText->GetData(rightText);
     joinNodeAsText->GetData(leftText);
     leftText += rightText;
     keepNodeAsText->SetData(leftText);
-  }
-  else
-  {  // otherwise it's an interior node, so shuffle around the children
-    nsCOMPtr<nsIDOMNodeList> childNodes;
-    result = aNodeToJoin->GetChildNodes(getter_AddRefs(childNodes));
-    NS_ENSURE_TRUE(childNodes, NS_ERROR_NULL_POINTER);
-    NS_ENSURE_SUCCESS(result, result);
-
-    int32_t i;  // must be signed int!
-    uint32_t childCount=0;
-    nsCOMPtr<nsIDOMNode> firstNode;
-    childNodes->GetLength(&childCount);
+  } else {
+    // otherwise it's an interior node, so shuffle around the children
+    nsCOMPtr<nsINodeList> childNodes = aNodeToJoin->ChildNodes();
+    MOZ_ASSERT(childNodes);
+
     // remember the first child in aNodeToKeep, we'll insert all the children of aNodeToJoin in front of it
-    result = aNodeToKeep->GetFirstChild(getter_AddRefs(firstNode));
-    NS_ENSURE_SUCCESS(result, result);
-
     // GetFirstChild returns nullptr firstNode if aNodeToKeep has no children, that's ok.
-    nsCOMPtr<nsIDOMNode> resultNode;
+    nsCOMPtr<nsIContent> firstNode = aNodeToKeep->GetFirstChild();
+
     // have to go through the list backwards to keep deletes from interfering with iteration
-    nsCOMPtr<nsIDOMNode> previousChild;
-    for (i = childCount - 1; i >= 0; i--)
-    {
-      nsCOMPtr<nsIDOMNode> childNode;
-      result = childNodes->Item(i, getter_AddRefs(childNode));
-      NS_ENSURE_SUCCESS(result, result);
-
+    for (uint32_t i = childNodes->Length(); i > 0; --i) {
+      nsCOMPtr<nsIContent> childNode = childNodes->Item(i - 1);
       if (childNode) {
         // prepend children of aNodeToJoin
-        result = aNodeToKeep->InsertBefore(childNode, firstNode, getter_AddRefs(resultNode));
-        NS_ENSURE_SUCCESS(result, result);
-        firstNode = do_QueryInterface(childNode);
+        ErrorResult err;
+        aNodeToKeep->InsertBefore(*childNode, firstNode, err);
+        NS_ENSURE_SUCCESS(err.ErrorCode(), err.ErrorCode());
+        firstNode = childNode.forget();
       }
     }
   }
 
   // delete the extra node
-  nsCOMPtr<nsIDOMNode> resultNode;
-  result = aParent->RemoveChild(aNodeToJoin, getter_AddRefs(resultNode));
-
-  if (GetShouldTxnSetSelection())
-  {
+  ErrorResult err;
+  aParent->RemoveChild(*aNodeToJoin, err);
+
+  if (GetShouldTxnSetSelection()) {
     // editor wants us to set selection at join point
-    selection->Collapse(aNodeToKeep, firstNodeLength);
-  }
-  else if (selStartNode)
-  {
+    selection->Collapse(aNodeToKeep, SafeCast<int32_t>(firstNodeLength));
+  } else if (selStartNode) {
     // and adjust the selection if needed
     // HACK: this is overly simplified - multi-range selections need more work than this
     bool bNeedToAdjust = false;
 
     // check to see if we joined nodes where selection starts
-    if (selStartNode.get() == aNodeToJoin)
-    {
+    if (selStartNode == aNodeToJoin) {
       bNeedToAdjust = true;
       selStartNode = aNodeToKeep;
-    }
-    else if (selStartNode.get() == aNodeToKeep)
-    {
+    } else if (selStartNode == aNodeToKeep) {
       bNeedToAdjust = true;
       selStartOffset += firstNodeLength;
     }
 
     // check to see if we joined nodes where selection ends
-    if (selEndNode.get() == aNodeToJoin)
-    {
+    if (selEndNode == aNodeToJoin) {
       bNeedToAdjust = true;
       selEndNode = aNodeToKeep;
-    }
-    else if (selEndNode.get() == aNodeToKeep)
-    {
+    } else if (selEndNode == aNodeToKeep) {
       bNeedToAdjust = true;
       selEndOffset += firstNodeLength;
     }
 
     // adjust selection if needed
-    if (bNeedToAdjust)
-    {
-      selection->Collapse(selStartNode,selStartOffset);
-      selection->Extend(selEndNode,selEndOffset);
+    if (bNeedToAdjust) {
+      selection->Collapse(selStartNode, selStartOffset);
+      selection->Extend(selEndNode, selEndOffset);
     }
   }
 
-  return result;
+  return err.ErrorCode();
 }
 
 
 int32_t
 nsEditor::GetChildOffset(nsIDOMNode* aChild, nsIDOMNode* aParent)
 {
   MOZ_ASSERT(aChild && aParent);
 
@@ -3815,16 +3789,38 @@ nsEditor::GetStartNodeAndOffset(nsISelec
   NS_ENSURE_SUCCESS(result, result);
 
   result = range->GetStartOffset(outStartOffset);
   NS_ENSURE_SUCCESS(result, result);
 
   return NS_OK;
 }
 
+nsresult
+nsEditor::GetStartNodeAndOffset(Selection* aSelection, nsINode** aStartNode,
+                                int32_t* aStartOffset)
+{
+  MOZ_ASSERT(aSelection);
+  MOZ_ASSERT(aStartNode);
+  MOZ_ASSERT(aStartOffset);
+
+  *aStartNode = nullptr;
+
+  NS_ENSURE_TRUE(aSelection->GetRangeCount(), NS_ERROR_FAILURE);
+
+  const nsRange* range = aSelection->GetRangeAt(0);
+  NS_ENSURE_TRUE(range, NS_ERROR_FAILURE);
+
+  NS_ENSURE_TRUE(range->IsPositioned(), NS_ERROR_FAILURE);
+
+  NS_IF_ADDREF(*aStartNode = range->GetStartParent());
+  *aStartOffset = range->StartOffset();
+  return NS_OK;
+}
+
 
 ///////////////////////////////////////////////////////////////////////////
 // GetEndNodeAndOffset: returns whatever the end parent & offset is of 
 //                        the first range in the selection.
 nsresult 
 nsEditor::GetEndNodeAndOffset(nsISelection *aSelection,
                                        nsIDOMNode **outEndNode,
                                        int32_t *outEndOffset)
@@ -3844,16 +3840,38 @@ nsEditor::GetEndNodeAndOffset(nsISelecti
     return NS_ERROR_FAILURE;
     
   if (NS_FAILED(range->GetEndOffset(outEndOffset)))
     return NS_ERROR_FAILURE;
     
   return NS_OK;
 }
 
+nsresult
+nsEditor::GetEndNodeAndOffset(Selection* aSelection, nsINode** aEndNode,
+                              int32_t* aEndOffset)
+{
+  MOZ_ASSERT(aSelection);
+  MOZ_ASSERT(aEndNode);
+  MOZ_ASSERT(aEndOffset);
+
+  *aEndNode = nullptr;
+
+  NS_ENSURE_TRUE(aSelection->GetRangeCount(), NS_ERROR_FAILURE);
+
+  const nsRange* range = aSelection->GetRangeAt(0);
+  NS_ENSURE_TRUE(range, NS_ERROR_FAILURE);
+
+  NS_ENSURE_TRUE(range->IsPositioned(), NS_ERROR_FAILURE);
+
+  NS_IF_ADDREF(*aEndNode = range->GetEndParent());
+  *aEndOffset = range->EndOffset();
+  return NS_OK;
+}
+
 
 ///////////////////////////////////////////////////////////////////////////
 // IsPreformatted: checks the style info for the node for the preformatted
 //                 text style.
 nsresult 
 nsEditor::IsPreformatted(nsIDOMNode *aNode, bool *aResult)
 {
   nsCOMPtr<nsIContent> content = do_QueryInterface(aNode);
diff --git a/editor/libeditor/base/nsEditor.h b/editor/libeditor/base/nsEditor.h
--- a/editor/libeditor/base/nsEditor.h
+++ b/editor/libeditor/base/nsEditor.h
@@ -446,19 +446,19 @@ public:
 
   /** 
    * JoinNodes() takes 2 nodes and merge their content|children.
    * @param aNodeToKeep   The node that will remain after the join.
    * @param aNodeToJoin   The node that will be joined with aNodeToKeep.
    *                      There is no requirement that the two nodes be of the same type.
    * @param aParent       The parent of aNodeToKeep
    */
-  nsresult JoinNodesImpl(nsIDOMNode *aNodeToKeep,
-                         nsIDOMNode *aNodeToJoin,
-                         nsIDOMNode *aParent);
+  nsresult JoinNodesImpl(nsINode* aNodeToKeep,
+                         nsINode* aNodeToJoin,
+                         nsINode* aParent);
 
   /**
    * Return the offset of aChild in aParent.  Asserts fatally if parent or
    * child is null, or parent is not child's parent.
    */
   static int32_t GetChildOffset(nsIDOMNode *aChild,
                                 nsIDOMNode *aParent);
 
@@ -606,17 +606,23 @@ public:
 
   static bool IsTextNode(nsIDOMNode *aNode);
   static bool IsTextNode(nsINode *aNode);
   
   static nsCOMPtr<nsIDOMNode> GetChildAt(nsIDOMNode *aParent, int32_t aOffset);
   static nsCOMPtr<nsIDOMNode> GetNodeAtRangeOffsetPoint(nsIDOMNode* aParentOrNode, int32_t aOffset);
 
   static nsresult GetStartNodeAndOffset(nsISelection *aSelection, nsIDOMNode **outStartNode, int32_t *outStartOffset);
+  static nsresult GetStartNodeAndOffset(mozilla::Selection* aSelection,
+                                        nsINode** aStartNode,
+                                        int32_t* aStartOffset);
   static nsresult GetEndNodeAndOffset(nsISelection *aSelection, nsIDOMNode **outEndNode, int32_t *outEndOffset);
+  static nsresult GetEndNodeAndOffset(mozilla::Selection* aSelection,
+                                      nsINode** aEndNode,
+                                      int32_t* aEndOffset);
 #if DEBUG_JOE
   static void DumpNode(nsIDOMNode *aNode, int32_t indent=0);
 #endif
   mozilla::Selection* GetSelection();
 
   // Helpers to add a node to the selection. 
   // Used by table cell selection methods
   nsresult CreateRange(nsIDOMNode *aStartParent, int32_t aStartOffset,
