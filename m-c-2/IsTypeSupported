From: Ms2ger <ms2ger@gmail.com>

diff --git a/docshell/base/nsWebNavigationInfo.cpp b/docshell/base/nsWebNavigationInfo.cpp
--- a/docshell/base/nsWebNavigationInfo.cpp
+++ b/docshell/base/nsWebNavigationInfo.cpp
@@ -29,58 +29,60 @@ nsWebNavigationInfo::Init()
 }
 
 NS_IMETHODIMP
 nsWebNavigationInfo::IsTypeSupported(const nsACString& aType,
                                      nsIWebNavigation* aWebNav,
                                      uint32_t* aIsTypeSupported)
 {
   NS_PRECONDITION(aIsTypeSupported, "null out param?");
+  *aIsTypeSupported = IsTypeSupported(aType, aWebNav);
+  return NS_OK;
+}
 
+uint32_t
+nsWebNavigationInfo::IsTypeSupported(const nsACString& aType,
+                                     nsIWebNavigation* aWebNav)
+{
   // Note to self: aWebNav could be an nsWebBrowser or an nsDocShell here (or
   // an nsSHistory, but not much we can do with that).  So if we start using
   // it here, we need to be careful to get to the docshell correctly.
   
   // For now just report what the Gecko-Content-Viewers category has
   // to say for itself.
-  *aIsTypeSupported = nsIWebNavigationInfo::UNSUPPORTED;
-
   const nsCString& flatType = PromiseFlatCString(aType);
-  *aIsTypeSupported = IsTypeSupportedInternal(flatType);
-
-  if (*aIsTypeSupported) {
-    return NS_OK;
+  if (uint32_t isTypeSupported = IsTypeSupportedInternal(flatType)) {
+    return isTypeSupported;
   }
 
   // If this request is for a docShell that isn't going to allow plugins,
   // there's no need to try and find a plugin to handle it.
   nsCOMPtr<nsIDocShell> docShell(do_QueryInterface(aWebNav));
   bool allowed;
   if (docShell && NS_SUCCEEDED(docShell->GetAllowPlugins(&allowed)) && !allowed) {
-    return NS_OK;
+    return nsIWebNavigationInfo::UNSUPPORTED;
   }
 
   // Try reloading plugins in case they've changed.
   nsCOMPtr<nsIPluginHost> pluginHost =
     do_GetService(MOZ_PLUGIN_HOST_CONTRACTID);
   if (pluginHost) {
     // false will ensure that currently running plugins will not
     // be shut down
     nsresult rv = pluginHost->ReloadPlugins();
     if (NS_SUCCEEDED(rv)) {
       // OK, we reloaded plugins and there were new ones
       // (otherwise NS_ERROR_PLUGINS_PLUGINSNOTCHANGED would have
       // been returned).  Try checking whether we can handle the
       // content now.
-      *aIsTypeSupported = IsTypeSupportedInternal(flatType);
-      return NS_OK;
+      return IsTypeSupportedInternal(flatType);
     }
   }
 
-  return NS_OK;
+  return nsIWebNavigationInfo::UNSUPPORTED;
 }
 
 uint32_t
 nsWebNavigationInfo::IsTypeSupportedInternal(const nsCString& aType)
 {
   nsContentUtils::ContentViewerType vtype = nsContentUtils::TYPE_UNSUPPORTED;
 
   nsCOMPtr<nsIDocumentLoaderFactory> docLoaderFactory =
diff --git a/docshell/base/nsWebNavigationInfo.h b/docshell/base/nsWebNavigationInfo.h
--- a/docshell/base/nsWebNavigationInfo.h
+++ b/docshell/base/nsWebNavigationInfo.h
@@ -26,15 +26,16 @@ public:
 
   NS_DECL_NSIWEBNAVIGATIONINFO
 
   nsresult Init();
 
 private:
   ~nsWebNavigationInfo() {}
   
+  uint32_t IsTypeSupported(const nsACString& aType, nsIWebNavigation* aWebNav);
   // Check whether aType is supported.
   uint32_t IsTypeSupportedInternal(const nsCString& aType);
   
   nsCOMPtr<nsICategoryManager> mCategoryManager;
 };
 
 #endif  // nsWebNavigationInfo_h__
