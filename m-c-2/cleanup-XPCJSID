From: Ms2ger <ms2ger@gmail.com>

diff --git a/js/xpconnect/src/XPCJSID.cpp b/js/xpconnect/src/XPCJSID.cpp
--- a/js/xpconnect/src/XPCJSID.cpp
+++ b/js/xpconnect/src/XPCJSID.cpp
@@ -610,30 +610,23 @@ nsJSCID::NewID(const char* str)
             return nullptr;
     }
     return idObj.forget();
 }
 
 static const nsID*
 GetIIDArg(uint32_t argc, const JS::Value& val, JSContext* cx)
 {
-    const nsID* iid;
+    if (!argc)
+        return &NS_GET_IID(nsISupports);
 
-    // If an IID was passed in then use it
-    if (argc) {
-        JSObject* iidobj;
-        if (val.isPrimitive() ||
-            !(iidobj = val.toObjectOrNull()) ||
-            !(iid = xpc_JSObjectToID(cx, iidobj))) {
-            return nullptr;
-        }
-    } else
-        iid = &NS_GET_IID(nsISupports);
+    if (!val.isObject())
+        return nullptr;
 
-    return iid;
+    return xpc_JSObjectToID(cx, &val.toObject());
 }
 
 /* nsISupports createInstance (); */
 NS_IMETHODIMP
 nsJSCID::CreateInstance(HandleValue iidval, JSContext *cx,
                         uint8_t optionalArgc, MutableHandleValue retval)
 {
     if (!mDetails->IsValid())
@@ -728,64 +721,62 @@ nsJSCID::Construct(nsIXPConnectWrappedNa
 
 /* bool hasInstance (in nsIXPConnectWrappedNative wrapper, in JSContextPtr cx, in JSObjectPtr obj, in jsval val, out bool bp); */
 NS_IMETHODIMP
 nsJSCID::HasInstance(nsIXPConnectWrappedNative *wrapper,
                      JSContext *cx, JSObject * /* unused */,
                      HandleValue val, bool *bp, bool *_retval)
 {
     *bp = false;
-    nsresult rv = NS_OK;
 
-    if (val.isObject()) {
-        // we have a JSObject
-        RootedObject obj(cx, &val.toObject());
-
-        MOZ_ASSERT(obj, "when is an object not an object?");
-
-        // is this really a native xpcom object with a wrapper?
-        nsIClassInfo *ci = nullptr;
-        obj = FindObjectForHasInstance(cx, obj);
-        if (!obj || !IS_WN_REFLECTOR(obj))
-            return rv;
-        if (XPCWrappedNative *other_wrapper = XPCWrappedNative::Get(obj))
-            ci = other_wrapper->GetClassInfo();
-
-        // We consider CID equality to be the thing that matters here.
-        // This is perhaps debatable.
-        if (ci) {
-            nsID cid;
-            if (NS_SUCCEEDED(ci->GetClassIDNoAlloc(&cid)))
-                *bp = cid.Equals(mDetails->ID());
-        }
+    if (!val.isObject()) {
+        return NS_OK;
     }
 
-    return rv;
+    RootedObject obj(cx, &val.toObject());
+
+    // is this really a native xpcom object with a wrapper?
+    obj = FindObjectForHasInstance(cx, obj);
+    if (!obj || !IS_WN_REFLECTOR(obj))
+        return NS_OK;
+
+    XPCWrappedNative *other_wrapper = XPCWrappedNative::Get(obj);
+    if (!other_wrapper)
+        return NS_OK;
+
+    nsIClassInfo *ci = other_wrapper->GetClassInfo();
+    if (!ci)
+        return NS_OK;
+
+    // We consider CID equality to be the thing that matters here.
+    // This is perhaps debatable.
+    nsID cid;
+    if (NS_SUCCEEDED(ci->GetClassIDNoAlloc(&cid)))
+        *bp = cid.Equals(mDetails->ID());
+
+    return NS_OK;
 }
 
 /***************************************************************************/
 // additional utilities...
 
 JSObject *
 xpc_NewIDObject(JSContext *cx, HandleObject jsobj, const nsID& aID)
 {
+    nsCOMPtr<nsIJSID> iid = nsJSID::NewID(aID);
+    NS_ENSURE_TRUE(iid, nullptr);
+
+    nsXPConnect *xpc = nsXPConnect::XPConnect();
+    NS_ENSURE_TRUE(xpc, nullptr);
+
     RootedObject obj(cx);
+    nsresult rv = xpc->WrapNative(cx, jsobj, static_cast<nsISupports*>(iid),
+                                  NS_GET_IID(nsIJSID), obj.address());
+    NS_ENSURE_SUCCESS(rv, nullptr);
 
-    nsCOMPtr<nsIJSID> iid = nsJSID::NewID(aID);
-    if (iid) {
-        nsXPConnect *xpc = nsXPConnect::XPConnect();
-        if (xpc) {
-            nsresult rv = xpc->WrapNative(cx, jsobj,
-                                          static_cast<nsISupports*>(iid),
-                                          NS_GET_IID(nsIJSID),
-                                          obj.address());
-            if (NS_FAILED(rv))
-                return nullptr;
-        }
-    }
     return obj;
 }
 
 // note: returned pointer is only valid while |obj| remains alive!
 const nsID*
 xpc_JSObjectToID(JSContext *cx, JSObject *obj)
 {
     if (!cx || !obj)
