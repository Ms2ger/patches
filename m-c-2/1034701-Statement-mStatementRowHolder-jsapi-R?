From: Ms2ger <ms2ger@gmail.com>
Bug 1034701 - Part b: stop using nsIXPConnectJSObjectHolder for Statement::mStatementRowHolder; r=bholley

diff --git a/storage/src/mozStorageStatement.cpp b/storage/src/mozStorageStatement.cpp
--- a/storage/src/mozStorageStatement.cpp
+++ b/storage/src/mozStorageStatement.cpp
@@ -434,22 +434,17 @@ Statement::internalFinalize(bool aDestru
   // We are considered dead at this point, so any wrappers for row or params
   // need to lose their reference to us.
   if (mStatementParamsHolder) {
     mStatementParamsHolder->mStatement = nullptr;
     mStatementParamsHolder = nullptr;
   }
 
   if (mStatementRowHolder) {
-    nsCOMPtr<nsIXPConnectWrappedNative> wrapper =
-        do_QueryInterface(mStatementRowHolder);
-    nsCOMPtr<mozIStorageStatementRow> iRow =
-        do_QueryWrappedNative(wrapper);
-    StatementRow *row = static_cast<StatementRow *>(iRow.get());
-    row->mStatement = nullptr;
+    mStatementRowHolder->mStatement = nullptr;
     mStatementRowHolder = nullptr;
   }
 
   return convertResultCode(srv);
 }
 
 NS_IMETHODIMP
 Statement::GetParameterCount(uint32_t *_parameterCount)
diff --git a/storage/src/mozStorageStatement.h b/storage/src/mozStorageStatement.h
--- a/storage/src/mozStorageStatement.h
+++ b/storage/src/mozStorageStatement.h
@@ -14,24 +14,24 @@
 
 #include "mozStorageBindingParamsArray.h"
 #include "mozStorageStatementData.h"
 #include "mozIStorageStatement.h"
 #include "mozIStorageValueArray.h"
 #include "StorageBaseStatementInternal.h"
 #include "mozilla/Attributes.h"
 
-class nsIXPConnectJSObjectHolder;
 struct sqlite3_stmt;
 
 namespace mozilla {
 namespace storage {
 class Connection;
 class StatementJSHelper;
 class StatementParams;
+class StatementRow;
 
 class Statement MOZ_FINAL : public mozIStorageStatement
                           , public mozIStorageValueArray
                           , public StorageBaseStatementInternal
 {
 public:
   NS_DECL_THREADSAFE_ISUPPORTS
   NS_DECL_MOZISTORAGESTATEMENT
@@ -93,17 +93,17 @@ private:
      */
     nsRefPtr<BindingParamsArray> mParamsArray;
 
     /**
      * The following two members are only used with the JS helper.  They cache
      * the row and params objects.
      */
     nsRefPtr<StatementParams> mStatementParamsHolder;
-    nsCOMPtr<nsIXPConnectJSObjectHolder> mStatementRowHolder;
+    nsRefPtr<StatementRow> mStatementRowHolder;
 
   /**
    * Internal version of finalize that allows us to tell it if it is being
    * called from the destructor so it can know not to dispatch events that
    * require a reference to us.
    *
    * @param aDestructing
    *        Is the destructor calling?
diff --git a/storage/src/mozStorageStatementJSHelper.cpp b/storage/src/mozStorageStatementJSHelper.cpp
--- a/storage/src/mozStorageStatementJSHelper.cpp
+++ b/storage/src/mozStorageStatementJSHelper.cpp
@@ -80,46 +80,34 @@ stepFunc(JSContext *aCtx,
 //// StatementJSHelper
 
 nsresult
 StatementJSHelper::getRow(Statement *aStatement,
                           JSContext *aCtx,
                           JSObject *aScopeObj,
                           jsval *_row)
 {
-  nsresult rv;
-
 #ifdef DEBUG
   int32_t state;
   (void)aStatement->GetState(&state);
   NS_ASSERTION(state == mozIStorageStatement::MOZ_STORAGE_STATEMENT_EXECUTING,
                "Invalid state to get the row object - all calls will fail!");
 #endif
 
   if (!aStatement->mStatementRowHolder) {
-    JS::RootedObject scope(aCtx, aScopeObj);
-    nsCOMPtr<mozIStorageStatementRow> row(new StatementRow(aStatement));
-    NS_ENSURE_TRUE(row, NS_ERROR_OUT_OF_MEMORY);
-
-    nsCOMPtr<nsIXPConnect> xpc(Service::getXPConnect());
-    rv = xpc->WrapNative(
-      aCtx,
-      ::JS_GetGlobalForObject(aCtx, scope),
-      row,
-      NS_GET_IID(mozIStorageStatementRow),
-      getter_AddRefs(aStatement->mStatementRowHolder)
-    );
-    NS_ENSURE_SUCCESS(rv, rv);
+    aStatement->mStatementRowHolder = new StatementRow(aStatement);
   }
 
-  JS::Rooted<JSObject*> obj(aCtx);
-  obj = aStatement->mStatementRowHolder->GetJSObject();
-  NS_ENSURE_STATE(obj);
+  mozIStorageStatementRow* row = aStatement->mStatementRowHolder;
+  JS::Rooted<JS::Value> result(aCtx);
+  nsresult rv = nsContentUtils::WrapNative(
+    aCtx, row, &NS_GET_IID(mozIStorageStatementRow), &result);
+  NS_ENSURE_SUCCESS(rv, rv);
 
-  *_row = OBJECT_TO_JSVAL(obj);
+  *_row = result;
   return NS_OK;
 }
 
 nsresult
 StatementJSHelper::getParams(Statement *aStatement,
                              JSContext *aCtx,
                              JSObject *aScopeObj,
                              jsval *_params)
