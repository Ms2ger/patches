From: Ms2ger <ms2ger@gmail.com>

diff --git a/caps/include/nsScriptSecurityManager.h b/caps/include/nsScriptSecurityManager.h
--- a/caps/include/nsScriptSecurityManager.h
+++ b/caps/include/nsScriptSecurityManager.h
@@ -116,35 +116,31 @@ private:
 
     static bool
     JSPrincipalsSubsume(JSPrincipals *first, JSPrincipals *second);
 
     // Returns null if a principal cannot be found; generally callers
     // should error out at that point.
     static nsIPrincipal* doGetObjectPrincipal(JSObject* obj);
 
-    // Returns null if a principal cannot be found.  Note that rv can be NS_OK
-    // when this happens -- this means that there was no JS running.
-    nsIPrincipal*
-    doGetSubjectPrincipal(nsresult* rv);
+    // Returns null if there was no JS running.
+    nsIPrincipal* doGetSubjectPrincipal();
 
     nsresult
     GetCodebasePrincipalInternal(nsIURI* aURI, uint32_t aAppId,
                                  bool aInMozBrowser,
                                  nsIPrincipal** result);
 
     nsresult
     CreateCodebasePrincipal(nsIURI* aURI, uint32_t aAppId, bool aInMozBrowser,
                             nsIPrincipal** result);
 
-    // Returns null if a principal cannot be found.  Note that rv can be NS_OK
-    // when this happens -- this means that there was no script for the
-    // context.  Callers MUST pass in a non-null rv here.
-    nsIPrincipal*
-    GetSubjectPrincipal(JSContext* cx, nsresult* rv);
+    // Never returns null.
+    // REVIEW ISSUE: Is this true?
+    nsIPrincipal* GetSubjectPrincipal(JSContext* cx);
 
     nsresult
     Init();
 
     nsresult
     InitPrefs();
 
     inline void
diff --git a/caps/src/nsScriptSecurityManager.cpp b/caps/src/nsScriptSecurityManager.cpp
--- a/caps/src/nsScriptSecurityManager.cpp
+++ b/caps/src/nsScriptSecurityManager.cpp
@@ -319,22 +319,17 @@ nsScriptSecurityManager::IsSystemPrincip
 }
 
 NS_IMETHODIMP_(nsIPrincipal *)
 nsScriptSecurityManager::GetCxSubjectPrincipal(JSContext *cx)
 {
     NS_ASSERTION(cx == GetCurrentJSContext(),
                  "Uh, cx is not the current JS context!");
 
-    nsresult rv = NS_ERROR_FAILURE;
-    nsIPrincipal *principal = GetSubjectPrincipal(cx, &rv);
-    if (NS_FAILED(rv))
-        return nullptr;
-
-    return principal;
+    return GetSubjectPrincipal(cx);
 }
 
 /////////////////////////////
 // nsScriptSecurityManager //
 /////////////////////////////
 
 ////////////////////////////////////
 // Methods implementing ISupports //
@@ -357,28 +352,22 @@ nsScriptSecurityManager::ContentSecurity
     // Get the security manager
     nsScriptSecurityManager *ssm =
         nsScriptSecurityManager::GetScriptSecurityManager();
 
     NS_ASSERTION(ssm, "Failed to get security manager service");
     if (!ssm)
         return false;
 
-    nsresult rv;
-    nsIPrincipal* subjectPrincipal = ssm->GetSubjectPrincipal(cx, &rv);
-
-    NS_ASSERTION(NS_SUCCEEDED(rv), "CSP: Failed to get nsIPrincipal from js context");
-    if (NS_FAILED(rv))
-        return false; // Not just absence of principal, but failure.
-
+    nsIPrincipal* subjectPrincipal = ssm->GetSubjectPrincipal(cx);
     if (!subjectPrincipal)
         return true;
 
     nsCOMPtr<nsIContentSecurityPolicy> csp;
-    rv = subjectPrincipal->GetCsp(getter_AddRefs(csp));
+    nsresult rv = subjectPrincipal->GetCsp(getter_AddRefs(csp));
     NS_ASSERTION(NS_SUCCEEDED(rv), "CSP: Failed to get CSP from principal.");
 
     // don't do anything unless there's a CSP
     if (!csp)
         return true;
 
     bool evalOK = true;
     bool reportViolation = false;
@@ -419,31 +408,26 @@ nsScriptSecurityManager::JSPrincipalsSub
 {
     return nsJSPrincipals::get(first)->Subsumes(nsJSPrincipals::get(second));
 }
 
 NS_IMETHODIMP
 nsScriptSecurityManager::CheckSameOrigin(JSContext* cx,
                                          nsIURI* aTargetURI)
 {
-    nsresult rv;
-
     // Get a context if necessary
     if (!cx)
     {
         cx = GetCurrentJSContext();
         if (!cx)
             return NS_OK; // No JS context, so allow access
     }
 
     // Get a principal from the context
-    nsIPrincipal* sourcePrincipal = GetSubjectPrincipal(cx, &rv);
-    if (NS_FAILED(rv))
-        return rv;
-
+    nsIPrincipal* sourcePrincipal = GetSubjectPrincipal(cx);
     if (!sourcePrincipal)
     {
         NS_WARNING("CheckSameOrigin called on script w/o principals; should this happen?");
         return NS_OK;
     }
 
     if (sourcePrincipal == mSystemPrincipal)
     {
@@ -515,27 +499,24 @@ nsScriptSecurityManager::AppAttributesEq
     return ((firstAppId == secondAppId) &&
             (aFirst->GetIsInBrowserElement() == aSecond->GetIsInBrowserElement()));
 }
 
 NS_IMETHODIMP
 nsScriptSecurityManager::CheckLoadURIFromScript(JSContext *cx, nsIURI *aURI)
 {
     // Get principal of currently executing script.
-    nsresult rv;
-    nsIPrincipal* principal = GetSubjectPrincipal(cx, &rv);
-    if (NS_FAILED(rv))
-        return rv;
+    nsIPrincipal* principal = GetSubjectPrincipal(cx);
 
     // Native code can load all URIs.
     if (!principal)
         return NS_OK;
 
-    rv = CheckLoadURIWithPrincipal(principal, aURI,
-                                   nsIScriptSecurityManager::STANDARD);
+    nsresult rv = CheckLoadURIWithPrincipal(principal, aURI,
+                                            nsIScriptSecurityManager::STANDARD);
     if (NS_SUCCEEDED(rv)) {
         // OK to load
         return NS_OK;
     }
 
     // See if we're attempting to load a file: URI. If so, let a
     // UniversalXPConnect capability trump the above check.
     bool isFile = false;
@@ -937,34 +918,30 @@ nsScriptSecurityManager::ScriptAllowed(J
     // Check the bits on the compartment private.
     return xpc::Scriptability::Get(aGlobal).Allowed();
 }
 
 ///////////////// Principals ///////////////////////
 NS_IMETHODIMP
 nsScriptSecurityManager::GetSubjectPrincipal(nsIPrincipal **aSubjectPrincipal)
 {
-    nsresult rv;
-    *aSubjectPrincipal = doGetSubjectPrincipal(&rv);
-    if (NS_SUCCEEDED(rv))
-        NS_IF_ADDREF(*aSubjectPrincipal);
-    return rv;
+    *aSubjectPrincipal = doGetSubjectPrincipal();
+    NS_IF_ADDREF(*aSubjectPrincipal);
+    return NS_OK;
 }
 
 nsIPrincipal*
-nsScriptSecurityManager::doGetSubjectPrincipal(nsresult* rv)
+nsScriptSecurityManager::doGetSubjectPrincipal()
 {
-    NS_PRECONDITION(rv, "Null out param");
     JSContext *cx = GetCurrentJSContext();
     if (!cx)
     {
-        *rv = NS_OK;
         return nullptr;
     }
-    return GetSubjectPrincipal(cx, rv);
+    return GetSubjectPrincipal(cx);
 }
 
 NS_IMETHODIMP
 nsScriptSecurityManager::GetSystemPrincipal(nsIPrincipal **result)
 {
     NS_ADDREF(*result = mSystemPrincipal);
 
     return NS_OK;
@@ -974,20 +951,17 @@ NS_IMETHODIMP
 nsScriptSecurityManager::SubjectPrincipalIsSystem(bool* aIsSystem)
 {
     NS_ENSURE_ARG_POINTER(aIsSystem);
     *aIsSystem = false;
 
     if (!mSystemPrincipal)
         return NS_OK;
 
-    nsCOMPtr<nsIPrincipal> subject;
-    nsresult rv = GetSubjectPrincipal(getter_AddRefs(subject));
-    if (NS_FAILED(rv))
-        return rv;
+    nsCOMPtr<nsIPrincipal> subject = doGetSubjectPrincipal();
 
     if(!subject)
     {
         // No subject principal means no JS is running;
         // this is the equivalent of system principal code
         *aIsSystem = true;
         return NS_OK;
     }
@@ -1099,20 +1073,18 @@ nsScriptSecurityManager::GetCodebasePrin
                                  getter_AddRefs(principal));
     NS_ENSURE_SUCCESS(rv, rv);
     NS_IF_ADDREF(*result = principal);
 
     return NS_OK;
 }
 
 nsIPrincipal*
-nsScriptSecurityManager::GetSubjectPrincipal(JSContext *cx,
-                                             nsresult* rv)
+nsScriptSecurityManager::GetSubjectPrincipal(JSContext *cx)
 {
-    *rv = NS_OK;
     JSCompartment *compartment = js::GetContextCompartment(cx);
 
     // The context should always be in a compartment, either one it has entered
     // or the one associated with its global.
     MOZ_ASSERT(!!compartment);
 
     JSPrincipals *principals = JS_GetCompartmentPrincipals(compartment);
     return nsJSPrincipals::get(principals);
@@ -1165,42 +1137,38 @@ nsScriptSecurityManager::CanCreateWrappe
     if (SubjectIsPrivileged())
     {
         return NS_OK;
     }
 
     //-- Access denied, report an error
     NS_ConvertUTF8toUTF16 strName("CreateWrapperDenied");
     nsAutoCString origin;
-    nsresult rv2;
-    nsIPrincipal* subjectPrincipal = doGetSubjectPrincipal(&rv2);
-    if (NS_SUCCEEDED(rv2) && subjectPrincipal) {
+    nsIPrincipal* subjectPrincipal = doGetSubjectPrincipal();
+    if (subjectPrincipal) {
         GetPrincipalDomainOrigin(subjectPrincipal, origin);
     }
     NS_ConvertUTF8toUTF16 originUnicode(origin);
     NS_ConvertUTF8toUTF16 classInfoName(objClassInfo.GetName());
     const char16_t* formatStrings[] = {
         classInfoName.get(),
         originUnicode.get()
     };
     uint32_t length = ArrayLength(formatStrings);
     if (originUnicode.IsEmpty()) {
         --length;
     } else {
         strName.AppendLiteral("ForOrigin");
     }
     nsXPIDLString errorMsg;
-    // We need to keep our existing failure rv and not override it
-    // with a likely success code from the following string bundle
-    // call in order to throw the correct security exception later.
-    rv2 = sStrBundle->FormatStringFromName(strName.get(),
-                                           formatStrings,
-                                           length,
-                                           getter_Copies(errorMsg));
-    NS_ENSURE_SUCCESS(rv2, rv2);
+    nsresult rv = sStrBundle->FormatStringFromName(strName.get(),
+                                                   formatStrings,
+                                                   length,
+                                                   getter_Copies(errorMsg));
+    NS_ENSURE_SUCCESS(rv, rv);
 
     SetPendingException(cx, errorMsg.get());
     return NS_ERROR_DOM_XPCONNECT_ACCESS_DENIED;
 }
 
 NS_IMETHODIMP
 nsScriptSecurityManager::CanCreateInstance(JSContext *cx,
                                            const nsCID &aCID)
