From: Ms2ger <ms2ger@gmail.com>

diff --git a/dom/base/MozNetscapeObject.cpp b/dom/base/MozNetscapeObject.cpp
new file mode 100644
--- /dev/null
+++ b/dom/base/MozNetscapeObject.cpp
@@ -0,0 +1,20 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+namespace mozilla {
+namespace dom {
+
+void
+MozSecurityObject::EnablePrivilege(JSContext* aCx, ErrorResult& aRv)
+{
+  Telemetry::Accumulate(Telemetry::ENABLE_PRIVILEGE_EVER_CALLED, true);
+  if (!xpc::EnableUniversalXPConnect(aCx)) {
+    aRv.Throw(NS_ERROR_UNEXPECTED);
+  }
+}
+
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/base/MozNetscapeObject.h b/dom/base/MozNetscapeObject.h
new file mode 100644
--- /dev/null
+++ b/dom/base/MozNetscapeObject.h
@@ -0,0 +1,16 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set ts=8 sts=2 et sw=2 tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+namespace mozilla {
+namespace dom {
+
+class MozSecurityObject
+{
+  void EnablePrivilege(JSContext* aCx, ErrorResult& aRv);
+}
+
+} // namespace dom
+} // namespace mozilla
diff --git a/dom/base/nsJSEnvironment.cpp b/dom/base/nsJSEnvironment.cpp
--- a/dom/base/nsJSEnvironment.cpp
+++ b/dom/base/nsJSEnvironment.cpp
@@ -971,99 +971,16 @@ nsJSContext::InitContext()
 
   ::JS_SetErrorReporter(mContext, NS_ScriptErrorReporter);
 
   JSOptionChangedCallback(js_options_dot_str, this);
 
   return NS_OK;
 }
 
-static bool
-netscape_security_enablePrivilege(JSContext* cx, unsigned argc, JS::Value* vp)
-{
-  Telemetry::Accumulate(Telemetry::ENABLE_PRIVILEGE_EVER_CALLED, true);
-  return xpc::EnableUniversalXPConnect(cx);
-}
-
-static const JSFunctionSpec PrivilegeManager_static_methods[] = {
-  JS_FS("enablePrivilege", netscape_security_enablePrivilege, 1, 0),
-  JS_FS_END
-};
-
-nsresult
-nsJSContext::InitializeEnablePrivilege()
-{
-  AutoJSContext cx;
-  JS::Rooted<JSObject*> global(cx, GetWindowProxy());
-  JSAutoCompartment ac(cx, global);
-
-  /*
-   * Find Object.prototype's class by walking up the global object's
-   * prototype chain.
-   */
-  JS::Rooted<JSObject*> obj(cx, global);
-  JS::Rooted<JSObject*> proto(cx);
-  for (;;) {
-    MOZ_ALWAYS_TRUE(JS_GetPrototype(cx, obj, &proto));
-    if (!proto) {
-      break;
-    }
-    obj = proto;
-  }
-  const JSClass *objectClass = JS_GetClass(obj);
-
-  JS::Rooted<JS::Value> v(cx);
-  if (!JS_GetProperty(cx, global, "netscape", &v)) {
-    return NS_ERROR_FAILURE;
-  }
-
-  JS::Rooted<JSObject*> securityObj(cx);
-  if (v.isObject()) {
-    /*
-     * "netscape" property of window object exists; get the
-     * "security" property.
-     */
-    obj = &v.toObject();
-    if (!JS_GetProperty(cx, obj, "security", &v) || !v.isObject()) {
-      return NS_ERROR_FAILURE;
-    }
-    securityObj = &v.toObject();
-  } else {
-    /* define netscape.security object */
-    obj = JS_DefineObject(cx, global, "netscape", objectClass);
-    if (!obj) {
-      return NS_ERROR_FAILURE;
-    }
-    securityObj = JS_DefineObject(cx, obj, "security", objectClass);
-    if (!securityObj) {
-      return NS_ERROR_FAILURE;
-    }
-  }
-
-  // We hide enablePrivilege behind a pref because it has been altered in a
-  // way that makes it fundamentally insecure to use in production. Mozilla
-  // uses this pref during automated testing to support legacy test code that
-  // uses enablePrivilege. If you're not doing test automation, you _must_ not
-  // flip this pref, or you will be exposing all your users to security
-  // vulnerabilities.
-  if (!Preferences::GetBool("security.turn_off_all_security_so_that_viruses_can_take_over_this_computer")) {
-    return NS_OK;
-  }
-
-  /* Define PrivilegeManager object with the necessary "static" methods. */
-  obj = JS_DefineObject(cx, securityObj, "PrivilegeManager", objectClass);
-  if (!obj) {
-    return NS_ERROR_FAILURE;
-  }
-
-  return JS_DefineFunctions(cx, obj, PrivilegeManager_static_methods)
-         ? NS_OK
-         : NS_ERROR_FAILURE;
-}
-
 nsresult
 nsJSContext::SetProperty(JS::Handle<JSObject*> aTarget, const char* aPropName, nsISupports* aArgs)
 {
   nsCxPusher pusher;
   pusher.Push(mContext);
 
   JS::AutoValueVector args(mContext);
 
diff --git a/dom/bindings/Bindings.conf b/dom/bindings/Bindings.conf
--- a/dom/bindings/Bindings.conf
+++ b/dom/bindings/Bindings.conf
@@ -849,37 +849,46 @@ DOMInterfaces = {
 'MozMobileNetworkInfo': {
     'nativeType': 'mozilla::dom::MobileNetworkInfo',
 },
 
 'MozNamedAttrMap': {
     'nativeType': 'nsDOMAttributeMap',
 },
 
-'MozSpeakerManager': {
-    'nativeType': 'mozilla::dom::SpeakerManager',
-    'headerFile': 'SpeakerManager.h'
-},
-
 'MozPowerManager': {
     'nativeType': 'mozilla::dom::PowerManager',
 },
 
-'MozWakeLock': {
-    'nativeType': 'mozilla::dom::WakeLock',
+'MozPrivilegeManager': {
+    'headerFile': 'mozilla/dom/MozNetscapeObject.h',
+    'implicitJSContext': ['enablePrivilege'],
+},
+
+'MozSecurityObject': {
+    'headerFile': 'mozilla/dom/MozNetscapeObject.h',
+},
+
+'MozSpeakerManager': {
+    'nativeType': 'mozilla::dom::SpeakerManager',
+    'headerFile': 'SpeakerManager.h'
 },
 
 'MozTimeManager': {
     'nativeType': 'mozilla::dom::time::TimeManager',
 },
 
 'MozVoicemail': {
     'nativeType': 'mozilla::dom::Voicemail',
 },
 
+'MozWakeLock': {
+    'nativeType': 'mozilla::dom::WakeLock',
+},
+
 'MutationObserver': {
     'nativeType': 'nsDOMMutationObserver',
 },
 
 'MutationRecord': {
     'nativeType': 'nsDOMMutationRecord',
     'headerFile': 'nsDOMMutationObserver.h',
     'resultNotAddRefed': [ 'target', 'addedNodes', 'removedNodes',
diff --git a/dom/webidl/MozNetscapeObject.webidl b/dom/webidl/MozNetscapeObject.webidl
new file mode 100644
--- /dev/null
+++ b/dom/webidl/MozNetscapeObject.webidl
@@ -0,0 +1,21 @@
+/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+[NoInterfaceObject]
+interface MozNetscapeObject {
+  readonly attribute MozSecurityObject security;
+};
+
+[NoInterfaceObject]
+interface MozSecurityObject {
+  [Pref="security.turn_off_all_security_so_that_viruses_can_take_over_this_computer"]
+  readonly attribute MozPrivilegeManager PrivilegeManager;
+};
+
+[NoInterfaceObject]
+interface MozPrivilegeManager {
+  [Throws]
+  void enablePrivilege();
+};
diff --git a/dom/webidl/Window.webidl b/dom/webidl/Window.webidl
--- a/dom/webidl/Window.webidl
+++ b/dom/webidl/Window.webidl
@@ -358,16 +358,18 @@ partial interface Window {
                                                optional DOMString options = "",
                                                any... extraArguments);
 
   [Replaceable, Throws] readonly attribute object? content;
 
   [ChromeOnly, Throws] readonly attribute object? __content;
 
   [Throws, ChromeOnly] any getInterface(IID iid);
+
+  readonly attribute MozNetscapeObject netscape;
 };
 
 Window implements TouchEventHandlers;
 
 Window implements OnErrorEventHandlerForWindow;
 
 // ConsoleAPI
 partial interface Window {
diff --git a/dom/webidl/moz.build b/dom/webidl/moz.build
--- a/dom/webidl/moz.build
+++ b/dom/webidl/moz.build
@@ -245,16 +245,17 @@ WEBIDL_FILES = [
     'MimeType.webidl',
     'MimeTypeArray.webidl',
     'MobileMessageManager.webidl',
     'MouseEvent.webidl',
     'MouseScrollEvent.webidl',
     'MozActivity.webidl',
     'MozMmsMessage.webidl',
     'MozNamedAttrMap.webidl',
+    'MozNetscapeObject.webidl',
     'MozPowerManager.webidl',
     'MozTimeManager.webidl',
     'MozWakeLock.webidl',
     'MutationEvent.webidl',
     'MutationObserver.webidl',
     'NativeOSFileInternals.webidl',
     'NetDashboard.webidl',
     'NetworkInformation.webidl',
