From: Ms2ger <ms2ger@gmail.com>
Bug 1034701 - Part c: stop using nsIXPConnectJSObjectHolder for AsyncStatement::mStatementParamsHolder; r=bholley

diff --git a/storage/src/mozStorageAsyncStatement.cpp b/storage/src/mozStorageAsyncStatement.cpp
--- a/storage/src/mozStorageAsyncStatement.cpp
+++ b/storage/src/mozStorageAsyncStatement.cpp
@@ -244,23 +244,17 @@ AsyncStatement::~AsyncStatement()
 }
 
 void
 AsyncStatement::cleanupJSHelpers()
 {
   // We are considered dead at this point, so any wrappers for row or params
   // need to lose their reference to us.
   if (mStatementParamsHolder) {
-    nsCOMPtr<nsIXPConnectWrappedNative> wrapper =
-      do_QueryInterface(mStatementParamsHolder);
-    nsCOMPtr<mozIStorageStatementParams> iParams =
-      do_QueryWrappedNative(wrapper);
-    AsyncStatementParams *params =
-      static_cast<AsyncStatementParams *>(iParams.get());
-    params->mStatement = nullptr;
+    mStatementParamsHolder->mStatement = nullptr;
     mStatementParamsHolder = nullptr;
   }
 }
 
 ////////////////////////////////////////////////////////////////////////////////
 //// nsISupports
 
 NS_IMPL_ADDREF(AsyncStatement)
diff --git a/storage/src/mozStorageAsyncStatement.h b/storage/src/mozStorageAsyncStatement.h
--- a/storage/src/mozStorageAsyncStatement.h
+++ b/storage/src/mozStorageAsyncStatement.h
@@ -13,23 +13,23 @@
 #include "nsTArray.h"
 
 #include "mozStorageBindingParamsArray.h"
 #include "mozStorageStatementData.h"
 #include "mozIStorageAsyncStatement.h"
 #include "StorageBaseStatementInternal.h"
 #include "mozilla/Attributes.h"
 
-class nsIXPConnectJSObjectHolder;
 struct sqlite3_stmt;
 
 namespace mozilla {
 namespace storage {
 
 class AsyncStatementJSHelper;
+class AsyncStatementParams;
 class Connection;
 
 class AsyncStatement MOZ_FINAL : public mozIStorageAsyncStatement
                                , public StorageBaseStatementInternal
 {
 public:
   NS_DECL_THREADSAFE_ISUPPORTS
   NS_DECL_MOZISTORAGEASYNCSTATEMENT
@@ -90,17 +90,17 @@ private:
    * Holds the array of parameters to bind to this statement when we execute
    * it asynchronously.
    */
   nsRefPtr<BindingParamsArray> mParamsArray;
 
   /**
    * Caches the JS 'params' helper for this statement.
    */
-  nsCOMPtr<nsIXPConnectJSObjectHolder> mStatementParamsHolder;
+  nsRefPtr<AsyncStatementParams> mStatementParamsHolder;
 
   /**
    * Have we been explicitly finalized by the user?
    */
   bool mFinalized;
 
   /**
    * Required for access to private mStatementParamsHolder field by
diff --git a/storage/src/mozStorageAsyncStatementJSHelper.cpp b/storage/src/mozStorageAsyncStatementJSHelper.cpp
--- a/storage/src/mozStorageAsyncStatementJSHelper.cpp
+++ b/storage/src/mozStorageAsyncStatementJSHelper.cpp
@@ -12,60 +12,48 @@
 #include "nsString.h"
 #include "nsServiceManagerUtils.h"
 
 #include "mozStorageAsyncStatementJSHelper.h"
 
 #include "mozStorageAsyncStatementParams.h"
 
 #include "jsapi.h"
+#include "nsContentUtils.h"
 
 namespace mozilla {
 namespace storage {
 
 ////////////////////////////////////////////////////////////////////////////////
 //// AsyncStatementJSHelper
 
 nsresult
 AsyncStatementJSHelper::getParams(AsyncStatement *aStatement,
                                   JSContext *aCtx,
                                   JSObject *aScopeObj,
                                   jsval *_params)
 {
-  nsresult rv;
-
 #ifdef DEBUG
   int32_t state;
   (void)aStatement->GetState(&state);
   NS_ASSERTION(state == mozIStorageAsyncStatement::MOZ_STORAGE_STATEMENT_READY,
                "Invalid state to get the params object - all calls will fail!");
 #endif
 
   if (!aStatement->mStatementParamsHolder) {
-    nsCOMPtr<mozIStorageStatementParams> params =
-      new AsyncStatementParams(aStatement);
-    NS_ENSURE_TRUE(params, NS_ERROR_OUT_OF_MEMORY);
-
-    JS::RootedObject scope(aCtx, aScopeObj);
-    nsCOMPtr<nsIXPConnect> xpc(Service::getXPConnect());
-    rv = xpc->WrapNative(
-      aCtx,
-      ::JS_GetGlobalForObject(aCtx, scope),
-      params,
-      NS_GET_IID(mozIStorageStatementParams),
-      getter_AddRefs(aStatement->mStatementParamsHolder)
-    );
-    NS_ENSURE_SUCCESS(rv, rv);
+    aStatement->mStatementParamsHolder = new AsyncStatementParams(aStatement);
   }
 
-  JS::Rooted<JSObject*> obj(aCtx);
-  obj = aStatement->mStatementParamsHolder->GetJSObject();
-  NS_ENSURE_STATE(obj);
+  mozIStorageStatementParams* params = aStatement->mStatementParamsHolder;
+  JS::Rooted<JS::Value> result(aCtx);
+  nsresult rv = nsContentUtils::WrapNative(
+    aCtx, params, &NS_GET_IID(mozIStorageStatementParams), &result);
+  NS_ENSURE_SUCCESS(rv, rv);
 
-  *_params = OBJECT_TO_JSVAL(obj);
+  *_params = result;
   return NS_OK;
 }
 
 NS_IMETHODIMP_(MozExternalRefCountType) AsyncStatementJSHelper::AddRef() { return 2; }
 NS_IMETHODIMP_(MozExternalRefCountType) AsyncStatementJSHelper::Release() { return 1; }
 NS_INTERFACE_MAP_BEGIN(AsyncStatementJSHelper)
   NS_INTERFACE_MAP_ENTRY(nsIXPCScriptable)
   NS_INTERFACE_MAP_ENTRY(nsISupports)
